{"status":"1","message":"OK","result":[{"SourceCode":"pragma solidity ^0.5.9;\r\n\r\n// File: openzeppelin-solidity/contracts/token/ERC20/IERC20.sol\r\n\r\n/**\r\n * @dev Interface of the ERC20 standard as defined in the EIP. Does not include\r\n * the optional functions; to access them see `ERC20Detailed`.\r\n */\r\ninterface IERC20 {\r\n    /**\r\n     * @dev Returns the amount of tokens in existence.\r\n     */\r\n    function totalSupply() external view returns (uint256);\r\n\r\n    /**\r\n     * @dev Returns the amount of tokens owned by `account`.\r\n     */\r\n    function balanceOf(address account) external view returns (uint256);\r\n\r\n    /**\r\n     * @dev Moves `amount` tokens from the caller's account to `recipient`.\r\n     *\r\n     * Returns a boolean value indicating whether the operation succeeded.\r\n     *\r\n     * Emits a `Transfer` event.\r\n     */\r\n    function transfer(address recipient, uint256 amount) external returns (bool);\r\n\r\n    /**\r\n     * @dev Returns the remaining number of tokens that `spender` will be\r\n     * allowed to spend on behalf of `owner` through `transferFrom`. This is\r\n     * zero by default.\r\n     *\r\n     * This value changes when `approve` or `transferFrom` are called.\r\n     */\r\n    function allowance(address owner, address spender) external view returns (uint256);\r\n\r\n    /**\r\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\r\n     *\r\n     * Returns a boolean value indicating whether the operation succeeded.\r\n     *\r\n     * > Beware that changing an allowance with this method brings the risk\r\n     * that someone may use both the old and the new allowance by unfortunate\r\n     * transaction ordering. One possible solution to mitigate this race\r\n     * condition is to first reduce the spender's allowance to 0 and set the\r\n     * desired value afterwards:\r\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\r\n     *\r\n     * Emits an `Approval` event.\r\n     */\r\n    function approve(address spender, uint256 amount) external returns (bool);\r\n\r\n    /**\r\n     * @dev Moves `amount` tokens from `sender` to `recipient` using the\r\n     * allowance mechanism. `amount` is then deducted from the caller's\r\n     * allowance.\r\n     *\r\n     * Returns a boolean value indicating whether the operation succeeded.\r\n     *\r\n     * Emits a `Transfer` event.\r\n     */\r\n    function transferFrom(address sender, address recipient, uint256 amount) external returns (bool);\r\n\r\n    /**\r\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\r\n     * another (`to`).\r\n     *\r\n     * Note that `value` may be zero.\r\n     */\r\n    event Transfer(address indexed from, address indexed to, uint256 value);\r\n\r\n    /**\r\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\r\n     * a call to `approve`. `value` is the new allowance.\r\n     */\r\n    event Approval(address indexed owner, address indexed spender, uint256 value);\r\n}\r\n\r\n// File: openzeppelin-solidity/contracts/math/SafeMath.sol\r\n\r\n\r\n/**\r\n * @dev Wrappers over Solidity's arithmetic operations with added overflow\r\n * checks.\r\n *\r\n * Arithmetic operations in Solidity wrap on overflow. This can easily result\r\n * in bugs, because programmers usually assume that an overflow raises an\r\n * error, which is the standard behavior in high level programming languages.\r\n * `SafeMath` restores this intuition by reverting the transaction when an\r\n * operation overflows.\r\n *\r\n * Using this library instead of the unchecked operations eliminates an entire\r\n * class of bugs, so it's recommended to use it always.\r\n */\r\nlibrary SafeMath {\r\n    /**\r\n     * @dev Returns the addition of two unsigned integers, reverting on\r\n     * overflow.\r\n     *\r\n     * Counterpart to Solidity's `+` operator.\r\n     *\r\n     * Requirements:\r\n     * - Addition cannot overflow.\r\n     */\r\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        uint256 c = a + b;\r\n        require(c >= a, \"SafeMath: addition overflow\");\r\n\r\n        return c;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the subtraction of two unsigned integers, reverting on\r\n     * overflow (when the result is negative).\r\n     *\r\n     * Counterpart to Solidity's `-` operator.\r\n     *\r\n     * Requirements:\r\n     * - Subtraction cannot overflow.\r\n     */\r\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        require(b <= a, \"SafeMath: subtraction overflow\");\r\n        uint256 c = a - b;\r\n\r\n        return c;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the multiplication of two unsigned integers, reverting on\r\n     * overflow.\r\n     *\r\n     * Counterpart to Solidity's `*` operator.\r\n     *\r\n     * Requirements:\r\n     * - Multiplication cannot overflow.\r\n     */\r\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        // Gas optimization: this is cheaper than requiring 'a' not being zero, but the\r\n        // benefit is lost if 'b' is also tested.\r\n        // See: https://github.com/OpenZeppelin/openzeppelin-solidity/pull/522\r\n        if (a == 0) {\r\n            return 0;\r\n        }\r\n\r\n        uint256 c = a * b;\r\n        require(c / a == b, \"SafeMath: multiplication overflow\");\r\n\r\n        return c;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the integer division of two unsigned integers. Reverts on\r\n     * division by zero. The result is rounded towards zero.\r\n     *\r\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\r\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\r\n     * uses an invalid opcode to revert (consuming all remaining gas).\r\n     *\r\n     * Requirements:\r\n     * - The divisor cannot be zero.\r\n     */\r\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        // Solidity only automatically asserts when dividing by 0\r\n        require(b > 0, \"SafeMath: division by zero\");\r\n        uint256 c = a / b;\r\n        // assert(a == b * c + a % b); // There is no case in which this doesn't hold\r\n\r\n        return c;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\r\n     * Reverts when dividing by zero.\r\n     *\r\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\r\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\r\n     * invalid opcode to revert (consuming all remaining gas).\r\n     *\r\n     * Requirements:\r\n     * - The divisor cannot be zero.\r\n     */\r\n    function mod(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        require(b != 0, \"SafeMath: modulo by zero\");\r\n        return a % b;\r\n    }\r\n}\r\n\r\n// File: openzeppelin-solidity/contracts/utils/Address.sol\r\n\r\n/**\r\n * @dev Collection of functions related to the address type,\r\n */\r\nlibrary Address {\r\n    /**\r\n     * @dev Returns true if `account` is a contract.\r\n     *\r\n     * This test is non-exhaustive, and there may be false-negatives: during the\r\n     * execution of a contract's constructor, its address will be reported as\r\n     * not containing a contract.\r\n     *\r\n     * > It is unsafe to assume that an address for which this function returns\r\n     * false is an externally-owned account (EOA) and not a contract.\r\n     */\r\n    function isContract(address account) internal view returns (bool) {\r\n        // This method relies in extcodesize, which returns 0 for contracts in\r\n        // construction, since the code is only stored at the end of the\r\n        // constructor execution.\r\n\r\n        uint256 size;\r\n        // solhint-disable-next-line no-inline-assembly\r\n        assembly { size := extcodesize(account) }\r\n        return size > 0;\r\n    }\r\n}\r\n\r\n// File: openzeppelin-solidity/contracts/token/ERC20/SafeERC20.sol\r\n\r\n\r\n/**\r\n * @title SafeERC20\r\n * @dev Wrappers around ERC20 operations that throw on failure (when the token\r\n * contract returns false). Tokens that return no value (and instead revert or\r\n * throw on failure) are also supported, non-reverting calls are assumed to be\r\n * successful.\r\n * To use this library you can add a `using SafeERC20 for ERC20;` statement to your contract,\r\n * which allows you to call the safe operations as `token.safeTransfer(...)`, etc.\r\n */\r\nlibrary SafeERC20 {\r\n    using SafeMath for uint256;\r\n    using Address for address;\r\n\r\n    function safeTransfer(IERC20 token, address to, uint256 value) internal {\r\n        callOptionalReturn(token, abi.encodeWithSelector(token.transfer.selector, to, value));\r\n    }\r\n\r\n    function safeTransferFrom(IERC20 token, address from, address to, uint256 value) internal {\r\n        callOptionalReturn(token, abi.encodeWithSelector(token.transferFrom.selector, from, to, value));\r\n    }\r\n\r\n    function safeApprove(IERC20 token, address spender, uint256 value) internal {\r\n        // safeApprove should only be called when setting an initial allowance,\r\n        // or when resetting it to zero. To increase and decrease it, use\r\n        // 'safeIncreaseAllowance' and 'safeDecreaseAllowance'\r\n        // solhint-disable-next-line max-line-length\r\n        require((value == 0) || (token.allowance(address(this), spender) == 0),\r\n            \"SafeERC20: approve from non-zero to non-zero allowance\"\r\n        );\r\n        callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, value));\r\n    }\r\n\r\n    function safeIncreaseAllowance(IERC20 token, address spender, uint256 value) internal {\r\n        uint256 newAllowance = token.allowance(address(this), spender).add(value);\r\n        callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\r\n    }\r\n\r\n    function safeDecreaseAllowance(IERC20 token, address spender, uint256 value) internal {\r\n        uint256 newAllowance = token.allowance(address(this), spender).sub(value);\r\n        callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\r\n    }\r\n\r\n    /**\r\n     * @dev Imitates a Solidity high-level call (i.e. a regular function call to a contract), relaxing the requirement\r\n     * on the return value: the return value is optional (but if data is returned, it must not be false).\r\n     * @param token The token targeted by the call.\r\n     * @param data The call data (encoded using abi.encode or one of its variants).\r\n     */\r\n    function callOptionalReturn(IERC20 token, bytes memory data) private {\r\n        // We need to perform a low level call here, to bypass Solidity's return data size checking mechanism, since\r\n        // we're implementing it ourselves.\r\n\r\n        // A Solidity high level call has three parts:\r\n        //  1. The target address is checked to verify it contains contract code\r\n        //  2. The call itself is made, and success asserted\r\n        //  3. The return value is decoded, which in turn checks the size of the returned data.\r\n        // solhint-disable-next-line max-line-length\r\n        require(address(token).isContract(), \"SafeERC20: call to non-contract\");\r\n\r\n        // solhint-disable-next-line avoid-low-level-calls\r\n        (bool success, bytes memory returndata) = address(token).call(data);\r\n        require(success, \"SafeERC20: low-level call failed\");\r\n\r\n        if (returndata.length > 0) { // Return data is optional\r\n            // solhint-disable-next-line max-line-length\r\n            require(abi.decode(returndata, (bool)), \"SafeERC20: ERC20 operation did not succeed\");\r\n        }\r\n    }\r\n}\r\n\r\n// File: openzeppelin-solidity/contracts/ownership/Ownable.sol\r\n\r\n\r\n/**\r\n * @dev Contract module which provides a basic access control mechanism, where\r\n * there is an account (an owner) that can be granted exclusive access to\r\n * specific functions.\r\n *\r\n * This module is used through inheritance. It will make available the modifier\r\n * `onlyOwner`, which can be aplied to your functions to restrict their use to\r\n * the owner.\r\n */\r\ncontract Ownable {\r\n    address private _owner;\r\n\r\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\r\n\r\n    /**\r\n     * @dev Initializes the contract setting the deployer as the initial owner.\r\n     */\r\n    constructor () internal {\r\n        _owner = msg.sender;\r\n        emit OwnershipTransferred(address(0), _owner);\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the address of the current owner.\r\n     */\r\n    function owner() public view returns (address) {\r\n        return _owner;\r\n    }\r\n\r\n    /**\r\n     * @dev Throws if called by any account other than the owner.\r\n     */\r\n    modifier onlyOwner() {\r\n        require(isOwner(), \"Ownable: caller is not the owner\");\r\n        _;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns true if the caller is the current owner.\r\n     */\r\n    function isOwner() public view returns (bool) {\r\n        return msg.sender == _owner;\r\n    }\r\n\r\n    /**\r\n     * @dev Leaves the contract without owner. It will not be possible to call\r\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\r\n     *\r\n     * > Note: Renouncing ownership will leave the contract without an owner,\r\n     * thereby removing any functionality that is only available to the owner.\r\n     */\r\n    function renounceOwnership() public onlyOwner {\r\n        emit OwnershipTransferred(_owner, address(0));\r\n        _owner = address(0);\r\n    }\r\n\r\n    /**\r\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\r\n     * Can only be called by the current owner.\r\n     */\r\n    function transferOwnership(address newOwner) public onlyOwner {\r\n        _transferOwnership(newOwner);\r\n    }\r\n\r\n    /**\r\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\r\n     */\r\n    function _transferOwnership(address newOwner) internal {\r\n        require(newOwner != address(0), \"Ownable: new owner is the zero address\");\r\n        emit OwnershipTransferred(_owner, newOwner);\r\n        _owner = newOwner;\r\n    }\r\n}\r\n\r\n// File: contracts/openzeppelin/TokenVesting.sol\r\n\r\n\r\n/**\r\n * @title TokenVesting\r\n * @dev A token holder contract that can release its token balance gradually like a\r\n * typical vesting scheme, with a cliff and vesting period. Optionally revocable by the\r\n * owner.\r\n */\r\ncontract TokenVesting is Ownable {\r\n    // The vesting schedule is time-based (i.e. using block timestamps as opposed to e.g. block numbers), and is\r\n    // therefore sensitive to timestamp manipulation (which is something miners can do, to a certain degree). Therefore,\r\n    // it is recommended to avoid using short time durations (less than a minute). Typical vesting schemes, with a\r\n    // cliff period of a year and a duration of four years, are safe to use.\r\n    // solhint-disable not-rely-on-time\r\n\r\n    using SafeMath for uint256;\r\n    using SafeERC20 for IERC20;\r\n\r\n    event TokensReleased(address token, uint256 amount);\r\n    event TokenVestingRevoked(address token);\r\n\r\n    // beneficiary of tokens after they are released\r\n    address private _beneficiary;\r\n\r\n    // Durations and timestamps are expressed in UNIX time, the same units as block.timestamp.\r\n    uint256 private _cliff;\r\n    uint256 private _start;\r\n    uint256 private _duration;\r\n\r\n    bool private _revocable;\r\n\r\n    mapping (address => uint256) private _released;\r\n    mapping (address => bool) private _revoked;\r\n\r\n    /**\r\n     * @dev Creates a vesting contract that vests its balance of any ERC20 token to the\r\n     * beneficiary, gradually in a linear fashion until start + duration. By then all\r\n     * of the balance will have vested.\r\n     * @param beneficiary address of the beneficiary to whom vested tokens are transferred\r\n     * @param cliffDuration duration in seconds of the cliff in which tokens will begin to vest\r\n     * @param start the time (as Unix time) at which point vesting starts\r\n     * @param duration duration in seconds of the period in which the tokens will vest\r\n     * @param revocable whether the vesting is revocable or not\r\n     */\r\n    constructor (address beneficiary, uint256 start, uint256 cliffDuration, uint256 duration, bool revocable) public {\r\n        require(beneficiary != address(0), \"TokenVesting: beneficiary is the zero address\");\r\n        // solhint-disable-next-line max-line-length\r\n        require(cliffDuration <= duration, \"TokenVesting: cliff is longer than duration\");\r\n        require(duration > 0, \"TokenVesting: duration is 0\");\r\n        // solhint-disable-next-line max-line-length\r\n        require(start.add(duration) > block.timestamp, \"TokenVesting: final time is before current time\");\r\n\r\n        _beneficiary = beneficiary;\r\n        _revocable = revocable;\r\n        _duration = duration;\r\n        _cliff = start.add(cliffDuration);\r\n        _start = start;\r\n    }\r\n\r\n    /**\r\n     * @return the beneficiary of the tokens.\r\n     */\r\n    function beneficiary() public view returns (address) {\r\n        return _beneficiary;\r\n    }\r\n\r\n    /**\r\n     * @return the cliff time of the token vesting.\r\n     */\r\n    function cliff() public view returns (uint256) {\r\n        return _cliff;\r\n    }\r\n\r\n    /**\r\n     * @return the start time of the token vesting.\r\n     */\r\n    function start() public view returns (uint256) {\r\n        return _start;\r\n    }\r\n\r\n    /**\r\n     * @return the duration of the token vesting.\r\n     */\r\n    function duration() public view returns (uint256) {\r\n        return _duration;\r\n    }\r\n\r\n    /**\r\n     * @return true if the vesting is revocable.\r\n     */\r\n    function revocable() public view returns (bool) {\r\n        return _revocable;\r\n    }\r\n\r\n    /**\r\n     * @return the amount of the token released.\r\n     */\r\n    function released(address token) public view returns (uint256) {\r\n        return _released[token];\r\n    }\r\n\r\n    /**\r\n     * @return true if the token is revoked.\r\n     */\r\n    function revoked(address token) public view returns (bool) {\r\n        return _revoked[token];\r\n    }\r\n\r\n    /**\r\n     * @notice Transfers vested tokens to beneficiary.\r\n     * @param token ERC20 token which is being vested\r\n     */\r\n    function release(IERC20 token) public {\r\n        uint256 unreleased = _releasableAmount(token);\r\n\r\n        require(unreleased > 0, \"TokenVesting: no tokens are due\");\r\n\r\n        _released[address(token)] = _released[address(token)].add(unreleased);\r\n\r\n        token.safeTransfer(_beneficiary, unreleased);\r\n\r\n        emit TokensReleased(address(token), unreleased);\r\n    }\r\n\r\n    /**\r\n     * @notice Allows the owner to revoke the vesting. Tokens already vested\r\n     * remain in the contract, the rest are returned to the owner.\r\n     * @param token ERC20 token which is being vested\r\n     */\r\n    function revoke(IERC20 token) public onlyOwner {\r\n        require(_revocable, \"TokenVesting: cannot revoke\");\r\n        require(!_revoked[address(token)], \"TokenVesting: token already revoked\");\r\n\r\n        uint256 balance = token.balanceOf(address(this));\r\n\r\n        uint256 unreleased = _releasableAmount(token);\r\n        uint256 refund = balance.sub(unreleased);\r\n\r\n        _revoked[address(token)] = true;\r\n\r\n        token.safeTransfer(owner(), refund);\r\n\r\n        emit TokenVestingRevoked(address(token));\r\n    }\r\n\r\n    /**\r\n     * @dev Calculates the amount that has already vested but hasn't been released yet.\r\n     * @param token ERC20 token which is being vested\r\n     */\r\n    function _releasableAmount(IERC20 token) private view returns (uint256) {\r\n        return _vestedAmount(token).sub(_released[address(token)]);\r\n    }\r\n\r\n    /**\r\n     * @dev Calculates the amount that has already vested.\r\n     * @param token ERC20 token which is being vested\r\n     */\r\n    function _vestedAmount(IERC20 token) private view returns (uint256) {\r\n        uint256 currentBalance = token.balanceOf(address(this));\r\n        uint256 totalBalance = currentBalance.add(_released[address(token)]);\r\n\r\n        if (block.timestamp < _cliff) {\r\n            return 0;\r\n        } else if (block.timestamp >= _start.add(_duration) || _revoked[address(token)]) {\r\n            return totalBalance;\r\n        } else {\r\n            return totalBalance.mul(block.timestamp.sub(_start)).div(_duration);\r\n        }\r\n    }\r\n\r\n     /**\r\n     * @return change the beneficiary of tokens\r\n     */\r\n\r\n    function _changeBeneficiary(address _newBeneficiary) internal {\r\n        _beneficiary = _newBeneficiary;\r\n    }\r\n}\r\n\r\n// File: contracts/helpers/BeneficiaryOperations.sol\r\n\r\n/*\r\n  License: MIT\r\n  Copyright Bitclave, 2018\r\n  It's modified contract BeneficiaryOperations from https://github.com/bitclave/BeneficiaryOperations\r\n*/\r\n\r\n\r\ncontract BeneficiaryOperations {\r\n\r\n    using SafeMath for uint256;\r\n\r\n    using SafeMath for uint8;\r\n    // VARIABLES\r\n\r\n    uint256 public beneficiariesGeneration;\r\n    uint256 public howManyBeneficiariesDecide;\r\n    address[] public beneficiaries;\r\n    bytes32[] public allOperations;\r\n    address internal insideCallSender;\r\n    uint256 internal insideCallCount;\r\n    \r\n\r\n    // Reverse lookup tables for beneficiaries and allOperations\r\n    mapping(address => uint8) public beneficiariesIndices; // Starts from 1, size 255\r\n    mapping(bytes32 => uint) public allOperationsIndicies;\r\n    \r\n\r\n    // beneficiaries voting mask per operations\r\n    mapping(bytes32 => uint256) public votesMaskByOperation;\r\n    mapping(bytes32 => uint256) public votesCountByOperation;\r\n\r\n    //operation -> beneficiaryIndex\r\n    mapping(bytes32 => uint8) internal  operationsByBeneficiaryIndex;\r\n    mapping(uint8 => uint8) internal operationsCountByBeneficiaryIndex;\r\n    // EVENTS\r\n\r\n    event BeneficiaryshipTransferred(address[] previousbeneficiaries, uint howManyBeneficiariesDecide, address[] newBeneficiaries, uint newHowManybeneficiarysDecide);\r\n    event OperationCreated(bytes32 operation, uint howMany, uint beneficiariesCount, address proposer);\r\n    event OperationUpvoted(bytes32 operation, uint votes, uint howMany, uint beneficiariesCount, address upvoter);\r\n    event OperationPerformed(bytes32 operation, uint howMany, uint beneficiariesCount, address performer);\r\n    event OperationDownvoted(bytes32 operation, uint votes, uint beneficiariesCount,  address downvoter);\r\n    event OperationCancelled(bytes32 operation, address lastCanceller);\r\n    \r\n    // ACCESSORS\r\n\r\n    function isExistBeneficiary(address wallet) public view returns(bool) {\r\n        return beneficiariesIndices[wallet] > 0;\r\n    }\r\n\r\n\r\n    function beneficiariesCount() public view returns(uint) {\r\n        return beneficiaries.length;\r\n    }\r\n\r\n    function allOperationsCount() public view returns(uint) {\r\n        return allOperations.length;\r\n    }\r\n\r\n    /*\r\n      Internal functions\r\n    */\r\n\r\n    function _operationLimitByBeneficiaryIndex(uint8 beneficiaryIndex) internal view returns(bool) {\r\n        return (operationsCountByBeneficiaryIndex[beneficiaryIndex] <= 3);\r\n    }\r\n    \r\n    function _cancelAllPending() internal {\r\n        for (uint i = 0; i < allOperations.length; i++) {\r\n            delete(allOperationsIndicies[allOperations[i]]);\r\n            delete(votesMaskByOperation[allOperations[i]]);\r\n            delete(votesCountByOperation[allOperations[i]]);\r\n            //delete operation->beneficiaryIndex\r\n            delete(operationsByBeneficiaryIndex[allOperations[i]]);\r\n        }\r\n\r\n        allOperations.length = 0;\r\n        //delete operations count for beneficiary\r\n        for (uint8 j = 0; j < beneficiaries.length; j++) {\r\n            operationsCountByBeneficiaryIndex[j] = 0;\r\n        }\r\n    }\r\n\r\n\r\n    // MODIFIERS\r\n\r\n    /**\r\n    * @dev Allows to perform method by any of the beneficiaries\r\n    */\r\n    modifier onlyAnyBeneficiary {\r\n        if (checkHowManyBeneficiaries(1)) {\r\n            bool update = (insideCallSender == address(0));\r\n            if (update) {\r\n                insideCallSender = msg.sender;\r\n                insideCallCount = 1;\r\n            }\r\n            _;\r\n            if (update) {\r\n                insideCallSender = address(0);\r\n                insideCallCount = 0;\r\n            }\r\n        }\r\n    }\r\n\r\n    /**\r\n    * @dev Allows to perform method only after many beneficiaries call it with the same arguments\r\n    */\r\n    modifier onlyManyBeneficiaries {\r\n        if (checkHowManyBeneficiaries(howManyBeneficiariesDecide)) {\r\n            bool update = (insideCallSender == address(0));\r\n            if (update) {\r\n                insideCallSender = msg.sender;\r\n                insideCallCount = howManyBeneficiariesDecide;\r\n            }\r\n            _;\r\n            if (update) {\r\n                insideCallSender = address(0);\r\n                insideCallCount = 0;\r\n            }\r\n        }\r\n    }\r\n\r\n    /**\r\n    * @dev Allows to perform method only after all beneficiaries call it with the same arguments\r\n    */\r\n    modifier onlyAllBeneficiaries {\r\n        if (checkHowManyBeneficiaries(beneficiaries.length)) {\r\n            bool update = (insideCallSender == address(0));\r\n            if (update) {\r\n                insideCallSender = msg.sender;\r\n                insideCallCount = beneficiaries.length;\r\n            }\r\n            _;\r\n            if (update) {\r\n                insideCallSender = address(0);\r\n                insideCallCount = 0;\r\n            }\r\n        }\r\n    }\r\n\r\n    /**\r\n    * @dev Allows to perform method only after some beneficiaries call it with the same arguments\r\n    */\r\n    modifier onlySomeBeneficiaries(uint howMany) {\r\n        require(howMany > 0, \"onlySomeBeneficiaries: howMany argument is zero\");\r\n        require(howMany <= beneficiaries.length, \"onlySomeBeneficiaries: howMany argument exceeds the number of Beneficiaries\");\r\n        \r\n        if (checkHowManyBeneficiaries(howMany)) {\r\n            bool update = (insideCallSender == address(0));\r\n            if (update) {\r\n                insideCallSender = msg.sender;\r\n                insideCallCount = howMany;\r\n            }\r\n            _;\r\n            if (update) {\r\n                insideCallSender = address(0);\r\n                insideCallCount = 0;\r\n            }\r\n        }\r\n    }\r\n\r\n    // CONSTRUCTOR\r\n\r\n    constructor() public {\r\n        beneficiaries.push(msg.sender);\r\n        beneficiariesIndices[msg.sender] = 1;\r\n        howManyBeneficiariesDecide = 1;\r\n    }\r\n\r\n    // INTERNAL METHODS\r\n\r\n    /**\r\n     * @dev onlyManybeneficiaries modifier helper\r\n     */\r\n    function checkHowManyBeneficiaries(uint howMany) internal returns(bool) {\r\n        if (insideCallSender == msg.sender) {\r\n            require(howMany <= insideCallCount, \"checkHowManyBeneficiaries: nested beneficiaries modifier check require more beneficiarys\");\r\n            return true;\r\n        }\r\n        \r\n        \r\n        require((isExistBeneficiary(msg.sender) && (beneficiariesIndices[msg.sender] <= beneficiaries.length)), \"checkHowManyBeneficiaries: msg.sender is not an beneficiary\");\r\n\r\n        uint beneficiaryIndex = beneficiariesIndices[msg.sender].sub(1);\r\n        \r\n        bytes32 operation = keccak256(abi.encodePacked(msg.data, beneficiariesGeneration));\r\n\r\n        require((votesMaskByOperation[operation] & (2 ** beneficiaryIndex)) == 0, \"checkHowManyBeneficiaries: beneficiary already voted for the operation\");\r\n        //check limit for operation\r\n        require(_operationLimitByBeneficiaryIndex(uint8(beneficiaryIndex)), \"checkHowManyBeneficiaries: operation limit is reached for this beneficiary\");\r\n\r\n        votesMaskByOperation[operation] |= (2 ** beneficiaryIndex);\r\n        uint operationVotesCount = votesCountByOperation[operation].add(1);\r\n        votesCountByOperation[operation] = operationVotesCount;\r\n\r\n        if (operationVotesCount == 1) {\r\n            allOperationsIndicies[operation] = allOperations.length;\r\n            \r\n            operationsByBeneficiaryIndex[operation] = uint8(beneficiaryIndex);\r\n            \r\n            operationsCountByBeneficiaryIndex[uint8(beneficiaryIndex)] = uint8(operationsCountByBeneficiaryIndex[uint8(beneficiaryIndex)].add(1));\r\n            \r\n            allOperations.push(operation);\r\n            \r\n            \r\n            emit OperationCreated(operation, howMany, beneficiaries.length, msg.sender);\r\n        }\r\n        emit OperationUpvoted(operation, operationVotesCount, howMany, beneficiaries.length, msg.sender);\r\n\r\n        // If enough beneficiaries confirmed the same operation\r\n        if (votesCountByOperation[operation] == howMany) {\r\n            deleteOperation(operation);\r\n            emit OperationPerformed(operation, howMany, beneficiaries.length, msg.sender);\r\n            return true;\r\n        }\r\n\r\n        return false;\r\n    }\r\n\r\n    /**\r\n    * @dev Used to delete cancelled or performed operation\r\n    * @param operation defines which operation to delete\r\n    */\r\n    function deleteOperation(bytes32 operation) internal {\r\n        uint index = allOperationsIndicies[operation];\r\n        if (index < allOperations.length - 1) { // Not last\r\n            allOperations[index] = allOperations[allOperations.length.sub(1)];\r\n            allOperationsIndicies[allOperations[index]] = index;\r\n        }\r\n        allOperations.length = allOperations.length.sub(1);\r\n\r\n        uint8 beneficiaryIndex = uint8(operationsByBeneficiaryIndex[operation]);\r\n        operationsCountByBeneficiaryIndex[beneficiaryIndex] = uint8(operationsCountByBeneficiaryIndex[beneficiaryIndex].sub(1));\r\n\r\n        delete votesMaskByOperation[operation];\r\n        delete votesCountByOperation[operation];\r\n        delete allOperationsIndicies[operation];\r\n        delete operationsByBeneficiaryIndex[operation];\r\n    }\r\n\r\n    // PUBLIC METHODS\r\n\r\n    /**\r\n    * @dev Allows beneficiaries to change their mind by cancelling votesMaskByOperation operations\r\n    * @param operation defines which operation to delete\r\n    */\r\n    function cancelPending(bytes32 operation) public onlyAnyBeneficiary {\r\n\r\n        require((isExistBeneficiary(msg.sender) && (beneficiariesIndices[msg.sender] <= beneficiaries.length)), \"checkHowManyBeneficiaries: msg.sender is not an beneficiary\");\r\n\r\n        uint beneficiaryIndex = beneficiariesIndices[msg.sender].sub(1);\r\n        require((votesMaskByOperation[operation] & (2 ** beneficiaryIndex)) != 0, \"cancelPending: operation not found for this user\");\r\n        votesMaskByOperation[operation] &= ~(2 ** beneficiaryIndex);\r\n        uint operationVotesCount = votesCountByOperation[operation].sub(1);\r\n        votesCountByOperation[operation] = operationVotesCount;\r\n        emit OperationDownvoted(operation, operationVotesCount, beneficiaries.length, msg.sender);\r\n        if (operationVotesCount == 0) {\r\n            deleteOperation(operation);\r\n            emit OperationCancelled(operation, msg.sender);\r\n        }\r\n    }\r\n\r\n    /**\r\n    * @dev Allows beneficiaries to change their mind by cancelling all operations\r\n    */\r\n\r\n    function cancelAllPending() public onlyManyBeneficiaries {\r\n       _cancelAllPending();\r\n    }\r\n\r\n\r\n\r\n    /**Переписать*/\r\n\r\n    /**\r\n    * @dev Allows beneficiaries to change beneficiariesship\r\n    * @param newBeneficiaries defines array of addresses of new beneficiaries\r\n    */\r\n    function transferBeneficiaryShip(address[] memory newBeneficiaries) public {\r\n        transferBeneficiaryShipWithHowMany(newBeneficiaries, newBeneficiaries.length);\r\n    }\r\n\r\n    /**\r\n    * @dev Allows beneficiaries to change beneficiaryShip\r\n    * @param newBeneficiaries defines array of addresses of new beneficiaries\r\n    * @param newHowManyBeneficiariesDecide defines how many beneficiaries can decide\r\n    */\r\n    function transferBeneficiaryShipWithHowMany(address[] memory newBeneficiaries, uint256 newHowManyBeneficiariesDecide) public onlyManyBeneficiaries {\r\n        require(newBeneficiaries.length > 0, \"transferBeneficiaryShipWithHowMany: beneficiaries array is empty\");\r\n        require(newBeneficiaries.length < 256, \"transferBeneficiaryshipWithHowMany: beneficiaries count is greater then 255\");\r\n        require(newHowManyBeneficiariesDecide > 0, \"transferBeneficiaryshipWithHowMany: newHowManybeneficiarysDecide equal to 0\");\r\n        require(newHowManyBeneficiariesDecide <= newBeneficiaries.length, \"transferBeneficiaryShipWithHowMany: newHowManybeneficiarysDecide exceeds the number of beneficiarys\");\r\n\r\n        // Reset beneficiaries reverse lookup table\r\n        for (uint j = 0; j < beneficiaries.length; j++) {\r\n            delete beneficiariesIndices[beneficiaries[j]];\r\n        }\r\n        for (uint i = 0; i < newBeneficiaries.length; i++) {\r\n            require(newBeneficiaries[i] != address(0), \"transferBeneficiaryShipWithHowMany: beneficiaries array contains zero\");\r\n            require(beneficiariesIndices[newBeneficiaries[i]] == 0, \"transferBeneficiaryShipWithHowMany: beneficiaries array contains duplicates\");\r\n            beneficiariesIndices[newBeneficiaries[i]] = uint8(i.add(1));\r\n        }\r\n        \r\n        emit BeneficiaryshipTransferred(beneficiaries, howManyBeneficiariesDecide, newBeneficiaries, newHowManyBeneficiariesDecide);\r\n        beneficiaries = newBeneficiaries;\r\n        howManyBeneficiariesDecide = newHowManyBeneficiariesDecide;\r\n\r\n        _cancelAllPending();\r\n       \r\n        beneficiariesGeneration++;\r\n    }\r\n}\r\n\r\n// File: contracts/logics/AkropolisTokenVesting.sol\r\n\r\n//Beneficieries template\r\n\r\n\r\ncontract AkropolisTokenVesting is TokenVesting, BeneficiaryOperations {\r\n\r\n    IERC20 private token;\r\n\r\n    address private _pendingBeneficiary;\r\n\r\n    event LogBeneficiaryTransferProposed(address _beneficiary);\r\n    event LogBeneficiaryTransfered(address _beneficiary);\r\n\r\n    constructor (IERC20 _token, uint256 _start, uint256 _cliffDuration, uint256 _duration) public \r\n        TokenVesting(msg.sender, _start, _cliffDuration, _duration, false) {\r\n            token = _token;\r\n        }\r\n\r\n     /**\r\n     * @notice Transfers vested tokens to beneficiary.\r\n     */\r\n\r\n    function release() public {\r\n        super.release(token);\r\n    }\r\n\r\n\r\n     /**\r\n     * @return the token being held.\r\n     */\r\n    function tokenAddress() public view returns (IERC20) {\r\n        return token;\r\n    }\r\n\r\n    // MODIFIERS\r\n    /**\r\n    * @dev Allows to perform method by existing beneficiary\r\n    */\r\n    modifier onlyExistingBeneficiary(address _beneficiary) {\r\n        require(isExistBeneficiary(_beneficiary), \"address is not in beneficiary array\");\r\n        _;\r\n    }\r\n\r\n    /**\r\n    * @dev Allows to perform method by pending beneficiary\r\n    */\r\n\r\n    modifier onlyPendingBeneficiary {\r\n        require(msg.sender  == _pendingBeneficiary, \"Unpermitted operation.\");\r\n        _;\r\n    }\r\n\r\n    function pendingBeneficiary() public view returns (address) {\r\n        return _pendingBeneficiary;\r\n    }\r\n\r\n     /**\r\n        * @dev Allows beneficiaries to change beneficiaryShip and set first beneficiary as default\r\n        * @param _newBeneficiaries defines array of addresses of new beneficiaries\r\n    */\r\n    function transferBeneficiaryShip(address[] memory _newBeneficiaries) public {\r\n        super.transferBeneficiaryShip(_newBeneficiaries);\r\n        _setPendingBeneficiary(beneficiaries[0]);\r\n    }\r\n\r\n     /**\r\n        * @dev Allows beneficiaries to change beneficiaryShip and set first beneficiary as default\r\n        * @param _newBeneficiaries defines array of addresses of new beneficiaries\r\n        * @param _newHowManyBeneficiariesDecide defines how many beneficiaries can decide\r\n    */\r\n    \r\n    function transferBeneficiaryShipWithHowMany(address[] memory _newBeneficiaries, uint256 _newHowManyBeneficiariesDecide) public  {\r\n        super.transferBeneficiaryShipWithHowMany(_newBeneficiaries, _newHowManyBeneficiariesDecide);\r\n        _setPendingBeneficiary(beneficiaries[0]);\r\n    }\r\n\r\n    /**\r\n        * @dev Allows beneficiaries to change beneficiary as default\r\n         * @param _newBeneficiary defines address of new beneficiary\r\n    */\r\n    function changeBeneficiary(address _newBeneficiary) public onlyManyBeneficiaries {\r\n        _setPendingBeneficiary(_newBeneficiary);\r\n    }\r\n\r\n    /**\r\n        * @dev Claim Beneficiary\r\n    */\r\n    function claimBeneficiary() public onlyPendingBeneficiary {\r\n        _changeBeneficiary(_pendingBeneficiary);\r\n        emit LogBeneficiaryTransfered(_pendingBeneficiary);\r\n        _pendingBeneficiary = address(0);\r\n    }\r\n\r\n    /*\r\n     * Internal Functions\r\n     *\r\n     */\r\n    /**\r\n        * @dev Set pending Beneficiary address\r\n        * @param _newBeneficiary defines address of new beneficiary\r\n    */\r\n    function _setPendingBeneficiary(address _newBeneficiary) internal onlyExistingBeneficiary(_newBeneficiary) {\r\n        _pendingBeneficiary = _newBeneficiary;\r\n        emit LogBeneficiaryTransferProposed(_newBeneficiary);\r\n    }\r\n}","ABI":"[{\"constant\":true,\"inputs\":[],\"name\":\"duration\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"cliff\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"token\",\"type\":\"address\"}],\"name\":\"release\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_newBeneficiaries\",\"type\":\"address[]\"}],\"name\":\"transferBeneficiaryShip\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"allOperationsCount\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"cancelAllPending\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"beneficiary\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"beneficiariesGeneration\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"pendingBeneficiary\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"allOperations\",\"outputs\":[{\"name\":\"\",\"type\":\"bytes32\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"claimBeneficiary\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"bytes32\"}],\"name\":\"votesMaskByOperation\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"beneficiariesCount\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"token\",\"type\":\"address\"}],\"name\":\"revoke\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_newBeneficiaries\",\"type\":\"address[]\"},{\"name\":\"_newHowManyBeneficiariesDecide\",\"type\":\"uint256\"}],\"name\":\"transferBeneficiaryShipWithHowMany\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"release\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"revocable\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"operation\",\"type\":\"bytes32\"}],\"name\":\"cancelPending\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"address\"}],\"name\":\"beneficiariesIndices\",\"outputs\":[{\"name\":\"\",\"type\":\"uint8\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"howManyBeneficiariesDecide\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"isOwner\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"bytes32\"}],\"name\":\"votesCountByOperation\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"token\",\"type\":\"address\"}],\"name\":\"released\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"tokenAddress\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"wallet\",\"type\":\"address\"}],\"name\":\"isExistBeneficiary\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"start\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_newBeneficiary\",\"type\":\"address\"}],\"name\":\"changeBeneficiary\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"bytes32\"}],\"name\":\"allOperationsIndicies\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"beneficiaries\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"token\",\"type\":\"address\"}],\"name\":\"revoked\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"name\":\"_token\",\"type\":\"address\"},{\"name\":\"_start\",\"type\":\"uint256\"},{\"name\":\"_cliffDuration\",\"type\":\"uint256\"},{\"name\":\"_duration\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"_beneficiary\",\"type\":\"address\"}],\"name\":\"LogBeneficiaryTransferProposed\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"_beneficiary\",\"type\":\"address\"}],\"name\":\"LogBeneficiaryTransfered\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"previousbeneficiaries\",\"type\":\"address[]\"},{\"indexed\":false,\"name\":\"howManyBeneficiariesDecide\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"newBeneficiaries\",\"type\":\"address[]\"},{\"indexed\":false,\"name\":\"newHowManybeneficiarysDecide\",\"type\":\"uint256\"}],\"name\":\"BeneficiaryshipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"operation\",\"type\":\"bytes32\"},{\"indexed\":false,\"name\":\"howMany\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"beneficiariesCount\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"proposer\",\"type\":\"address\"}],\"name\":\"OperationCreated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"operation\",\"type\":\"bytes32\"},{\"indexed\":false,\"name\":\"votes\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"howMany\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"beneficiariesCount\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"upvoter\",\"type\":\"address\"}],\"name\":\"OperationUpvoted\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"operation\",\"type\":\"bytes32\"},{\"indexed\":false,\"name\":\"howMany\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"beneficiariesCount\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"performer\",\"type\":\"address\"}],\"name\":\"OperationPerformed\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"operation\",\"type\":\"bytes32\"},{\"indexed\":false,\"name\":\"votes\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"beneficiariesCount\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"downvoter\",\"type\":\"address\"}],\"name\":\"OperationDownvoted\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"operation\",\"type\":\"bytes32\"},{\"indexed\":false,\"name\":\"lastCanceller\",\"type\":\"address\"}],\"name\":\"OperationCancelled\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"token\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"TokensReleased\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"token\",\"type\":\"address\"}],\"name\":\"TokenVestingRevoked\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"}]","ContractName":"AkropolisTokenVesting","CompilerVersion":"v0.5.9+commit.e560f70d","OptimizationUsed":"0","Runs":"200","ConstructorArguments":"0000000000000000000000008ab7404063ec4dbcfd4598215992dc3f8ec853d7000000000000000000000000000000000000000000000000000000005ee80bbc0000000000000000000000000000000000000000000000000000000000278d0000000000000000000000000000000000000000000000000000000000039ada00","Library":"","LicenseType":"MIT","SwarmSource":"bzzr://7855dc08874462894df508d1419cf3e595a9f76cb55b7e0b6dbc2bc87fecb204"}]}