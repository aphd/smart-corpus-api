{"status":"1","message":"OK","result":[{"SourceCode":"pragma solidity 0.5.12;\r\n\r\n// https://github.com/dapphub/ds-pause\r\ncontract DSPauseAbstract {\r\n    function delay() public view returns (uint256);\r\n    function plot(address, bytes32, bytes memory, uint256) public;\r\n    function exec(address, bytes32, bytes memory, uint256) public returns (bytes memory);\r\n}\r\n\r\n// https://github.com/makerdao/dss/blob/master/src/pot.sol\r\ncontract PotAbstract {\r\n    function file(bytes32, uint256) external;\r\n    function drip() external returns (uint256);\r\n}\r\n\r\n// https://github.com/makerdao/dss/blob/master/src/jug.sol\r\ncontract JugAbstract {\r\n    function file(bytes32, bytes32, uint256) external;\r\n    function drip(bytes32) external returns (uint256);\r\n}\r\n\r\n// https://github.com/makerdao/dss/blob/master/src/vat.sol\r\ncontract VatAbstract {\r\n    function ilks(bytes32) external view returns (uint256, uint256, uint256, uint256, uint256);\r\n    function file(bytes32, uint256) external;\r\n    function file(bytes32, bytes32, uint256) external;\r\n}\r\n\r\n// https://github.com/makerdao/dss/blob/master/src/flip.sol\r\ncontract FlipAbstract {\r\n    function file(bytes32, uint256) external;\r\n}\r\n\r\n// https://github.com/makerdao/flipper-mom/blob/master/src/FlipperMom.sol\r\ncontract FlipperMomAbstract {\r\n    function rely(address) external;\r\n    function deny(address) external;\r\n}\r\n\r\ncontract SpellAction {\r\n    // Provides a descriptive tag for bot consumption\r\n    // This should be modified weekly to provide a summary of the actions\r\n    string  constant public description = \"DEFCON-1 Emergency Spell\";\r\n\r\n    // The contracts in this list should correspond to MCD core contracts, verify\r\n    //  against the current release list at:\r\n    //     https://changelog.makerdao.com/releases/mainnet/1.0.4/contracts.json\r\n    //\r\n    // Contract addresses pertaining to the SCD ecosystem can be found at:\r\n    //     https://github.com/makerdao/sai#dai-v1-current-deployments\r\n    address constant public MCD_VAT =\r\n        0x35D1b3F3D7966A1DFe207aa4514C12a259A0492B;\r\n    address constant public MCD_JUG =\r\n        0x19c0976f590D67707E62397C87829d896Dc0f1F1;\r\n    address constant public MCD_POT =\r\n        0x197E90f9FAD81970bA7976f33CbD77088E5D7cf7;\r\n    address constant public MCD_FLIP_ETH_A =\r\n        0xd8a04F5412223F513DC55F839574430f5EC15531;\r\n    address constant public MCD_FLIP_BAT_A =\r\n        0xaA745404d55f88C108A28c86abE7b5A1E7817c07;\r\n    // address constant public MCD_FLIP_USDC_A =\r\n    //     0xE6ed1d09a19Bd335f051d78D5d22dF3bfF2c28B1;\r\n    address constant public FLIPPER_MOM =\r\n        0x9BdDB99625A711bf9bda237044924E34E8570f75;\r\n\r\n\r\n    // Many of the settings that change weekly rely on the rate accumulator\r\n    // described at https://docs.makerdao.com/smart-contract-modules/rates-module\r\n    // To check this yourself, use the following rate calculation (example 8%):\r\n    //\r\n    // $ bc -l <<< 'scale=27; e( l(1.08)/(60 * 60 * 24 * 365) )'\r\n    //\r\n    uint256 constant public    ZERO_PCT_RATE = 1000000000000000000000000000;\r\n    uint256 constant public   FIFTY_PCT_RATE = 1000000012857214317438491659;\r\n\r\n    uint256 constant public RAD = 10**45;\r\n    uint256 constant public MILLION = 10**6;\r\n\r\n    function execute() external {\r\n\r\n        // Drip Pot and Jugs prior to all modifications.\r\n        PotAbstract(MCD_POT).drip();\r\n        JugAbstract(MCD_JUG).drip(\"ETH-A\");\r\n        JugAbstract(MCD_JUG).drip(\"BAT-A\");\r\n        JugAbstract(MCD_JUG).drip(\"USDC-A\");\r\n\r\n\r\n        // MCD Modifications\r\n\r\n        // Set the Dai Savings Rate\r\n        // DSR_RATE is a value determined by the rate accumulator calculation\r\n        // ex. an 8% annual rate will be 1000000002440418608258400030\r\n        //\r\n        uint256 DSR_RATE = ZERO_PCT_RATE;\r\n        PotAbstract(MCD_POT).file(\"dsr\", DSR_RATE);\r\n\r\n        // Set the ETH-A stability fee\r\n        // ETH_A_FEE is a value determined by the rate accumulator calculation.\r\n        // ex. an 8% annual rate will be 1000000002440418608258400030\r\n        //\r\n        uint256 ETH_A_FEE = ZERO_PCT_RATE;\r\n        JugAbstract(MCD_JUG).file(\"ETH-A\", \"duty\", ETH_A_FEE);\r\n\r\n        // Set the BAT-A stability fee\r\n        // BAT_A_FEE is a value determined by the rate accumulator calculation.\r\n        // ex. an 8% annual rate will be 1000000002440418608258400030\r\n        //\r\n        uint256 BAT_A_FEE = ZERO_PCT_RATE;\r\n        JugAbstract(MCD_JUG).file(\"BAT-A\", \"duty\", BAT_A_FEE);\r\n\r\n        // Set the USDC stability fee\r\n        // USDC_FEE is a value determined by the rate accumulator calculation.\r\n        // ex. an 8% annual rate will be 1000000002440418608258400030\r\n        //\r\n        uint256 USDC_A_FEE = FIFTY_PCT_RATE;\r\n        JugAbstract(MCD_JUG).file(\"USDC-A\", \"duty\", USDC_A_FEE);\r\n\r\n        // Set the USDC-A debt ceiling\r\n        // USDC_LINE is the number of Dai that can be created with USDC token\r\n        // collateral.\r\n        // ex. a 40 million Dai USDC ceiling will be USDC_LINE = 40000000\r\n        //\r\n        // Existing Line: 20m\r\n        // New Line: 40m\r\n        uint256 USDC_A_LINE = 40 * MILLION;\r\n        VatAbstract(MCD_VAT).file(\"USDC-A\", \"line\", USDC_A_LINE * RAD);\r\n\r\n        // Set the global debt ceiling\r\n        //\r\n        // GLOBAL_LINE is the total number of Dai that can be created by all\r\n        // collateral types as a whole number\r\n        //\r\n        (,,, uint256 saiLine,)   = VatAbstract(MCD_VAT).ilks(\"SAI\");\r\n        (,,, uint256 ethALine,)  = VatAbstract(MCD_VAT).ilks(\"ETH-A\");\r\n        (,,, uint256 batALine,)  = VatAbstract(MCD_VAT).ilks(\"BAT-A\");\r\n        (,,, uint256 usdcALine,) = VatAbstract(MCD_VAT).ilks(\"USDC-A\");\r\n        uint256 GLOBAL_LINE = saiLine + ethALine + batALine + usdcALine;\r\n        VatAbstract(MCD_VAT).file(\"Line\", GLOBAL_LINE);\r\n\r\n        // Set the ETH-A Flip tau\r\n        //\r\n        // ETH_A_FLIP_TAU is the bid lifetime\r\n        //\r\n        uint256 ETH_A_FLIP_TAU = 24 hours;\r\n        FlipAbstract(MCD_FLIP_ETH_A).file(bytes32(\"tau\"), ETH_A_FLIP_TAU);\r\n\r\n        // Set the BAT-A Flip tau\r\n        //\r\n        // BAT_A_FLIP_TAU is the bid lifetime\r\n        //\r\n        uint256 BAT_A_FLIP_TAU = 24 hours;\r\n        FlipAbstract(MCD_FLIP_BAT_A).file(bytes32(\"tau\"), BAT_A_FLIP_TAU);\r\n\r\n        // Set the USDC-A Flip tau\r\n        //\r\n        // USDC_A_FLIP_TAU is the bid lifetime\r\n        //\r\n        // uint256 USDC_A_FLIP_TAU = 24 hours;\r\n        // FlipAbstract(MCD_FLIP_USDC_A).file(bytes32(\"tau\"), USDC_A_FLIP_TAU);\r\n\r\n        // Enable all collateral liquidations\r\n        //\r\n        // This change will enable liquidations across all collateral types\r\n        // and is colloquially referred to as the circuit breaker.\r\n        //\r\n        // NOTE: We flipped the liquidation breaker off in the schedule(),\r\n        // waited the GSM delay period, changed system parameters, and are now\r\n        // re-enabling liquidations.  We are also not re-enabling USDC-A\r\n        // liquidations as they were never enabled, the OSM price is locked to\r\n        // $1, and we don't have a healthy keeper ecosystem for USDC-A yet.\r\n        //\r\n        FlipperMomAbstract(FLIPPER_MOM).rely(MCD_FLIP_ETH_A);\r\n        FlipperMomAbstract(FLIPPER_MOM).rely(MCD_FLIP_BAT_A);\r\n        // FlipperMomAbstract(FLIPPER_MOM).rely(MCD_FLIP_USDC_A);\r\n\r\n    }\r\n}\r\n\r\ncontract DssSpell {\r\n\r\n    DSPauseAbstract  public pause =\r\n        DSPauseAbstract(0xbE286431454714F511008713973d3B053A2d38f3);\r\n    address          public action;\r\n    bytes32          public tag;\r\n    uint256          public eta;\r\n    bytes            public sig;\r\n    uint256          public expiration;\r\n    bool             public done;\r\n\r\n    address constant public MCD_FLIP_ETH_A =\r\n        0xd8a04F5412223F513DC55F839574430f5EC15531;\r\n    address constant public MCD_FLIP_BAT_A =\r\n        0xaA745404d55f88C108A28c86abE7b5A1E7817c07;\r\n    address constant public MCD_FLIP_USDC_A =\r\n        0xE6ed1d09a19Bd335f051d78D5d22dF3bfF2c28B1;\r\n    address constant public FLIPPER_MOM =\r\n        0x9BdDB99625A711bf9bda237044924E34E8570f75;\r\n\r\n    uint256 constant internal MILLION = 10**6;\r\n    uint256 constant public T2020_07_01_1200UTC = 1593604800;\r\n\r\n    constructor() public {\r\n        sig = abi.encodeWithSignature(\"execute()\");\r\n        action = address(new SpellAction());\r\n        bytes32 _tag;\r\n        address _action = action;\r\n        assembly { _tag := extcodehash(_action) }\r\n        tag = _tag;\r\n        expiration = T2020_07_01_1200UTC;\r\n    }\r\n\r\n    function description() public view returns (string memory) {\r\n        return SpellAction(action).description();\r\n    }\r\n\r\n    function schedule() public {\r\n        require(now <= expiration, \"This contract has expired\");\r\n        require(eta == 0, \"This spell has already been scheduled\");\r\n        eta = now + DSPauseAbstract(pause).delay();\r\n        pause.plot(action, tag, sig, eta);\r\n\r\n        // NOTE: 'eta' check should mimic the old behavior of 'done', thus\r\n        // preventing these changes from being executed again.\r\n\r\n        // Disable all collateral liquidations\r\n        //\r\n        // This change will prevent liquidations across all collateral types\r\n        // and is colloquially referred to as the circuit breaker.\r\n        //\r\n        FlipperMomAbstract(FLIPPER_MOM).deny(MCD_FLIP_ETH_A);\r\n        FlipperMomAbstract(FLIPPER_MOM).deny(MCD_FLIP_BAT_A);\r\n        FlipperMomAbstract(FLIPPER_MOM).deny(MCD_FLIP_USDC_A);\r\n    }\r\n\r\n    function cast() public {\r\n        require(!done, \"spell-already-cast\");\r\n        done = true;\r\n        pause.exec(action, tag, sig, eta);\r\n    }\r\n}","ABI":"[{\"inputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"constant\":true,\"inputs\":[],\"name\":\"FLIPPER_MOM\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"MCD_FLIP_BAT_A\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"MCD_FLIP_ETH_A\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"MCD_FLIP_USDC_A\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"T2020_07_01_1200UTC\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"action\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"cast\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"description\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"done\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"eta\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"expiration\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"pause\",\"outputs\":[{\"internalType\":\"contract DSPauseAbstract\",\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"schedule\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"sig\",\"outputs\":[{\"internalType\":\"bytes\",\"name\":\"\",\"type\":\"bytes\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"tag\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"}]","ContractName":"DssSpell","CompilerVersion":"v0.5.12+commit.7709ece9","OptimizationUsed":"0","Runs":"200","ConstructorArguments":"","Library":"","LicenseType":"GNU LGPLv3","SwarmSource":"bzzr://81effb1d25bc2959a446fb7f80f45e7b7ac86262fccef09e921f96853092b3a9"}]}