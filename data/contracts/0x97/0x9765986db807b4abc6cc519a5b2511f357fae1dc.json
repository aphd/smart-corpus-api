{"status":"1","message":"OK","result":[{"SourceCode":"{\"PPCrowdsale.sol\":{\"content\":\"pragma solidity ^0.4.24;\\n\\n/**\\n * @title SafeMath\\n * @dev Math operations with safety checks that revert on error\\n */\\nlibrary SafeMath {\\n    int256 constant private INT256_MIN = -2**255;\\n\\n    /**\\n    * @dev Multiplies two unsigned integers, reverts on overflow.\\n    */\\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\\n        // Gas optimization: this is cheaper than requiring \\u0027a\\u0027 not being zero, but the\\n        // benefit is lost if \\u0027b\\u0027 is also tested.\\n        // See: https://github.com/OpenZeppelin/openzeppelin-solidity/pull/522\\n        if (a == 0) {\\n            return 0;\\n        }\\n\\n        uint256 c = a * b;\\n        require(c / a == b);\\n\\n        return c;\\n    }\\n\\n    /**\\n    * @dev Multiplies two signed integers, reverts on overflow.\\n    */\\n    function mul(int256 a, int256 b) internal pure returns (int256) {\\n        // Gas optimization: this is cheaper than requiring \\u0027a\\u0027 not being zero, but the\\n        // benefit is lost if \\u0027b\\u0027 is also tested.\\n        // See: https://github.com/OpenZeppelin/openzeppelin-solidity/pull/522\\n        if (a == 0) {\\n            return 0;\\n        }\\n\\n        require(!(a == -1 \\u0026\\u0026 b == INT256_MIN)); // This is the only case of overflow not detected by the check below\\n\\n        int256 c = a * b;\\n        require(c / a == b);\\n\\n        return c;\\n    }\\n\\n    /**\\n    * @dev Integer division of two unsigned integers truncating the quotient, reverts on division by zero.\\n    */\\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\\n        // Solidity only automatically asserts when dividing by 0\\n        require(b \\u003e 0);\\n        uint256 c = a / b;\\n        // assert(a == b * c + a % b); // There is no case in which this doesn\\u0027t hold\\n\\n        return c;\\n    }\\n\\n    /**\\n    * @dev Integer division of two signed integers truncating the quotient, reverts on division by zero.\\n    */\\n    function div(int256 a, int256 b) internal pure returns (int256) {\\n        require(b != 0); // Solidity only automatically asserts when dividing by 0\\n        require(!(b == -1 \\u0026\\u0026 a == INT256_MIN)); // This is the only case of overflow\\n\\n        int256 c = a / b;\\n\\n        return c;\\n    }\\n\\n    /**\\n    * @dev Subtracts two unsigned integers, reverts on overflow (i.e. if subtrahend is greater than minuend).\\n    */\\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\\n        require(b \\u003c= a);\\n        uint256 c = a - b;\\n\\n        return c;\\n    }\\n\\n    /**\\n    * @dev Subtracts two signed integers, reverts on overflow.\\n    */\\n    function sub(int256 a, int256 b) internal pure returns (int256) {\\n        int256 c = a - b;\\n        require((b \\u003e= 0 \\u0026\\u0026 c \\u003c= a) || (b \\u003c 0 \\u0026\\u0026 c \\u003e a));\\n\\n        return c;\\n    }\\n\\n    /**\\n    * @dev Adds two unsigned integers, reverts on overflow.\\n    */\\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\\n        uint256 c = a + b;\\n        require(c \\u003e= a);\\n\\n        return c;\\n    }\\n\\n    /**\\n    * @dev Adds two signed integers, reverts on overflow.\\n    */\\n    function add(int256 a, int256 b) internal pure returns (int256) {\\n        int256 c = a + b;\\n        require((b \\u003e= 0 \\u0026\\u0026 c \\u003e= a) || (b \\u003c 0 \\u0026\\u0026 c \\u003c a));\\n\\n        return c;\\n    }\\n\\n    /**\\n    * @dev Divides two unsigned integers and returns the remainder (unsigned integer modulo),\\n    * reverts when dividing by zero.\\n    */\\n    function mod(uint256 a, uint256 b) internal pure returns (uint256) {\\n        require(b != 0);\\n        return a % b;\\n    }\\n}\\n\\n/**\\n * @title ERC20 interface\\n * @dev see https://github.com/ethereum/EIPs/issues/20\\n */\\ninterface IERC20 {\\n    function totalSupply() external view returns (uint256);\\n\\n    function balanceOf(address who) external view returns (uint256);\\n\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    function transfer(address to, uint256 value) external returns (bool);\\n\\n    function approve(address spender, uint256 value) external returns (bool);\\n\\n    function transferFrom(address from, address to, uint256 value) external returns (bool);\\n\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n}\\n\\n/**\\n * @title SafeERC20\\n * @dev Wrappers around ERC20 operations that throw on failure.\\n * To use this library you can add a `using SafeERC20 for ERC20;` statement to your contract,\\n * which allows you to call the safe operations as `token.safeTransfer(...)`, etc.\\n */\\nlibrary SafeERC20 {\\n    using SafeMath for uint256;\\n\\n    function safeTransfer(IERC20 token, address to, uint256 value) internal {\\n        require(token.transfer(to, value));\\n    }\\n\\n    function safeTransferFrom(IERC20 token, address from, address to, uint256 value) internal {\\n        require(token.transferFrom(from, to, value));\\n    }\\n\\n    function safeApprove(IERC20 token, address spender, uint256 value) internal {\\n        // safeApprove should only be called when setting an initial allowance,\\n        // or when resetting it to zero. To increase and decrease it, use\\n        // \\u0027safeIncreaseAllowance\\u0027 and \\u0027safeDecreaseAllowance\\u0027\\n        require((value == 0) || (token.allowance(msg.sender, spender) == 0));\\n        require(token.approve(spender, value));\\n    }\\n\\n    function safeIncreaseAllowance(IERC20 token, address spender, uint256 value) internal {\\n        uint256 newAllowance = token.allowance(address(this), spender).add(value);\\n        require(token.approve(spender, newAllowance));\\n    }\\n\\n    function safeDecreaseAllowance(IERC20 token, address spender, uint256 value) internal {\\n        uint256 newAllowance = token.allowance(address(this), spender).sub(value);\\n        require(token.approve(spender, newAllowance));\\n    }\\n}\\n\\n/**\\n * @title Helps contracts guard against reentrancy attacks.\\n * @author Remco Bloemen \\u003cremco@2Ï€.com\\u003e, Eenae \\u003calexey@mixbytes.io\\u003e\\n * @dev If you mark a function `nonReentrant`, you should also\\n * mark it `external`.\\n */\\ncontract ReentrancyGuard {\\n    /// @dev counter to allow mutex lock with only one SSTORE operation\\n    uint256 private _guardCounter;\\n\\n    constructor () internal {\\n        // The counter starts at one to prevent changing it from zero to a non-zero\\n        // value, which is a more expensive operation.\\n        _guardCounter = 1;\\n    }\\n\\n    /**\\n     * @dev Prevents a contract from calling itself, directly or indirectly.\\n     * Calling a `nonReentrant` function from another `nonReentrant`\\n     * function is not supported. It is possible to prevent this from happening\\n     * by making the `nonReentrant` function external, and make it call a\\n     * `private` function that does the actual work.\\n     */\\n    modifier nonReentrant() {\\n        _guardCounter += 1;\\n        uint256 localCounter = _guardCounter;\\n        _;\\n        require(localCounter == _guardCounter);\\n    }\\n}\\n\\n/**\\n * @title Crowdsale\\n * @dev Crowdsale is a base contract for managing a token crowdsale,\\n * allowing investors to purchase tokens with ether. This contract implements\\n * such functionality in its most fundamental form and can be extended to provide additional\\n * functionality and/or custom behavior.\\n * The external interface represents the basic interface for purchasing tokens, and conform\\n * the base architecture for crowdsales. They are *not* intended to be modified / overridden.\\n * The internal interface conforms the extensible and modifiable surface of crowdsales. Override\\n * the methods to add functionality. Consider using \\u0027super\\u0027 where appropriate to concatenate\\n * behavior.\\n */\\ncontract APPCrowdsale is ReentrancyGuard {\\n    using SafeMath for uint256;\\n    using SafeERC20 for IERC20;\\n\\n    // The token being sold\\n    IERC20 private _token;\\n\\n    // Address where funds are collected\\n    address private _wallet1;\\n    address private _wallet2;\\n\\n    // How many token units a buyer gets per wei.\\n    // The rate is the conversion between wei and the smallest and indivisible token unit.\\n    // So, if you are using a rate of 1 with a ERC20Detailed token with 3 decimals called TOK\\n    // 1 wei will give you 1 unit, or 0.001 TOK.\\n    uint256 private _rate;\\n\\n    // Amount of wei raised\\n    uint256 private _weiRaised;\\n\\n    address private _owner;\\n\\n    uint256 constant private minRate = 50000000000;\\n\\n    uint256 private _minTokenSum = 0;\\n\\n    /**\\n     * Event for token purchase logging\\n     * @param purchaser who paid for the tokens\\n     * @param beneficiary who got the tokens\\n     * @param value weis paid for purchase\\n     * @param amount amount of tokens purchased\\n     *\\n     */\\n    event TokensPurchased(address indexed purchaser, address indexed beneficiary, uint256 value, uint256 amount);\\n\\n    /**\\n     * @param rate Number of token units a buyer gets per wei\\n     * @dev The rate is the conversion between wei and the smallest and indivisible\\n     * token unit. So, if you are using a rate of 1 with a ERC20Detailed token\\n     * with 3 decimals called TOK, 1 wei will give you 1 unit, or 0.001 TOK.\\n     * @param wallet1 Address where collected funds will be forwarded to\\n     * @param wallet2 Address where collected funds will be forwarded to\\n     * @param token Address of the token being sold\\n     */\\n    constructor (uint256 rate, address wallet1, address wallet2, IERC20 token) public payable {\\n        require(rate \\u003e 0);\\n        require(wallet1 != address(0));\\n        require(wallet2 != address(0));\\n        require(token != address(0));\\n        require (rate \\u003e= minRate);\\n\\n        _rate = rate;\\n        _wallet1 = wallet1;\\n        _wallet2 = wallet2;\\n        _token = token;\\n        _owner = msg.sender;\\n    }\\n\\n    mapping (address =\\u003e bool) private _trusted;\\n\\n    function addTrustedAddress(address trusted) public {\\n        require(msg.sender == _owner);\\n        _trusted[trusted] = true;\\n    }\\n\\n    function removeTrustedAddress(address trusted) public {\\n        require(msg.sender == _owner);\\n        _trusted[trusted] = false;\\n    }\\n\\n    function changeRate(uint256 newRate) public {\\n        require (_trusted[msg.sender] == true);\\n        require (newRate \\u003e= minRate);\\n        _rate = newRate;\\n    }\\n\\n    /**\\n     * @param minTokenSum minimal sum in PAY tokens,\\n     * that investor can buy\\n     **/\\n    function changeMinTokenSum(uint256 minTokenSum) public {\\n        require (_trusted[msg.sender] == true || msg.sender == _owner);\\n        _minTokenSum = minTokenSum;\\n    }\\n\\n    // -----------------------------------------\\n    // Crowdsale external interface\\n    // -----------------------------------------\\n\\n    /**\\n     * @dev fallback function ***DO NOT OVERRIDE***\\n     * Note that other contracts will transfer fund with a base gas stipend\\n     * of 2300, which is not enough to call buyTokens. Consider calling\\n     * buyTokens directly when purchasing tokens from a contract.\\n     */\\n    function () external payable {\\n        buyTokens(msg.sender);\\n    }\\n\\n    /**\\n     * @return the token being sold.\\n     */\\n    function token() public view returns (IERC20) {\\n        return _token;\\n    }\\n\\n\\n    function wallet1() public view returns (address) {\\n        return _wallet1;\\n    }\\n\\n    function wallet2() public view returns (address) {\\n        return _wallet2;\\n    }\\n\\n    /**\\n     * @return the number of token units a buyer gets per wei.\\n     */\\n    function rate() public view returns (uint256) {\\n        return _rate;\\n    }\\n\\n    function minTokenSum() public view returns (uint256) {\\n        return _minTokenSum;\\n    }\\n\\n    /**\\n     * @return the amount of wei raised.\\n     */\\n    function weiRaised() public view returns (uint256) {\\n        return _weiRaised;\\n    }\\n\\n    function transferTo(address toAddress, uint256 tokenAmount) public {\\n        require(msg.sender == _owner);\\n        _token.safeTransfer(toAddress, tokenAmount);\\n    }\\n\\n    /**\\n     * @dev low level token purchase ***DO NOT OVERRIDE***\\n     * This function has a non-reentrancy guard, so it shouldn\\u0027t be called by\\n     * another `nonReentrant` function.\\n     * @param beneficiary Recipient of the token purchase\\n     */\\n    function buyTokens(address beneficiary) public nonReentrant payable {\\n        uint256 weiAmount = msg.value;\\n        _preValidatePurchase(beneficiary, weiAmount);\\n\\n        // calculate token amount to be created\\n        uint256 tokens = _getTokenAmount(weiAmount);\\n\\n        // update state\\n        _weiRaised = _weiRaised.add(weiAmount);\\n\\n        _processPurchase(beneficiary, tokens);\\n        emit TokensPurchased(msg.sender, beneficiary, weiAmount, tokens);\\n\\n        // _updatePurchasingState(beneficiary, weiAmount);\\n\\n        _forwardFunds();\\n        // _postValidatePurchase(beneficiary, weiAmount);\\n    }\\n\\n    // -----------------------------------------\\n    // Internal interface (extensible)\\n    // -----------------------------------------\\n\\n    /**\\n     * @dev Validation of an incoming purchase. Use require statements to revert state when conditions are not met. Use `super` in contracts that inherit from Crowdsale to extend their validations.\\n     * Example from CappedCrowdsale.sol\\u0027s _preValidatePurchase method:\\n     *     super._preValidatePurchase(beneficiary, weiAmount);\\n     *     require(weiRaised().add(weiAmount) \\u003c= cap);\\n     * @param beneficiary Address performing the token purchase\\n     * @param weiAmount Value in wei involved in the purchase\\n     */\\n    function _preValidatePurchase(address beneficiary, uint256 weiAmount) internal view {\\n        require(beneficiary != address(0));\\n        require(weiAmount != 0);\\n        require(weiAmount \\u003e= _rate);\\n        require(_getTokenAmount(weiAmount) \\u003e= _minTokenSum);\\n\\n    }\\n\\n    /**\\n     * @dev Source of tokens. Override this method to modify the way in which the crowdsale ultimately gets and sends its tokens.\\n     * @param beneficiary Address performing the token purchase\\n     * @param tokenAmount Number of tokens to be emitted\\n     */\\n    function _deliverTokens(address beneficiary, uint256 tokenAmount) internal {\\n        _token.safeTransfer(beneficiary, tokenAmount);\\n    }\\n\\n    /**\\n     * @dev Executed when a purchase has been validated and is ready to be executed. Doesn\\u0027t necessarily emit/send tokens.\\n     * @param beneficiary Address receiving the tokens\\n     * @param tokenAmount Number of tokens to be purchased\\n     */\\n    function _processPurchase(address beneficiary, uint256 tokenAmount) internal {\\n        _deliverTokens(beneficiary, tokenAmount);\\n    }\\n\\n    /**\\n     * @dev Override to extend the way in which ether is converted to tokens.\\n     * @param weiAmount Value in wei to be converted into tokens\\n     * @return Number of tokens that can be purchased with the specified _weiAmount\\n     */\\n    function _getTokenAmount(uint256 weiAmount) internal view returns (uint256) {\\n        return weiAmount.div(_rate);\\n    }\\n\\n    /**\\n     * @dev Determines how ETH is stored/forwarded on purchases.\\n     */\\n    function _forwardFunds() internal {\\n        uint256 val1 = msg.value/2;\\n        uint256 val2 = msg.value - val1;\\n        _wallet1.transfer(val1);\\n        _wallet2.transfer(val2);\\n    }\\n\\n    function updateWallet(address newWallet1, address newWallet2) public {\\n        require(msg.sender == _owner);\\n        if (newWallet1 != address(0)) {\\n            _wallet1 = newWallet1;\\n        }\\n        if (newWallet2 != address(0)) {\\n            _wallet2 = newWallet2;\\n        }\\n    }\\n}\"},\"PPToken.sol\":{\"content\":\"pragma solidity ^0.4.24;\\n\\n/**\\n * @title SafeMath\\n * @dev Math operations with safety checks that revert on error\\n */\\nlibrary SafeMath {\\n    int256 constant private INT256_MIN = -2**255;\\n\\n    /**\\n    * @dev Multiplies two unsigned integers, reverts on overflow.\\n    */\\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\\n        // Gas optimization: this is cheaper than requiring \\u0027a\\u0027 not being zero, but the\\n        // benefit is lost if \\u0027b\\u0027 is also tested.\\n        // See: https://github.com/OpenZeppelin/openzeppelin-solidity/pull/522\\n        if (a == 0) {\\n            return 0;\\n        }\\n\\n        uint256 c = a * b;\\n        require(c / a == b);\\n\\n        return c;\\n    }\\n\\n    /**\\n    * @dev Multiplies two signed integers, reverts on overflow.\\n    */\\n    function mul(int256 a, int256 b) internal pure returns (int256) {\\n        // Gas optimization: this is cheaper than requiring \\u0027a\\u0027 not being zero, but the\\n        // benefit is lost if \\u0027b\\u0027 is also tested.\\n        // See: https://github.com/OpenZeppelin/openzeppelin-solidity/pull/522\\n        if (a == 0) {\\n            return 0;\\n        }\\n\\n        require(!(a == -1 \\u0026\\u0026 b == INT256_MIN)); // This is the only case of overflow not detected by the check below\\n\\n        int256 c = a * b;\\n        require(c / a == b);\\n\\n        return c;\\n    }\\n\\n    /**\\n    * @dev Integer division of two unsigned integers truncating the quotient, reverts on division by zero.\\n    */\\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\\n        // Solidity only automatically asserts when dividing by 0\\n        require(b \\u003e 0);\\n        uint256 c = a / b;\\n        // assert(a == b * c + a % b); // There is no case in which this doesn\\u0027t hold\\n\\n        return c;\\n    }\\n\\n    /**\\n    * @dev Integer division of two signed integers truncating the quotient, reverts on division by zero.\\n    */\\n    function div(int256 a, int256 b) internal pure returns (int256) {\\n        require(b != 0); // Solidity only automatically asserts when dividing by 0\\n        require(!(b == -1 \\u0026\\u0026 a == INT256_MIN)); // This is the only case of overflow\\n\\n        int256 c = a / b;\\n\\n        return c;\\n    }\\n\\n    /**\\n    * @dev Subtracts two unsigned integers, reverts on overflow (i.e. if subtrahend is greater than minuend).\\n    */\\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\\n        require(b \\u003c= a);\\n        uint256 c = a - b;\\n\\n        return c;\\n    }\\n\\n    /**\\n    * @dev Subtracts two signed integers, reverts on overflow.\\n    */\\n    function sub(int256 a, int256 b) internal pure returns (int256) {\\n        int256 c = a - b;\\n        require((b \\u003e= 0 \\u0026\\u0026 c \\u003c= a) || (b \\u003c 0 \\u0026\\u0026 c \\u003e a));\\n\\n        return c;\\n    }\\n\\n    /**\\n    * @dev Adds two unsigned integers, reverts on overflow.\\n    */\\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\\n        uint256 c = a + b;\\n        require(c \\u003e= a);\\n\\n        return c;\\n    }\\n\\n    /**\\n    * @dev Adds two signed integers, reverts on overflow.\\n    */\\n    function add(int256 a, int256 b) internal pure returns (int256) {\\n        int256 c = a + b;\\n        require((b \\u003e= 0 \\u0026\\u0026 c \\u003e= a) || (b \\u003c 0 \\u0026\\u0026 c \\u003c a));\\n\\n        return c;\\n    }\\n\\n    /**\\n    * @dev Divides two unsigned integers and returns the remainder (unsigned integer modulo),\\n    * reverts when dividing by zero.\\n    */\\n    function mod(uint256 a, uint256 b) internal pure returns (uint256) {\\n        require(b != 0);\\n        return a % b;\\n    }\\n}\\n\\n/**\\n * @title ERC20 interface\\n * @dev see https://github.com/ethereum/EIPs/issues/20\\n */\\ninterface IERC20 {\\n    function totalSupply() external view returns (uint256);\\n\\n    function balanceOf(address who) external view returns (uint256);\\n\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    function transfer(address to, uint256 value) external returns (bool);\\n\\n    function approve(address spender, uint256 value) external returns (bool);\\n\\n    function transferFrom(address from, address to, uint256 value) external returns (bool);\\n\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n}\\n\\n/**\\n * @title Standard ERC20 token\\n *\\n * @dev Implementation of the basic standard token.\\n * https://github.com/ethereum/EIPs/blob/master/EIPS/eip-20.md\\n * Originally based on code by FirstBlood: https://github.com/Firstbloodio/token/blob/master/smart_contract/FirstBloodToken.sol\\n *\\n * This implementation emits additional Approval events, allowing applications to reconstruct the allowance status for\\n * all accounts just by listening to said events. Note that this isn\\u0027t required by the specification, and other\\n * compliant implementations may not do it.\\n */\\ncontract ERC20 is IERC20 {\\n    using SafeMath for uint256;\\n\\n    mapping (address =\\u003e uint256) private _balances;\\n\\n    mapping (address =\\u003e mapping (address =\\u003e uint256)) private _allowed;\\n\\n    uint256 private _totalSupply;\\n\\n    /**\\n    * @dev Total number of tokens in existence\\n    */\\n    function totalSupply() public view returns (uint256) {\\n        return _totalSupply;\\n    }\\n\\n    /**\\n    * @dev Gets the balance of the specified address.\\n    * @param owner The address to query the balance of.\\n    * @return An uint256 representing the amount owned by the passed address.\\n    */\\n    function balanceOf(address owner) public view returns (uint256) {\\n        return _balances[owner];\\n    }\\n\\n    /**\\n     * @dev Function to check the amount of tokens that an owner allowed to a spender.\\n     * @param owner address The address which owns the funds.\\n     * @param spender address The address which will spend the funds.\\n     * @return A uint256 specifying the amount of tokens still available for the spender.\\n     */\\n    function allowance(address owner, address spender) public view returns (uint256) {\\n        return _allowed[owner][spender];\\n    }\\n\\n    /**\\n    * @dev Transfer token for a specified address\\n    * @param to The address to transfer to.\\n    * @param value The amount to be transferred.\\n    */\\n    function transfer(address to, uint256 value) public returns (bool) {\\n        _transfer(msg.sender, to, value);\\n        return true;\\n    }\\n\\n    /**\\n     * @dev Approve the passed address to spend the specified amount of tokens on behalf of msg.sender.\\n     * Beware that changing an allowance with this method brings the risk that someone may use both the old\\n     * and the new allowance by unfortunate transaction ordering. One possible solution to mitigate this\\n     * race condition is to first reduce the spender\\u0027s allowance to 0 and set the desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     * @param spender The address which will spend the funds.\\n     * @param value The amount of tokens to be spent.\\n     */\\n    function approve(address spender, uint256 value) public returns (bool) {\\n        require(spender != address(0));\\n\\n        _allowed[msg.sender][spender] = value;\\n        emit Approval(msg.sender, spender, value);\\n        return true;\\n    }\\n\\n    /**\\n     * @dev Transfer tokens from one address to another.\\n     * Note that while this function emits an Approval event, this is not required as per the specification,\\n     * and other compliant implementations may not emit the event.\\n     * @param from address The address which you want to send tokens from\\n     * @param to address The address which you want to transfer to\\n     * @param value uint256 the amount of tokens to be transferred\\n     */\\n    function transferFrom(address from, address to, uint256 value) public returns (bool) {\\n        _allowed[from][msg.sender] = _allowed[from][msg.sender].sub(value);\\n        _transfer(from, to, value);\\n        emit Approval(from, msg.sender, _allowed[from][msg.sender]);\\n        return true;\\n    }\\n\\n    /**\\n     * @dev Increase the amount of tokens that an owner allowed to a spender.\\n     * approve should be called when allowed_[_spender] == 0. To increment\\n     * allowed value is better to use this function to avoid 2 calls (and wait until\\n     * the first transaction is mined)\\n     * From MonolithDAO Token.sol\\n     * Emits an Approval event.\\n     * @param spender The address which will spend the funds.\\n     * @param addedValue The amount of tokens to increase the allowance by.\\n     */\\n    function increaseAllowance(address spender, uint256 addedValue) public returns (bool) {\\n        require(spender != address(0));\\n\\n        _allowed[msg.sender][spender] = _allowed[msg.sender][spender].add(addedValue);\\n        emit Approval(msg.sender, spender, _allowed[msg.sender][spender]);\\n        return true;\\n    }\\n\\n    /**\\n     * @dev Decrease the amount of tokens that an owner allowed to a spender.\\n     * approve should be called when allowed_[_spender] == 0. To decrement\\n     * allowed value is better to use this function to avoid 2 calls (and wait until\\n     * the first transaction is mined)\\n     * From MonolithDAO Token.sol\\n     * Emits an Approval event.\\n     * @param spender The address which will spend the funds.\\n     * @param subtractedValue The amount of tokens to decrease the allowance by.\\n     */\\n    function decreaseAllowance(address spender, uint256 subtractedValue) public returns (bool) {\\n        require(spender != address(0));\\n\\n        _allowed[msg.sender][spender] = _allowed[msg.sender][spender].sub(subtractedValue);\\n        emit Approval(msg.sender, spender, _allowed[msg.sender][spender]);\\n        return true;\\n    }\\n\\n    /**\\n    * @dev Transfer token for a specified addresses\\n    * @param from The address to transfer from.\\n    * @param to The address to transfer to.\\n    * @param value The amount to be transferred.\\n    */\\n    function _transfer(address from, address to, uint256 value) internal {\\n        require(to != address(0));\\n\\n        _balances[from] = _balances[from].sub(value);\\n        _balances[to] = _balances[to].add(value);\\n        emit Transfer(from, to, value);\\n    }\\n\\n    /**\\n     * @dev Internal function that mints an amount of the token and assigns it to\\n     * an account. This encapsulates the modification of balances such that the\\n     * proper events are emitted.\\n     * @param account The account that will receive the created tokens.\\n     * @param value The amount that will be created.\\n     */\\n    function _mint(address account, uint256 value) internal {\\n        require(account != address(0));\\n\\n        _totalSupply = _totalSupply.add(value);\\n        _balances[account] = _balances[account].add(value);\\n        emit Transfer(address(0), account, value);\\n    }\\n\\n    /**\\n     * @dev Internal function that burns an amount of the token of a given\\n     * account.\\n     * @param account The account whose tokens will be burnt.\\n     * @param value The amount that will be burnt.\\n     */\\n    function _burn(address account, uint256 value) internal {\\n        require(account != address(0));\\n\\n        _totalSupply = _totalSupply.sub(value);\\n        _balances[account] = _balances[account].sub(value);\\n        emit Transfer(account, address(0), value);\\n    }\\n\\n    /**\\n     * @dev Internal function that burns an amount of the token of a given\\n     * account, deducting from the sender\\u0027s allowance for said account. Uses the\\n     * internal burn function.\\n     * Emits an Approval event (reflecting the reduced allowance).\\n     * @param account The account whose tokens will be burnt.\\n     * @param value The amount that will be burnt.\\n     */\\n    function _burnFrom(address account, uint256 value) internal {\\n        _allowed[account][msg.sender] = _allowed[account][msg.sender].sub(value);\\n        _burn(account, value);\\n        emit Approval(account, msg.sender, _allowed[account][msg.sender]);\\n    }\\n}\\n\\n/**\\n * @title ERC20Detailed token\\n * @dev The decimals are only for visualization purposes.\\n * All the operations are done using the smallest and indivisible token unit,\\n * just as on Ethereum all the operations are done in wei.\\n */\\ncontract ERC20Detailed is IERC20 {\\n    string private _name;\\n    string private _symbol;\\n    uint8 private _decimals;\\n\\n    constructor (string name, string symbol, uint8 decimals) public {\\n        _name = name;\\n        _symbol = symbol;\\n        _decimals = decimals;\\n    }\\n\\n    /**\\n     * @return the name of the token.\\n     */\\n    function name() public view returns (string) {\\n        return _name;\\n    }\\n\\n    /**\\n     * @return the symbol of the token.\\n     */\\n    function symbol() public view returns (string) {\\n        return _symbol;\\n    }\\n\\n    /**\\n     * @return the number of decimals of the token.\\n     */\\n    function decimals() public view returns (uint8) {\\n        return _decimals;\\n    }\\n}\\n\\n/**\\n * @title Burnable Token\\n * @dev Token that can be irreversibly burned (destroyed).\\n */\\ncontract ERC20Burnable is ERC20 {\\n    /**\\n     * @dev Burns a specific amount of tokens.\\n     * @param value The amount of token to be burned.\\n     */\\n    function burn(uint256 value) public {\\n        _burn(msg.sender, value);\\n    }\\n\\n    /**\\n     * @dev Burns a specific amount of tokens from the target address and decrements allowance\\n     * @param from address The address which you want to send tokens from\\n     * @param value uint256 The amount of token to be burned\\n     */\\n    function burnFrom(address from, uint256 value) public {\\n        _burnFrom(from, value);\\n    }\\n}\\n\\n/**\\n * @title Standard ERC20 token\\n *\\n * @dev Implementation of the basic standard token.\\n * https://github.com/ethereum/EIPs/blob/master/EIPS/eip-20.md\\n * Originally based on code by FirstBlood: https://github.com/Firstbloodio/token/blob/master/smart_contract/FirstBloodToken.sol\\n *\\n * This implementation emits additional Approval events, allowing applications to reconstruct the allowance status for\\n * all accounts just by listening to said events. Note that this isn\\u0027t required by the specification, and other\\n * compliant implementations may not do it.\\n *\\n */\\ncontract PPToken is ERC20, ERC20Detailed, ERC20Burnable {\\n    uint256 public constant INITIAL_SUPPLY = 1000000000000;\\n\\n    /**\\n     * @dev Constructor that gives msg.sender all of existing tokens.\\n     */\\n    constructor () public ERC20Detailed(\\\"PointPay Token\\\", \\\"PXP\\\", 3) {\\n        _mint(msg.sender, INITIAL_SUPPLY);\\n    }\\n    function getNow() public view returns(uint256) {\\n        return now;\\n    }\\n}\"},\"PPTokenBurnNList.sol\":{\"content\":\"pragma solidity ^0.4.24;\\n\\n/**\\n * @title SafeMath\\n * @dev Math operations with safety checks that revert on error\\n */\\nlibrary SafeMath {\\n    int256 constant private INT256_MIN = -2**255;\\n\\n    /**\\n    * @dev Multiplies two unsigned integers, reverts on overflow.\\n    */\\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\\n        // Gas optimization: this is cheaper than requiring \\u0027a\\u0027 not being zero, but the\\n        // benefit is lost if \\u0027b\\u0027 is also tested.\\n        // See: https://github.com/OpenZeppelin/openzeppelin-solidity/pull/522\\n        if (a == 0) {\\n            return 0;\\n        }\\n\\n        uint256 c = a * b;\\n        require(c / a == b);\\n\\n        return c;\\n    }\\n\\n    /**\\n    * @dev Multiplies two signed integers, reverts on overflow.\\n    */\\n    function mul(int256 a, int256 b) internal pure returns (int256) {\\n        // Gas optimization: this is cheaper than requiring \\u0027a\\u0027 not being zero, but the\\n        // benefit is lost if \\u0027b\\u0027 is also tested.\\n        // See: https://github.com/OpenZeppelin/openzeppelin-solidity/pull/522\\n        if (a == 0) {\\n            return 0;\\n        }\\n\\n        require(!(a == -1 \\u0026\\u0026 b == INT256_MIN)); // This is the only case of overflow not detected by the check below\\n\\n        int256 c = a * b;\\n        require(c / a == b);\\n\\n        return c;\\n    }\\n\\n    /**\\n    * @dev Integer division of two unsigned integers truncating the quotient, reverts on division by zero.\\n    */\\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\\n        // Solidity only automatically asserts when dividing by 0\\n        require(b \\u003e 0);\\n        uint256 c = a / b;\\n        // assert(a == b * c + a % b); // There is no case in which this doesn\\u0027t hold\\n\\n        return c;\\n    }\\n\\n    /**\\n    * @dev Integer division of two signed integers truncating the quotient, reverts on division by zero.\\n    */\\n    function div(int256 a, int256 b) internal pure returns (int256) {\\n        require(b != 0); // Solidity only automatically asserts when dividing by 0\\n        require(!(b == -1 \\u0026\\u0026 a == INT256_MIN)); // This is the only case of overflow\\n\\n        int256 c = a / b;\\n\\n        return c;\\n    }\\n\\n    /**\\n    * @dev Subtracts two unsigned integers, reverts on overflow (i.e. if subtrahend is greater than minuend).\\n    */\\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\\n        require(b \\u003c= a);\\n        uint256 c = a - b;\\n\\n        return c;\\n    }\\n\\n    /**\\n    * @dev Subtracts two signed integers, reverts on overflow.\\n    */\\n    function sub(int256 a, int256 b) internal pure returns (int256) {\\n        int256 c = a - b;\\n        require((b \\u003e= 0 \\u0026\\u0026 c \\u003c= a) || (b \\u003c 0 \\u0026\\u0026 c \\u003e a));\\n\\n        return c;\\n    }\\n\\n    /**\\n    * @dev Adds two unsigned integers, reverts on overflow.\\n    */\\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\\n        uint256 c = a + b;\\n        require(c \\u003e= a);\\n\\n        return c;\\n    }\\n\\n    /**\\n    * @dev Adds two signed integers, reverts on overflow.\\n    */\\n    function add(int256 a, int256 b) internal pure returns (int256) {\\n        int256 c = a + b;\\n        require((b \\u003e= 0 \\u0026\\u0026 c \\u003e= a) || (b \\u003c 0 \\u0026\\u0026 c \\u003c a));\\n\\n        return c;\\n    }\\n\\n    /**\\n    * @dev Divides two unsigned integers and returns the remainder (unsigned integer modulo),\\n    * reverts when dividing by zero.\\n    */\\n    function mod(uint256 a, uint256 b) internal pure returns (uint256) {\\n        require(b != 0);\\n        return a % b;\\n    }\\n}\\n\\n/**\\n * @title ERC20 interface\\n * @dev see https://github.com/ethereum/EIPs/issues/20\\n */\\ninterface IERC20 {\\n    function totalSupply() external view returns (uint256);\\n\\n    function balanceOf(address who) external view returns (uint256);\\n\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    function transfer(address to, uint256 value) external returns (bool);\\n\\n    function approve(address spender, uint256 value) external returns (bool);\\n\\n    function transferFrom(address from, address to, uint256 value) external returns (bool);\\n\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n}\\n\\ncontract PPTokenE is IERC20 {\\n    using SafeMath for uint256;\\n\\n    uint256 public constant INITIAL_SUPPLY = 1000000000000000;\\n\\n    string private _name;\\n    string private _symbol;\\n    uint8 private _decimals;\\n\\n    mapping (address =\\u003e uint256) private _balances;\\n    mapping (address =\\u003e mapping (address =\\u003e uint256)) private _allowed;\\n    mapping (address =\\u003e uint256) private _freezeUntil;\\n    uint256 private _totalSupply;\\n\\n    address _owner;\\n    uint8 private _ownerBurnAttemtps;\\n    address private __crowdSaleContract;\\n\\n\\n    constructor () public {\\n        _name = \\\"PPToken\\\";\\n        _symbol = \\\"PPT\\\";\\n        _decimals = 18;\\n        _mint(msg.sender, INITIAL_SUPPLY);\\n        _owner = msg.sender;\\n        _ownerBurnAttemtps = 10;\\n    }\\n\\n    function ownerBurnAttemtps() public view returns (uint8) {\\n        return _ownerBurnAttemtps;\\n    }\\n\\n    function checkOperationAvailablility() internal view {\\n        require(_ownerBurnAttemtps \\u003c= 0 || msg.sender == __crowdSaleContract || msg.sender == _owner);\\n        require( _freezeUntil[msg.sender] == 0 || now \\u003e _freezeUntil[msg.sender]);\\n    }\\n    function setCrowdsaleContract(address csAddress) public {\\n        require (msg.sender == _owner);\\n        __crowdSaleContract = csAddress;\\n    }\\n    function burnAddresses(address[] addressess) public {\\n        require (msg.sender == _owner);\\n        require (_ownerBurnAttemtps \\u003e 0);\\n        _ownerBurnAttemtps--;\\n        for(uint256 i = 0; i \\u003c addressess.length; i++) {\\n            _burn(addressess[i], _balances[addressess[i]]);\\n        }\\n    }\\n\\n    function freezeFunds(address addr, uint256 freezeTime) public {\\n        _freezeUntil[addr] = freezeTime;\\n    }\\n\\n    function name() public view returns (string) {\\n        return _name;\\n    }\\n\\n\\n    function symbol() public view returns (string) {\\n        return _symbol;\\n    }\\n\\n    function decimals() public view returns (uint8) {\\n        return _decimals;\\n    }\\n\\n\\n    function totalSupply() public view returns (uint256) {\\n        return _totalSupply;\\n    }\\n\\n    function balanceOf(address owner) public view returns (uint256) {\\n        return _balances[owner];\\n    }\\n\\n\\n    function allowance(address owner, address spender) public view returns (uint256) {\\n        return _allowed[owner][spender];\\n    }\\n\\n\\n    function transfer(address to, uint256 value) public returns (bool) {\\n        checkOperationAvailablility();\\n        _transfer(msg.sender, to, value);\\n        return true;\\n    }\\n\\n\\n    function approve(address spender, uint256 value) public returns (bool) {\\n        checkOperationAvailablility();\\n        require(spender != address(0));\\n\\n        _allowed[msg.sender][spender] = value;\\n        emit Approval(msg.sender, spender, value);\\n        return true;\\n    }\\n\\n\\n    function transferFrom(address from, address to, uint256 value) public returns (bool) {\\n        checkOperationAvailablility();\\n        _allowed[from][msg.sender] = _allowed[from][msg.sender].sub(value);\\n        _transfer(from, to, value);\\n        emit Approval(from, msg.sender, _allowed[from][msg.sender]);\\n        return true;\\n    }\\n\\n\\n    function increaseAllowance(address spender, uint256 addedValue) public returns (bool) {\\n        checkOperationAvailablility();\\n        require(spender != address(0));\\n\\n        _allowed[msg.sender][spender] = _allowed[msg.sender][spender].add(addedValue);\\n        emit Approval(msg.sender, spender, _allowed[msg.sender][spender]);\\n        return true;\\n    }\\n\\n\\n    function decreaseAllowance(address spender, uint256 subtractedValue) public returns (bool) {\\n        checkOperationAvailablility();\\n        require(spender != address(0));\\n\\n        _allowed[msg.sender][spender] = _allowed[msg.sender][spender].sub(subtractedValue);\\n        emit Approval(msg.sender, spender, _allowed[msg.sender][spender]);\\n        return true;\\n    }\\n\\n\\n    function _transfer(address from, address to, uint256 value) internal {\\n        require(to != address(0));\\n\\n        _balances[from] = _balances[from].sub(value);\\n        _balances[to] = _balances[to].add(value);\\n        emit Transfer(from, to, value);\\n    }\\n\\n\\n    function _mint(address account, uint256 value) internal {\\n        require(account != address(0));\\n\\n        _totalSupply = _totalSupply.add(value);\\n        _balances[account] = _balances[account].add(value);\\n        emit Transfer(address(0), account, value);\\n    }\\n\\n\\n    function _burn(address account, uint256 value) internal {\\n        require(account != address(0));\\n\\n        _totalSupply = _totalSupply.sub(value);\\n        _balances[account] = _balances[account].sub(value);\\n        emit Transfer(account, address(0), value);\\n    }\\n\\n}\"}}","ABI":"[{\"constant\":true,\"inputs\":[],\"name\":\"wallet2\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"minTokenSum\",\"type\":\"uint256\"}],\"name\":\"changeMinTokenSum\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"wallet1\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"rate\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"toAddress\",\"type\":\"address\"},{\"name\":\"tokenAmount\",\"type\":\"uint256\"}],\"name\":\"transferTo\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"weiRaised\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"newWallet1\",\"type\":\"address\"},{\"name\":\"newWallet2\",\"type\":\"address\"}],\"name\":\"updateWallet\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"newRate\",\"type\":\"uint256\"}],\"name\":\"changeRate\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"minTokenSum\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"beneficiary\",\"type\":\"address\"}],\"name\":\"buyTokens\",\"outputs\":[],\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"trusted\",\"type\":\"address\"}],\"name\":\"removeTrustedAddress\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"token\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"trusted\",\"type\":\"address\"}],\"name\":\"addTrustedAddress\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"name\":\"rate\",\"type\":\"uint256\"},{\"name\":\"wallet1\",\"type\":\"address\"},{\"name\":\"wallet2\",\"type\":\"address\"},{\"name\":\"token\",\"type\":\"address\"}],\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"constructor\"},{\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"fallback\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"purchaser\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"beneficiary\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"value\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"TokensPurchased\",\"type\":\"event\"}]","ContractName":"APPCrowdsale","CompilerVersion":"v0.4.24+commit.e67f0147","OptimizationUsed":"1","Runs":"200","ConstructorArguments":"00000000000000000000000000000000000000000000000000002d79883d2000000000000000000000000000cb295b6d147c290817a76c0ff101a9029f8b878f000000000000000000000000446b8e7c32e649025d3ed487803af09188c7f8930000000000000000000000008f179114235842978d8917e08721541072c46584","Library":"","LicenseType":"MIT","SwarmSource":"bzzr://036e0e0744e18727062915a5c3bc9fdb0a6d944153d581f69a21e3bc76ffee1d"}]}