{"status":"1","message":"OK","result":[{"SourceCode":"pragma solidity ^0.4.24;\r\n\r\nlibrary SafeMath {\r\n\r\n    /**\r\n    * @dev Multiplies two numbers, throws on overflow.\r\n    */\r\n    function mul(uint256 _a, uint256 _b) internal pure returns (uint256 c) {\r\n        // Gas optimization: this is cheaper than asserting 'a' not being zero, but the\r\n        // benefit is lost if 'b' is also tested.\r\n        // See: https://github.com/OpenZeppelin/openzeppelin-solidity/pull/522\r\n        if (_a == 0) {\r\n            return 0;\r\n        }\r\n\r\n        c = _a * _b;\r\n        assert(c / _a == _b);\r\n        return c;\r\n    }\r\n\r\n    /**\r\n    * @dev Integer division of two numbers, truncating the quotient.\r\n    */\r\n    function div(uint256 _a, uint256 _b) internal pure returns (uint256) {\r\n        // assert(_b > 0); // Solidity automatically throws when dividing by 0\r\n        // uint256 c = _a / _b;\r\n        // assert(_a == _b * c + _a % _b); // There is no case in which this doesn't hold\r\n        return _a / _b;\r\n    }\r\n\r\n    /**\r\n    * @dev Subtracts two numbers, throws on overflow (i.e. if subtrahend is greater than minuend).\r\n    */\r\n    function sub(uint256 _a, uint256 _b) internal pure returns (uint256) {\r\n        assert(_b <= _a);\r\n        return _a - _b;\r\n    }\r\n\r\n    /**\r\n    * @dev Adds two numbers, throws on overflow.\r\n    */\r\n    function add(uint256 _a, uint256 _b) internal pure returns (uint256 c) {\r\n        c = _a + _b;\r\n        assert(c >= _a);\r\n        return c;\r\n    }\r\n}\r\n\r\ncontract ArrayTools {\r\n\r\n    function _combineArray(uint256[] _array) internal pure returns(uint256) {\r\n        uint256 fullAmount;\r\n        for(uint256 i = 0; i < _array.length; i++) {\r\n            require(_array[i] > 0);\r\n            fullAmount += _array[i];\r\n        }\r\n        return fullAmount;\r\n    }\r\n}\r\n\r\ncontract IQDAO {\r\n    function balanceOf(address _owner) public view returns (uint256);\r\n    function approveForOtherContracts(address _sender, address _spender, uint256 _value) external;\r\n    function transfer(address _to, uint256 _value) public returns (bool);\r\n    function transferFrom(address _from, address _to, uint256 _value) public returns (bool);\r\n}\r\n\r\ncontract Ownable {\r\n    address public owner;\r\n\r\n\r\n    event OwnershipRenounced(address indexed previousOwner);\r\n    event OwnershipTransferred(\r\n        address indexed previousOwner,\r\n        address indexed newOwner\r\n    );\r\n\r\n\r\n    /**\r\n     * @dev The Ownable constructor sets the original `owner` of the contract to the sender\r\n     * account.\r\n     */\r\n    constructor() public {\r\n        owner = msg.sender;\r\n    }\r\n\r\n    /**\r\n     * @dev Throws if called by any account other than the owner.\r\n     */\r\n    modifier onlyOwner() {\r\n        require(msg.sender == owner);\r\n        _;\r\n    }\r\n\r\n    /**\r\n     * @dev Allows the current owner to relinquish control of the contract.\r\n     * @notice Renouncing to ownership will leave the contract without an owner.\r\n     * It will not be possible to call the functions with the `onlyOwner`\r\n     * modifier anymore.\r\n     */\r\n    function renounceOwnership() public onlyOwner {\r\n        emit OwnershipRenounced(owner);\r\n        owner = address(0);\r\n    }\r\n\r\n    /**\r\n     * @dev Allows the current owner to transfer control of the contract to a newOwner.\r\n     * @param _newOwner The address to transfer ownership to.\r\n     */\r\n    function transferOwnership(address _newOwner) public onlyOwner {\r\n        _transferOwnership(_newOwner);\r\n    }\r\n\r\n    /**\r\n     * @dev Transfers control of the contract to a newOwner.\r\n     * @param _newOwner The address to transfer ownership to.\r\n     */\r\n    function _transferOwnership(address _newOwner) internal {\r\n        require(_newOwner != address(0));\r\n        emit OwnershipTransferred(owner, _newOwner);\r\n        owner = _newOwner;\r\n    }\r\n}\r\n\r\ncontract WhitelistMigratable is Ownable {\r\n\r\n    mapping(address => bool) public governanceContracts;\r\n\r\n    event GovernanceContractAdded(address addr);\r\n    event GovernanceContractRemoved(address addr);\r\n\r\n    modifier onlyGovernanceContracts() {\r\n        require(governanceContracts[msg.sender]);\r\n        _;\r\n    }\r\n\r\n\r\n    function addAddressToGovernanceContract(address addr) onlyOwner public returns(bool success) {\r\n        if (!governanceContracts[addr]) {\r\n            governanceContracts[addr] = true;\r\n            emit GovernanceContractAdded(addr);\r\n            success = true;\r\n        }\r\n    }\r\n\r\n\r\n    function removeAddressFromGovernanceContract(address addr) onlyOwner public returns(bool success) {\r\n        if (governanceContracts[addr]) {\r\n            governanceContracts[addr] = false;\r\n            emit GovernanceContractRemoved(addr);\r\n            success = true;\r\n        }\r\n    }\r\n}\r\n\r\ncontract SafeStorage is WhitelistMigratable, ArrayTools {\r\n    using SafeMath for uint256;\r\n\r\n    event LockSlotCreated(address indexed holder, uint256 id, uint256 amount);\r\n\r\n    struct LockSlot{\r\n        uint256[] tokens;\r\n        uint256[] periods;\r\n        uint256 paidTokens;\r\n        bool finalized;\r\n    }\r\n\r\n    mapping (address => mapping(uint256 => LockSlot)) internal lockTokenStorage;\r\n\r\n    mapping (address => uint256[]) private lockSlotIdList;\r\n\r\n    address[] internal holdersList;\r\n\r\n    address[] internal totalSlot;\r\n\r\n    uint256 public maximumDurationToFreeze;\r\n\r\n    uint256 public lostTime;\r\n\r\n    uint256 public totalLockedTokens;\r\n\r\n    IQDAO public token_;\r\n\r\n    /**\r\n    * @dev Create slot for holder\r\n    * Usage of this method only owner\r\n    * @param _holder address The address which you want to lock tokens\r\n    * @param _tokens uint256[]  the amount of tokens to be locked\r\n    * @param _periods uint256[] the amount of periods to be locked\r\n    */\r\n    function createLockSlot(address _holder, uint256[] _tokens, uint256[] _periods) public onlyGovernanceContracts {\r\n\r\n        require(_holder != address(0), \"LockStorage cannot be created for this address\");\r\n        require (_tokens.length == _periods.length && _tokens.length > 0);\r\n        require(_combineArray(_periods) <= maximumDurationToFreeze, \"Incorrect time, should be less 3 years\");\r\n        require(_combineArray(_tokens) > 0, \"Incorrect amount\");\r\n\r\n        uint256 fullAmount = _combineArray(_tokens);\r\n        uint256 newId = totalSlot.length;\r\n\r\n        token_.approveForOtherContracts(msg.sender, this, fullAmount);\r\n        token_.transferFrom(msg.sender, this, fullAmount);\r\n\r\n        lockTokenStorage[_holder][newId] = _createLockSlot(_tokens, _periods);\r\n\r\n        totalSlot.push(_holder);\r\n        totalLockedTokens = totalLockedTokens.add(fullAmount);\r\n\r\n        if(lockSlotIdList[_holder].length == 0) {\r\n            holdersList.push(_holder);\r\n        }\r\n\r\n        lockSlotIdList[_holder].push(newId);\r\n\r\n        emit LockSlotCreated(_holder, newId, fullAmount);\r\n    }\r\n\r\n    /**\r\n    * @dev Returned holder's address\r\n    * @param _lockSlotId uint256 unique id lockSlot\r\n    */\r\n    function getAddressToId(uint256 _lockSlotId) public view returns(address) {\r\n        return totalSlot[_lockSlotId];\r\n    }\r\n\r\n    /**\r\n    * @dev Returned all created unique ids\r\n    * @param _holder address The holder's address\r\n    */\r\n    function getAllLockSlotIdsToAddress(address _holder) public view returns(uint256[] _lockSlotIds) {\r\n        return lockSlotIdList[_holder];\r\n    }\r\n\r\n\r\n    function _createLockSlot(uint256[] _lockTokens, uint256[] _lockPeriods) internal view returns(LockSlot memory _lockSlot) {\r\n        _lockPeriods[0] +=now;\r\n\r\n        if (_lockPeriods.length > 1) {\r\n            for(uint256 i = 1; i < _lockPeriods.length; i++) {\r\n                _lockPeriods[i] += _lockPeriods[i-1];\r\n            }\r\n        }\r\n\r\n        _lockSlot = LockSlot({\r\n            tokens: _lockTokens,\r\n            periods: _lockPeriods,\r\n            paidTokens: 0,\r\n            finalized: false\r\n            });\r\n    }\r\n}\r\n\r\ncontract ReleaseLockToken is SafeStorage {\r\n\r\n    event TokensWithdrawed(address indexed sender, uint256 amount, uint256 time);\r\n\r\n    uint256 public withdrawableTokens;\r\n\r\n    /**\r\n    * @dev Withdraw locked tokens\r\n    * Usage of this method only holder this lockSlot's id\r\n    * @param _lockSlotId uint256 unique id lockSlot\r\n    */\r\n    function release(uint256 _lockSlotId) public {\r\n        require(_validateWithdraw(msg.sender, _lockSlotId));\r\n        uint256 tokensForWithdraw = _getAvailableTokens(msg.sender, _lockSlotId);\r\n\r\n        lockTokenStorage[msg.sender][_lockSlotId].paidTokens = lockTokenStorage[msg.sender][_lockSlotId].paidTokens.add(tokensForWithdraw);\r\n        token_.transfer(msg.sender,  tokensForWithdraw);\r\n\r\n        if(_combineArray(lockTokenStorage[msg.sender][_lockSlotId].tokens) == lockTokenStorage[msg.sender][_lockSlotId].paidTokens) {\r\n            _finalizeLock(msg.sender, _lockSlotId);\r\n        }\r\n\r\n        withdrawableTokens = withdrawableTokens.add(tokensForWithdraw);\r\n        totalLockedTokens = totalLockedTokens.sub(tokensForWithdraw);\r\n        emit TokensWithdrawed(msg.sender, tokensForWithdraw, now);\r\n    }\r\n\r\n    /**\r\n    * @dev Returned all withdrawn tokens\r\n    */\r\n    function getWithdrawableTokens() public view returns(uint256) {\r\n        return withdrawableTokens;\r\n    }\r\n\r\n    /**\r\n    * @dev Withdrawn lost tokens\r\n    * Usage of this method only owner\r\n    * @param _lockSlotId uint256 unique id lockSlot\r\n    */\r\n    function withdrawLostToken(uint256 _lockSlotId) public onlyGovernanceContracts {\r\n\r\n        require(now > lostTime.add(\r\n            lockTokenStorage[getAddressToId(_lockSlotId)][_lockSlotId].periods[lockTokenStorage[getAddressToId(_lockSlotId)][_lockSlotId].periods.length-1]),\r\n            \"Tokens are not lost\");\r\n\r\n        uint256 tokensForWithdraw = _getAvailableTokens(getAddressToId(_lockSlotId), _lockSlotId);\r\n        withdrawableTokens = withdrawableTokens.add(tokensForWithdraw);\r\n        totalLockedTokens = totalLockedTokens.sub(tokensForWithdraw);\r\n        lockTokenStorage[getAddressToId(_lockSlotId)][_lockSlotId].paidTokens = _combineArray(lockTokenStorage[getAddressToId(_lockSlotId)][_lockSlotId].tokens);\r\n        _finalizeLock(getAddressToId(_lockSlotId), _lockSlotId);\r\n        token_.transfer( owner,  tokensForWithdraw);\r\n    }\r\n\r\n    /**\r\n    * @dev Returned date and amount to counter\r\n    * @param _lockSlotId uint256 unique id lockSlot\r\n    * @param _i uint256 count number\r\n    */\r\n    function getDateAndReleaseToCounter(uint256 _lockSlotId,\r\n                                        uint256 _i) public view returns(uint256 _nextDate,\r\n                                                                        uint256 _nextRelease) {\r\n\r\n        require( _i < lockTokenStorage[getAddressToId(_lockSlotId)][_lockSlotId].periods.length);\r\n\r\n        _nextRelease = lockTokenStorage[getAddressToId(_lockSlotId)][_lockSlotId].tokens[_i];\r\n        _nextDate = lockTokenStorage[getAddressToId(_lockSlotId)][_lockSlotId].periods[_i];\r\n    }\r\n\r\n    /**\r\n    * @dev Returned nearest date for withdraw\r\n    * @param _lockSlotId uint256 unique id lockSlot\r\n    */\r\n    function getNextDateWithdraw(uint256 _lockSlotId) public view returns(uint256) {\r\n        uint256 nextDate;\r\n\r\n        if(now > lockTokenStorage[getAddressToId(_lockSlotId)][_lockSlotId].periods[lockTokenStorage[getAddressToId(_lockSlotId)][_lockSlotId].periods.length-1]) {\r\n            nextDate = 0;\r\n        }\r\n        else {\r\n            for(uint256 i = 0; i < lockTokenStorage[getAddressToId(_lockSlotId)][_lockSlotId].periods.length; i++) {\r\n                if(now < lockTokenStorage[getAddressToId(_lockSlotId)][_lockSlotId].periods[i]) {\r\n                    nextDate = lockTokenStorage[getAddressToId(_lockSlotId)][_lockSlotId].periods[i];\r\n                    break;\r\n                }\r\n            }\r\n        }\r\n        return nextDate;\r\n    }\r\n\r\n    function _finalizeLock(address _who, uint256 _id) internal {\r\n        lockTokenStorage[_who][_id].finalized = true;\r\n    }\r\n\r\n    function _validateWithdraw(address _who, uint256 _id) internal view returns(bool) {\r\n        require(!lockTokenStorage[_who][_id].finalized, \"Full withdraw already exists\");\r\n        require(_combineArray(lockTokenStorage[_who][_id].tokens) > 0 , \"This lockStorage is not exists\");\r\n        require(now > lockTokenStorage[_who][_id].periods[0], \"Unlock time has not come\");\r\n\r\n        return true;\r\n    }\r\n\r\n    function _getAvailableTokens(address _who, uint256 _id) internal view returns(uint256) {\r\n        uint256 tokensForWithdraw;\r\n\r\n        uint256 paidTokens = lockTokenStorage[_who][_id].paidTokens;\r\n\r\n        for(uint256 i = lockTokenStorage[_who][_id].periods.length-1; i >= 0; i--) {\r\n            if(now >= lockTokenStorage[_who][_id].periods[i]) {\r\n\r\n                for(uint256 y = 0; y < i+1; y++) {\r\n                    tokensForWithdraw += lockTokenStorage[_who][_id].tokens[y];\r\n                }\r\n                tokensForWithdraw -= paidTokens;\r\n                break;\r\n            }\r\n        }\r\n        return tokensForWithdraw;\r\n    }\r\n}\r\n\r\ncontract TimeLockedTokenStorage is ReleaseLockToken {\r\n\r\n    constructor(address _token) public {\r\n        token_ = IQDAO(_token);\r\n        lostTime = 7862400; // 3 months\r\n        maximumDurationToFreeze = 94694400; // 3 years\r\n    }\r\n\r\n\r\n    /**\r\n    * @dev Returned available tokens for withdraw\r\n    * @param _lockSlotId uint256 unique id lockSlot\r\n    */\r\n    function getAvailableTokens(uint256 _lockSlotId) public view returns(uint256) {\r\n        if (now < uint256(lockTokenStorage[getAddressToId(_lockSlotId)][_lockSlotId].periods[0])) {\r\n            return 0;\r\n        } else {\r\n            return _getAvailableTokens(getAddressToId(_lockSlotId), _lockSlotId);\r\n        }\r\n    }\r\n\r\n    /**\r\n    * @dev Returned total holders\r\n    */\r\n    function getHoldersQuantity() public view returns(uint256) {\r\n        return holdersList.length;\r\n    }\r\n\r\n    /**\r\n   * @dev Returned total locked slots\r\n   */\r\n    function getSlotsQuantity() public view returns(uint256) {\r\n        return totalSlot.length;\r\n    }\r\n    /**\r\n     * @dev Returned total locked tokens\r\n    */\r\n    function getTotalLockedTokens() public view returns(uint256) {\r\n        return totalLockedTokens;\r\n    }\r\n    /**\r\n    * @dev Returned params for lockSlot\r\n    * @param _lockSlotId uint256 unique id lockSlot\r\n    */\r\n    function getLock(uint256 _lockSlotId) public view returns(  uint256 _amountTokens,\r\n                                                                uint256[] _periods,\r\n                                                                uint256[] _tokens,\r\n                                                                uint256 _paidTokens,\r\n                                                                bool _finalize) {\r\n\r\n        _amountTokens = _combineArray(lockTokenStorage[getAddressToId(_lockSlotId)][_lockSlotId].tokens);\r\n        _periods = lockTokenStorage[getAddressToId(_lockSlotId)][_lockSlotId].periods;\r\n        _tokens = lockTokenStorage[getAddressToId(_lockSlotId)][_lockSlotId].tokens;\r\n        _paidTokens = lockTokenStorage[getAddressToId(_lockSlotId)][_lockSlotId].paidTokens;\r\n        _finalize = lockTokenStorage[getAddressToId(_lockSlotId)][_lockSlotId].finalized;\r\n    }\r\n}","ABI":"[{\"constant\":false,\"inputs\":[{\"name\":\"_holder\",\"type\":\"address\"},{\"name\":\"_tokens\",\"type\":\"uint256[]\"},{\"name\":\"_periods\",\"type\":\"uint256[]\"}],\"name\":\"createLockSlot\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_lockSlotId\",\"type\":\"uint256\"}],\"name\":\"getAddressToId\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"getHoldersQuantity\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_lockSlotId\",\"type\":\"uint256\"}],\"name\":\"release\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"getSlotsQuantity\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_lockSlotId\",\"type\":\"uint256\"},{\"name\":\"_i\",\"type\":\"uint256\"}],\"name\":\"getDateAndReleaseToCounter\",\"outputs\":[{\"name\":\"_nextDate\",\"type\":\"uint256\"},{\"name\":\"_nextRelease\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"address\"}],\"name\":\"governanceContracts\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"lostTime\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"withdrawableTokens\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"addr\",\"type\":\"address\"}],\"name\":\"addAddressToGovernanceContract\",\"outputs\":[{\"name\":\"success\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_holder\",\"type\":\"address\"}],\"name\":\"getAllLockSlotIdsToAddress\",\"outputs\":[{\"name\":\"_lockSlotIds\",\"type\":\"uint256[]\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_lockSlotId\",\"type\":\"uint256\"}],\"name\":\"getAvailableTokens\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_lockSlotId\",\"type\":\"uint256\"}],\"name\":\"withdrawLostToken\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"getTotalLockedTokens\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"token_\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_lockSlotId\",\"type\":\"uint256\"}],\"name\":\"getLock\",\"outputs\":[{\"name\":\"_amountTokens\",\"type\":\"uint256\"},{\"name\":\"_periods\",\"type\":\"uint256[]\"},{\"name\":\"_tokens\",\"type\":\"uint256[]\"},{\"name\":\"_paidTokens\",\"type\":\"uint256\"},{\"name\":\"_finalize\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"maximumDurationToFreeze\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"getWithdrawableTokens\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"totalLockedTokens\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"addr\",\"type\":\"address\"}],\"name\":\"removeAddressFromGovernanceContract\",\"outputs\":[{\"name\":\"success\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_lockSlotId\",\"type\":\"uint256\"}],\"name\":\"getNextDateWithdraw\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"name\":\"_token\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"sender\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"amount\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"time\",\"type\":\"uint256\"}],\"name\":\"TokensWithdrawed\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"holder\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"id\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"LockSlotCreated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"addr\",\"type\":\"address\"}],\"name\":\"GovernanceContractAdded\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"addr\",\"type\":\"address\"}],\"name\":\"GovernanceContractRemoved\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"previousOwner\",\"type\":\"address\"}],\"name\":\"OwnershipRenounced\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"}]","ContractName":"TimeLockedTokenStorage","CompilerVersion":"v0.4.24+commit.e67f0147","OptimizationUsed":"0","Runs":"200","ConstructorArguments":"0000000000000000000000003166c570935a7d8554c8f4ea792ff965d2efe1f2","Library":"","LicenseType":"MIT","SwarmSource":"bzzr://54ab124f10098c8562a538676c8eeaf902bedb037d2e7ad048a5a1364a048f33"}]}