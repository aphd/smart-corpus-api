{"status":"1","message":"OK","result":[{"SourceCode":"/**\r\n * SEED Platform Generator FPDeployer\r\n */\r\n\r\npragma solidity ^0.5.2;\r\n\r\n\r\n/**\r\n * @dev Wrappers over Solidity's arithmetic operations with added overflow\r\n * checks.\r\n *\r\n * Arithmetic operations in Solidity wrap on overflow. This can easily result\r\n * in bugs, because programmers usually assume that an overflow raises an\r\n * error, which is the standard behavior in high level programming languages.\r\n * `SafeMath` restores this intuition by reverting the transaction when an\r\n * operation overflows.\r\n *\r\n * Using this library instead of the unchecked operations eliminates an entire\r\n * class of bugs, so it's recommended to use it always.\r\n */\r\nlibrary SafeMath {\r\n    /**\r\n     * @dev Returns the addition of two unsigned integers, reverting on\r\n     * overflow.\r\n     *\r\n     * Counterpart to Solidity's `+` operator.\r\n     *\r\n     * Requirements:\r\n     * - Addition cannot overflow.\r\n     */\r\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        uint256 c = a + b;\r\n        require(c >= a, \"SafeMath: addition overflow\");\r\n\r\n        return c;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the subtraction of two unsigned integers, reverting on\r\n     * overflow (when the result is negative).\r\n     *\r\n     * Counterpart to Solidity's `-` operator.\r\n     *\r\n     * Requirements:\r\n     * - Subtraction cannot overflow.\r\n     */\r\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        require(b <= a, \"SafeMath: subtraction overflow\");\r\n        uint256 c = a - b;\r\n\r\n        return c;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the multiplication of two unsigned integers, reverting on\r\n     * overflow.\r\n     *\r\n     * Counterpart to Solidity's `*` operator.\r\n     *\r\n     * Requirements:\r\n     * - Multiplication cannot overflow.\r\n     */\r\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        // Gas optimization: this is cheaper than requiring 'a' not being zero, but the\r\n        // benefit is lost if 'b' is also tested.\r\n        // See: https://github.com/OpenZeppelin/openzeppelin-solidity/pull/522\r\n        if (a == 0) {\r\n            return 0;\r\n        }\r\n\r\n        uint256 c = a * b;\r\n        require(c / a == b, \"SafeMath: multiplication overflow\");\r\n\r\n        return c;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the integer division of two unsigned integers. Reverts on\r\n     * division by zero. The result is rounded towards zero.\r\n     *\r\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\r\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\r\n     * uses an invalid opcode to revert (consuming all remaining gas).\r\n     *\r\n     * Requirements:\r\n     * - The divisor cannot be zero.\r\n     */\r\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        // Solidity only automatically asserts when dividing by 0\r\n        require(b > 0, \"SafeMath: division by zero\");\r\n        uint256 c = a / b;\r\n        // assert(a == b * c + a % b); // There is no case in which this doesn't hold\r\n\r\n        return c;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\r\n     * Reverts when dividing by zero.\r\n     *\r\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\r\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\r\n     * invalid opcode to revert (consuming all remaining gas).\r\n     *\r\n     * Requirements:\r\n     * - The divisor cannot be zero.\r\n     */\r\n    function mod(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        require(b != 0, \"SafeMath: modulo by zero\");\r\n        return a % b;\r\n    }\r\n}\r\n\r\n\r\n/**\r\n * @title Ownable\r\n * @dev The Ownable contract has an owner address, and provides basic authorization control\r\n * functions, this simplifies the implementation of \"user permissions\".\r\n */\r\ncontract Ownable {\r\n    address private _owner;\r\n\r\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\r\n\r\n    /**\r\n     * @dev The Ownable constructor sets the original `owner` of the contract to the sender\r\n     * account.\r\n     */\r\n    constructor () internal {\r\n        _owner = msg.sender;\r\n        emit OwnershipTransferred(address(0), _owner);\r\n    }\r\n\r\n    /**\r\n     * @return the address of the owner.\r\n     */\r\n    function owner() public view returns (address) {\r\n        return _owner;\r\n    }\r\n\r\n    /**\r\n     * @dev Throws if called by any account other than the owner.\r\n     */\r\n    modifier onlyOwner() {\r\n        require(isOwner(), \"Not Owner!\");\r\n        _;\r\n    }\r\n\r\n    /**\r\n     * @return true if `msg.sender` is the owner of the contract.\r\n     */\r\n    function isOwner() public view returns (bool) {\r\n        return msg.sender == _owner;\r\n    }\r\n\r\n    /**\r\n     * @dev Allows the current owner to relinquish control of the contract.\r\n     * It will not be possible to call the functions with the `onlyOwner`\r\n     * modifier anymore.\r\n     * @notice Renouncing ownership will leave the contract without an owner,\r\n     * thereby removing any functionality that is only available to the owner.\r\n     */\r\n    function renounceOwnership() public onlyOwner {\r\n        emit OwnershipTransferred(_owner, address(0));\r\n        _owner = address(0);\r\n    }\r\n\r\n    /**\r\n     * @dev Allows the current owner to transfer control of the contract to a newOwner.\r\n     * @param newOwner The address to transfer ownership to.\r\n     */\r\n    function transferOwnership(address newOwner) public onlyOwner {\r\n        _transferOwnership(newOwner);\r\n    }\r\n\r\n    /**\r\n     * @dev Transfers control of the contract to a newOwner.\r\n     * @param newOwner The address to transfer ownership to.\r\n     */\r\n    function _transferOwnership(address newOwner) internal {\r\n        require(newOwner != address(0),\"Address 0 could not be owner\");\r\n        emit OwnershipTransferred(_owner, newOwner);\r\n        _owner = newOwner;\r\n    }\r\n}\r\n\r\n\r\ninterface IAdminTools {\r\n    function setFFPAddresses(address, address) external;\r\n    function setMinterAddress(address) external returns(address);\r\n    function getMinterAddress() external view returns(address);\r\n    function getWalletOnTopAddress() external view returns (address);\r\n    function setWalletOnTopAddress(address) external returns(address);\r\n\r\n    function addWLManagers(address) external;\r\n    function removeWLManagers(address) external;\r\n    function isWLManager(address) external view returns (bool);\r\n    function addWLOperators(address) external;\r\n    function removeWLOperators(address) external;\r\n    function renounceWLManager() external;\r\n    function isWLOperator(address) external view returns (bool);\r\n    function renounceWLOperators() external;\r\n\r\n    function addFundingManagers(address) external;\r\n    function removeFundingManagers(address) external;\r\n    function isFundingManager(address) external view returns (bool);\r\n    function addFundingOperators(address) external;\r\n    function removeFundingOperators(address) external;\r\n    function renounceFundingManager() external;\r\n    function isFundingOperator(address) external view returns (bool);\r\n    function renounceFundingOperators() external;\r\n\r\n    function addFundsUnlockerManagers(address) external;\r\n    function removeFundsUnlockerManagers(address) external;\r\n    function isFundsUnlockerManager(address) external view returns (bool);\r\n    function addFundsUnlockerOperators(address) external;\r\n    function removeFundsUnlockerOperators(address) external;\r\n    function renounceFundsUnlockerManager() external;\r\n    function isFundsUnlockerOperator(address) external view returns (bool);\r\n    function renounceFundsUnlockerOperators() external;\r\n\r\n    function isWhitelisted(address) external view returns(bool);\r\n    function getWLThresholdBalance() external view returns (uint256);\r\n    function getMaxWLAmount(address) external view returns(uint256);\r\n    function getWLLength() external view returns(uint256);\r\n    function setNewThreshold(uint256) external;\r\n    function changeMaxWLAmount(address, uint256) external;\r\n    function addToWhitelist(address, uint256) external;\r\n    function addToWhitelistMassive(address[] calldata, uint256[] calldata) external returns (bool);\r\n    function removeFromWhitelist(address, uint256) external;\r\n}\r\n\r\n\r\n/**\r\n * @dev Interface of the ERC20 standard as defined in the EIP. Does not include\r\n * the optional functions; to access them see `ERC20Detailed`.\r\n */\r\ninterface IERC20 {\r\n    /**\r\n     * @dev Returns the amount of tokens in existence.\r\n     */\r\n    function totalSupply() external view returns (uint256);\r\n\r\n    /**\r\n     * @dev Returns the amount of tokens owned by `account`.\r\n     */\r\n    function balanceOf(address account) external view returns (uint256);\r\n\r\n    /**\r\n     * @dev Moves `amount` tokens from the caller's account to `recipient`.\r\n     *\r\n     * Returns a boolean value indicating whether the operation succeeded.\r\n     *\r\n     * Emits a `Transfer` event.\r\n     */\r\n    function transfer(address recipient, uint256 amount) external returns (bool);\r\n\r\n    /**\r\n     * @dev Returns the remaining number of tokens that `spender` will be\r\n     * allowed to spend on behalf of `owner` through `transferFrom`. This is\r\n     * zero by default.\r\n     *\r\n     * This value changes when `approve` or `transferFrom` are called.\r\n     */\r\n    function allowance(address owner, address spender) external view returns (uint256);\r\n\r\n    /**\r\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\r\n     *\r\n     * Returns a boolean value indicating whether the operation succeeded.\r\n     *\r\n     * > Beware that changing an allowance with this method brings the risk\r\n     * that someone may use both the old and the new allowance by unfortunate\r\n     * transaction ordering. One possible solution to mitigate this race\r\n     * condition is to first reduce the spender's allowance to 0 and set the\r\n     * desired value afterwards:\r\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\r\n     *\r\n     * Emits an `Approval` event.\r\n     */\r\n    function approve(address spender, uint256 amount) external returns (bool);\r\n\r\n    /**\r\n     * @dev Moves `amount` tokens from `sender` to `recipient` using the\r\n     * allowance mechanism. `amount` is then deducted from the caller's\r\n     * allowance.\r\n     *\r\n     * Returns a boolean value indicating whether the operation succeeded.\r\n     *\r\n     * Emits a `Transfer` event.\r\n     */\r\n    function transferFrom(address sender, address recipient, uint256 amount) external returns (bool);\r\n\r\n    /**\r\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\r\n     * another (`to`).\r\n     *\r\n     * Note that `value` may be zero.\r\n     */\r\n    event Transfer(address indexed from, address indexed to, uint256 value);\r\n\r\n    /**\r\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\r\n     * a call to `approve`. `value` is the new allowance.\r\n     */\r\n    event Approval(address indexed owner, address indexed spender, uint256 value);\r\n}\r\n\r\n\r\n/**\r\n * @dev Implementation of the `IERC20` interface.\r\n *\r\n * This implementation is agnostic to the way tokens are created. This means\r\n * that a supply mechanism has to be added in a derived contract using `_mint`.\r\n * For a generic mechanism see `ERC20Mintable`.\r\n *\r\n * *For a detailed writeup see our guide [How to implement supply\r\n * mechanisms](https://forum.zeppelin.solutions/t/how-to-implement-erc20-supply-mechanisms/226).*\r\n *\r\n * We have followed general OpenZeppelin guidelines: functions revert instead\r\n * of returning `false` on failure. This behavior is nonetheless conventional\r\n * and does not conflict with the expectations of ERC20 applications.\r\n *\r\n * Additionally, an `Approval` event is emitted on calls to `transferFrom`.\r\n * This allows applications to reconstruct the allowance for all accounts just\r\n * by listening to said events. Other implementations of the EIP may not emit\r\n * these events, as it isn't required by the specification.\r\n *\r\n * Finally, the non-standard `decreaseAllowance` and `increaseAllowance`\r\n * functions have been added to mitigate the well-known issues around setting\r\n * allowances. See `IERC20.approve`.\r\n */\r\ncontract ERC20 is IERC20 {\r\n    using SafeMath for uint256;\r\n\r\n    mapping (address => uint256) private _balances;\r\n\r\n    mapping (address => mapping (address => uint256)) private _allowances;\r\n\r\n    uint256 private _totalSupply;\r\n\r\n    /**\r\n     * @dev See `IERC20.totalSupply`.\r\n     */\r\n    function totalSupply() public view returns (uint256) {\r\n        return _totalSupply;\r\n    }\r\n\r\n    /**\r\n     * @dev See `IERC20.balanceOf`.\r\n     */\r\n    function balanceOf(address account) public view returns (uint256) {\r\n        return _balances[account];\r\n    }\r\n\r\n    /**\r\n     * @dev See `IERC20.transfer`.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - `recipient` cannot be the zero address.\r\n     * - the caller must have a balance of at least `amount`.\r\n     */\r\n    function transfer(address recipient, uint256 amount) public returns (bool) {\r\n        _transfer(msg.sender, recipient, amount);\r\n        return true;\r\n    }\r\n\r\n    /**\r\n     * @dev See `IERC20.allowance`.\r\n     */\r\n    function allowance(address owner, address spender) public view returns (uint256) {\r\n        return _allowances[owner][spender];\r\n    }\r\n\r\n    /**\r\n     * @dev See `IERC20.approve`.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - `spender` cannot be the zero address.\r\n     */\r\n    function approve(address spender, uint256 value) public returns (bool) {\r\n        _approve(msg.sender, spender, value);\r\n        return true;\r\n    }\r\n\r\n    /**\r\n     * @dev See `IERC20.transferFrom`.\r\n     *\r\n     * Emits an `Approval` event indicating the updated allowance. This is not\r\n     * required by the EIP. See the note at the beginning of `ERC20`;\r\n     *\r\n     * Requirements:\r\n     * - `sender` and `recipient` cannot be the zero address.\r\n     * - `sender` must have a balance of at least `value`.\r\n     * - the caller must have allowance for `sender`'s tokens of at least\r\n     * `amount`.\r\n     */\r\n    function transferFrom(address sender, address recipient, uint256 amount) public returns (bool) {\r\n        _transfer(sender, recipient, amount);\r\n        _approve(sender, msg.sender, _allowances[sender][msg.sender].sub(amount));\r\n        return true;\r\n    }\r\n\r\n    /**\r\n     * @dev Atomically increases the allowance granted to `spender` by the caller.\r\n     *\r\n     * This is an alternative to `approve` that can be used as a mitigation for\r\n     * problems described in `IERC20.approve`.\r\n     *\r\n     * Emits an `Approval` event indicating the updated allowance.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - `spender` cannot be the zero address.\r\n     */\r\n    function increaseAllowance(address spender, uint256 addedValue) public returns (bool) {\r\n        _approve(msg.sender, spender, _allowances[msg.sender][spender].add(addedValue));\r\n        return true;\r\n    }\r\n\r\n    /**\r\n     * @dev Atomically decreases the allowance granted to `spender` by the caller.\r\n     *\r\n     * This is an alternative to `approve` that can be used as a mitigation for\r\n     * problems described in `IERC20.approve`.\r\n     *\r\n     * Emits an `Approval` event indicating the updated allowance.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - `spender` cannot be the zero address.\r\n     * - `spender` must have allowance for the caller of at least\r\n     * `subtractedValue`.\r\n     */\r\n    function decreaseAllowance(address spender, uint256 subtractedValue) public returns (bool) {\r\n        _approve(msg.sender, spender, _allowances[msg.sender][spender].sub(subtractedValue));\r\n        return true;\r\n    }\r\n\r\n    /**\r\n     * @dev Moves tokens `amount` from `sender` to `recipient`.\r\n     *\r\n     * This is internal function is equivalent to `transfer`, and can be used to\r\n     * e.g. implement automatic token fees, slashing mechanisms, etc.\r\n     *\r\n     * Emits a `Transfer` event.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - `sender` cannot be the zero address.\r\n     * - `recipient` cannot be the zero address.\r\n     * - `sender` must have a balance of at least `amount`.\r\n     */\r\n    function _transfer(address sender, address recipient, uint256 amount) internal {\r\n        require(sender != address(0), \"ERC20: transfer from the zero address\");\r\n        require(recipient != address(0), \"ERC20: transfer to the zero address\");\r\n\r\n        _balances[sender] = _balances[sender].sub(amount);\r\n        _balances[recipient] = _balances[recipient].add(amount);\r\n        emit Transfer(sender, recipient, amount);\r\n    }\r\n\r\n    /** @dev Creates `amount` tokens and assigns them to `account`, increasing\r\n     * the total supply.\r\n     *\r\n     * Emits a `Transfer` event with `from` set to the zero address.\r\n     *\r\n     * Requirements\r\n     *\r\n     * - `to` cannot be the zero address.\r\n     */\r\n    function _mint(address account, uint256 amount) internal {\r\n        require(account != address(0), \"ERC20: mint to the zero address\");\r\n\r\n        _totalSupply = _totalSupply.add(amount);\r\n        _balances[account] = _balances[account].add(amount);\r\n        emit Transfer(address(0), account, amount);\r\n    }\r\n\r\n     /**\r\n     * @dev Destoys `amount` tokens from `account`, reducing the\r\n     * total supply.\r\n     *\r\n     * Emits a `Transfer` event with `to` set to the zero address.\r\n     *\r\n     * Requirements\r\n     *\r\n     * - `account` cannot be the zero address.\r\n     * - `account` must have at least `amount` tokens.\r\n     */\r\n    function _burn(address account, uint256 value) internal {\r\n        require(account != address(0), \"ERC20: burn from the zero address\");\r\n\r\n        _totalSupply = _totalSupply.sub(value);\r\n        _balances[account] = _balances[account].sub(value);\r\n        emit Transfer(account, address(0), value);\r\n    }\r\n\r\n    /**\r\n     * @dev Sets `amount` as the allowance of `spender` over the `owner`s tokens.\r\n     *\r\n     * This is internal function is equivalent to `approve`, and can be used to\r\n     * e.g. set automatic allowances for certain subsystems, etc.\r\n     *\r\n     * Emits an `Approval` event.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - `owner` cannot be the zero address.\r\n     * - `spender` cannot be the zero address.\r\n     */\r\n    function _approve(address owner, address spender, uint256 value) internal {\r\n        require(owner != address(0), \"ERC20: approve from the zero address\");\r\n        require(spender != address(0), \"ERC20: approve to the zero address\");\r\n\r\n        _allowances[owner][spender] = value;\r\n        emit Approval(owner, spender, value);\r\n    }\r\n\r\n    /**\r\n     * @dev Destoys `amount` tokens from `account`.`amount` is then deducted\r\n     * from the caller's allowance.\r\n     *\r\n     * See `_burn` and `_approve`.\r\n     */\r\n    function _burnFrom(address account, uint256 amount) internal {\r\n        _burn(account, amount);\r\n        _approve(account, msg.sender, _allowances[account][msg.sender].sub(amount));\r\n    }\r\n}\r\n\r\n\r\ninterface IToken {\r\n    function name() external view returns (string memory);\r\n    function symbol() external view returns (string memory);\r\n    function decimals() external view returns (uint8);\r\n    function paused() external view returns (bool);\r\n    function pause() external;\r\n    function unpause() external;\r\n    function isImportedContract(address) external view returns (bool);\r\n    function getImportedContractRate(address) external view returns (uint256);\r\n    function setImportedContract(address, uint256) external;\r\n    function checkTransferAllowed (address, address, uint256) external view returns (byte);\r\n    function checkTransferFromAllowed (address, address, uint256) external view returns (byte);\r\n    function checkMintAllowed (address, uint256) external pure returns (byte);\r\n    function checkBurnAllowed (address, uint256) external pure returns (byte);\r\n}\r\n\r\n\r\ncontract Token is IToken, ERC20, Ownable {\r\n\r\n    string private _name;\r\n    string private _symbol;\r\n    uint8 private _decimals;\r\n\r\n    IAdminTools private ATContract;\r\n    address private ATAddress;\r\n\r\n    byte private constant STATUS_ALLOWED = 0x11;\r\n    byte private constant STATUS_DISALLOWED = 0x10;\r\n\r\n    bool private _paused;\r\n\r\n    struct contractsFeatures {\r\n        bool permission;\r\n        uint256 tokenRateExchange;\r\n    }\r\n\r\n    mapping(address => contractsFeatures) private contractsToImport;\r\n\r\n    event Paused(address account);\r\n    event Unpaused(address account);\r\n\r\n    constructor(string memory name, string memory symbol, address _ATAddress) public {\r\n        _name = name;\r\n        _symbol = symbol;\r\n        _decimals = 18;\r\n        ATAddress = _ATAddress;\r\n        ATContract = IAdminTools(ATAddress);\r\n        _paused = false;\r\n    }\r\n\r\n    modifier onlyMinterAddress() {\r\n        require(ATContract.getMinterAddress() == msg.sender, \"Address can not mint!\");\r\n        _;\r\n    }\r\n\r\n    /**\r\n     * @dev Modifier to make a function callable only when the contract is not paused.\r\n     */\r\n    modifier whenNotPaused() {\r\n        require(!_paused, \"Token Contract paused...\");\r\n        _;\r\n    }\r\n\r\n    /**\r\n     * @dev Modifier to make a function callable only when the contract is paused.\r\n     */\r\n    modifier whenPaused() {\r\n        require(_paused, \"Token Contract not paused\");\r\n        _;\r\n    }\r\n\r\n    /**\r\n     * @return the name of the token.\r\n     */\r\n    function name() external view returns (string memory) {\r\n        return _name;\r\n    }\r\n\r\n    /**\r\n     * @return the symbol of the token.\r\n     */\r\n    function symbol() external view returns (string memory) {\r\n        return _symbol;\r\n    }\r\n\r\n    /**\r\n     * @return the number of decimals of the token.\r\n     */\r\n    function decimals() external view returns (uint8) {\r\n        return _decimals;\r\n    }\r\n\r\n    /**\r\n     * @return true if the contract is paused, false otherwise.\r\n     */\r\n    function paused() external view returns (bool) {\r\n        return _paused;\r\n    }\r\n\r\n    /**\r\n     * @dev called by the owner to pause, triggers stopped state\r\n     */\r\n    function pause() external onlyOwner whenNotPaused {\r\n        _paused = true;\r\n        emit Paused(msg.sender);\r\n    }\r\n\r\n    /**\r\n     * @dev called by the owner to unpause, returns to normal state\r\n     */\r\n    function unpause() external onlyOwner whenPaused {\r\n        _paused = false;\r\n        emit Unpaused(msg.sender);\r\n    }\r\n\r\n    /**\r\n     * @dev check if the contract can be imported to change with this token.\r\n     * @param _contract address of token to be imported\r\n     */\r\n    function isImportedContract(address _contract) external view returns (bool) {\r\n        return contractsToImport[_contract].permission;\r\n    }\r\n\r\n    /**\r\n     * @dev get the exchange rate between token to be imported and this token.\r\n     * @param _contract address of token to be exchange\r\n     */\r\n    function getImportedContractRate(address _contract) external view returns (uint256) {\r\n        return contractsToImport[_contract].tokenRateExchange;\r\n    }\r\n\r\n    /**\r\n     * @dev set the address of the token to be imported and its exchange rate.\r\n     * @param _contract address of token to be imported\r\n     * @param _exchRate exchange rate between token to be imported and this token.\r\n     */\r\n    function setImportedContract(address _contract, uint256 _exchRate) external onlyOwner {\r\n        require(_contract != address(0), \"Address not allowed!\");\r\n        require(_exchRate >= 0, \"Rate exchange not allowed!\");\r\n        contractsToImport[_contract].permission = true;\r\n        contractsToImport[_contract].tokenRateExchange = _exchRate;\r\n    }\r\n\r\n    function transfer(address _to, uint256 _value) public whenNotPaused returns (bool) {\r\n        require(checkTransferAllowed(msg.sender, _to, _value) == STATUS_ALLOWED, \"transfer must be allowed\");\r\n        return ERC20.transfer(_to, _value);\r\n    }\r\n\r\n    function transferFrom(address _from, address _to, uint256 _value) public whenNotPaused returns (bool) {\r\n        require(checkTransferFromAllowed(_from, _to, _value) == STATUS_ALLOWED, \"transfer must be allowed\");\r\n        return ERC20.transferFrom(_from, _to,_value);\r\n    }\r\n\r\n    function mint(address _account, uint256 _amount) public whenNotPaused onlyMinterAddress {\r\n        require(checkMintAllowed(_account, _amount) == STATUS_ALLOWED, \"mint must be allowed\");\r\n        ERC20._mint(_account, _amount);\r\n    }\r\n\r\n    function burn(address _account, uint256 _amount) public whenNotPaused onlyMinterAddress {\r\n        require(checkBurnAllowed(_account, _amount) == STATUS_ALLOWED, \"burn must be allowed\");\r\n        ERC20._burn(_account, _amount);\r\n    }\r\n\r\n    /**\r\n     * @dev check if the SEED sender address could receive new tokens.\r\n     * @param _holder address of the SEED sender\r\n     * @param _amountToAdd amount of tokens to be added to sender balance.\r\n     */\r\n    function okToTransferTokens(address _holder, uint256 _amountToAdd) public view returns (bool){\r\n        uint256 holderBalanceToBe = balanceOf(_holder).add(_amountToAdd);\r\n        bool okToTransfer = ATContract.isWhitelisted(_holder) && holderBalanceToBe <= ATContract.getMaxWLAmount(_holder) ? true :\r\n                          holderBalanceToBe <= ATContract.getWLThresholdBalance() ? true : false;\r\n        return okToTransfer;\r\n    }\r\n\r\n    function checkTransferAllowed (address _sender, address _receiver, uint256 _amount) public view returns (byte) {\r\n        require(_sender != address(0), \"Sender can not be 0!\");\r\n        require(_receiver != address(0), \"Receiver can not be 0!\");\r\n        require(balanceOf(_sender) >= _amount, \"Sender does not have enough tokens!\");\r\n        require(okToTransferTokens(_receiver, _amount), \"Receiver not allowed to perform transfer!\");\r\n        return STATUS_ALLOWED;\r\n    }\r\n\r\n    function checkTransferFromAllowed (address _sender, address _receiver, uint256 _amount) public view returns (byte) {\r\n        require(_sender != address(0), \"Sender can not be 0!\");\r\n        require(_receiver != address(0), \"Receiver can not be 0!\");\r\n        require(balanceOf(_sender) >= _amount, \"Sender does not have enough tokens!\");\r\n        require(okToTransferTokens(_receiver, _amount), \"Receiver not allowed to perform transfer!\");\r\n        return STATUS_ALLOWED;\r\n    }\r\n\r\n    function checkMintAllowed (address, uint256) public pure returns (byte) {\r\n        //require(ATContract.isOperator(_minter), \"Not Minter!\");\r\n        return STATUS_ALLOWED;\r\n    }\r\n\r\n    function checkBurnAllowed (address, uint256) public pure returns (byte) {\r\n        // default\r\n        return STATUS_ALLOWED;\r\n    }\r\n\r\n}\r\n\r\n\r\ninterface IFundingPanel {\r\n    function getFactoryDeployIndex() external view returns(uint);\r\n    function isMemberInserted(address) external view returns(bool);\r\n    function addMemberToSet(address, uint8, string calldata, bytes32) external returns (bool);\r\n    function enableMember(address) external;\r\n    function disableMemberByStaffRetire(address) external;\r\n    function disableMemberByStaffForExit(address) external;\r\n    function disableMemberByMember(address) external;\r\n    function changeMemberData(address, string calldata, bytes32) external;\r\n    function changeTokenExchangeRate(uint256) external;\r\n    function changeTokenExchangeOnTopRate(uint256) external;\r\n    function getOwnerData() external view returns (string memory, bytes32);\r\n    function setOwnerData(string calldata, bytes32) external;\r\n    function getMembersNumber() external view returns (uint);\r\n    function getMemberAddressByIndex(uint8) external view returns (address);\r\n    function getMemberDataByAddress(address _memberWallet) external view returns (bool, uint8, string memory, bytes32, uint256, uint, uint256);\r\n    function setNewSeedMaxSupply(uint256) external returns (uint256);\r\n    function holderSendSeeds(uint256) external;\r\n    function unlockFunds(address, uint256) external;\r\n    function burnTokensForMember(address, uint256) external;\r\n    function importOtherTokens(address, uint256) external;\r\n}\r\n\r\n\r\ninterface IERC20Seed {\r\n    function name() external view returns (string memory);\r\n    function symbol() external view returns (string memory);\r\n    function decimals() external view returns (uint8);\r\n    function totalSupply() external view returns (uint256);\r\n    function balanceOf(address owner) external view returns (uint256);\r\n    function transfer(address to, uint256 value) external returns (bool);\r\n    function approve(address spender, uint256 value) external returns (bool);\r\n    function transferFrom(address from, address to, uint256 value) external returns (bool);\r\n    function allowance(address owner, address spender) external view returns (uint256);\r\n    event Transfer(address indexed from, address indexed to, uint256 value);\r\n    event Approval(address indexed owner, address indexed spender, uint256 value);\r\n}\r\n\r\n\r\ncontract FundingPanel is Ownable, IFundingPanel {\r\n    using SafeMath for uint256;\r\n\r\n    // address private owner;\r\n    string private setDocURL;\r\n    bytes32 private setDocHash;\r\n\r\n    address public seedAddress;\r\n    IERC20Seed private seedToken;\r\n    Token private token;\r\n    address public tokenAddress;\r\n    IAdminTools private ATContract;\r\n    address public ATAddress;\r\n\r\n    uint8 public exchRateDecimals;\r\n    uint256 public exchangeRateOnTop;\r\n    uint256 public exchangeRateSeed;\r\n\r\n    uint public factoryDeployIndex;\r\n\r\n    uint256 public seedMaxSupply;\r\n    uint256 public totalSentSeed;\r\n\r\n    struct infoMember {\r\n        bool isInserted;\r\n        uint8 disabled; //0=enabled, 1=exit, 2=SetOwnerDisabled, 3=memberDisabled\r\n        string memberURL;\r\n        bytes32 memberHash;\r\n        uint256 burnedTokens;\r\n        uint listPointer;\r\n        uint256 memberUnlockedSeeds;\r\n    }\r\n    mapping(address => infoMember) public membersArray; // mapping of members\r\n    address[] public membersList; //array for counting or accessing in a sequencialing way the members\r\n\r\n    event MemberAdded();\r\n    //event MemberRemoved();\r\n    event MemberEnabled(uint pointer);\r\n    event MemberDisabled(uint pointer);\r\n    event MemberDisabledByMember(uint pointer);\r\n    event MemberDataChanged(uint pointer);\r\n    event TokenExchangeRateChanged();\r\n    event TokenExchangeOnTopRateChanged();\r\n    event TokenExchangeDecimalsChanged();\r\n    event OwnerDataChanged();\r\n    event NewSeedMaxSupplyChanged();\r\n    event MintedToken(uint256 amount, uint256 amountOnTop);\r\n    event FundsUnlocked();\r\n    event TokensBurnedForMember(uint pointer);\r\n    event MintedImportedToken(uint256 newTokenAmount);\r\n\r\n    constructor (string memory _setDocURL, bytes32 _setDocHash, uint256 _exchRateSeed, uint256 _exchRateOnTop,\r\n                address _seedTokenAddress, uint256 _seedMaxSupply, address _tokenAddress, address _ATAddress, uint _deployIndex) public {\r\n        setDocURL = _setDocURL;\r\n        setDocHash = _setDocHash;\r\n\r\n        exchangeRateSeed = _exchRateSeed;\r\n        exchangeRateOnTop = _exchRateOnTop;\r\n        exchRateDecimals = 18;\r\n\r\n        factoryDeployIndex = _deployIndex;\r\n\r\n        seedMaxSupply = _seedMaxSupply;\r\n\r\n        tokenAddress = _tokenAddress;\r\n        ATAddress = _ATAddress;\r\n        seedAddress = _seedTokenAddress;\r\n        seedToken = IERC20Seed(seedAddress);\r\n        token = Token(tokenAddress);\r\n        ATContract = IAdminTools(ATAddress);\r\n    }\r\n\r\n\r\n/**************** Modifiers ***********/\r\n\r\n    modifier onlyMemberEnabled() {\r\n        require(membersArray[msg.sender].isInserted && membersArray[msg.sender].disabled==0, \"Member not present or not enabled\");\r\n        _;\r\n    }\r\n\r\n    modifier whitelistedOnly(address holder) {\r\n        require(ATContract.isWhitelisted(holder), \"Investor is not whitelisted!\");\r\n        _;\r\n    }\r\n\r\n    modifier holderEnabledInSeeds(address _holder, uint256 _seedAmountToAdd) {\r\n        uint256 amountInTokens = getTokenExchangeAmount(_seedAmountToAdd);\r\n        uint256 holderBalanceToBe = token.balanceOf(_holder).add(amountInTokens);\r\n        bool okToInvest = ATContract.isWhitelisted(_holder) && holderBalanceToBe <= ATContract.getMaxWLAmount(_holder) ? true :\r\n                          holderBalanceToBe <= ATContract.getWLThresholdBalance() ? true : false;\r\n        require(okToInvest, \"Investor not allowed to perform operations!\");\r\n        _;\r\n    }\r\n\r\n    modifier onlyFundingOperators() {\r\n        require(ATContract.isFundingOperator(msg.sender), \"Not an authorized operator!\");\r\n        _;\r\n    }\r\n\r\n    modifier onlyFundsUnlockerOperators() {\r\n        require(ATContract.isFundsUnlockerOperator(msg.sender), \"Not an authorized operator!\");\r\n        _;\r\n    }\r\n\r\n    /**\r\n     * @dev get Factory Deploy Index\r\n     * @return uint index\r\n     */\r\n    function getFactoryDeployIndex() public view returns(uint) {\r\n        return factoryDeployIndex;\r\n    }\r\n\r\n    /**\r\n     * @dev find if a member is inserted\r\n     * @return bool for success\r\n     */\r\n    function isMemberInserted(address memberWallet) public view returns(bool) {\r\n        return membersArray[memberWallet].isInserted;\r\n    }\r\n\r\n    /**\r\n     * @dev only operator members can add a member\r\n     * @return bool for success\r\n     */\r\n    function addMemberToSet(address memberWallet, uint8 disabled, string calldata memberURL,\r\n                            bytes32 memberHash) external onlyFundingOperators returns (bool) {\r\n        require(!isMemberInserted(memberWallet), \"Member already inserted!\");\r\n        uint memberPlace = membersList.push(memberWallet) - 1;\r\n        infoMember memory tmpStUp = infoMember(true, disabled, memberURL, memberHash, 0, memberPlace, 0);\r\n        membersArray[memberWallet] = tmpStUp;\r\n        emit MemberAdded();\r\n        return true;\r\n    }\r\n\r\n    /**\r\n     * @dev only operator members can delete a member\r\n     * @return bool for success\r\n     */\r\n/*    function deleteMemberFromSet(address memberWallet) public onlyFundingOperators returns (bool) {\r\n        require(isMemberInserted(memberWallet), \"Member to delete not found!\");\r\n        membersArray[memberWallet].isInserted = false;\r\n        uint rowToDelete = membersArray[memberWallet].listPointer;\r\n        address keyToMove = membersList[membersList.length-1];\r\n        membersList[rowToDelete] = keyToMove;\r\n        membersArray[keyToMove].listPointer = rowToDelete;\r\n        membersList.length--;\r\n        emit MemberRemoved();\r\n        return true;\r\n    }*/\r\n\r\n    /**\r\n     * @return get the number of inserted members in the set\r\n     */\r\n    function getMembersNumber() external view returns (uint) {\r\n        return membersList.length;\r\n    }\r\n\r\n    /**\r\n     * @dev only operator memebers can enable a member\r\n     */\r\n    function enableMember(address _memberAddress) external onlyFundingOperators {\r\n        require(membersArray[_memberAddress].isInserted, \"Member not present\");\r\n        membersArray[_memberAddress].disabled = 0;\r\n        emit MemberEnabled(membersArray[_memberAddress].listPointer);\r\n    }\r\n\r\n    /**\r\n     * @dev operator members can disable an already inserted member\r\n     */\r\n    function disableMemberByStaffRetire(address _memberAddress) external onlyFundingOperators {\r\n        require(membersArray[_memberAddress].isInserted, \"Member not present\");\r\n        membersArray[_memberAddress].disabled = 2;\r\n        emit MemberDisabled(membersArray[_memberAddress].listPointer);\r\n    }\r\n\r\n    /**\r\n     * @dev operator members can disable an already inserted member\r\n     */\r\n    function disableMemberByStaffForExit(address _memberAddress) external onlyFundingOperators {\r\n        require(membersArray[_memberAddress].isInserted, \"Member not present\");\r\n        membersArray[_memberAddress].disabled = 1;\r\n        emit MemberDisabled(membersArray[_memberAddress].listPointer);\r\n    }\r\n\r\n    /**\r\n     * @dev member can disable itself if already inserted and enabled\r\n     */\r\n    function disableMemberByMember(address _memberAddress) external onlyMemberEnabled {\r\n        membersArray[_memberAddress].disabled = 3;\r\n        emit MemberDisabledByMember(membersArray[_memberAddress].listPointer);\r\n    }\r\n\r\n    /**\r\n     * @dev operator members can change URL and hash of an already inserted member\r\n     */\r\n    function changeMemberData(address _memberAddress, string calldata newURL, bytes32 newHash) external onlyFundingOperators {\r\n        require(membersArray[_memberAddress].isInserted, \"Member not present\");\r\n        membersArray[_memberAddress].memberURL = newURL;\r\n        membersArray[_memberAddress].memberHash = newHash;\r\n        emit MemberDataChanged(membersArray[_memberAddress].listPointer);\r\n    }\r\n\r\n    /**\r\n     * @dev operator members can change the rate exchange of the set\r\n     */\r\n    function changeTokenExchangeRate(uint256 newExchRate) external onlyFundingOperators {\r\n        require(newExchRate > 0, \"Wrong exchange rate!\");\r\n        exchangeRateSeed = newExchRate;\r\n        emit TokenExchangeRateChanged();\r\n    }\r\n\r\n    /**\r\n     * @dev operator members can change the rate exchange on top of the set\r\n     */\r\n    function changeTokenExchangeOnTopRate(uint256 newExchRate) external onlyFundingOperators {\r\n        require(newExchRate > 0, \"Wrong exchange rate on top!\");\r\n        exchangeRateOnTop = newExchRate;\r\n        emit TokenExchangeOnTopRateChanged();\r\n    }\r\n\r\n\r\n    /**\r\n     * @dev Shows the amount of tokens the user will receive for amount of Seed token\r\n     * @param _Amount Exchanged seed tokens amount to convert\r\n     * @return The amount of token that will be received\r\n     */\r\n    function getTokenExchangeAmount(uint256 _Amount) internal view returns(uint256) {\r\n        require(_Amount > 0, \"Amount must be greater than 0!\");\r\n        return _Amount.mul(exchangeRateSeed).div(10 ** uint256(exchRateDecimals));\r\n    }\r\n\r\n    /**\r\n     * @dev Shows the amount of token the owner will receive for amount of Seed token\r\n     * @param _Amount Exchanged chong amount to convert\r\n     * @return The amount of set Token that will be received\r\n     */\r\n    function getTokenExchangeAmountOnTop(uint256 _Amount) internal view returns(uint256) {\r\n        require(_Amount > 0, \"Amount must be greater than 0!\");\r\n        return _Amount.mul(exchangeRateOnTop).div(10 ** uint256(exchRateDecimals));\r\n    }\r\n\r\n    /**\r\n     * @return get the set token address\r\n     */\r\n    function getTokenAddress() external view returns (address) {\r\n        return tokenAddress;\r\n    }\r\n\r\n    /**\r\n     * @return get the operator members URL and hash\r\n     */\r\n    function getOwnerData() external view returns (string memory, bytes32) {\r\n        return (setDocURL, setDocHash);\r\n    }\r\n\r\n    /**\r\n     * @dev set the owner URL and hash\r\n     */\r\n    function setOwnerData(string calldata _dataURL, bytes32 _dataHash) external onlyOwner {\r\n        setDocURL = _dataURL;\r\n        setDocHash = _dataHash;\r\n        emit OwnerDataChanged();\r\n    }\r\n\r\n    /**\r\n     * @return get the operator members URL and hash\r\n     */\r\n    function getMemberAddressByIndex(uint8 _index) external view returns (address) {\r\n        return membersList[_index];\r\n    }\r\n\r\n    function getMemberDataByAddress(address _memberWallet) external view returns (bool, uint8, string memory, bytes32, uint256, uint, uint256) {\r\n        require(membersArray[_memberWallet].isInserted, \"Member not inserted\");\r\n        return(membersArray[_memberWallet].isInserted, membersArray[_memberWallet].disabled, membersArray[_memberWallet].memberURL,\r\n                membersArray[_memberWallet].memberHash, membersArray[_memberWallet].burnedTokens,\r\n                membersArray[_memberWallet].listPointer, membersArray[_memberWallet].memberUnlockedSeeds);\r\n    }\r\n\r\n    /**\r\n     * @dev change the max Supply of SEED\r\n     */\r\n    function setNewSeedMaxSupply(uint256 _newMaxSeedSupply) external onlyFundingOperators returns (uint256) {\r\n        seedMaxSupply = _newMaxSeedSupply;\r\n        emit NewSeedMaxSupplyChanged();\r\n        return seedMaxSupply;\r\n    }\r\n\r\n    /**\r\n     * @dev get the number of Seed token inside the contract an mint new tokens forthe holders and the wallet \"On Top\"\r\n     * @notice msg.sender has to approve transfer the seed tokens BEFORE calling this function\r\n     */\r\n    function holderSendSeeds(uint256 _seeds) external holderEnabledInSeeds(msg.sender, _seeds) {\r\n        require(seedToken.balanceOf(address(this)).add(_seeds) <= seedMaxSupply, \"Maximum supply reached!\");\r\n        require(seedToken.balanceOf(msg.sender) >= _seeds, \"Not enough seeds in holder wallet\");\r\n        address walletOnTop = ATContract.getWalletOnTopAddress();\r\n        require(ATContract.isWhitelisted(walletOnTop), \"Owner wallet not whitelisted\");\r\n        seedToken.transferFrom(msg.sender, address(this), _seeds);\r\n        totalSentSeed = totalSentSeed.add(_seeds);\r\n\r\n        //apply conversion seed/set token\r\n        uint256 amount = getTokenExchangeAmount(_seeds);\r\n        token.mint(msg.sender, amount);\r\n\r\n        uint256 amountOnTop = getTokenExchangeAmountOnTop(_seeds);\r\n        if (amountOnTop > 0)\r\n            token.mint(walletOnTop, amountOnTop);\r\n        emit MintedToken(amount, amountOnTop);\r\n    }\r\n\r\n    /**\r\n     * @dev Funds unlock by operator members\r\n     */\r\n    function unlockFunds(address memberWallet, uint256 amount) external onlyFundsUnlockerOperators {\r\n         require(seedToken.balanceOf(address(this)) >= amount, \"Not enough seeds to unlock!\");\r\n         require(membersArray[memberWallet].isInserted && membersArray[memberWallet].disabled==0, \"Member not present or not enabled\");\r\n         seedToken.transfer(memberWallet, amount);\r\n         membersArray[memberWallet].memberUnlockedSeeds = membersArray[memberWallet].memberUnlockedSeeds.add(amount);\r\n         emit FundsUnlocked();\r\n    }\r\n\r\n    /**\r\n     * @dev Burn tokens for members\r\n     */\r\n    function burnTokensForMember(address memberWallet, uint256 amount) external {\r\n         require(token.balanceOf(msg.sender) >= amount, \"Not enough tokens to burn!\");\r\n         require(membersArray[memberWallet].isInserted && membersArray[memberWallet].disabled==0, \"Member not present or not enabled\");\r\n         membersArray[memberWallet].burnedTokens = membersArray[memberWallet].burnedTokens.add(amount);\r\n         token.burn(msg.sender, amount);\r\n         emit TokensBurnedForMember(membersArray[memberWallet].listPointer);\r\n    }\r\n\r\n    /**\r\n     * @dev Import old tokens and mints the amount of this new token\r\n     * @param _tokenAddress Token address to convert in this tokens\r\n     * @param _tokenAmount Amount of old tokens to convert\r\n     */\r\n    function importOtherTokens(address _tokenAddress, uint256 _tokenAmount) external onlyOwner {\r\n        require(token.isImportedContract(_tokenAddress), \"Address not allowed!\");\r\n        require(token.getImportedContractRate(_tokenAddress) >= 0, \"Rate exchange not allowed!\");\r\n        require(ATContract.isWhitelisted(msg.sender), \"Wallet not whitelisted\");\r\n        uint256 newTokenAmount = _tokenAmount.mul(token.getImportedContractRate(_tokenAddress));\r\n        uint256 holderBalanceToBe = token.balanceOf(msg.sender).add(newTokenAmount);\r\n        bool okToInvest = ATContract.isWhitelisted(msg.sender) && holderBalanceToBe <= ATContract.getMaxWLAmount(msg.sender) ? true :\r\n                          holderBalanceToBe <= ATContract.getWLThresholdBalance() ? true : false;\r\n        require(okToInvest, \"Wallet Threshold too low\");\r\n        token.mint(msg.sender, newTokenAmount);\r\n        emit MintedImportedToken(newTokenAmount);\r\n    }\r\n}\r\n\r\n\r\ninterface IFPDeployer {\r\n    function newFundingPanel(address, string calldata, bytes32, uint256, uint256,\r\n                            address, uint256, address, address, uint) external returns(address);\r\n    function setFactoryAddress(address) external;\r\n    function getFactoryAddress() external view returns(address);\r\n}\r\n\r\n\r\ncontract FPDeployer is Ownable, IFPDeployer {\r\n    address private fAddress;\r\n\r\n    event FundingPanelDeployed(uint deployedBlock);\r\n\r\n    //constructor() public {}\r\n\r\n    modifier onlyFactory() {\r\n        require(msg.sender == fAddress, \"Address not allowed to create FP!\");\r\n        _;\r\n    }\r\n\r\n    /**\r\n     * @dev Set the factory address for deployment.\r\n     * @param _fAddress The factory address.\r\n     */\r\n    function setFactoryAddress(address _fAddress) external onlyOwner {\r\n        require(block.number < 8850000, \"Time expired!\");\r\n        require(_fAddress != address(0), \"Address not allowed\");\r\n        fAddress = _fAddress;\r\n    }\r\n\r\n    /**\r\n     * @dev Get the factory address for deployment.\r\n     */\r\n    function getFactoryAddress() external view returns(address) {\r\n        return fAddress;\r\n    }\r\n\r\n    /**\r\n     * @dev deployment of a new Funding Panel contract\r\n     * @param _caller address that will take the ownership of the contract\r\n     * @param _setDocURL URL of the document describing the Panel\r\n     * @param _setDocHash hash of the document describing the Panel\r\n     * @param _exchRateSeed exchange rate between SEED tokens received and tokens given to the SEED sender (multiply by 10^_exchRateDecim)\r\n     * @param _exchRateOnTop exchange rate between SEED token received and tokens minted on top (multiply by 10^_exchRateDecim)\r\n     * @param _seedTokenAddress address of SEED token contract\r\n     * @param _seedMaxSupply max supply of SEED tokens accepted by this contract\r\n     * @param _tokenAddress address of the corresponding Token contract\r\n     * @param _ATAddress address of the corresponding AdminTools contract\r\n     * @param newLength number of this contract in the corresponding array in the Factory contract\r\n     * @return address of the deployed Token contract\r\n     */\r\n    function newFundingPanel(address _caller, string calldata _setDocURL, bytes32 _setDocHash, uint256 _exchRateSeed, uint256 _exchRateOnTop,\r\n                address _seedTokenAddress, uint256 _seedMaxSupply, address _tokenAddress, address _ATAddress, uint newLength) external onlyFactory returns(address) {\r\n        require(_caller != address(0), \"Sender Address is zero\");\r\n        FundingPanel c = new FundingPanel(_setDocURL, _setDocHash, _exchRateSeed, _exchRateOnTop,\r\n                                              _seedTokenAddress, _seedMaxSupply, _tokenAddress, _ATAddress, newLength);\r\n        c.transferOwnership(_caller);\r\n        emit FundingPanelDeployed (block.number);\r\n        return address(c);\r\n    }\r\n\r\n}","ABI":"[{\"constant\":false,\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_fAddress\",\"type\":\"address\"}],\"name\":\"setFactoryAddress\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"isOwner\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_caller\",\"type\":\"address\"},{\"name\":\"_setDocURL\",\"type\":\"string\"},{\"name\":\"_setDocHash\",\"type\":\"bytes32\"},{\"name\":\"_exchRateSeed\",\"type\":\"uint256\"},{\"name\":\"_exchRateOnTop\",\"type\":\"uint256\"},{\"name\":\"_seedTokenAddress\",\"type\":\"address\"},{\"name\":\"_seedMaxSupply\",\"type\":\"uint256\"},{\"name\":\"_tokenAddress\",\"type\":\"address\"},{\"name\":\"_ATAddress\",\"type\":\"address\"},{\"name\":\"newLength\",\"type\":\"uint256\"}],\"name\":\"newFundingPanel\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"getFactoryAddress\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"deployedBlock\",\"type\":\"uint256\"}],\"name\":\"FundingPanelDeployed\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"}]","ContractName":"FPDeployer","CompilerVersion":"v0.5.2+commit.1df8f40c","OptimizationUsed":"1","Runs":"200","ConstructorArguments":"","Library":"","LicenseType":"GNU GPLv3","SwarmSource":"bzzr://3f21984d653593df922a0f0fdf1cd8bd3e9790112f609fa07cd644532b66ac41"}]}