{"status":"1","message":"OK","result":[{"SourceCode":"pragma solidity ^0.4.25;\r\n\r\n// File: contracts/UniswapAdaptor.sol\r\n\r\ncontract IMarketplace {\r\n    enum ProductState {\r\n        NotDeployed,                // non-existent or deleted\r\n        Deployed                    // created or redeployed\r\n    }\r\n\r\n    enum Currency {\r\n        DATA,                       // \"token wei\" (10^-18 DATA)\r\n        USD                         // attodollars (10^-18 USD)\r\n    }\r\n\r\n    function getProduct(bytes32 id) public view returns (string name, address owner, address beneficiary, uint pricePerSecond, Currency currency, uint minimumSubscriptionSeconds, ProductState state) {}\r\n    function getSubscription(bytes32 productId, address subscriber) public view returns (bool isValid, uint endTimestamp) {}\r\n    function getPriceInData(uint subscriptionSeconds, uint price, Currency unit) public view returns (uint datacoinAmount) {}\r\n    function buyFor(bytes32 productId, uint subscriptionSeconds, address recipient) public {}\r\n}\r\n\r\ncontract IERC20Token {\r\n    // these functions aren't abstract since the compiler emits automatically generated getter functions as external\r\n    function name() public view returns (string) {}\r\n    function symbol() public view returns (string) {}\r\n    function decimals() public view returns (uint8) {}\r\n    function totalSupply() public view returns (uint256) {}\r\n    function balanceOf(address _owner) public view returns (uint256) { _owner; }\r\n    function allowance(address _owner, address _spender) public view returns (uint256) { _owner; _spender; }\r\n\r\n    function transfer(address _to, uint256 _value) public returns (bool success);\r\n    function transferFrom(address _from, address _to, uint256 _value) public returns (bool success);\r\n    function approve(address _spender, uint256 _value) public returns (bool success);\r\n}\r\n\r\n\r\n//from https://docs.uniswap.io/smart-contract-integration/interface:\r\ncontract IUniswapFactory {\r\n    // Public Variables\r\n    address public exchangeTemplate;\r\n    uint256 public tokenCount;\r\n    // Create Exchange\r\n    function createExchange(address token) external returns (address exchange);\r\n    // Get Exchange and Token Info\r\n    function getExchange(address token) external view returns (address exchange);\r\n    function getToken(address exchange) external view returns (address token);\r\n    function getTokenWithId(uint256 tokenId) external view returns (address token);\r\n    // Never use\r\n    function initializeFactory(address template) external;\r\n}\r\ncontract IUniswapExchange{\r\n    // Address of ERC20 token sold on this exchange\r\n    function tokenAddress() external view returns (address token);\r\n    // Address of Uniswap Factory\r\n    function factoryAddress() external view returns (address factory);\r\n    // Provide Liquidity\r\n    function addLiquidity(uint256 min_liquidity, uint256 max_tokens, uint256 deadline) external payable returns (uint256);\r\n    function removeLiquidity(uint256 amount, uint256 min_eth, uint256 min_tokens, uint256 deadline) external returns (uint256, uint256);\r\n    // Get Prices\r\n    function getEthToTokenInputPrice(uint256 eth_sold) external view returns (uint256 tokens_bought);\r\n    function getEthToTokenOutputPrice(uint256 tokens_bought) external view returns (uint256 eth_sold);\r\n    function getTokenToEthInputPrice(uint256 tokens_sold) external view returns (uint256 eth_bought);\r\n    function getTokenToEthOutputPrice(uint256 eth_bought) external view returns (uint256 tokens_sold);\r\n    // Trade ETH to ERC20\r\n    function ethToTokenSwapInput(uint256 min_tokens, uint256 deadline) external payable returns (uint256  tokens_bought);\r\n    function ethToTokenTransferInput(uint256 min_tokens, uint256 deadline, address recipient) external payable returns (uint256  tokens_bought);\r\n    function ethToTokenSwapOutput(uint256 tokens_bought, uint256 deadline) external payable returns (uint256  eth_sold);\r\n    function ethToTokenTransferOutput(uint256 tokens_bought, uint256 deadline, address recipient) external payable returns (uint256  eth_sold);\r\n    // Trade ERC20 to ETH\r\n    function tokenToEthSwapInput(uint256 tokens_sold, uint256 min_eth, uint256 deadline) external returns (uint256  eth_bought);\r\n    function tokenToEthTransferInput(uint256 tokens_sold, uint256 min_tokens, uint256 deadline, address recipient) external returns (uint256  eth_bought);\r\n    function tokenToEthSwapOutput(uint256 eth_bought, uint256 max_tokens, uint256 deadline) external returns (uint256  tokens_sold);\r\n    function tokenToEthTransferOutput(uint256 eth_bought, uint256 max_tokens, uint256 deadline, address recipient) external returns (uint256  tokens_sold);\r\n    // Trade ERC20 to ERC20\r\n    function tokenToTokenSwapInput(uint256 tokens_sold, uint256 min_tokens_bought, uint256 min_eth_bought, uint256 deadline, address token_addr) external returns (uint256  tokens_bought);\r\n    function tokenToTokenTransferInput(uint256 tokens_sold, uint256 min_tokens_bought, uint256 min_eth_bought, uint256 deadline, address recipient, address token_addr) external returns (uint256  tokens_bought);\r\n    function tokenToTokenSwapOutput(uint256 tokens_bought, uint256 max_tokens_sold, uint256 max_eth_sold, uint256 deadline, address token_addr) external returns (uint256  tokens_sold);\r\n    function tokenToTokenTransferOutput(uint256 tokens_bought, uint256 max_tokens_sold, uint256 max_eth_sold, uint256 deadline, address recipient, address token_addr) external returns (uint256  tokens_sold);\r\n    // Trade ERC20 to Custom Pool\r\n    function tokenToExchangeSwapInput(uint256 tokens_sold, uint256 min_tokens_bought, uint256 min_eth_bought, uint256 deadline, address exchange_addr) external returns (uint256  tokens_bought);\r\n    function tokenToExchangeTransferInput(uint256 tokens_sold, uint256 min_tokens_bought, uint256 min_eth_bought, uint256 deadline, address recipient, address exchange_addr) external returns (uint256  tokens_bought);\r\n    function tokenToExchangeSwapOutput(uint256 tokens_bought, uint256 max_tokens_sold, uint256 max_eth_sold, uint256 deadline, address exchange_addr) external returns (uint256  tokens_sold);\r\n    function tokenToExchangeTransferOutput(uint256 tokens_bought, uint256 max_tokens_sold, uint256 max_eth_sold, uint256 deadline, address recipient, address exchange_addr) external returns (uint256  tokens_sold);\r\n    // ERC20 comaptibility for liquidity tokens\r\n    bytes32 public name;\r\n    bytes32 public symbol;\r\n    uint256 public decimals;\r\n    function transfer(address _to, uint256 _value) external returns (bool);\r\n    function transferFrom(address _from, address _to, uint256 value) external returns (bool);\r\n    function approve(address _spender, uint256 _value) external returns (bool);\r\n    function allowance(address _owner, address _spender) external view returns (uint256);\r\n    function balanceOf(address _owner) external view returns (uint256);\r\n    // Never use\r\n    function setup(address token_addr) external;\r\n}\r\n\r\ncontract UniswapAdaptor {\r\n//    using SafeMath for uint256;\r\n\r\n    IMarketplace marketplace;\r\n    IUniswapFactory uniswap_factory;\r\n    IERC20Token datacoin;\r\n    constructor(address _marketplace_address, address _uniswap_factory_address, address _datacoin_address) public {\r\n        marketplace = IMarketplace(_marketplace_address);\r\n        uniswap_factory = IUniswapFactory(_uniswap_factory_address);\r\n        datacoin = IERC20Token(_datacoin_address);\r\n    }\r\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        // Gas optimization: this is cheaper than requiring 'a' not being zero, but the\r\n        // benefit is lost if 'b' is also tested.\r\n        // See: https://github.com/OpenZeppelin/openzeppelin-solidity/pull/522\r\n        if (a == 0) {\r\n            return 0;\r\n        }\r\n\r\n        uint256 c = a * b;\r\n        require(c / a == b);\r\n\r\n        return c;\r\n    }\r\n    /*\r\n        token address 0x0 means ETH\r\n    */\r\n    \r\n    //returns the amount to_tokens that would be received from an input_amount of from_tokens\r\n    function getConversionRateInput(address from_token, address to_token, uint input_amount) public view returns (uint){\r\n        require(from_token != to_token, \"must specify different tokens \");\r\n        uint eth_amount;\r\n        if(from_token == 0x0){\r\n            eth_amount = input_amount;\r\n        }\r\n        else{\r\n            address from_token_exchange = uniswap_factory.getExchange(from_token);\r\n            require(from_token_exchange != 0x0, \"couldnt find exchange for from_token\");\r\n            IUniswapExchange exfrom = IUniswapExchange(from_token_exchange);\r\n            eth_amount = exfrom.getTokenToEthInputPrice(input_amount);\r\n        }\r\n        if(to_token == 0x0){\r\n            return eth_amount;\r\n        }\r\n        else{\r\n            address to_token_exchange = uniswap_factory.getExchange(to_token);\r\n            require(to_token_exchange != 0x0, \"couldnt find exchange for to_token\");\r\n            IUniswapExchange exto = IUniswapExchange(to_token_exchange);\r\n            return exto.getEthToTokenInputPrice(eth_amount);\r\n        }\r\n    }\r\n\r\n    // returns the amount from_tokens needed to buy output_amount of to_tokens\r\n    function getConversionRateOutput(address from_token, address to_token, uint output_amount) public view returns (uint){\r\n        require(from_token != to_token, \"must specify different tokens \");\r\n        uint eth_amount;\r\n        if(to_token == 0x0){\r\n            eth_amount = output_amount;\r\n        }\r\n        else{\r\n            address to_token_exchange = uniswap_factory.getExchange(to_token);\r\n            require(to_token_exchange != 0x0, \"couldnt find exchange for to_token\");\r\n            IUniswapExchange exto = IUniswapExchange(to_token_exchange);\r\n            eth_amount = exto.getEthToTokenOutputPrice(output_amount);\r\n        }\r\n        if(from_token == 0x0){\r\n            return eth_amount;\r\n        }\r\n        else{\r\n            address from_token_exchange = uniswap_factory.getExchange(from_token);\r\n            require(from_token_exchange != 0x0, \"couldnt find exchange for from_token\");\r\n            IUniswapExchange exfrom = IUniswapExchange(from_token_exchange);\r\n            return exfrom.getTokenToEthOutputPrice(eth_amount);\r\n        }\r\n    }\r\n    \r\n\r\n    function _getPricePerSecondData(bytes32 productId) internal view returns (uint) {\r\n        (, address owner,, uint pricePerSecond, IMarketplace.Currency priceCurrency,,) = marketplace.getProduct(productId);\r\n        require(owner != 0x0, \"not found\");\r\n        return marketplace.getPriceInData(1, pricePerSecond, priceCurrency);\r\n    }\r\n    function buyWithERC20(bytes32 productId, uint minSubscriptionSeconds,uint timeWindow, address erc20_address, uint amount) public {\r\n        require(erc20_address != 0x0, \"use buyWithETH instead\");\r\n        uint pricePerSecondData = _getPricePerSecondData(productId);\r\n        if(pricePerSecondData == 0x0){\r\n            //subscription is free. return payment and subscribe\r\n            marketplace.buyFor(productId,minSubscriptionSeconds,msg.sender);\r\n            return;\r\n        }\r\n        IERC20Token fromToken = IERC20Token(erc20_address);\r\n        require(fromToken.transferFrom(msg.sender,address(this),amount), \"must pre approve token transfer\");\r\n        // use the exchange of the received token. this exchange will query its factory to find\r\n        // the DATAcoin exchange in tokenToTokenTransferInput() in _buyWithUniswap()\r\n        address exadd = uniswap_factory.getExchange(erc20_address);\r\n        require(exadd != 0x0, \"couldnt find exchange for exchanged token\");\r\n        require(fromToken.approve(exadd, 0), \"approval failed\");\r\n        require(fromToken.approve(exadd, amount), \"approval failed\");\r\n        _buyWithUniswap(exadd, productId, minSubscriptionSeconds, timeWindow, pricePerSecondData, amount, erc20_address);\r\n    }\r\n\r\n    function buyWithETH(bytes32 productId, uint minSubscriptionSeconds,uint timeWindow) public payable{\r\n        uint pricePerSecondData = _getPricePerSecondData(productId);\r\n        if(pricePerSecondData == 0x0){\r\n            //subscription is free. return payment and subscribe\r\n            if(msg.value > 0x0){\r\n                msg.sender.transfer(msg.value);\r\n            }\r\n            marketplace.buyFor(productId,minSubscriptionSeconds,msg.sender);\r\n            return;\r\n        }\r\n        address exadd = uniswap_factory.getExchange(address(datacoin));\r\n        require(exadd != 0x0, \"couldnt find exchange for DATA coin\");\r\n        _buyWithUniswap(exadd, productId, minSubscriptionSeconds, timeWindow, pricePerSecondData, msg.value,0x0);\r\n    }\r\n    /**\r\n        from_token = 0x0 means ETH\r\n     */\r\n    function _buyWithUniswap(address exadd, bytes32 productId, uint minSubscriptionSeconds,uint timeWindow, uint pricePerSecondData,uint amount,address from_token) internal{\r\n        uint price = mul(pricePerSecondData,minSubscriptionSeconds);\r\n        IUniswapExchange ex = IUniswapExchange(exadd);\r\n        uint256 datacoin_before_transfer = datacoin.balanceOf(address(this));\r\n        // TransferInput should revert if it cant get at least 'price' amount of DATAcoin \r\n        uint256 received_datacoin;\r\n        if(from_token == 0x0){\r\n            received_datacoin = ex.ethToTokenTransferInput.value(amount)(price,now + timeWindow, address(this));\r\n        }\r\n        else{\r\n            received_datacoin = ex.tokenToTokenTransferInput(amount, price, 1, now + timeWindow, address(this), address(datacoin));\r\n        }\r\n        require(datacoin.balanceOf(address(this)) - datacoin_before_transfer >= received_datacoin && received_datacoin >= price, \"not enough datacoin received\");\r\n        require(datacoin.approve(address(marketplace),0),\"approval failed\");\r\n        require(datacoin.approve(address(marketplace),received_datacoin),\"approval failed\");\r\n        marketplace.buyFor(productId,received_datacoin / pricePerSecondData,msg.sender);\r\n    }\r\n}","ABI":"[{\"constant\":false,\"inputs\":[{\"name\":\"productId\",\"type\":\"bytes32\"},{\"name\":\"minSubscriptionSeconds\",\"type\":\"uint256\"},{\"name\":\"timeWindow\",\"type\":\"uint256\"}],\"name\":\"buyWithETH\",\"outputs\":[],\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"from_token\",\"type\":\"address\"},{\"name\":\"to_token\",\"type\":\"address\"},{\"name\":\"output_amount\",\"type\":\"uint256\"}],\"name\":\"getConversionRateOutput\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"from_token\",\"type\":\"address\"},{\"name\":\"to_token\",\"type\":\"address\"},{\"name\":\"input_amount\",\"type\":\"uint256\"}],\"name\":\"getConversionRateInput\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"productId\",\"type\":\"bytes32\"},{\"name\":\"minSubscriptionSeconds\",\"type\":\"uint256\"},{\"name\":\"timeWindow\",\"type\":\"uint256\"},{\"name\":\"erc20_address\",\"type\":\"address\"},{\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"buyWithERC20\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"name\":\"_marketplace_address\",\"type\":\"address\"},{\"name\":\"_uniswap_factory_address\",\"type\":\"address\"},{\"name\":\"_datacoin_address\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"}]","ContractName":"UniswapAdaptor","CompilerVersion":"v0.4.25+commit.59dbf8f1","OptimizationUsed":"1","Runs":"200","ConstructorArguments":"000000000000000000000000a756c844383d5eb88bc008820cb6c3e2b2b9a8db000000000000000000000000c0a47dfe034b400b47bdad5fecda2621de6c4d950000000000000000000000000cf0ee63788a0849fe5297f3407f701e122cc023","Library":"","LicenseType":"GNU LGPLv3","SwarmSource":"bzzr://d044e8bc212efaae78140a6a7b361e7b81de699984e743190e3e2976693b5c41"}]}