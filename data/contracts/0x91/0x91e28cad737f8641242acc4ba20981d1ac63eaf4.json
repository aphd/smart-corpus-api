{"status":"1","message":"OK","result":[{"SourceCode":"/**\r\n * SEED Platform Generator ATDeployer\r\n */\r\n\r\npragma solidity ^0.5.2;\r\n\r\n\r\n/**\r\n * @dev Wrappers over Solidity's arithmetic operations with added overflow\r\n * checks.\r\n *\r\n * Arithmetic operations in Solidity wrap on overflow. This can easily result\r\n * in bugs, because programmers usually assume that an overflow raises an\r\n * error, which is the standard behavior in high level programming languages.\r\n * `SafeMath` restores this intuition by reverting the transaction when an\r\n * operation overflows.\r\n *\r\n * Using this library instead of the unchecked operations eliminates an entire\r\n * class of bugs, so it's recommended to use it always.\r\n */\r\nlibrary SafeMath {\r\n    /**\r\n     * @dev Returns the addition of two unsigned integers, reverting on\r\n     * overflow.\r\n     *\r\n     * Counterpart to Solidity's `+` operator.\r\n     *\r\n     * Requirements:\r\n     * - Addition cannot overflow.\r\n     */\r\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        uint256 c = a + b;\r\n        require(c >= a, \"SafeMath: addition overflow\");\r\n\r\n        return c;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the subtraction of two unsigned integers, reverting on\r\n     * overflow (when the result is negative).\r\n     *\r\n     * Counterpart to Solidity's `-` operator.\r\n     *\r\n     * Requirements:\r\n     * - Subtraction cannot overflow.\r\n     */\r\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        require(b <= a, \"SafeMath: subtraction overflow\");\r\n        uint256 c = a - b;\r\n\r\n        return c;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the multiplication of two unsigned integers, reverting on\r\n     * overflow.\r\n     *\r\n     * Counterpart to Solidity's `*` operator.\r\n     *\r\n     * Requirements:\r\n     * - Multiplication cannot overflow.\r\n     */\r\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        // Gas optimization: this is cheaper than requiring 'a' not being zero, but the\r\n        // benefit is lost if 'b' is also tested.\r\n        // See: https://github.com/OpenZeppelin/openzeppelin-solidity/pull/522\r\n        if (a == 0) {\r\n            return 0;\r\n        }\r\n\r\n        uint256 c = a * b;\r\n        require(c / a == b, \"SafeMath: multiplication overflow\");\r\n\r\n        return c;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the integer division of two unsigned integers. Reverts on\r\n     * division by zero. The result is rounded towards zero.\r\n     *\r\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\r\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\r\n     * uses an invalid opcode to revert (consuming all remaining gas).\r\n     *\r\n     * Requirements:\r\n     * - The divisor cannot be zero.\r\n     */\r\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        // Solidity only automatically asserts when dividing by 0\r\n        require(b > 0, \"SafeMath: division by zero\");\r\n        uint256 c = a / b;\r\n        // assert(a == b * c + a % b); // There is no case in which this doesn't hold\r\n\r\n        return c;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\r\n     * Reverts when dividing by zero.\r\n     *\r\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\r\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\r\n     * invalid opcode to revert (consuming all remaining gas).\r\n     *\r\n     * Requirements:\r\n     * - The divisor cannot be zero.\r\n     */\r\n    function mod(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        require(b != 0, \"SafeMath: modulo by zero\");\r\n        return a % b;\r\n    }\r\n}\r\n\r\n\r\n/**\r\n * @title Ownable\r\n * @dev The Ownable contract has an owner address, and provides basic authorization control\r\n * functions, this simplifies the implementation of \"user permissions\".\r\n */\r\ncontract Ownable {\r\n    address private _owner;\r\n\r\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\r\n\r\n    /**\r\n     * @dev The Ownable constructor sets the original `owner` of the contract to the sender\r\n     * account.\r\n     */\r\n    constructor () internal {\r\n        _owner = msg.sender;\r\n        emit OwnershipTransferred(address(0), _owner);\r\n    }\r\n\r\n    /**\r\n     * @return the address of the owner.\r\n     */\r\n    function owner() public view returns (address) {\r\n        return _owner;\r\n    }\r\n\r\n    /**\r\n     * @dev Throws if called by any account other than the owner.\r\n     */\r\n    modifier onlyOwner() {\r\n        require(isOwner(), \"Not Owner!\");\r\n        _;\r\n    }\r\n\r\n    /**\r\n     * @return true if `msg.sender` is the owner of the contract.\r\n     */\r\n    function isOwner() public view returns (bool) {\r\n        return msg.sender == _owner;\r\n    }\r\n\r\n    /**\r\n     * @dev Allows the current owner to relinquish control of the contract.\r\n     * It will not be possible to call the functions with the `onlyOwner`\r\n     * modifier anymore.\r\n     * @notice Renouncing ownership will leave the contract without an owner,\r\n     * thereby removing any functionality that is only available to the owner.\r\n     */\r\n    function renounceOwnership() public onlyOwner {\r\n        emit OwnershipTransferred(_owner, address(0));\r\n        _owner = address(0);\r\n    }\r\n\r\n    /**\r\n     * @dev Allows the current owner to transfer control of the contract to a newOwner.\r\n     * @param newOwner The address to transfer ownership to.\r\n     */\r\n    function transferOwnership(address newOwner) public onlyOwner {\r\n        _transferOwnership(newOwner);\r\n    }\r\n\r\n    /**\r\n     * @dev Transfers control of the contract to a newOwner.\r\n     * @param newOwner The address to transfer ownership to.\r\n     */\r\n    function _transferOwnership(address newOwner) internal {\r\n        require(newOwner != address(0),\"Address 0 could not be owner\");\r\n        emit OwnershipTransferred(_owner, newOwner);\r\n        _owner = newOwner;\r\n    }\r\n}\r\n\r\n\r\ninterface IAdminTools {\r\n    function setFFPAddresses(address, address) external;\r\n    function setMinterAddress(address) external returns(address);\r\n    function getMinterAddress() external view returns(address);\r\n    function getWalletOnTopAddress() external view returns (address);\r\n    function setWalletOnTopAddress(address) external returns(address);\r\n\r\n    function addWLManagers(address) external;\r\n    function removeWLManagers(address) external;\r\n    function isWLManager(address) external view returns (bool);\r\n    function addWLOperators(address) external;\r\n    function removeWLOperators(address) external;\r\n    function renounceWLManager() external;\r\n    function isWLOperator(address) external view returns (bool);\r\n    function renounceWLOperators() external;\r\n\r\n    function addFundingManagers(address) external;\r\n    function removeFundingManagers(address) external;\r\n    function isFundingManager(address) external view returns (bool);\r\n    function addFundingOperators(address) external;\r\n    function removeFundingOperators(address) external;\r\n    function renounceFundingManager() external;\r\n    function isFundingOperator(address) external view returns (bool);\r\n    function renounceFundingOperators() external;\r\n\r\n    function addFundsUnlockerManagers(address) external;\r\n    function removeFundsUnlockerManagers(address) external;\r\n    function isFundsUnlockerManager(address) external view returns (bool);\r\n    function addFundsUnlockerOperators(address) external;\r\n    function removeFundsUnlockerOperators(address) external;\r\n    function renounceFundsUnlockerManager() external;\r\n    function isFundsUnlockerOperator(address) external view returns (bool);\r\n    function renounceFundsUnlockerOperators() external;\r\n\r\n    function isWhitelisted(address) external view returns(bool);\r\n    function getWLThresholdBalance() external view returns (uint256);\r\n    function getMaxWLAmount(address) external view returns(uint256);\r\n    function getWLLength() external view returns(uint256);\r\n    function setNewThreshold(uint256) external;\r\n    function changeMaxWLAmount(address, uint256) external;\r\n    function addToWhitelist(address, uint256) external;\r\n    function addToWhitelistMassive(address[] calldata, uint256[] calldata) external returns (bool);\r\n    function removeFromWhitelist(address, uint256) external;\r\n}\r\n\r\n\r\ninterface IFactory {\r\n    function changeATFactoryAddress(address) external;\r\n    function changeTDeployerAddress(address) external;\r\n    function changeFPDeployerAddress(address) external;\r\n    function deployPanelContracts(string calldata, string calldata, string calldata, bytes32, uint8, uint8, uint256, uint256) external;\r\n    function isFactoryDeployer(address) external view returns(bool);\r\n    function isFactoryATGenerated(address) external view returns(bool);\r\n    function isFactoryTGenerated(address) external view returns(bool);\r\n    function isFactoryFPGenerated(address) external view returns(bool);\r\n    function getTotalDeployer() external view returns(uint256);\r\n    function getTotalATContracts() external view returns(uint256);\r\n    function getTotalTContracts() external view returns(uint256);\r\n    function getTotalFPContracts() external view returns(uint256);\r\n    function getContractsByIndex(uint256) external view returns (address, address, address, address);\r\n    function getFPAddressByIndex(uint256) external view returns (address);\r\n    function getFactoryContext() external view returns (address, address, uint);\r\n}\r\n\r\n\r\ninterface IFundingPanel {\r\n    function getFactoryDeployIndex() external view returns(uint);\r\n    function isMemberInserted(address) external view returns(bool);\r\n    function addMemberToSet(address, uint8, string calldata, bytes32) external returns (bool);\r\n    function enableMember(address) external;\r\n    function disableMemberByStaffRetire(address) external;\r\n    function disableMemberByStaffForExit(address) external;\r\n    function disableMemberByMember(address) external;\r\n    function changeMemberData(address, string calldata, bytes32) external;\r\n    function changeTokenExchangeRate(uint256) external;\r\n    function changeTokenExchangeOnTopRate(uint256) external;\r\n    function getOwnerData() external view returns (string memory, bytes32);\r\n    function setOwnerData(string calldata, bytes32) external;\r\n    function getMembersNumber() external view returns (uint);\r\n    function getMemberAddressByIndex(uint8) external view returns (address);\r\n    function getMemberDataByAddress(address _memberWallet) external view returns (bool, uint8, string memory, bytes32, uint256, uint, uint256);\r\n    function setNewSeedMaxSupply(uint256) external returns (uint256);\r\n    function holderSendSeeds(uint256) external;\r\n    function unlockFunds(address, uint256) external;\r\n    function burnTokensForMember(address, uint256) external;\r\n    function importOtherTokens(address, uint256) external;\r\n}\r\n\r\n\r\ncontract AdminTools is Ownable, IAdminTools {\r\n    using SafeMath for uint256;\r\n\r\n    struct wlVars {\r\n        bool permitted;\r\n        uint256 maxAmount;\r\n    }\r\n\r\n    mapping (address => wlVars) private whitelist;\r\n\r\n    uint8 private whitelistLength;\r\n\r\n    uint256 private whitelistThresholdBalance;\r\n\r\n    mapping (address => bool) private _WLManagers;\r\n    mapping (address => bool) private _FundingManagers;\r\n    mapping (address => bool) private _FundsUnlockerManagers;\r\n    mapping (address => bool) private _WLOperators;\r\n    mapping (address => bool) private _FundingOperators;\r\n    mapping (address => bool) private _FundsUnlockerOperators;\r\n\r\n    address private _minterAddress;\r\n\r\n    address private _walletOnTopAddress;\r\n\r\n    address public FPAddress;\r\n    IFundingPanel public FPContract;\r\n    address public FAddress;\r\n    IFactory public FContract;\r\n\r\n    event WLManagersAdded();\r\n    event WLManagersRemoved();\r\n    event WLOperatorsAdded();\r\n    event WLOperatorsRemoved();\r\n    event FundingManagersAdded();\r\n    event FundingManagersRemoved();\r\n    event FundingOperatorsAdded();\r\n    event FundingOperatorsRemoved();\r\n    event FundsUnlockerManagersAdded();\r\n    event FundsUnlockerManagersRemoved();\r\n    event FundsUnlockerOperatorsAdded();\r\n    event FundsUnlockerOperatorsRemoved();\r\n    event MaxWLAmountChanged();\r\n    event MinterOrigins();\r\n    event MinterChanged();\r\n    event WalletOnTopAddressChanged();\r\n    event LogWLThresholdBalanceChanged();\r\n    event LogWLAddressAdded();\r\n    event LogWLMassiveAddressesAdded();\r\n    event LogWLAddressRemoved();\r\n\r\n    constructor (uint256 _whitelistThresholdBalance) public {\r\n        whitelistThresholdBalance = _whitelistThresholdBalance;\r\n    }\r\n\r\n    function setFFPAddresses(address _factoryAddress, address _FPAddress) external onlyOwner {\r\n        FAddress = _factoryAddress;\r\n        FContract = IFactory(FAddress);\r\n        FPAddress = _FPAddress;\r\n        FPContract = IFundingPanel(FPAddress);\r\n        emit MinterOrigins();\r\n    }\r\n\r\n    /* Token Minter address, to set like Funding Panel address */\r\n    function getMinterAddress() external view returns(address) {\r\n        return _minterAddress;\r\n    }\r\n\r\n    function setMinterAddress(address _minter) external onlyOwner returns(address) {\r\n        require(_minter != address(0), \"Not valid minter address!\");\r\n        require(_minter != _minterAddress, \" No change in minter contract\");\r\n        require(FAddress != address(0), \"Not valid factory address!\");\r\n        require(FPAddress != address(0), \"Not valid FP Contract address!\");\r\n        require(FContract.getFPAddressByIndex(FPContract.getFactoryDeployIndex()) == _minter,\r\n                        \"Minter is not a known funding panel!\");\r\n        _minterAddress = _minter;\r\n        emit MinterChanged();\r\n        return _minterAddress;\r\n    }\r\n\r\n    /* Wallet receiving extra minted tokens (percentage) */\r\n    function getWalletOnTopAddress() external view returns (address) {\r\n        return _walletOnTopAddress;\r\n    }\r\n\r\n    function setWalletOnTopAddress(address _wallet) external onlyOwner returns(address) {\r\n        require(_wallet != address(0), \"Not valid wallet address!\");\r\n        require(_wallet != _walletOnTopAddress, \" No change in OnTopWallet\");\r\n        _walletOnTopAddress = _wallet;\r\n        emit WalletOnTopAddressChanged();\r\n        return _walletOnTopAddress;\r\n    }\r\n\r\n\r\n    /* Modifiers */\r\n    modifier onlyWLManagers() {\r\n        require(isWLManager(msg.sender), \"Not a Whitelist Manager!\");\r\n        _;\r\n    }\r\n\r\n    modifier onlyWLOperators() {\r\n        require(isWLOperator(msg.sender), \"Not a Whitelist Operator!\");\r\n        _;\r\n    }\r\n\r\n    modifier onlyFundingManagers() {\r\n        require(isFundingManager(msg.sender), \"Not a Funding Panel Manager!\");\r\n        _;\r\n    }\r\n\r\n    modifier onlyFundingOperators() {\r\n        require(isFundingOperator(msg.sender), \"Not a Funding Panel Operator!\");\r\n        _;\r\n    }\r\n\r\n    modifier onlyFundsUnlockerManagers() {\r\n        require(isFundsUnlockerManager(msg.sender), \"Not a Funds Unlocker Manager!\");\r\n        _;\r\n    }\r\n\r\n    modifier onlyFundsUnlockerOperators() {\r\n        require(isFundsUnlockerOperator(msg.sender), \"Not a Funds Unlocker Operator!\");\r\n        _;\r\n    }\r\n\r\n\r\n    /*   WL Roles Mngmt  */\r\n    function addWLManagers(address account) external onlyOwner {\r\n        _addWLManagers(account);\r\n        _addWLOperators(account);\r\n    }\r\n\r\n    function removeWLManagers(address account) external onlyOwner {\r\n        _removeWLManagers(account);\r\n    }\r\n\r\n    function isWLManager(address account) public view returns (bool) {\r\n        return _WLManagers[account];\r\n    }\r\n\r\n    function addWLOperators(address account) external onlyWLManagers {\r\n        _addWLOperators(account);\r\n    }\r\n\r\n    function removeWLOperators(address account) external onlyWLManagers {\r\n        _removeWLOperators(account);\r\n    }\r\n\r\n    function renounceWLManager() external onlyWLManagers {\r\n        _removeWLManagers(msg.sender);\r\n    }\r\n\r\n    function _addWLManagers(address account) internal {\r\n        _WLManagers[account] = true;\r\n        emit WLManagersAdded();\r\n    }\r\n\r\n    function _removeWLManagers(address account) internal {\r\n        _WLManagers[account] = false;\r\n        emit WLManagersRemoved();\r\n    }\r\n\r\n\r\n    function isWLOperator(address account) public view returns (bool) {\r\n        return _WLOperators[account];\r\n    }\r\n\r\n    function renounceWLOperators() external onlyWLOperators {\r\n        _removeWLOperators(msg.sender);\r\n    }\r\n\r\n    function _addWLOperators(address account) internal {\r\n        _WLOperators[account] = true;\r\n        emit WLOperatorsAdded();\r\n    }\r\n\r\n    function _removeWLOperators(address account) internal {\r\n        _WLOperators[account] = false;\r\n        emit WLOperatorsRemoved();\r\n    }\r\n\r\n\r\n    /*   Funding Roles Mngmt  */\r\n    function addFundingManagers(address account) external onlyOwner {\r\n        _addFundingManagers(account);\r\n        _addFundingOperators(account);\r\n    }\r\n\r\n    function removeFundingManagers(address account) external onlyOwner {\r\n        _removeFundingManagers(account);\r\n    }\r\n\r\n    function isFundingManager(address account) public view returns (bool) {\r\n        return _FundingManagers[account];\r\n    }\r\n\r\n    function addFundingOperators(address account) external onlyFundingManagers {\r\n        _addFundingOperators(account);\r\n    }\r\n\r\n    function removeFundingOperators(address account) external onlyFundingManagers {\r\n        _removeFundingOperators(account);\r\n    }\r\n\r\n    function renounceFundingManager() external onlyFundingManagers {\r\n        _removeFundingManagers(msg.sender);\r\n    }\r\n\r\n    function _addFundingManagers(address account) internal {\r\n        _FundingManagers[account] = true;\r\n        emit FundingManagersAdded();\r\n    }\r\n\r\n    function _removeFundingManagers(address account) internal {\r\n        _FundingManagers[account] = false;\r\n        emit FundingManagersRemoved();\r\n    }\r\n\r\n\r\n    function isFundingOperator(address account) public view returns (bool) {\r\n        return _FundingOperators[account];\r\n    }\r\n\r\n    function renounceFundingOperators() external onlyFundingOperators {\r\n        _removeFundingOperators(msg.sender);\r\n    }\r\n\r\n    function _addFundingOperators(address account) internal {\r\n        _FundingOperators[account] = true;\r\n        emit FundingOperatorsAdded();\r\n    }\r\n\r\n    function _removeFundingOperators(address account) internal {\r\n        _FundingOperators[account] = false;\r\n        emit FundingOperatorsRemoved();\r\n    }\r\n\r\n    /*   Funds Unlockers Roles Mngmt  */\r\n    function addFundsUnlockerManagers(address account) external onlyOwner {\r\n        _addFundsUnlockerManagers(account);\r\n    }\r\n\r\n    function removeFundsUnlockerManagers(address account) external onlyOwner {\r\n        _removeFundsUnlockerManagers(account);\r\n    }\r\n\r\n    function isFundsUnlockerManager(address account) public view returns (bool) {\r\n        return _FundsUnlockerManagers[account];\r\n    }\r\n\r\n    function addFundsUnlockerOperators(address account) external onlyFundsUnlockerManagers {\r\n        _addFundsUnlockerOperators(account);\r\n    }\r\n\r\n    function removeFundsUnlockerOperators(address account) external onlyFundsUnlockerManagers {\r\n        _removeFundsUnlockerOperators(account);\r\n    }\r\n\r\n    function renounceFundsUnlockerManager() external onlyFundsUnlockerManagers {\r\n        _removeFundsUnlockerManagers(msg.sender);\r\n    }\r\n\r\n    function _addFundsUnlockerManagers(address account) internal {\r\n        _FundsUnlockerManagers[account] = true;\r\n        emit FundsUnlockerManagersAdded();\r\n    }\r\n\r\n    function _removeFundsUnlockerManagers(address account) internal {\r\n        _FundsUnlockerManagers[account] = false;\r\n        emit FundsUnlockerManagersRemoved();\r\n    }\r\n\r\n    function isFundsUnlockerOperator(address account) public view returns (bool) {\r\n        return _FundsUnlockerOperators[account];\r\n    }\r\n\r\n    function renounceFundsUnlockerOperators() external onlyFundsUnlockerOperators {\r\n        _removeFundsUnlockerOperators(msg.sender);\r\n    }\r\n\r\n    function _addFundsUnlockerOperators(address account) internal {\r\n        _FundsUnlockerOperators[account] = true;\r\n        emit FundsUnlockerOperatorsAdded();\r\n    }\r\n\r\n    function _removeFundsUnlockerOperators(address account) internal {\r\n        _FundsUnlockerOperators[account] = false;\r\n        emit FundsUnlockerOperatorsRemoved();\r\n    }\r\n\r\n\r\n    /*  Whitelisting  Mngmt  */\r\n\r\n    /**\r\n     * @return true if subscriber is whitelisted, false otherwise\r\n     */\r\n    function isWhitelisted(address _subscriber) public view returns(bool) {\r\n        return whitelist[_subscriber].permitted;\r\n    }\r\n\r\n    /**\r\n     * @return the anonymous threshold\r\n     */\r\n    function getWLThresholdBalance() public view returns (uint256) {\r\n        return whitelistThresholdBalance;\r\n    }\r\n\r\n    /**\r\n     * @return maxAmount for holder\r\n     */\r\n    function getMaxWLAmount(address _subscriber) external view returns(uint256) {\r\n        return whitelist[_subscriber].maxAmount;\r\n    }\r\n\r\n    /**\r\n     * @dev length of the whitelisted accounts\r\n     */\r\n    function getWLLength() external view returns(uint256) {\r\n        return whitelistLength;\r\n    }\r\n\r\n    /**\r\n     * @dev set new anonymous threshold\r\n     * @param _newThreshold The new anonymous threshold.\r\n     */\r\n    function setNewThreshold(uint256 _newThreshold) external onlyWLManagers {\r\n        require(whitelistThresholdBalance != _newThreshold, \"New Threshold like the old one!\");\r\n        whitelistThresholdBalance = _newThreshold;\r\n        emit LogWLThresholdBalanceChanged();\r\n    }\r\n\r\n    /**\r\n     * @dev Change maxAmount for holder\r\n     * @param _subscriber The subscriber in the whitelist.\r\n     * @param _newMaxToken New max amount that a subscriber can hold (in set tokens).\r\n     */\r\n    function changeMaxWLAmount(address _subscriber, uint256 _newMaxToken) external onlyWLOperators {\r\n        require(isWhitelisted(_subscriber), \"Investor is not whitelisted!\");\r\n        whitelist[_subscriber].maxAmount = _newMaxToken;\r\n        emit MaxWLAmountChanged();\r\n    }\r\n\r\n    /**\r\n     * @dev Add the subscriber to the whitelist.\r\n     * @param _subscriber The subscriber to add to the whitelist.\r\n     * @param _maxAmnt max amount that a subscriber can hold (in set tokens).\r\n     */\r\n    function addToWhitelist(address _subscriber, uint256 _maxAmnt) external onlyWLOperators {\r\n        require(_subscriber != address(0), \"_subscriber is zero\");\r\n        require(!whitelist[_subscriber].permitted, \"already whitelisted\");\r\n\r\n        whitelistLength++;\r\n\r\n        whitelist[_subscriber].permitted = true;\r\n        whitelist[_subscriber].maxAmount = _maxAmnt;\r\n\r\n        emit LogWLAddressAdded();\r\n    }\r\n\r\n    /**\r\n     * @dev Add the subscriber list to the whitelist (max 100)\r\n     * @param _subscriber The subscriber list to add to the whitelist.\r\n     * @param _maxAmnt max amount list that a subscriber can hold (in set tokens).\r\n     */\r\n    function addToWhitelistMassive(address[] calldata _subscriber, uint256[] calldata _maxAmnt) external onlyWLOperators returns (bool _success) {\r\n        assert(_subscriber.length == _maxAmnt.length);\r\n        assert(_subscriber.length <= 100);\r\n\r\n        for (uint8 i = 0; i < _subscriber.length; i++) {\r\n            require(_subscriber[i] != address(0), \"_subscriber is zero\");\r\n            require(!whitelist[_subscriber[i]].permitted, \"already whitelisted\");\r\n\r\n            whitelistLength++;\r\n\r\n            whitelist[_subscriber[i]].permitted = true;\r\n            whitelist[_subscriber[i]].maxAmount = _maxAmnt[i];\r\n        }\r\n\r\n        emit LogWLMassiveAddressesAdded();\r\n        return true;\r\n    }\r\n\r\n    /**\r\n     * @dev Remove the subscriber from the whitelist.\r\n     * @param _subscriber The subscriber remove from the whitelist.\r\n     * @param _balance balance of a subscriber to be under the anonymous threshold, otherwise de-whilisting not permitted.\r\n     */\r\n    function removeFromWhitelist(address _subscriber, uint256 _balance) external onlyWLOperators {\r\n        require(_subscriber != address(0), \"_subscriber is zero\");\r\n        require(whitelist[_subscriber].permitted, \"not whitelisted\");\r\n        require(_balance <= whitelistThresholdBalance, \"balance greater than whitelist threshold\");\r\n\r\n        whitelistLength--;\r\n\r\n        whitelist[_subscriber].permitted = false;\r\n        whitelist[_subscriber].maxAmount = 0;\r\n\r\n        emit LogWLAddressRemoved();\r\n    }\r\n\r\n}\r\n\r\n\r\ninterface IATDeployer {\r\n    function newAdminTools(uint256) external returns(address);\r\n    function setFactoryAddress(address) external;\r\n    function getFactoryAddress() external view returns(address);\r\n}\r\n\r\n\r\ncontract ATDeployer is Ownable, IATDeployer {\r\n\r\n    address private fAddress;\r\n    event ATDeployed(uint deployedBlock);\r\n\r\n    //constructor() public {}\r\n\r\n    modifier onlyFactory() {\r\n        require(msg.sender == fAddress, \"Address not allowed to create AT Contract!\");\r\n        _;\r\n    }\r\n\r\n    /**\r\n     * @dev Set the factory address for deployment.\r\n     * @param _fAddress The factory address.\r\n     */\r\n    function setFactoryAddress(address _fAddress) external onlyOwner {\r\n        require(block.number < 8850000, \"Time expired!\");\r\n        require(_fAddress != address(0), \"Address not allowed\");\r\n        fAddress = _fAddress;\r\n    }\r\n\r\n    /**\r\n     * @dev Get the factory address for deployment.\r\n     */\r\n    function getFactoryAddress() external view returns(address) {\r\n        return fAddress;\r\n    }\r\n\r\n    /**\r\n     * @dev deployment of a new AdminTools contract\r\n     * @return address of the deployed AdminTools contract\r\n     */\r\n    function newAdminTools(uint256 _whitelistThresholdBalance) external onlyFactory returns(address) {\r\n        AdminTools c = new AdminTools(_whitelistThresholdBalance);\r\n        c.transferOwnership(msg.sender);\r\n        emit ATDeployed (block.number);\r\n        return address(c);\r\n    }\r\n\r\n}","ABI":"[{\"constant\":false,\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_fAddress\",\"type\":\"address\"}],\"name\":\"setFactoryAddress\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"isOwner\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"getFactoryAddress\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_whitelistThresholdBalance\",\"type\":\"uint256\"}],\"name\":\"newAdminTools\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"deployedBlock\",\"type\":\"uint256\"}],\"name\":\"ATDeployed\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"}]","ContractName":"ATDeployer","CompilerVersion":"v0.5.2+commit.1df8f40c","OptimizationUsed":"1","Runs":"200","ConstructorArguments":"","Library":"","LicenseType":"GNU GPLv3","SwarmSource":"bzzr://d3bf21ba64b8c4da0e41b8654eb0738579d15f5203dc33f2b482dc073e0726b5"}]}