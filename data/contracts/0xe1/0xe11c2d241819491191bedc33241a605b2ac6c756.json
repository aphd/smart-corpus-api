{"status":"1","message":"OK","result":[{"SourceCode":"pragma solidity ^0.5.10;\r\n\r\n// Voken Shareholders Contract\r\n//\r\n// More info:\r\n//   https://vision.network\r\n//   https://voken.io\r\n//\r\n// Contact us:\r\n//   support@vision.network\r\n//   support@voken.io\r\n\r\n\r\n/**\r\n * @dev Wrappers over Solidity's arithmetic operations with added overflow checks.\r\n */\r\nlibrary SafeMath256 {\r\n    /**\r\n     * @dev Returns the addition of two unsigned integers, reverting on overflow.\r\n     */\r\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        uint256 c = a + b;\r\n        require(c >= a, \"SafeMath: addition overflow\");\r\n\r\n        return c;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the subtraction of two unsigned integers, reverting on\r\n     * overflow (when the result is negative).\r\n     */\r\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        return sub(a, b, \"SafeMath: subtraction overflow\");\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the subtraction of two unsigned integers, reverting with custom message on\r\n     * overflow (when the result is negative).\r\n     */\r\n    function sub(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\r\n        require(b <= a, errorMessage);\r\n        uint256 c = a - b;\r\n\r\n        return c;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the multiplication of two unsigned integers, reverting on overflow.\r\n     */\r\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        if (a == 0) {\r\n            return 0;\r\n        }\r\n\r\n        uint256 c = a * b;\r\n        require(c / a == b, \"SafeMath: multiplication overflow\");\r\n\r\n        return c;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the integer division of two unsigned integers. Reverts on\r\n     * division by zero. The result is rounded towards zero.\r\n     */\r\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        return div(a, b, \"SafeMath: division by zero\");\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the integer division of two unsigned integers. Reverts with custom message on\r\n     * division by zero. The result is rounded towards zero.\r\n     */\r\n    function div(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\r\n        // Solidity only automatically asserts when dividing by 0\r\n        require(b > 0, errorMessage);\r\n        return a / b;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\r\n     * Reverts when dividing by zero.\r\n     */\r\n    function mod(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        return mod(a, b, \"SafeMath: modulo by zero\");\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\r\n     * Reverts with custom message when dividing by zero.\r\n     */\r\n    function mod(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\r\n        require(b != 0, errorMessage);\r\n        return a % b;\r\n    }\r\n}\r\n\r\n\r\n/**\r\n * @title Roles\r\n * @dev Library for managing addresses assigned to a Role.\r\n */\r\nlibrary Roles {\r\n    struct Role {\r\n        mapping (address => bool) bearer;\r\n    }\r\n\r\n    /**\r\n     * @dev Give an account access to this role.\r\n     */\r\n    function add(Role storage role, address account) internal {\r\n        require(!has(role, account), \"Roles: account already has role\");\r\n        role.bearer[account] = true;\r\n    }\r\n\r\n    /**\r\n     * @dev Remove an account's access to this role.\r\n     */\r\n    function remove(Role storage role, address account) internal {\r\n        require(has(role, account), \"Roles: account does not have role\");\r\n        role.bearer[account] = false;\r\n    }\r\n\r\n    /**\r\n     * @dev Check if an account has this role.\r\n     * @return bool\r\n     */\r\n    function has(Role storage role, address account) internal view returns (bool) {\r\n        require(account != address(0), \"Roles: account is the zero address\");\r\n        return role.bearer[account];\r\n    }\r\n}\r\n\r\n\r\n/**\r\n * @dev Allocation for VOKEN\r\n */\r\nlibrary Allocations {\r\n    using SafeMath256 for uint256;\r\n\r\n    struct Allocation {\r\n        uint256 amount;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the available amount.\r\n     */\r\n    function available(Allocation storage self) internal view returns (uint256) {\r\n        uint256 timestamp = 1588291199; // Thu, 30 Apr 2020 23:59:59 +0000\r\n        uint256 interval = 1 days;\r\n        uint256 steps = 61;\r\n\r\n        if (now > timestamp) {\r\n            if (interval == 0) {\r\n                return self.amount;\r\n            }\r\n\r\n            uint256 __passed = now.sub(timestamp).div(interval).add(1);\r\n\r\n            if (__passed >= steps) {\r\n                return self.amount;\r\n            }\r\n\r\n            return self.amount.mul(__passed).div(steps);\r\n        }\r\n\r\n        return 0;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the reserved amount.\r\n     */\r\n    function reserved(Allocation storage self) internal view returns (uint256) {\r\n        return self.amount.sub(available(self));\r\n    }\r\n}\r\n\r\n\r\n/**\r\n * @dev Interface of the ERC20 standard\r\n */\r\ninterface IERC20 {\r\n    function name() external view returns (string memory);\r\n    function symbol() external view returns (string memory);\r\n    function decimals() external view returns (uint8);\r\n\r\n    function totalSupply() external view returns (uint256);\r\n    function balanceOf(address account) external view returns (uint256);\r\n    function transfer(address recipient, uint256 amount) external returns (bool);\r\n    function allowance(address owner, address spender) external view returns (uint256);\r\n    function approve(address spender, uint256 amount) external returns (bool);\r\n    function transferFrom(address sender, address recipient, uint256 amount) external returns (bool);\r\n\r\n    event Transfer(address indexed from, address indexed to, uint256 value);\r\n    event Approval(address indexed owner, address indexed spender, uint256 value);\r\n}\r\n\r\n\r\n/**\r\n * @dev Interface of an allocation contract\r\n */\r\ninterface IAllocation {\r\n    function reservedOf(address account) external view returns (uint256);\r\n}\r\n\r\n\r\n/**\r\n * @dev Interface of VOKEN\r\n */\r\ninterface IVoken {\r\n    function balanceOf(address account) external view returns (uint256);\r\n    function transfer(address recipient, uint256 amount) external returns (bool);\r\n    function mintWithAllocation(address account, uint256 amount, address allocationContract) external returns (bool);\r\n}\r\n\r\n\r\n/**\r\n * @dev Contract module which provides a basic access control mechanism, where\r\n * there is an account (an owner) that can be granted exclusive access to\r\n * specific functions.\r\n */\r\ncontract Ownable {\r\n    address internal _owner;\r\n    address internal _newOwner;\r\n\r\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\r\n    event OwnershipAccepted(address indexed previousOwner, address indexed newOwner);\r\n\r\n    /**\r\n     * @dev Initializes the contract setting the deployer as the initial owner.\r\n     */\r\n    constructor () internal {\r\n        _owner = msg.sender;\r\n        emit OwnershipTransferred(address(0), _owner);\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the addresses of the current and new owner.\r\n     */\r\n    function owner() public view returns (address, address) {\r\n        return (_owner, _newOwner);\r\n    }\r\n\r\n    /**\r\n     * @dev Throws if called by any account other than the owner.\r\n     */\r\n    modifier onlyOwner() {\r\n        require(isOwner(), \"Ownable: caller is not the owner\");\r\n        _;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns true if the caller is the current owner.\r\n     */\r\n    function isOwner() public view returns (bool) {\r\n        return msg.sender == _owner;\r\n    }\r\n\r\n    /**\r\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\r\n     *\r\n     * Need to run {acceptOwnership} by the new owner.\r\n     *\r\n     * Can only be called by the current owner.\r\n     */\r\n    function transferOwnership(address newOwner) public onlyOwner {\r\n        _transferOwnership(newOwner);\r\n    }\r\n\r\n    /**\r\n     * @dev Accept ownership of the contract.\r\n     *\r\n     * Can only be called by the new owner.\r\n     */\r\n    function acceptOwnership() public {\r\n        require(msg.sender == _newOwner, \"Ownable: caller is not the new owner address\");\r\n        require(msg.sender != address(0), \"Ownable: caller is the zero address\");\r\n\r\n        emit OwnershipAccepted(_owner, msg.sender);\r\n        _owner = msg.sender;\r\n        _newOwner = address(0);\r\n    }\r\n\r\n    /**\r\n     * @dev Rescue compatible ERC20 Token\r\n     *\r\n     * Can only be called by the current owner.\r\n     */\r\n    function rescueTokens(address tokenAddr, address recipient, uint256 amount) external onlyOwner {\r\n        IERC20 _token = IERC20(tokenAddr);\r\n        require(recipient != address(0), \"Rescue: recipient is the zero address\");\r\n        uint256 balance = _token.balanceOf(address(this));\r\n\r\n        require(balance >= amount, \"Rescue: amount exceeds balance\");\r\n        _token.transfer(recipient, amount);\r\n    }\r\n\r\n    /**\r\n     * @dev Withdraw Ether\r\n     *\r\n     * Can only be called by the current owner.\r\n     */\r\n    function withdrawEther(address payable recipient, uint256 amount) external onlyOwner {\r\n        require(recipient != address(0), \"Withdraw: recipient is the zero address\");\r\n\r\n        uint256 balance = address(this).balance;\r\n\r\n        require(balance >= amount, \"Withdraw: amount exceeds balance\");\r\n        recipient.transfer(amount);\r\n    }\r\n\r\n    /**\r\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\r\n     */\r\n    function _transferOwnership(address newOwner) internal {\r\n        require(newOwner != address(0), \"Ownable: new owner is the zero address\");\r\n\r\n        emit OwnershipTransferred(_owner, newOwner);\r\n        _newOwner = newOwner;\r\n    }\r\n}\r\n\r\n\r\n/**\r\n * @title Voken Shareholders\r\n */\r\ncontract VokenShareholders is Ownable, IAllocation {\r\n    using SafeMath256 for uint256;\r\n    using Roles for Roles.Role;\r\n    using Allocations for Allocations.Allocation;\r\n\r\n    IVoken private _voken;\r\n    Roles.Role private _proxies;\r\n\r\n    uint256 private _page;\r\n    uint256 private _ethers;\r\n    uint256 private _vokens;\r\n\r\n    address[] private _shareholders;\r\n    mapping (address => bool) private _isShareholders;\r\n\r\n    mapping (address => uint256) private _withdrawPos;\r\n    mapping (uint256 => address[]) private _pageShareholders;\r\n    mapping (uint256 => mapping (address => bool)) private _isPageShareholders;\r\n\r\n    mapping (uint256 => uint256) private _pageEndingBlock;\r\n    mapping (uint256 => uint256) private _pageEthers;\r\n    mapping (uint256 => uint256) private _pageVokens;\r\n    mapping (uint256 => uint256) private _pageVokenSum;\r\n    mapping (uint256 => mapping (address => uint256)) private _pageVokenHoldings;\r\n    mapping (uint256 => mapping (address => uint256)) private _pageEtherDividends;\r\n\r\n    mapping (address => Allocations.Allocation[]) private _allocations;\r\n\r\n    event Dividend(address indexed account, uint256 amount, uint256 page);\r\n    event ProxyAdded(address indexed account);\r\n    event ProxyRemoved(address indexed account);\r\n\r\n\r\n    /**\r\n     * @dev Constructor\r\n     */\r\n    constructor () public {\r\n        _page = 1;\r\n\r\n        addProxy(msg.sender);\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the max page number.\r\n     */\r\n    function page() public view returns (uint256) {\r\n        return _page;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the amount of deposited Ether.\r\n     */\r\n    function ethers() public view returns (uint256) {\r\n        return _ethers;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the amount of VOKEN holding by all shareholders.\r\n     */\r\n    function vokens() public view returns (uint256) {\r\n        return _vokens;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the shareholders counter on `pageNumber`.\r\n     */\r\n    function counter(uint256 pageNumber) public view returns (uint256) {\r\n        if (pageNumber > 0) {\r\n            return _pageShareholders[pageNumber].length;\r\n        }\r\n\r\n        return _shareholders.length;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the shareholders list on `pageNumber`.\r\n     */\r\n    function shareholders(uint256 pageNumber) public view returns (address[] memory) {\r\n        if (pageNumber > 0) {\r\n            return _pageShareholders[pageNumber];\r\n        }\r\n\r\n        return _shareholders;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the VOKEN main contract address.\r\n     */\r\n    function VOKEN() public view returns (IVoken) {\r\n        return _voken;\r\n    }\r\n\r\n    /**\r\n     * Returns the ending block number of `pageNumber`.\r\n     */\r\n    function pageEndingBlock(uint256 pageNumber) public view returns (uint256) {\r\n        return _pageEndingBlock[pageNumber];\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the amount of deposited Ether at `pageNumber`.\r\n     */\r\n    function pageEthers(uint256 pageNumber) public view returns (uint256) {\r\n        return _pageEthers[pageNumber];\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the amount of deposited Ether till `pageNumber`.\r\n     */\r\n    function pageEtherSum(uint256 pageNumber) public view returns (uint256) {\r\n        uint256 __page = _pageNumber(pageNumber);\r\n        uint256 __amount;\r\n\r\n        for (uint256 i = 1; i <= __page; i++) {\r\n            __amount = __amount.add(_pageEthers[i]);\r\n        }\r\n\r\n        return __amount;\r\n    }\r\n\r\n    /**\r\n     * Returns the page number greater than 0 by `pageNmber`.\r\n     */\r\n    function _pageNumber(uint256 pageNumber) internal view returns (uint256) {\r\n        if (pageNumber > 0) {\r\n            return pageNumber;\r\n        }\r\n\r\n        else {\r\n            return _page;\r\n        }\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the amount of VOKEN holding by all shareholders at `pageNumber`.\r\n     */\r\n    function pageVokens(uint256 pageNumber) public view returns (uint256) {\r\n        return _pageVokens[pageNumber];\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the amount of VOKEN holding by all shareholders till `pageNumber`.\r\n     */\r\n    function pageVokenSum(uint256 pageNumber) public view returns (uint256) {\r\n        return _pageVokenSum[_pageNumber(pageNumber)];\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the amount of VOKEN holding by `account` and `pageNumber`.\r\n     */\r\n    function vokenHolding(address account, uint256 pageNumber) public view returns (uint256) {\r\n        uint256 __page;\r\n        uint256 __amount;\r\n\r\n        if (pageNumber > 0) {\r\n            __page = pageNumber;\r\n        }\r\n\r\n        else {\r\n            __page = _page;\r\n        }\r\n\r\n        for (uint256 i = 1; i <= __page; i++) {\r\n            __amount = __amount.add(_pageVokenHoldings[i][account]);\r\n        }\r\n\r\n        return __amount;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the ether dividend of `account` on `pageNumber`.\r\n     */\r\n    function etherDividend(address account, uint256 pageNumber) public view returns (uint256 amount,\r\n                                                                                     uint256 dividend,\r\n                                                                                     uint256 remain) {\r\n        if (pageNumber > 0) {\r\n            amount = pageEthers(pageNumber).mul(vokenHolding(account, pageNumber)).div(pageVokenSum(pageNumber));\r\n            dividend = _pageEtherDividends[pageNumber][account];\r\n        }\r\n\r\n        else {\r\n            for (uint256 i = 1; i <= _page; i++) {\r\n                uint256 __pageEtherDividend = pageEthers(i).mul(vokenHolding(account, i)).div(pageVokenSum(i));\r\n                amount = amount.add(__pageEtherDividend);\r\n                dividend = dividend.add(_pageEtherDividends[i][account]);\r\n            }\r\n        }\r\n\r\n        remain = amount.sub(dividend);\r\n    }\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n    /**\r\n     * @dev Throws if called by account which is not a proxy.\r\n     */\r\n    modifier onlyProxy() {\r\n        require(isProxy(msg.sender), \"ProxyRole: caller does not have the Proxy role\");\r\n        _;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns true if the `account` has the Proxy role.\r\n     */\r\n    function isProxy(address account) public view returns (bool) {\r\n        return _proxies.has(account);\r\n    }\r\n\r\n    /**\r\n     * @dev Give an `account` access to the Proxy role.\r\n     *\r\n     * Can only be called by the current owner.\r\n     */\r\n    function addProxy(address account) public onlyOwner {\r\n        _proxies.add(account);\r\n        emit ProxyAdded(account);\r\n    }\r\n\r\n    /**\r\n     * @dev Remove an `account` access from the Proxy role.\r\n     *\r\n     * Can only be called by the current owner.\r\n     */\r\n    function removeProxy(address account) public onlyOwner {\r\n        _proxies.remove(account);\r\n        emit ProxyRemoved(account);\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the allocations counter on `account`.\r\n     */\r\n    function allocations(address account) public view returns (uint256 allocationsCounter) {\r\n        allocationsCounter = _allocations[account].length;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the allocation on `account` and an `index`.\r\n     */\r\n    function allocation(address account, uint256 index) public view returns (uint256 amount,\r\n                                                                             uint256 timestamp,\r\n                                                                             uint256 interval,\r\n                                                                             uint256 steps,\r\n                                                                             uint256 available,\r\n                                                                             uint256 reserved) {\r\n        if (index < _allocations[account].length) {\r\n            amount = _allocations[account][index].amount;\r\n            timestamp = 1588291199; // Thu, 30 Apr 2020 23:59:59 +0000\r\n            interval = 1 days;\r\n            steps = 61;\r\n\r\n            available = _allocations[account][index].available();\r\n            reserved = amount.sub(available);\r\n        }\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the reserved amount of VOKENs by `account`.\r\n     */\r\n    function reservedOf(address account) public view returns (uint256) {\r\n        uint256 __reserved;\r\n\r\n        uint256 __len = _allocations[account].length;\r\n        if (__len > 0) {\r\n            for (uint256 i = 0; i < __len; i++) {\r\n                __reserved = __reserved.add(_allocations[account][i].reserved());\r\n            }\r\n        }\r\n\r\n        return __reserved;\r\n    }\r\n\r\n    /**\r\n     * @dev Creates `amount` VOKENs and assigns them to `account`.\r\n     *\r\n     * With an `allocation`.\r\n     *\r\n     * Can only be called by a minter.\r\n     */\r\n    function _mintWithAllocation(address account, uint256 amount) internal returns (bool) {\r\n        Allocations.Allocation memory __allocation;\r\n\r\n        __allocation.amount = amount;\r\n\r\n        _allocations[account].push(__allocation);\r\n\r\n        _voken.mintWithAllocation(account, amount, address(this));\r\n        return true;\r\n    }\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n    /**\r\n     * @dev {Deposit} or {Withdraw}\r\n     */\r\n    function () external payable {\r\n        // deposit\r\n        if (msg.value > 0) {\r\n            _ethers = _ethers.add(msg.value);\r\n            _pageEthers[_page] = _pageEthers[_page].add(msg.value);\r\n        }\r\n\r\n        // withdraw\r\n        else if (_isShareholders[msg.sender]) {\r\n            uint256 __vokenHolding;\r\n\r\n            for (uint256 i = 1; i <= _page.sub(1); i++) {\r\n                __vokenHolding = __vokenHolding.add(_pageVokenHoldings[i][msg.sender]);\r\n\r\n                if (_withdrawPos[msg.sender] < i) {\r\n                    uint256 __etherAmount = _pageEthers[i].mul(__vokenHolding).div(_pageVokenSum[i]);\r\n\r\n                    _withdrawPos[msg.sender] = i;\r\n                    _pageEtherDividends[i][msg.sender] = __etherAmount;\r\n\r\n                    msg.sender.transfer(__etherAmount);\r\n                    emit Dividend(msg.sender, __etherAmount, i);\r\n                }\r\n            }\r\n        }\r\n\r\n        assert(true);\r\n    }\r\n\r\n    /**\r\n     * @dev Sets the VOKEN main contract address.\r\n     */\r\n    function setVokenMainContract(IVoken vokenMainContract) public onlyOwner {\r\n        require(address(vokenMainContract) != address(0), \"VOKEN: main contract is the zero address\");\r\n        _voken = vokenMainContract;\r\n    }\r\n\r\n    /**\r\n     * @dev End the current page.\r\n     */\r\n    function endPage() public onlyProxy returns (bool) {\r\n        require(_pageEthers[_page] > 0, \"Ethers on current page is zero.\");\r\n\r\n        _pageEndingBlock[_page] = block.number;\r\n\r\n        _page = _page.add(1);\r\n        _pageVokenSum[_page] = _vokens;\r\n\r\n        return true;\r\n    }\r\n\r\n    /**\r\n     * @dev Push shareholders.\r\n     *\r\n     * Can only be called by a proxy.\r\n     */\r\n    function pushShareholders(address[] memory accounts, uint256[] memory values) public onlyProxy returns (bool) {\r\n        require(accounts.length == values.length, \"Shareholders: batch length is not match\");\r\n\r\n        for (uint256 i = 0; i < accounts.length; i++) {\r\n            address __account = accounts[i];\r\n            uint256 __value = values[i];\r\n\r\n            if (!_isShareholders[__account]) {\r\n                _shareholders.push(__account);\r\n                _isShareholders[__account] = true;\r\n            }\r\n\r\n            if (!_isPageShareholders[_page][__account]) {\r\n                _pageShareholders[_page].push(__account);\r\n                _isPageShareholders[_page][__account] = true;\r\n            }\r\n\r\n            _vokens = _vokens.add(__value);\r\n            _pageVokens[_page] = _pageVokens[_page].add(__value);\r\n            _pageVokenSum[_page] = _vokens;\r\n            _pageVokenHoldings[_page][__account] = _pageVokenHoldings[_page][__account].add(__value);\r\n\r\n            assert(_mintWithAllocation(__account, __value));\r\n        }\r\n\r\n        return true;\r\n    }\r\n}","ABI":"[{\"constant\":true,\"inputs\":[{\"name\":\"pageNumber\",\"type\":\"uint256\"}],\"name\":\"pageVokenSum\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"page\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"account\",\"type\":\"address\"},{\"name\":\"pageNumber\",\"type\":\"uint256\"}],\"name\":\"etherDividend\",\"outputs\":[{\"name\":\"amount\",\"type\":\"uint256\"},{\"name\":\"dividend\",\"type\":\"uint256\"},{\"name\":\"remain\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"account\",\"type\":\"address\"}],\"name\":\"addProxy\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"account\",\"type\":\"address\"}],\"name\":\"isProxy\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"recipient\",\"type\":\"address\"},{\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"withdrawEther\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"account\",\"type\":\"address\"}],\"name\":\"allocations\",\"outputs\":[{\"name\":\"allocationsCounter\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"vokens\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"acceptOwnership\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"account\",\"type\":\"address\"},{\"name\":\"pageNumber\",\"type\":\"uint256\"}],\"name\":\"vokenHolding\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"account\",\"type\":\"address\"},{\"name\":\"index\",\"type\":\"uint256\"}],\"name\":\"allocation\",\"outputs\":[{\"name\":\"amount\",\"type\":\"uint256\"},{\"name\":\"timestamp\",\"type\":\"uint256\"},{\"name\":\"interval\",\"type\":\"uint256\"},{\"name\":\"steps\",\"type\":\"uint256\"},{\"name\":\"available\",\"type\":\"uint256\"},{\"name\":\"reserved\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"},{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"isOwner\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"ethers\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"VOKEN\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"pageNumber\",\"type\":\"uint256\"}],\"name\":\"shareholders\",\"outputs\":[{\"name\":\"\",\"type\":\"address[]\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"pageNumber\",\"type\":\"uint256\"}],\"name\":\"counter\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"pageNumber\",\"type\":\"uint256\"}],\"name\":\"pageEndingBlock\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"account\",\"type\":\"address\"}],\"name\":\"removeProxy\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"pageNumber\",\"type\":\"uint256\"}],\"name\":\"pageEtherSum\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"pageNumber\",\"type\":\"uint256\"}],\"name\":\"pageEthers\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"account\",\"type\":\"address\"}],\"name\":\"reservedOf\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"tokenAddr\",\"type\":\"address\"},{\"name\":\"recipient\",\"type\":\"address\"},{\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"rescueTokens\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"pageNumber\",\"type\":\"uint256\"}],\"name\":\"pageVokens\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"endPage\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"vokenMainContract\",\"type\":\"address\"}],\"name\":\"setVokenMainContract\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"accounts\",\"type\":\"address[]\"},{\"name\":\"values\",\"type\":\"uint256[]\"}],\"name\":\"pushShareholders\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"fallback\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"account\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"amount\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"page\",\"type\":\"uint256\"}],\"name\":\"Dividend\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"account\",\"type\":\"address\"}],\"name\":\"ProxyAdded\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"account\",\"type\":\"address\"}],\"name\":\"ProxyRemoved\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipAccepted\",\"type\":\"event\"}]","ContractName":"VokenShareholders","CompilerVersion":"v0.5.10+commit.5a6ea5b1","OptimizationUsed":"1","Runs":"200","ConstructorArguments":"","Library":"","LicenseType":"GNU GPLv3","SwarmSource":"bzzr://b8986cd8452739c208daf20c0ae26362eea48f9a546397c8d627ff58397a2e4f"}]}