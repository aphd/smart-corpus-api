{"status":"1","message":"OK","result":[{"SourceCode":"// full source code: https://github.com/saturn-network/erc20wrapper\r\npragma solidity 0.4.20;\r\n\r\n// File: contracts/SafeMath.sol\r\n\r\nlibrary SafeMath {\r\n  function mul(uint256 a, uint256 b) internal pure returns (uint256) {\r\n    uint256 c = a * b;\r\n    assert(a == 0 || c / a == b);\r\n    return c;\r\n  }\r\n\r\n  function div(uint256 a, uint256 b) internal pure returns (uint256) {\r\n    // assert(b > 0); // Solidity automatically throws when dividing by 0\r\n    uint256 c = a / b;\r\n    // assert(a == b * c + a % b); // There is no case in which this doesn't hold\r\n    return c;\r\n  }\r\n\r\n  function sub(uint256 a, uint256 b) internal pure returns (uint256) {\r\n    assert(b <= a);\r\n    return a - b;\r\n  }\r\n\r\n  function add(uint256 a, uint256 b) internal pure returns (uint256) {\r\n    uint256 c = a + b;\r\n    assert(c >= a);\r\n    return c;\r\n  }\r\n}\r\n\r\n// File: contracts/ERC223.sol\r\n\r\ncontract ERC223 {\r\n  uint public totalSupply;\r\n  function balanceOf(address who) constant public returns (uint);\r\n\r\n  function name() constant public returns (string _name);\r\n  function symbol() constant public returns (string _symbol);\r\n  function decimals() constant public returns (uint8 _decimals);\r\n  function totalSupply() constant public returns (uint256 _supply);\r\n\r\n  function transfer(address to, uint value) public returns (bool ok);\r\n  function transfer(address to, uint value, bytes data) public returns (bool ok);\r\n  event Transfer(address indexed _from, address indexed _to, uint256 _value);\r\n  event ERC223Transfer(address indexed _from, address indexed _to, uint256 _value, bytes _data);\r\n}\r\n\r\ncontract ContractReceiver {\r\n  function tokenFallback(address _from, uint _value, bytes _data) public;\r\n}\r\n\r\ncontract ERC223I is ERC223 {\r\n  using SafeMath for uint;\r\n\r\n  mapping(address => uint) balances;\r\n\r\n  string public name;\r\n  string public symbol;\r\n  uint8 public decimals;\r\n  uint256 public totalSupply;\r\n\r\n\r\n  function name() constant public returns (string _name) {\r\n    return name;\r\n  }\r\n  function symbol() constant public returns (string _symbol) {\r\n    return symbol;\r\n  }\r\n  function decimals() constant public returns (uint8 _decimals) {\r\n    return decimals;\r\n  }\r\n  function totalSupply() constant public returns (uint256 _totalSupply) {\r\n    return totalSupply;\r\n  }\r\n\r\n  function transfer(address _to, uint _value, bytes _data) public returns (bool success) {\r\n    if (isContract(_to)) {\r\n      return transferToContract(_to, _value, _data);\r\n    } else {\r\n      return transferToAddress(_to, _value, _data);\r\n    }\r\n  }\r\n\r\n  function transfer(address _to, uint _value) public returns (bool success) {\r\n    bytes memory empty;\r\n    if (isContract(_to)) {\r\n      return transferToContract(_to, _value, empty);\r\n    } else {\r\n      return transferToAddress(_to, _value, empty);\r\n    }\r\n  }\r\n\r\n  function isContract(address _addr) private view returns (bool is_contract) {\r\n    uint length;\r\n    assembly {\r\n      length := extcodesize(_addr)\r\n    }\r\n    return (length > 0);\r\n  }\r\n\r\n  function transferToAddress(address _to, uint _value, bytes _data) private returns (bool success) {\r\n    if (balanceOf(msg.sender) < _value) revert();\r\n    balances[msg.sender] = balanceOf(msg.sender).sub(_value);\r\n    balances[_to] = balanceOf(_to).add(_value);\r\n    Transfer(msg.sender, _to, _value);\r\n    ERC223Transfer(msg.sender, _to, _value, _data);\r\n    return true;\r\n  }\r\n\r\n  function transferToContract(address _to, uint _value, bytes _data) private returns (bool success) {\r\n    if (balanceOf(msg.sender) < _value) revert();\r\n    balances[msg.sender] = balanceOf(msg.sender).sub(_value);\r\n    balances[_to] = balanceOf(_to).add(_value);\r\n    ContractReceiver reciever = ContractReceiver(_to);\r\n    reciever.tokenFallback(msg.sender, _value, _data);\r\n    Transfer(msg.sender, _to, _value);\r\n    ERC223Transfer(msg.sender, _to, _value, _data);\r\n    return true;\r\n  }\r\n\r\n  function balanceOf(address _owner) constant public returns (uint balance) {\r\n    return balances[_owner];\r\n  }\r\n}\r\n\r\n// File: contracts/ERC20Wrapper.sol\r\n\r\ncontract ERC20 {\r\n    function totalSupply() public view returns (uint256);\r\n    function balanceOf(address holder) public view returns (uint256);\r\n    function allowance(address holder, address other) public view returns (uint256);\r\n\r\n    function approve(address other, uint256 amount) public returns (bool);\r\n    function transfer(address to, uint256 amount) public returns (bool);\r\n    function transferFrom(\r\n        address from, address to, uint256 amount\r\n    ) public returns (bool);\r\n\r\n    event Transfer(address indexed from, address indexed to, uint256 value);\r\n    event Approval(address indexed owner, address indexed spender, uint256 value);\r\n}\r\n\r\ncontract ERC20Wrapper is ContractReceiver, ERC20 {\r\n  using SafeMath for uint;\r\n\r\n  bool private rentrancy_lock = false;\r\n  modifier nonReentrant() {\r\n    require(!rentrancy_lock);\r\n    rentrancy_lock = true;\r\n    _;\r\n    rentrancy_lock = false;\r\n  }\r\n\r\n  event Burn(address indexed from, uint256 amount);\r\n  event Mint(address indexed to, uint256 amount);\r\n\r\n  ERC223 private originalToken;\r\n  mapping (address => uint256) private _balances;\r\n  mapping (address => mapping (address => uint256)) private _allowances;\r\n  string private _name;\r\n  string private _symbol;\r\n\r\n  // constructor\r\n  function ERC20Wrapper(address token, string name, string symbol) public {\r\n    originalToken = ERC223(token);\r\n    _name = name;\r\n    _symbol = symbol;\r\n  }\r\n\r\n  // views\r\n  function totalSupply() public view returns (uint256) {\r\n    // supply of wrapped token is equal to the wrapper's collateral balance\r\n    return originalToken.balanceOf(address(this));\r\n  }\r\n  function decimals() public view returns (uint8) {\r\n    return originalToken.decimals();\r\n  }\r\n  function balanceOf(address account) public view returns (uint256) {\r\n    return _balances[account];\r\n  }\r\n  function allowance(address owner, address spender) public view returns (uint256) {\r\n    return _allowances[owner][spender];\r\n  }\r\n  function name() public constant returns (string) {\r\n    return _name;\r\n  }\r\n  function symbol() public constant returns (string) {\r\n    return _symbol;\r\n  }\r\n\r\n  // erc20 public interface\r\n  // incoming ETH -> revert\r\n  function () public payable {\r\n    revert();\r\n  }\r\n  function approve(address other, uint256 amount) public returns (bool) {\r\n    _approve(msg.sender, other, amount);\r\n    return true;\r\n  }\r\n  function transfer(address to, uint256 amount) public returns (bool) {\r\n    _transfer(msg.sender, to, amount);\r\n    return true;\r\n  }\r\n  function transferFrom(\r\n      address from, address to, uint256 amount\r\n  ) public returns (bool) {\r\n    _transfer(from, to, amount);\r\n    _approve(from, msg.sender, _allowances[from][msg.sender].sub(amount));\r\n    return true;\r\n  }\r\n  // these two functions manipulating allowance aren't in ERC20 standard but\r\n  // may be implemented by some #defi smart contracts so we just add them\r\n  function increaseAllowance(address spender, uint256 addedValue) public returns (bool) {\r\n    _approve(msg.sender, spender, _allowances[msg.sender][spender].add(addedValue));\r\n    return true;\r\n  }\r\n  function decreaseAllowance(address spender, uint256 subtractedValue) public returns (bool) {\r\n    _approve(msg.sender, spender, _allowances[msg.sender][spender].sub(subtractedValue));\r\n    return true;\r\n  }\r\n\r\n  // erc20wrapper public interface\r\n  function tokenFallback(address from, uint256 amount, bytes) public {\r\n    // incoming ERC223 -> only allow wrapped token\r\n    require(msg.sender == address(originalToken));\r\n    // mint ERC20 token in same amount as received erc223\r\n    _mint(from, amount);\r\n  }\r\n  function burn(uint256 amount) public returns (bool) {\r\n    _burn(msg.sender, amount);\r\n    return true;\r\n  }\r\n  function burnFrom(address requestor, uint256 amount) public returns (bool) {\r\n    _approve(requestor, msg.sender, _allowances[requestor][msg.sender].sub(amount));\r\n    _burn(requestor, amount);\r\n    return true;\r\n  }\r\n\r\n  // private helpers\r\n  function _transfer(address sender, address recipient, uint256 amount) private {\r\n    require(sender != address(0));\r\n    require(recipient != address(0));\r\n    _balances[sender] = _balances[sender].sub(amount);\r\n    _balances[recipient] = _balances[recipient].add(amount);\r\n    Transfer(sender, recipient, amount);\r\n  }\r\n  function _approve(address owner, address spender, uint256 amount) private {\r\n    require(owner != address(0));\r\n    require(spender != address(0));\r\n    _allowances[owner][spender] = amount;\r\n    Approval(owner, spender, amount);\r\n  }\r\n  function _mint(address account, uint256 amount) private nonReentrant {\r\n    _balances[account] = _balances[account].add(amount);\r\n    Transfer(address(0), account, amount);\r\n    Mint(account, amount);\r\n  }\r\n  function _burn(address account, uint256 amount) private nonReentrant {\r\n    _balances[account] = _balances[account].sub(amount);\r\n    originalToken.transfer(account, amount);\r\n    Transfer(account, address(0), amount);\r\n    Burn(account, amount);\r\n  }\r\n}","ABI":"[{\"constant\":true,\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"other\",\"type\":\"address\"},{\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"from\",\"type\":\"address\"},{\"name\":\"to\",\"type\":\"address\"},{\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"decimals\",\"outputs\":[{\"name\":\"\",\"type\":\"uint8\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"spender\",\"type\":\"address\"},{\"name\":\"addedValue\",\"type\":\"uint256\"}],\"name\":\"increaseAllowance\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"burn\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"account\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"requestor\",\"type\":\"address\"},{\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"burnFrom\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"spender\",\"type\":\"address\"},{\"name\":\"subtractedValue\",\"type\":\"uint256\"}],\"name\":\"decreaseAllowance\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"to\",\"type\":\"address\"},{\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"from\",\"type\":\"address\"},{\"name\":\"amount\",\"type\":\"uint256\"},{\"name\":\"\",\"type\":\"bytes\"}],\"name\":\"tokenFallback\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"owner\",\"type\":\"address\"},{\"name\":\"spender\",\"type\":\"address\"}],\"name\":\"allowance\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"name\":\"token\",\"type\":\"address\"},{\"name\":\"name\",\"type\":\"string\"},{\"name\":\"symbol\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"fallback\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"from\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"Burn\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"Mint\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"spender\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"}]","ContractName":"ERC20Wrapper","CompilerVersion":"v0.4.20+commit.3155dd80","OptimizationUsed":"1","Runs":"200","ConstructorArguments":"000000000000000000000000b9440022a095343b440d590fcd2d7a3794bd76c8000000000000000000000000000000000000000000000000000000000000006000000000000000000000000000000000000000000000000000000000000000a0000000000000000000000000000000000000000000000000000000000000001853617475726e2044414f20746f6b656e20284552433230290000000000000000000000000000000000000000000000000000000000000000000000000000000653415455524e0000000000000000000000000000000000000000000000000000","Library":"","LicenseType":"MIT","SwarmSource":"bzzr://d166bf0f6382f71cb74fb5307e9cd4043c1f103ba53ed8041dd0c126b7ae5ac4"}]}