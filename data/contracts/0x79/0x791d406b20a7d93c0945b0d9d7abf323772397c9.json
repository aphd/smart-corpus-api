{"status":"1","message":"OK","result":[{"SourceCode":"pragma solidity ^0.5.10;\r\n\r\n// File: openzeppelin-solidity/contracts/math/SafeMath.sol\r\n\r\n/**\r\n * @dev Wrappers over Solidity's arithmetic operations with added overflow\r\n * checks.\r\n *\r\n * Arithmetic operations in Solidity wrap on overflow. This can easily result\r\n * in bugs, because programmers usually assume that an overflow raises an\r\n * error, which is the standard behavior in high level programming languages.\r\n * `SafeMath` restores this intuition by reverting the transaction when an\r\n * operation overflows.\r\n *\r\n * Using this library instead of the unchecked operations eliminates an entire\r\n * class of bugs, so it's recommended to use it always.\r\n */\r\nlibrary SafeMath {\r\n    /**\r\n     * @dev Returns the addition of two unsigned integers, reverting on\r\n     * overflow.\r\n     *\r\n     * Counterpart to Solidity's `+` operator.\r\n     *\r\n     * Requirements:\r\n     * - Addition cannot overflow.\r\n     */\r\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        uint256 c = a + b;\r\n        require(c >= a, \"SafeMath: addition overflow\");\r\n\r\n        return c;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the subtraction of two unsigned integers, reverting on\r\n     * overflow (when the result is negative).\r\n     *\r\n     * Counterpart to Solidity's `-` operator.\r\n     *\r\n     * Requirements:\r\n     * - Subtraction cannot overflow.\r\n     */\r\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        require(b <= a, \"SafeMath: subtraction overflow\");\r\n        uint256 c = a - b;\r\n\r\n        return c;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the multiplication of two unsigned integers, reverting on\r\n     * overflow.\r\n     *\r\n     * Counterpart to Solidity's `*` operator.\r\n     *\r\n     * Requirements:\r\n     * - Multiplication cannot overflow.\r\n     */\r\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        // Gas optimization: this is cheaper than requiring 'a' not being zero, but the\r\n        // benefit is lost if 'b' is also tested.\r\n        // See: https://github.com/OpenZeppelin/openzeppelin-solidity/pull/522\r\n        if (a == 0) {\r\n            return 0;\r\n        }\r\n\r\n        uint256 c = a * b;\r\n        require(c / a == b, \"SafeMath: multiplication overflow\");\r\n\r\n        return c;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the integer division of two unsigned integers. Reverts on\r\n     * division by zero. The result is rounded towards zero.\r\n     *\r\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\r\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\r\n     * uses an invalid opcode to revert (consuming all remaining gas).\r\n     *\r\n     * Requirements:\r\n     * - The divisor cannot be zero.\r\n     */\r\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        // Solidity only automatically asserts when dividing by 0\r\n        require(b > 0, \"SafeMath: division by zero\");\r\n        uint256 c = a / b;\r\n        // assert(a == b * c + a % b); // There is no case in which this doesn't hold\r\n\r\n        return c;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\r\n     * Reverts when dividing by zero.\r\n     *\r\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\r\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\r\n     * invalid opcode to revert (consuming all remaining gas).\r\n     *\r\n     * Requirements:\r\n     * - The divisor cannot be zero.\r\n     */\r\n    function mod(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        require(b != 0, \"SafeMath: modulo by zero\");\r\n        return a % b;\r\n    }\r\n}\r\n\r\n// File: openzeppelin-solidity/contracts/token/ERC20/IERC20.sol\r\n\r\n/**\r\n * @dev Interface of the ERC20 standard as defined in the EIP. Does not include\r\n * the optional functions; to access them see `ERC20Detailed`.\r\n */\r\ninterface IERC20 {\r\n    /**\r\n     * @dev Returns the amount of tokens in existence.\r\n     */\r\n    function totalSupply() external view returns (uint256);\r\n\r\n    /**\r\n     * @dev Returns the amount of tokens owned by `account`.\r\n     */\r\n    function balanceOf(address account) external view returns (uint256);\r\n\r\n    /**\r\n     * @dev Moves `amount` tokens from the caller's account to `recipient`.\r\n     *\r\n     * Returns a boolean value indicating whether the operation succeeded.\r\n     *\r\n     * Emits a `Transfer` event.\r\n     */\r\n    function transfer(address recipient, uint256 amount) external returns (bool);\r\n\r\n    /**\r\n     * @dev Returns the remaining number of tokens that `spender` will be\r\n     * allowed to spend on behalf of `owner` through `transferFrom`. This is\r\n     * zero by default.\r\n     *\r\n     * This value changes when `approve` or `transferFrom` are called.\r\n     */\r\n    function allowance(address owner, address spender) external view returns (uint256);\r\n\r\n    /**\r\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\r\n     *\r\n     * Returns a boolean value indicating whether the operation succeeded.\r\n     *\r\n     * > Beware that changing an allowance with this method brings the risk\r\n     * that someone may use both the old and the new allowance by unfortunate\r\n     * transaction ordering. One possible solution to mitigate this race\r\n     * condition is to first reduce the spender's allowance to 0 and set the\r\n     * desired value afterwards:\r\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\r\n     *\r\n     * Emits an `Approval` event.\r\n     */\r\n    function approve(address spender, uint256 amount) external returns (bool);\r\n\r\n    /**\r\n     * @dev Moves `amount` tokens from `sender` to `recipient` using the\r\n     * allowance mechanism. `amount` is then deducted from the caller's\r\n     * allowance.\r\n     *\r\n     * Returns a boolean value indicating whether the operation succeeded.\r\n     *\r\n     * Emits a `Transfer` event.\r\n     */\r\n    function transferFrom(address sender, address recipient, uint256 amount) external returns (bool);\r\n\r\n    /**\r\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\r\n     * another (`to`).\r\n     *\r\n     * Note that `value` may be zero.\r\n     */\r\n    event Transfer(address indexed from, address indexed to, uint256 value);\r\n\r\n    /**\r\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\r\n     * a call to `approve`. `value` is the new allowance.\r\n     */\r\n    event Approval(address indexed owner, address indexed spender, uint256 value);\r\n}\r\n\r\n// File: openzeppelin-solidity/contracts/utils/Address.sol\r\n\r\n/**\r\n * @dev Collection of functions related to the address type,\r\n */\r\nlibrary Address {\r\n    /**\r\n     * @dev Returns true if `account` is a contract.\r\n     *\r\n     * This test is non-exhaustive, and there may be false-negatives: during the\r\n     * execution of a contract's constructor, its address will be reported as\r\n     * not containing a contract.\r\n     *\r\n     * > It is unsafe to assume that an address for which this function returns\r\n     * false is an externally-owned account (EOA) and not a contract.\r\n     */\r\n    function isContract(address account) internal view returns (bool) {\r\n        // This method relies in extcodesize, which returns 0 for contracts in\r\n        // construction, since the code is only stored at the end of the\r\n        // constructor execution.\r\n\r\n        uint256 size;\r\n        // solhint-disable-next-line no-inline-assembly\r\n        assembly { size := extcodesize(account) }\r\n        return size > 0;\r\n    }\r\n}\r\n\r\n// File: openzeppelin-solidity/contracts/token/ERC20/SafeERC20.sol\r\n\r\n/**\r\n * @title SafeERC20\r\n * @dev Wrappers around ERC20 operations that throw on failure (when the token\r\n * contract returns false). Tokens that return no value (and instead revert or\r\n * throw on failure) are also supported, non-reverting calls are assumed to be\r\n * successful.\r\n * To use this library you can add a `using SafeERC20 for ERC20;` statement to your contract,\r\n * which allows you to call the safe operations as `token.safeTransfer(...)`, etc.\r\n */\r\nlibrary SafeERC20 {\r\n    using SafeMath for uint256;\r\n    using Address for address;\r\n\r\n    function safeTransfer(IERC20 token, address to, uint256 value) internal {\r\n        callOptionalReturn(token, abi.encodeWithSelector(token.transfer.selector, to, value));\r\n    }\r\n\r\n    function safeTransferFrom(IERC20 token, address from, address to, uint256 value) internal {\r\n        callOptionalReturn(token, abi.encodeWithSelector(token.transferFrom.selector, from, to, value));\r\n    }\r\n\r\n    function safeApprove(IERC20 token, address spender, uint256 value) internal {\r\n        // safeApprove should only be called when setting an initial allowance,\r\n        // or when resetting it to zero. To increase and decrease it, use\r\n        // 'safeIncreaseAllowance' and 'safeDecreaseAllowance'\r\n        // solhint-disable-next-line max-line-length\r\n        require((value == 0) || (token.allowance(address(this), spender) == 0),\r\n            \"SafeERC20: approve from non-zero to non-zero allowance\"\r\n        );\r\n        callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, value));\r\n    }\r\n\r\n    function safeIncreaseAllowance(IERC20 token, address spender, uint256 value) internal {\r\n        uint256 newAllowance = token.allowance(address(this), spender).add(value);\r\n        callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\r\n    }\r\n\r\n    function safeDecreaseAllowance(IERC20 token, address spender, uint256 value) internal {\r\n        uint256 newAllowance = token.allowance(address(this), spender).sub(value);\r\n        callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\r\n    }\r\n\r\n    /**\r\n     * @dev Imitates a Solidity high-level call (i.e. a regular function call to a contract), relaxing the requirement\r\n     * on the return value: the return value is optional (but if data is returned, it must not be false).\r\n     * @param token The token targeted by the call.\r\n     * @param data The call data (encoded using abi.encode or one of its variants).\r\n     */\r\n    function callOptionalReturn(IERC20 token, bytes memory data) private {\r\n        // We need to perform a low level call here, to bypass Solidity's return data size checking mechanism, since\r\n        // we're implementing it ourselves.\r\n\r\n        // A Solidity high level call has three parts:\r\n        //  1. The target address is checked to verify it contains contract code\r\n        //  2. The call itself is made, and success asserted\r\n        //  3. The return value is decoded, which in turn checks the size of the returned data.\r\n        // solhint-disable-next-line max-line-length\r\n        require(address(token).isContract(), \"SafeERC20: call to non-contract\");\r\n\r\n        // solhint-disable-next-line avoid-low-level-calls\r\n        (bool success, bytes memory returndata) = address(token).call(data);\r\n        require(success, \"SafeERC20: low-level call failed\");\r\n\r\n        if (returndata.length > 0) { // Return data is optional\r\n            // solhint-disable-next-line max-line-length\r\n            require(abi.decode(returndata, (bool)), \"SafeERC20: ERC20 operation did not succeed\");\r\n        }\r\n    }\r\n}\r\n\r\n// File: openzeppelin-solidity/contracts/ownership/Ownable.sol\r\n\r\n/**\r\n * @dev Contract module which provides a basic access control mechanism, where\r\n * there is an account (an owner) that can be granted exclusive access to\r\n * specific functions.\r\n *\r\n * This module is used through inheritance. It will make available the modifier\r\n * `onlyOwner`, which can be aplied to your functions to restrict their use to\r\n * the owner.\r\n */\r\ncontract Ownable {\r\n    address private _owner;\r\n\r\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\r\n\r\n    /**\r\n     * @dev Initializes the contract setting the deployer as the initial owner.\r\n     */\r\n    constructor () internal {\r\n        _owner = msg.sender;\r\n        emit OwnershipTransferred(address(0), _owner);\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the address of the current owner.\r\n     */\r\n    function owner() public view returns (address) {\r\n        return _owner;\r\n    }\r\n\r\n    /**\r\n     * @dev Throws if called by any account other than the owner.\r\n     */\r\n    modifier onlyOwner() {\r\n        require(isOwner(), \"Ownable: caller is not the owner\");\r\n        _;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns true if the caller is the current owner.\r\n     */\r\n    function isOwner() public view returns (bool) {\r\n        return msg.sender == _owner;\r\n    }\r\n\r\n    /**\r\n     * @dev Leaves the contract without owner. It will not be possible to call\r\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\r\n     *\r\n     * > Note: Renouncing ownership will leave the contract without an owner,\r\n     * thereby removing any functionality that is only available to the owner.\r\n     */\r\n    function renounceOwnership() public onlyOwner {\r\n        emit OwnershipTransferred(_owner, address(0));\r\n        _owner = address(0);\r\n    }\r\n\r\n    /**\r\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\r\n     * Can only be called by the current owner.\r\n     */\r\n    function transferOwnership(address newOwner) public onlyOwner {\r\n        _transferOwnership(newOwner);\r\n    }\r\n\r\n    /**\r\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\r\n     */\r\n    function _transferOwnership(address newOwner) internal {\r\n        require(newOwner != address(0), \"Ownable: new owner is the zero address\");\r\n        emit OwnershipTransferred(_owner, newOwner);\r\n        _owner = newOwner;\r\n    }\r\n}\r\n\r\n// File: eth-token-recover/contracts/TokenRecover.sol\r\n\r\n/**\r\n * @title TokenRecover\r\n * @author Vittorio Minacori (https://github.com/vittominacori)\r\n * @dev Allow to recover any ERC20 sent into the contract for error\r\n */\r\ncontract TokenRecover is Ownable {\r\n\r\n    /**\r\n     * @dev Remember that only owner can call so be careful when use on contracts generated from other contracts.\r\n     * @param tokenAddress The token contract address\r\n     * @param tokenAmount Number of tokens to be sent\r\n     */\r\n    function recoverERC20(address tokenAddress, uint256 tokenAmount) public onlyOwner {\r\n        IERC20(tokenAddress).transfer(owner(), tokenAmount);\r\n    }\r\n}\r\n\r\n// File: openzeppelin-solidity/contracts/introspection/ERC165Checker.sol\r\n\r\n/**\r\n * @dev Library used to query support of an interface declared via `IERC165`.\r\n *\r\n * Note that these functions return the actual result of the query: they do not\r\n * `revert` if an interface is not supported. It is up to the caller to decide\r\n * what to do in these cases.\r\n */\r\nlibrary ERC165Checker {\r\n    // As per the EIP-165 spec, no interface should ever match 0xffffffff\r\n    bytes4 private constant _INTERFACE_ID_INVALID = 0xffffffff;\r\n\r\n    /*\r\n     * bytes4(keccak256('supportsInterface(bytes4)')) == 0x01ffc9a7\r\n     */\r\n    bytes4 private constant _INTERFACE_ID_ERC165 = 0x01ffc9a7;\r\n\r\n    /**\r\n     * @dev Returns true if `account` supports the `IERC165` interface,\r\n     */\r\n    function _supportsERC165(address account) internal view returns (bool) {\r\n        // Any contract that implements ERC165 must explicitly indicate support of\r\n        // InterfaceId_ERC165 and explicitly indicate non-support of InterfaceId_Invalid\r\n        return _supportsERC165Interface(account, _INTERFACE_ID_ERC165) &&\r\n            !_supportsERC165Interface(account, _INTERFACE_ID_INVALID);\r\n    }\r\n\r\n    /**\r\n     * @dev Returns true if `account` supports the interface defined by\r\n     * `interfaceId`. Support for `IERC165` itself is queried automatically.\r\n     *\r\n     * See `IERC165.supportsInterface`.\r\n     */\r\n    function _supportsInterface(address account, bytes4 interfaceId) internal view returns (bool) {\r\n        // query support of both ERC165 as per the spec and support of _interfaceId\r\n        return _supportsERC165(account) &&\r\n            _supportsERC165Interface(account, interfaceId);\r\n    }\r\n\r\n    /**\r\n     * @dev Returns true if `account` supports all the interfaces defined in\r\n     * `interfaceIds`. Support for `IERC165` itself is queried automatically.\r\n     *\r\n     * Batch-querying can lead to gas savings by skipping repeated checks for\r\n     * `IERC165` support.\r\n     *\r\n     * See `IERC165.supportsInterface`.\r\n     */\r\n    function _supportsAllInterfaces(address account, bytes4[] memory interfaceIds) internal view returns (bool) {\r\n        // query support of ERC165 itself\r\n        if (!_supportsERC165(account)) {\r\n            return false;\r\n        }\r\n\r\n        // query support of each interface in _interfaceIds\r\n        for (uint256 i = 0; i < interfaceIds.length; i++) {\r\n            if (!_supportsERC165Interface(account, interfaceIds[i])) {\r\n                return false;\r\n            }\r\n        }\r\n\r\n        // all interfaces supported\r\n        return true;\r\n    }\r\n\r\n    /**\r\n     * @notice Query if a contract implements an interface, does not check ERC165 support\r\n     * @param account The address of the contract to query for support of an interface\r\n     * @param interfaceId The interface identifier, as specified in ERC-165\r\n     * @return true if the contract at account indicates support of the interface with\r\n     * identifier interfaceId, false otherwise\r\n     * @dev Assumes that account contains a contract that supports ERC165, otherwise\r\n     * the behavior of this method is undefined. This precondition can be checked\r\n     * with the `supportsERC165` method in this library.\r\n     * Interface identification is specified in ERC-165.\r\n     */\r\n    function _supportsERC165Interface(address account, bytes4 interfaceId) private view returns (bool) {\r\n        // success determines whether the staticcall succeeded and result determines\r\n        // whether the contract at account indicates support of _interfaceId\r\n        (bool success, bool result) = _callERC165SupportsInterface(account, interfaceId);\r\n\r\n        return (success && result);\r\n    }\r\n\r\n    /**\r\n     * @notice Calls the function with selector 0x01ffc9a7 (ERC165) and suppresses throw\r\n     * @param account The address of the contract to query for support of an interface\r\n     * @param interfaceId The interface identifier, as specified in ERC-165\r\n     * @return success true if the STATICCALL succeeded, false otherwise\r\n     * @return result true if the STATICCALL succeeded and the contract at account\r\n     * indicates support of the interface with identifier interfaceId, false otherwise\r\n     */\r\n    function _callERC165SupportsInterface(address account, bytes4 interfaceId)\r\n        private\r\n        view\r\n        returns (bool success, bool result)\r\n    {\r\n        bytes memory encodedParams = abi.encodeWithSelector(_INTERFACE_ID_ERC165, interfaceId);\r\n\r\n        // solhint-disable-next-line no-inline-assembly\r\n        assembly {\r\n            let encodedParams_data := add(0x20, encodedParams)\r\n            let encodedParams_size := mload(encodedParams)\r\n\r\n            let output := mload(0x40)    // Find empty storage location using \"free memory pointer\"\r\n            mstore(output, 0x0)\r\n\r\n            success := staticcall(\r\n                30000,                   // 30k gas\r\n                account,                 // To addr\r\n                encodedParams_data,\r\n                encodedParams_size,\r\n                output,\r\n                0x20                     // Outputs are 32 bytes long\r\n            )\r\n\r\n            result := mload(output)      // Load the result\r\n        }\r\n    }\r\n}\r\n\r\n// File: openzeppelin-solidity/contracts/introspection/IERC165.sol\r\n\r\n/**\r\n * @dev Interface of the ERC165 standard, as defined in the\r\n * [EIP](https://eips.ethereum.org/EIPS/eip-165).\r\n *\r\n * Implementers can declare support of contract interfaces, which can then be\r\n * queried by others (`ERC165Checker`).\r\n *\r\n * For an implementation, see `ERC165`.\r\n */\r\ninterface IERC165 {\r\n    /**\r\n     * @dev Returns true if this contract implements the interface defined by\r\n     * `interfaceId`. See the corresponding\r\n     * [EIP section](https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified)\r\n     * to learn more about how these ids are created.\r\n     *\r\n     * This function call must use less than 30 000 gas.\r\n     */\r\n    function supportsInterface(bytes4 interfaceId) external view returns (bool);\r\n}\r\n\r\n// File: openzeppelin-solidity/contracts/introspection/ERC165.sol\r\n\r\n/**\r\n * @dev Implementation of the `IERC165` interface.\r\n *\r\n * Contracts may inherit from this and call `_registerInterface` to declare\r\n * their support of an interface.\r\n */\r\ncontract ERC165 is IERC165 {\r\n    /*\r\n     * bytes4(keccak256('supportsInterface(bytes4)')) == 0x01ffc9a7\r\n     */\r\n    bytes4 private constant _INTERFACE_ID_ERC165 = 0x01ffc9a7;\r\n\r\n    /**\r\n     * @dev Mapping of interface ids to whether or not it's supported.\r\n     */\r\n    mapping(bytes4 => bool) private _supportedInterfaces;\r\n\r\n    constructor () internal {\r\n        // Derived contracts need only register support for their own interfaces,\r\n        // we register support for ERC165 itself here\r\n        _registerInterface(_INTERFACE_ID_ERC165);\r\n    }\r\n\r\n    /**\r\n     * @dev See `IERC165.supportsInterface`.\r\n     *\r\n     * Time complexity O(1), guaranteed to always use less than 30 000 gas.\r\n     */\r\n    function supportsInterface(bytes4 interfaceId) external view returns (bool) {\r\n        return _supportedInterfaces[interfaceId];\r\n    }\r\n\r\n    /**\r\n     * @dev Registers the contract as an implementer of the interface defined by\r\n     * `interfaceId`. Support of the actual ERC165 interface is automatic and\r\n     * registering its interface id is not required.\r\n     *\r\n     * See `IERC165.supportsInterface`.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - `interfaceId` cannot be the ERC165 invalid interface (`0xffffffff`).\r\n     */\r\n    function _registerInterface(bytes4 interfaceId) internal {\r\n        require(interfaceId != 0xffffffff, \"ERC165: invalid interface id\");\r\n        _supportedInterfaces[interfaceId] = true;\r\n    }\r\n}\r\n\r\n// File: erc-payable-token/contracts/token/ERC1363/IERC1363.sol\r\n\r\n/**\r\n * @title IERC1363 Interface\r\n * @author Vittorio Minacori (https://github.com/vittominacori)\r\n * @dev Interface for a Payable Token contract as defined in\r\n *  https://github.com/ethereum/EIPs/issues/1363\r\n */\r\ncontract IERC1363 is IERC20, ERC165 {\r\n    /*\r\n     * Note: the ERC-165 identifier for this interface is 0x4bbee2df.\r\n     * 0x4bbee2df ===\r\n     *   bytes4(keccak256('transferAndCall(address,uint256)')) ^\r\n     *   bytes4(keccak256('transferAndCall(address,uint256,bytes)')) ^\r\n     *   bytes4(keccak256('transferFromAndCall(address,address,uint256)')) ^\r\n     *   bytes4(keccak256('transferFromAndCall(address,address,uint256,bytes)'))\r\n     */\r\n\r\n    /*\r\n     * Note: the ERC-165 identifier for this interface is 0xfb9ec8ce.\r\n     * 0xfb9ec8ce ===\r\n     *   bytes4(keccak256('approveAndCall(address,uint256)')) ^\r\n     *   bytes4(keccak256('approveAndCall(address,uint256,bytes)'))\r\n     */\r\n\r\n    /**\r\n     * @notice Transfer tokens from `msg.sender` to another address and then call `onTransferReceived` on receiver\r\n     * @param to address The address which you want to transfer to\r\n     * @param value uint256 The amount of tokens to be transferred\r\n     * @return true unless throwing\r\n     */\r\n    function transferAndCall(address to, uint256 value) public returns (bool);\r\n\r\n    /**\r\n     * @notice Transfer tokens from `msg.sender` to another address and then call `onTransferReceived` on receiver\r\n     * @param to address The address which you want to transfer to\r\n     * @param value uint256 The amount of tokens to be transferred\r\n     * @param data bytes Additional data with no specified format, sent in call to `to`\r\n     * @return true unless throwing\r\n     */\r\n    function transferAndCall(address to, uint256 value, bytes memory data) public returns (bool);\r\n\r\n    /**\r\n     * @notice Transfer tokens from one address to another and then call `onTransferReceived` on receiver\r\n     * @param from address The address which you want to send tokens from\r\n     * @param to address The address which you want to transfer to\r\n     * @param value uint256 The amount of tokens to be transferred\r\n     * @return true unless throwing\r\n     */\r\n    function transferFromAndCall(address from, address to, uint256 value) public returns (bool);\r\n\r\n\r\n    /**\r\n     * @notice Transfer tokens from one address to another and then call `onTransferReceived` on receiver\r\n     * @param from address The address which you want to send tokens from\r\n     * @param to address The address which you want to transfer to\r\n     * @param value uint256 The amount of tokens to be transferred\r\n     * @param data bytes Additional data with no specified format, sent in call to `to`\r\n     * @return true unless throwing\r\n     */\r\n    function transferFromAndCall(address from, address to, uint256 value, bytes memory data) public returns (bool);\r\n\r\n    /**\r\n     * @notice Approve the passed address to spend the specified amount of tokens on behalf of msg.sender\r\n     * and then call `onApprovalReceived` on spender.\r\n     * Beware that changing an allowance with this method brings the risk that someone may use both the old\r\n     * and the new allowance by unfortunate transaction ordering. One possible solution to mitigate this\r\n     * race condition is to first reduce the spender's allowance to 0 and set the desired value afterwards:\r\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\r\n     * @param spender address The address which will spend the funds\r\n     * @param value uint256 The amount of tokens to be spent\r\n     */\r\n    function approveAndCall(address spender, uint256 value) public returns (bool);\r\n\r\n    /**\r\n     * @notice Approve the passed address to spend the specified amount of tokens on behalf of msg.sender\r\n     * and then call `onApprovalReceived` on spender.\r\n     * Beware that changing an allowance with this method brings the risk that someone may use both the old\r\n     * and the new allowance by unfortunate transaction ordering. One possible solution to mitigate this\r\n     * race condition is to first reduce the spender's allowance to 0 and set the desired value afterwards:\r\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\r\n     * @param spender address The address which will spend the funds\r\n     * @param value uint256 The amount of tokens to be spent\r\n     * @param data bytes Additional data with no specified format, sent in call to `spender`\r\n     */\r\n    function approveAndCall(address spender, uint256 value, bytes memory data) public returns (bool);\r\n}\r\n\r\n// File: erc-payable-token/contracts/token/ERC1363/IERC1363Receiver.sol\r\n\r\n/**\r\n * @title IERC1363Receiver Interface\r\n * @author Vittorio Minacori (https://github.com/vittominacori)\r\n * @dev Interface for any contract that wants to support transferAndCall or transferFromAndCall\r\n *  from ERC1363 token contracts as defined in\r\n *  https://github.com/ethereum/EIPs/issues/1363\r\n */\r\ncontract IERC1363Receiver {\r\n    /*\r\n     * Note: the ERC-165 identifier for this interface is 0x88a7ca5c.\r\n     * 0x88a7ca5c === bytes4(keccak256(\"onTransferReceived(address,address,uint256,bytes)\"))\r\n     */\r\n\r\n    /**\r\n     * @notice Handle the receipt of ERC1363 tokens\r\n     * @dev Any ERC1363 smart contract calls this function on the recipient\r\n     * after a `transfer` or a `transferFrom`. This function MAY throw to revert and reject the\r\n     * transfer. Return of other than the magic value MUST result in the\r\n     * transaction being reverted.\r\n     * Note: the token contract address is always the message sender.\r\n     * @param operator address The address which called `transferAndCall` or `transferFromAndCall` function\r\n     * @param from address The address which are token transferred from\r\n     * @param value uint256 The amount of tokens transferred\r\n     * @param data bytes Additional data with no specified format\r\n     * @return `bytes4(keccak256(\"onTransferReceived(address,address,uint256,bytes)\"))`\r\n     *  unless throwing\r\n     */\r\n    function onTransferReceived(address operator, address from, uint256 value, bytes memory data) public returns (bytes4); // solhint-disable-line  max-line-length\r\n}\r\n\r\n// File: erc-payable-token/contracts/token/ERC1363/IERC1363Spender.sol\r\n\r\n/**\r\n * @title IERC1363Spender Interface\r\n * @author Vittorio Minacori (https://github.com/vittominacori)\r\n * @dev Interface for any contract that wants to support approveAndCall\r\n *  from ERC1363 token contracts as defined in\r\n *  https://github.com/ethereum/EIPs/issues/1363\r\n */\r\ncontract IERC1363Spender {\r\n    /*\r\n     * Note: the ERC-165 identifier for this interface is 0x7b04a2d0.\r\n     * 0x7b04a2d0 === bytes4(keccak256(\"onApprovalReceived(address,uint256,bytes)\"))\r\n     */\r\n\r\n    /**\r\n     * @notice Handle the approval of ERC1363 tokens\r\n     * @dev Any ERC1363 smart contract calls this function on the recipient\r\n     * after an `approve`. This function MAY throw to revert and reject the\r\n     * approval. Return of other than the magic value MUST result in the\r\n     * transaction being reverted.\r\n     * Note: the token contract address is always the message sender.\r\n     * @param owner address The address which called `approveAndCall` function\r\n     * @param value uint256 The amount of tokens to be spent\r\n     * @param data bytes Additional data with no specified format\r\n     * @return `bytes4(keccak256(\"onApprovalReceived(address,uint256,bytes)\"))`\r\n     *  unless throwing\r\n     */\r\n    function onApprovalReceived(address owner, uint256 value, bytes memory data) public returns (bytes4);\r\n}\r\n\r\n// File: erc-payable-token/contracts/payment/ERC1363Payable.sol\r\n\r\n/**\r\n * @title ERC1363Payable\r\n * @author Vittorio Minacori (https://github.com/vittominacori)\r\n * @dev Implementation proposal of a contract that wants to accept ERC1363 payments\r\n */\r\ncontract ERC1363Payable is IERC1363Receiver, IERC1363Spender, ERC165 {\r\n    using ERC165Checker for address;\r\n\r\n    /**\r\n     * @dev Magic value to be returned upon successful reception of ERC1363 tokens\r\n     *  Equals to `bytes4(keccak256(\"onTransferReceived(address,address,uint256,bytes)\"))`,\r\n     *  which can be also obtained as `IERC1363Receiver(0).onTransferReceived.selector`\r\n     */\r\n    bytes4 internal constant _INTERFACE_ID_ERC1363_RECEIVER = 0x88a7ca5c;\r\n\r\n    /**\r\n     * @dev Magic value to be returned upon successful approval of ERC1363 tokens.\r\n     * Equals to `bytes4(keccak256(\"onApprovalReceived(address,uint256,bytes)\"))`,\r\n     * which can be also obtained as `IERC1363Spender(0).onApprovalReceived.selector`\r\n     */\r\n    bytes4 internal constant _INTERFACE_ID_ERC1363_SPENDER = 0x7b04a2d0;\r\n\r\n    /*\r\n     * Note: the ERC-165 identifier for the ERC1363 token transfer\r\n     * 0x4bbee2df ===\r\n     *   bytes4(keccak256('transferAndCall(address,uint256)')) ^\r\n     *   bytes4(keccak256('transferAndCall(address,uint256,bytes)')) ^\r\n     *   bytes4(keccak256('transferFromAndCall(address,address,uint256)')) ^\r\n     *   bytes4(keccak256('transferFromAndCall(address,address,uint256,bytes)'))\r\n     */\r\n    bytes4 private constant _INTERFACE_ID_ERC1363_TRANSFER = 0x4bbee2df;\r\n\r\n    /*\r\n     * Note: the ERC-165 identifier for the ERC1363 token approval\r\n     * 0xfb9ec8ce ===\r\n     *   bytes4(keccak256('approveAndCall(address,uint256)')) ^\r\n     *   bytes4(keccak256('approveAndCall(address,uint256,bytes)'))\r\n     */\r\n    bytes4 private constant _INTERFACE_ID_ERC1363_APPROVE = 0xfb9ec8ce;\r\n\r\n    event TokensReceived(\r\n        address indexed operator,\r\n        address indexed from,\r\n        uint256 value,\r\n        bytes data\r\n    );\r\n\r\n    event TokensApproved(\r\n        address indexed owner,\r\n        uint256 value,\r\n        bytes data\r\n    );\r\n\r\n    // The ERC1363 token accepted\r\n    IERC1363 private _acceptedToken;\r\n\r\n    /**\r\n     * @param acceptedToken Address of the token being accepted\r\n     */\r\n    constructor(IERC1363 acceptedToken) public {\r\n        require(address(acceptedToken) != address(0));\r\n        require(\r\n            acceptedToken.supportsInterface(_INTERFACE_ID_ERC1363_TRANSFER) &&\r\n            acceptedToken.supportsInterface(_INTERFACE_ID_ERC1363_APPROVE)\r\n        );\r\n\r\n        _acceptedToken = acceptedToken;\r\n\r\n        // register the supported interface to conform to IERC1363Receiver and IERC1363Spender via ERC165\r\n        _registerInterface(_INTERFACE_ID_ERC1363_RECEIVER);\r\n        _registerInterface(_INTERFACE_ID_ERC1363_SPENDER);\r\n    }\r\n\r\n    /*\r\n     * @dev Note: remember that the token contract address is always the message sender.\r\n     * @param operator address The address which called `transferAndCall` or `transferFromAndCall` function\r\n     * @param from address The address which are token transferred from\r\n     * @param value uint256 The amount of tokens transferred\r\n     * @param data bytes Additional data with no specified format\r\n     */\r\n    function onTransferReceived(address operator, address from, uint256 value, bytes memory data) public returns (bytes4) { // solhint-disable-line  max-line-length\r\n        require(msg.sender == address(_acceptedToken));\r\n\r\n        emit TokensReceived(operator, from, value, data);\r\n\r\n        _transferReceived(operator, from, value, data);\r\n\r\n        return _INTERFACE_ID_ERC1363_RECEIVER;\r\n    }\r\n\r\n    /*\r\n     * @dev Note: remember that the token contract address is always the message sender.\r\n     * @param owner address The address which called `approveAndCall` function\r\n     * @param value uint256 The amount of tokens to be spent\r\n     * @param data bytes Additional data with no specified format\r\n     */\r\n    function onApprovalReceived(address owner, uint256 value, bytes memory data) public returns (bytes4) {\r\n        require(msg.sender == address(_acceptedToken));\r\n\r\n        emit TokensApproved(owner, value, data);\r\n\r\n        _approvalReceived(owner, value, data);\r\n\r\n        return _INTERFACE_ID_ERC1363_SPENDER;\r\n    }\r\n\r\n    /**\r\n     * @dev The ERC1363 token accepted\r\n     */\r\n    function acceptedToken() public view returns (IERC1363) {\r\n        return _acceptedToken;\r\n    }\r\n\r\n    /**\r\n     * @dev Called after validating a `onTransferReceived`. Override this method to\r\n     * make your stuffs within your contract.\r\n     * @param operator address The address which called `transferAndCall` or `transferFromAndCall` function\r\n     * @param from address The address which are token transferred from\r\n     * @param value uint256 The amount of tokens transferred\r\n     * @param data bytes Additional data with no specified format\r\n     */\r\n    function _transferReceived(address operator, address from, uint256 value, bytes memory data) internal {\r\n        // solhint-disable-previous-line no-empty-blocks\r\n\r\n        // optional override\r\n    }\r\n\r\n    /**\r\n     * @dev Called after validating a `onApprovalReceived`. Override this method to\r\n     * make your stuffs within your contract.\r\n     * @param owner address The address which called `approveAndCall` function\r\n     * @param value uint256 The amount of tokens to be spent\r\n     * @param data bytes Additional data with no specified format\r\n     */\r\n    function _approvalReceived(address owner, uint256 value, bytes memory data) internal {\r\n        // solhint-disable-previous-line no-empty-blocks\r\n\r\n        // optional override\r\n    }\r\n}\r\n\r\n// File: openzeppelin-solidity/contracts/access/Roles.sol\r\n\r\n/**\r\n * @title Roles\r\n * @dev Library for managing addresses assigned to a Role.\r\n */\r\nlibrary Roles {\r\n    struct Role {\r\n        mapping (address => bool) bearer;\r\n    }\r\n\r\n    /**\r\n     * @dev Give an account access to this role.\r\n     */\r\n    function add(Role storage role, address account) internal {\r\n        require(!has(role, account), \"Roles: account already has role\");\r\n        role.bearer[account] = true;\r\n    }\r\n\r\n    /**\r\n     * @dev Remove an account's access to this role.\r\n     */\r\n    function remove(Role storage role, address account) internal {\r\n        require(has(role, account), \"Roles: account does not have role\");\r\n        role.bearer[account] = false;\r\n    }\r\n\r\n    /**\r\n     * @dev Check if an account has this role.\r\n     * @return bool\r\n     */\r\n    function has(Role storage role, address account) internal view returns (bool) {\r\n        require(account != address(0), \"Roles: account is the zero address\");\r\n        return role.bearer[account];\r\n    }\r\n}\r\n\r\n// File: dao-smartcontracts/contracts/access/roles/DAORoles.sol\r\n\r\n/**\r\n * @title DAORoles\r\n * @author Vittorio Minacori (https://github.com/vittominacori)\r\n * @dev It identifies the DAO roles\r\n */\r\ncontract DAORoles is Ownable {\r\n    using Roles for Roles.Role;\r\n\r\n    event OperatorAdded(address indexed account);\r\n    event OperatorRemoved(address indexed account);\r\n\r\n    event DappAdded(address indexed account);\r\n    event DappRemoved(address indexed account);\r\n\r\n    Roles.Role private _operators;\r\n    Roles.Role private _dapps;\r\n\r\n    constructor () internal {} // solhint-disable-line no-empty-blocks\r\n\r\n    modifier onlyOperator() {\r\n        require(isOperator(msg.sender));\r\n        _;\r\n    }\r\n\r\n    modifier onlyDapp() {\r\n        require(isDapp(msg.sender));\r\n        _;\r\n    }\r\n\r\n    /**\r\n     * @dev Check if an address has the `operator` role\r\n     * @param account Address you want to check\r\n     */\r\n    function isOperator(address account) public view returns (bool) {\r\n        return _operators.has(account);\r\n    }\r\n\r\n    /**\r\n     * @dev Check if an address has the `dapp` role\r\n     * @param account Address you want to check\r\n     */\r\n    function isDapp(address account) public view returns (bool) {\r\n        return _dapps.has(account);\r\n    }\r\n\r\n    /**\r\n     * @dev Add the `operator` role from address\r\n     * @param account Address you want to add role\r\n     */\r\n    function addOperator(address account) public onlyOwner {\r\n        _addOperator(account);\r\n    }\r\n\r\n    /**\r\n     * @dev Add the `dapp` role from address\r\n     * @param account Address you want to add role\r\n     */\r\n    function addDapp(address account) public onlyOperator {\r\n        _addDapp(account);\r\n    }\r\n\r\n    /**\r\n     * @dev Remove the `operator` role from address\r\n     * @param account Address you want to remove role\r\n     */\r\n    function removeOperator(address account) public onlyOwner {\r\n        _removeOperator(account);\r\n    }\r\n\r\n    /**\r\n     * @dev Remove the `operator` role from address\r\n     * @param account Address you want to remove role\r\n     */\r\n    function removeDapp(address account) public onlyOperator {\r\n        _removeDapp(account);\r\n    }\r\n\r\n    function _addOperator(address account) internal {\r\n        _operators.add(account);\r\n        emit OperatorAdded(account);\r\n    }\r\n\r\n    function _addDapp(address account) internal {\r\n        _dapps.add(account);\r\n        emit DappAdded(account);\r\n    }\r\n\r\n    function _removeOperator(address account) internal {\r\n        _operators.remove(account);\r\n        emit OperatorRemoved(account);\r\n    }\r\n\r\n    function _removeDapp(address account) internal {\r\n        _dapps.remove(account);\r\n        emit DappRemoved(account);\r\n    }\r\n}\r\n\r\n// File: dao-smartcontracts/contracts/dao/Organization.sol\r\n\r\n/**\r\n * @title Organization\r\n * @author Vittorio Minacori (https://github.com/vittominacori)\r\n * @dev Library for managing organization\r\n */\r\nlibrary Organization {\r\n    using SafeMath for uint256;\r\n\r\n    // structure defining a member\r\n    struct Member {\r\n        uint256 id;\r\n        address account;\r\n        bytes9 fingerprint;\r\n        uint256 creationDate;\r\n        uint256 stakedTokens;\r\n        uint256 usedTokens;\r\n        bytes32 data;\r\n        bool approved;\r\n    }\r\n\r\n    // structure defining members status\r\n    struct Members {\r\n        uint256 count;\r\n        uint256 totalStakedTokens;\r\n        uint256 totalUsedTokens;\r\n        mapping(address => uint256) addressMap;\r\n        mapping(uint256 => Member) list;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns if an address is member or not\r\n     * @param members Current members struct\r\n     * @param account Address of the member you are looking for\r\n     * @return bool\r\n     */\r\n    function isMember(Members storage members, address account) internal view returns (bool) {\r\n        return members.addressMap[account] != 0;\r\n    }\r\n\r\n    /**\r\n     * @dev Get creation date of a member\r\n     * @param members Current members struct\r\n     * @param account Address you want to check\r\n     * @return uint256 Member creation date, zero otherwise\r\n     */\r\n    function creationDateOf(Members storage members, address account) internal view returns (uint256) {\r\n        Member storage member = members.list[members.addressMap[account]];\r\n\r\n        return member.creationDate;\r\n    }\r\n\r\n    /**\r\n     * @dev Check how many tokens staked for given address\r\n     * @param members Current members struct\r\n     * @param account Address you want to check\r\n     * @return uint256 Member staked tokens\r\n     */\r\n    function stakedTokensOf(Members storage members, address account) internal view returns (uint256) {\r\n        Member storage member = members.list[members.addressMap[account]];\r\n\r\n        return member.stakedTokens;\r\n    }\r\n\r\n    /**\r\n     * @dev Check how many tokens used for given address\r\n     * @param members Current members struct\r\n     * @param account Address you want to check\r\n     * @return uint256 Member used tokens\r\n     */\r\n    function usedTokensOf(Members storage members, address account) internal view returns (uint256) {\r\n        Member storage member = members.list[members.addressMap[account]];\r\n\r\n        return member.usedTokens;\r\n    }\r\n\r\n    /**\r\n     * @dev Check if an address has been approved\r\n     * @param members Current members struct\r\n     * @param account Address you want to check\r\n     * @return bool\r\n     */\r\n    function isApproved(Members storage members, address account) internal view returns (bool) {\r\n        Member storage member = members.list[members.addressMap[account]];\r\n\r\n        return member.approved;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the member structure\r\n     * @param members Current members struct\r\n     * @param memberId Id of the member you are looking for\r\n     * @return Member\r\n     */\r\n    function getMember(Members storage members, uint256 memberId) internal view returns (Member storage) {\r\n        Member storage structure = members.list[memberId];\r\n\r\n        require(structure.account != address(0));\r\n\r\n        return structure;\r\n    }\r\n\r\n    /**\r\n     * @dev Generate a new member and the member structure\r\n     * @param members Current members struct\r\n     * @param account Address you want to make member\r\n     * @return uint256 The new member id\r\n     */\r\n    function addMember(Members storage members, address account) internal returns (uint256) {\r\n        require(account != address(0));\r\n        require(!isMember(members, account));\r\n\r\n        uint256 memberId = members.count.add(1);\r\n        bytes9 fingerprint = getFingerprint(account, memberId);\r\n\r\n        members.addressMap[account] = memberId;\r\n        members.list[memberId] = Member(\r\n            memberId,\r\n            account,\r\n            fingerprint,\r\n            block.timestamp, // solhint-disable-line not-rely-on-time\r\n            0,\r\n            0,\r\n            \"\",\r\n            false\r\n        );\r\n\r\n        members.count = memberId;\r\n\r\n        return memberId;\r\n    }\r\n\r\n    /**\r\n     * @dev Add tokens to member stack\r\n     * @param members Current members struct\r\n     * @param account Address you want to stake tokens\r\n     * @param amount Number of tokens to stake\r\n     */\r\n    function stake(Members storage members, address account, uint256 amount) internal {\r\n        require(isMember(members, account));\r\n\r\n        Member storage member = members.list[members.addressMap[account]];\r\n\r\n        member.stakedTokens = member.stakedTokens.add(amount);\r\n        members.totalStakedTokens = members.totalStakedTokens.add(amount);\r\n    }\r\n\r\n    /**\r\n     * @dev Remove tokens from member stack\r\n     * @param members Current members struct\r\n     * @param account Address you want to unstake tokens\r\n     * @param amount Number of tokens to unstake\r\n     */\r\n    function unstake(Members storage members, address account, uint256 amount) internal {\r\n        require(isMember(members, account));\r\n\r\n        Member storage member = members.list[members.addressMap[account]];\r\n\r\n        require(member.stakedTokens >= amount);\r\n\r\n        member.stakedTokens = member.stakedTokens.sub(amount);\r\n        members.totalStakedTokens = members.totalStakedTokens.sub(amount);\r\n    }\r\n\r\n    /**\r\n     * @dev Use tokens from member stack\r\n     * @param members Current members struct\r\n     * @param account Address you want to use tokens\r\n     * @param amount Number of tokens to use\r\n     */\r\n    function use(Members storage members, address account, uint256 amount) internal {\r\n        require(isMember(members, account));\r\n\r\n        Member storage member = members.list[members.addressMap[account]];\r\n\r\n        require(member.stakedTokens >= amount);\r\n\r\n        member.stakedTokens = member.stakedTokens.sub(amount);\r\n        members.totalStakedTokens = members.totalStakedTokens.sub(amount);\r\n\r\n        member.usedTokens = member.usedTokens.add(amount);\r\n        members.totalUsedTokens = members.totalUsedTokens.add(amount);\r\n    }\r\n\r\n    /**\r\n     * @dev Set the approved status for a member\r\n     * @param members Current members struct\r\n     * @param account Address you want to update\r\n     * @param status Bool the new status for approved\r\n     */\r\n    function setApproved(Members storage members, address account, bool status) internal {\r\n        require(isMember(members, account));\r\n\r\n        Member storage member = members.list[members.addressMap[account]];\r\n\r\n        member.approved = status;\r\n    }\r\n\r\n    /**\r\n     * @dev Set data for a member\r\n     * @param members Current members struct\r\n     * @param account Address you want to update\r\n     * @param data bytes32 updated data\r\n     */\r\n    function setData(Members storage members, address account, bytes32 data) internal {\r\n        require(isMember(members, account));\r\n\r\n        Member storage member = members.list[members.addressMap[account]];\r\n\r\n        member.data = data;\r\n    }\r\n\r\n    /**\r\n     * @dev Generate a member fingerprint\r\n     * @param account Address you want to make member\r\n     * @param memberId The member id\r\n     * @return bytes9 It represents member fingerprint\r\n     */\r\n    function getFingerprint(address account, uint256 memberId) private pure returns (bytes9) {\r\n        return bytes9(keccak256(abi.encodePacked(account, memberId)));\r\n    }\r\n}\r\n\r\n// File: dao-smartcontracts/contracts/dao/DAO.sol\r\n\r\n/**\r\n * @title DAO\r\n * @author Vittorio Minacori (https://github.com/vittominacori)\r\n * @dev It identifies the DAO and Organization logic\r\n */\r\ncontract DAO is ERC1363Payable, DAORoles {\r\n    using SafeMath for uint256;\r\n\r\n    using Organization for Organization.Members;\r\n    using Organization for Organization.Member;\r\n\r\n    event MemberAdded(\r\n        address indexed account,\r\n        uint256 id\r\n    );\r\n\r\n    event MemberStatusChanged(\r\n        address indexed account,\r\n        bool approved\r\n    );\r\n\r\n    event TokensStaked(\r\n        address indexed account,\r\n        uint256 value\r\n    );\r\n\r\n    event TokensUnstaked(\r\n        address indexed account,\r\n        uint256 value\r\n    );\r\n\r\n    event TokensUsed(\r\n        address indexed account,\r\n        address indexed dapp,\r\n        uint256 value\r\n    );\r\n\r\n    Organization.Members private _members;\r\n\r\n    constructor (IERC1363 acceptedToken) public ERC1363Payable(acceptedToken) {} // solhint-disable-line no-empty-blocks\r\n\r\n    /**\r\n     * @dev fallback. This function will create a new member\r\n     */\r\n    function () external payable { // solhint-disable-line no-complex-fallback\r\n        require(msg.value == 0);\r\n\r\n        _newMember(msg.sender);\r\n    }\r\n\r\n    /**\r\n     * @dev Generate a new member and the member structure\r\n     */\r\n    function join() external {\r\n        _newMember(msg.sender);\r\n    }\r\n\r\n    /**\r\n     * @dev Generate a new member and the member structure\r\n     * @param account Address you want to make member\r\n     */\r\n    function newMember(address account) external onlyOperator {\r\n        _newMember(account);\r\n    }\r\n\r\n    /**\r\n     * @dev Set the approved status for a member\r\n     * @param account Address you want to update\r\n     * @param status Bool the new status for approved\r\n     */\r\n    function setApproved(address account, bool status) external onlyOperator {\r\n        _members.setApproved(account, status);\r\n\r\n        emit MemberStatusChanged(account, status);\r\n    }\r\n\r\n    /**\r\n     * @dev Set data for a member\r\n     * @param account Address you want to update\r\n     * @param data bytes32 updated data\r\n     */\r\n    function setData(address account, bytes32 data) external onlyOperator {\r\n        _members.setData(account, data);\r\n    }\r\n\r\n    /**\r\n     * @dev Use tokens from a specific account\r\n     * @param account Address to use the tokens from\r\n     * @param amount Number of tokens to use\r\n     */\r\n    function use(address account, uint256 amount) external onlyDapp {\r\n        _members.use(account, amount);\r\n\r\n        IERC20(acceptedToken()).transfer(msg.sender, amount);\r\n\r\n        emit TokensUsed(account, msg.sender, amount);\r\n    }\r\n\r\n    /**\r\n     * @dev Remove tokens from member stack\r\n     * @param amount Number of tokens to unstake\r\n     */\r\n    function unstake(uint256 amount) public {\r\n        _members.unstake(msg.sender, amount);\r\n\r\n        IERC20(acceptedToken()).transfer(msg.sender, amount);\r\n\r\n        emit TokensUnstaked(msg.sender, amount);\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the members number\r\n     * @return uint256\r\n     */\r\n    function membersNumber() public view returns (uint256) {\r\n        return _members.count;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the total staked tokens number\r\n     * @return uint256\r\n     */\r\n    function totalStakedTokens() public view returns (uint256) {\r\n        return _members.totalStakedTokens;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the total used tokens number\r\n     * @return uint256\r\n     */\r\n    function totalUsedTokens() public view returns (uint256) {\r\n        return _members.totalUsedTokens;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns if an address is member or not\r\n     * @param account Address of the member you are looking for\r\n     * @return bool\r\n     */\r\n    function isMember(address account) public view returns (bool) {\r\n        return _members.isMember(account);\r\n    }\r\n\r\n    /**\r\n     * @dev Get creation date of a member\r\n     * @param account Address you want to check\r\n     * @return uint256 Member creation date, zero otherwise\r\n     */\r\n    function creationDateOf(address account) public view returns (uint256) {\r\n        return _members.creationDateOf(account);\r\n    }\r\n\r\n    /**\r\n     * @dev Check how many tokens staked for given address\r\n     * @param account Address you want to check\r\n     * @return uint256 Member staked tokens\r\n     */\r\n    function stakedTokensOf(address account) public view returns (uint256) {\r\n        return _members.stakedTokensOf(account);\r\n    }\r\n\r\n    /**\r\n     * @dev Check how many tokens used for given address\r\n     * @param account Address you want to check\r\n     * @return uint256 Member used tokens\r\n     */\r\n    function usedTokensOf(address account) public view returns (uint256) {\r\n        return _members.usedTokensOf(account);\r\n    }\r\n\r\n    /**\r\n     * @dev Check if an address has been approved\r\n     * @param account Address you want to check\r\n     * @return bool\r\n     */\r\n    function isApproved(address account) public view returns (bool) {\r\n        return _members.isApproved(account);\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the member structure\r\n     * @param memberAddress Address of the member you are looking for\r\n     * @return array\r\n     */\r\n    function getMemberByAddress(address memberAddress)\r\n        public\r\n        view\r\n        returns (\r\n            uint256 id,\r\n            address account,\r\n            bytes9 fingerprint,\r\n            uint256 creationDate,\r\n            uint256 stakedTokens,\r\n            uint256 usedTokens,\r\n            bytes32 data,\r\n            bool approved\r\n        )\r\n    {\r\n        return getMemberById(_members.addressMap[memberAddress]);\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the member structure\r\n     * @param memberId Id of the member you are looking for\r\n     * @return array\r\n     */\r\n    function getMemberById(uint256 memberId)\r\n        public\r\n        view\r\n        returns (\r\n            uint256 id,\r\n            address account,\r\n            bytes9 fingerprint,\r\n            uint256 creationDate,\r\n            uint256 stakedTokens,\r\n            uint256 usedTokens,\r\n            bytes32 data,\r\n            bool approved\r\n        )\r\n    {\r\n        Organization.Member storage structure = _members.getMember(memberId);\r\n\r\n        id = structure.id;\r\n        account = structure.account;\r\n        fingerprint = structure.fingerprint;\r\n        creationDate = structure.creationDate;\r\n        stakedTokens = structure.stakedTokens;\r\n        usedTokens = structure.usedTokens;\r\n        data = structure.data;\r\n        approved = structure.approved;\r\n    }\r\n\r\n    /**\r\n     * @dev Allow to recover tokens from contract\r\n     * @param tokenAddress address The token contract address\r\n     * @param tokenAmount uint256 Number of tokens to be sent\r\n     */\r\n    function recoverERC20(address tokenAddress, uint256 tokenAmount) public onlyOwner {\r\n        if (tokenAddress == address(acceptedToken())) {\r\n            uint256 currentBalance = IERC20(acceptedToken()).balanceOf(address(this));\r\n            require(currentBalance.sub(_members.totalStakedTokens) >= tokenAmount);\r\n        }\r\n\r\n        IERC20(tokenAddress).transfer(owner(), tokenAmount);\r\n    }\r\n\r\n    /**\r\n     * @dev Called after validating a `onTransferReceived`\r\n     * @param operator address The address which called `transferAndCall` or `transferFromAndCall` function\r\n     * @param from address The address which are token transferred from\r\n     * @param value uint256 The amount of tokens transferred\r\n     * @param data bytes Additional data with no specified format\r\n     */\r\n    function _transferReceived(\r\n        address operator, // solhint-disable-line no-unused-vars\r\n        address from,\r\n        uint256 value,\r\n        bytes memory data // solhint-disable-line no-unused-vars\r\n    )\r\n        internal\r\n    {\r\n        _stake(from, value);\r\n    }\r\n\r\n    /**\r\n     * @dev Called after validating a `onApprovalReceived`\r\n     * @param owner address The address which called `approveAndCall` function\r\n     * @param value uint256 The amount of tokens to be spent\r\n     * @param data bytes Additional data with no specified format\r\n     */\r\n    function _approvalReceived(\r\n        address owner,\r\n        uint256 value,\r\n        bytes memory data // solhint-disable-line no-unused-vars\r\n    )\r\n        internal\r\n    {\r\n        IERC20(acceptedToken()).transferFrom(owner, address(this), value);\r\n\r\n        _stake(owner, value);\r\n    }\r\n\r\n    /**\r\n     * @dev Generate a new member and the member structure\r\n     * @param account Address you want to make member\r\n     * @return uint256 The new member id\r\n     */\r\n    function _newMember(address account) internal {\r\n        uint256 memberId = _members.addMember(account);\r\n\r\n        emit MemberAdded(account, memberId);\r\n    }\r\n\r\n    /**\r\n     * @dev Add tokens to member stack\r\n     * @param account Address you want to stake tokens\r\n     * @param amount Number of tokens to stake\r\n     */\r\n    function _stake(address account, uint256 amount) internal {\r\n        if (!isMember(account)) {\r\n            _newMember(account);\r\n        }\r\n\r\n        _members.stake(account, amount);\r\n\r\n        emit TokensStaked(account, amount);\r\n    }\r\n}\r\n\r\n// File: contracts/faucet/TokenFaucet.sol\r\n\r\n/**\r\n * @title TokenFaucet\r\n * @author Vittorio Minacori (https://github.com/vittominacori)\r\n * @dev Implementation of a TokenFaucet\r\n */\r\ncontract TokenFaucet is TokenRecover {\r\n    using SafeMath for uint256;\r\n    using SafeERC20 for IERC20;\r\n\r\n    event FaucetCreated(address indexed token);\r\n\r\n    // struct representing the enabled faucet\r\n    struct FaucetDetail {\r\n        bool exists;\r\n        bool enabled;\r\n        uint256 dailyRate;\r\n        uint256 referralRate;\r\n        uint256 totalDistributedTokens;\r\n    }\r\n\r\n    // struct representing the faucet status for an account\r\n    struct RecipientDetail {\r\n        bool exists;\r\n        mapping(address => uint256) tokens;\r\n        mapping(address => uint256) lastUpdate;\r\n        address referral;\r\n    }\r\n\r\n    // struct representing the referral status\r\n    struct ReferralDetail {\r\n        mapping(address => uint256) tokens;\r\n        address[] recipients;\r\n    }\r\n\r\n    // the time between two tokens claim\r\n    uint256 private _pauseTime = 1 days;\r\n\r\n    // the DAO smart contract\r\n    DAO private _dao;\r\n\r\n    // list of addresses who received tokens\r\n    address[] private _recipients;\r\n\r\n    // map of address and faucet details\r\n    mapping(address => FaucetDetail) private _faucetList;\r\n\r\n    // map of address and received token amount\r\n    mapping(address => RecipientDetail) private _recipientList;\r\n\r\n    // map of address and referred addresses\r\n    mapping(address => ReferralDetail) private _referralList;\r\n\r\n    /**\r\n     * @param dao DAO the decentralized organization address\r\n     */\r\n    constructor(address payable dao) public {\r\n        require(dao != address(0), \"TokenFaucet: dao is the zero address\");\r\n\r\n        _dao = DAO(dao);\r\n    }\r\n\r\n    /**\r\n     * @return the DAO smart contract\r\n     */\r\n    function dao() public view returns (DAO) {\r\n        return _dao;\r\n    }\r\n\r\n    /**\r\n     * @param token The token address to check\r\n     * @return if faucet is enabled or not\r\n     */\r\n    function isEnabled(address token) public view returns (bool) {\r\n        return _faucetList[token].enabled;\r\n    }\r\n\r\n    /**\r\n     * @param token The token address to check\r\n     * @return the daily rate of tokens distributed\r\n     */\r\n    function getDailyRate(address token) public view returns (uint256) {\r\n        return _faucetList[token].dailyRate;\r\n    }\r\n\r\n    /**\r\n     * @param token The token address to check\r\n     * @return the value earned by referral for each recipient\r\n     */\r\n    function getReferralRate(address token) public view returns (uint256) {\r\n        return _faucetList[token].referralRate;\r\n    }\r\n\r\n    /**\r\n     * @param token The token address to check\r\n     * @return the sum of distributed tokens\r\n     */\r\n    function totalDistributedTokens(address token) public view returns (uint256) {\r\n        return _faucetList[token].totalDistributedTokens;\r\n    }\r\n\r\n    /**\r\n     * @dev return the number of remaining tokens to distribute\r\n     * @param token The token address to check\r\n     * @return uint256\r\n     */\r\n    function remainingTokens(address token) public view returns (uint256) {\r\n        return IERC20(token).balanceOf(address(this));\r\n    }\r\n\r\n    /**\r\n     * @return address of a recipient by list index\r\n     */\r\n    function getRecipientAddress(uint256 index) public view returns (address) {\r\n        return _recipients[index];\r\n    }\r\n\r\n    /**\r\n     * @dev return the recipients length\r\n     * @return uint\r\n     */\r\n    function getRecipientsLength() public view returns (uint) {\r\n        return _recipients.length;\r\n    }\r\n\r\n    /**\r\n     * @param account The address to check\r\n     * @param token The token address to check\r\n     * @return received token amount for the given address\r\n     */\r\n    function receivedTokens(address account, address token) public view returns (uint256) {\r\n        return _recipientList[account].tokens[token];\r\n    }\r\n\r\n    /**\r\n     * @param account The address to check\r\n     * @param token The token address to check\r\n     * @return last tokens received timestamp\r\n     */\r\n    function lastUpdate(address account, address token) public view returns (uint256) {\r\n        return _recipientList[account].lastUpdate[token];\r\n    }\r\n\r\n    /**\r\n     * @param account The address to check\r\n     * @return referral for given address\r\n     */\r\n    function getReferral(address account) public view returns (address) {\r\n        return _recipientList[account].referral;\r\n    }\r\n\r\n    /**\r\n     * @param account The address to check\r\n     * @param token The token address to check\r\n     * @return earned tokens by referrals\r\n     */\r\n    function earnedByReferral(address account, address token) public view returns (uint256) {\r\n        return _referralList[account].tokens[token];\r\n    }\r\n\r\n    /**\r\n     * @param account The address to check\r\n     * @return referred addresses for given address\r\n     */\r\n    function getReferredAddresses(address account) public view returns (address[] memory) {\r\n        return _referralList[account].recipients;\r\n    }\r\n\r\n    /**\r\n     * @param account The address to check\r\n     * @return referred addresses for given address\r\n     */\r\n    function getReferredAddressesLength(address account) public view returns (uint) {\r\n        return _referralList[account].recipients.length;\r\n    }\r\n\r\n    /**\r\n     * @param account The address to check\r\n     * @param token The token address to check\r\n     * @return time of next available claim or zero\r\n     */\r\n    function nextClaimTime(address account, address token) public view returns (uint256) {\r\n        return lastUpdate(account, token) == 0 ? 0 : lastUpdate(account, token) + _pauseTime;\r\n    }\r\n\r\n    /**\r\n     * @param token Address of the token being distributed\r\n     * @param dailyRate Daily rate of tokens distributed\r\n     * @param referralRate The value earned by referral\r\n     */\r\n    function createFaucet(address token, uint256 dailyRate, uint256 referralRate) public onlyOwner {\r\n        require(!_faucetList[token].exists, \"TokenFaucet: token faucet already exists\");\r\n        require(token != address(0), \"TokenFaucet: token is the zero address\");\r\n        require(dailyRate > 0, \"TokenFaucet: dailyRate is 0\");\r\n        require(referralRate > 0, \"TokenFaucet: referralRate is 0\");\r\n\r\n        _faucetList[token].exists = true;\r\n        _faucetList[token].enabled = true;\r\n        _faucetList[token].dailyRate = dailyRate;\r\n        _faucetList[token].referralRate = referralRate;\r\n\r\n        emit FaucetCreated(token);\r\n    }\r\n\r\n    /**\r\n     * @dev change daily referral rate\r\n     * @param token Address of tokens being updated\r\n     * @param newDailyRate Daily rate of tokens distributed\r\n     * @param newReferralRate The value earned by referral\r\n     */\r\n    function setFaucetRates(address token, uint256 newDailyRate, uint256 newReferralRate) public onlyOwner {\r\n        require(_faucetList[token].exists, \"TokenFaucet: token faucet does not exist\");\r\n        require(newDailyRate > 0, \"TokenFaucet: dailyRate is 0\");\r\n        require(newReferralRate > 0, \"TokenFaucet: referralRate is 0\");\r\n\r\n        _faucetList[token].dailyRate = newDailyRate;\r\n        _faucetList[token].referralRate = newReferralRate;\r\n    }\r\n\r\n    /**\r\n     * @dev disable a faucet\r\n     * @param token Address of tokens being updated\r\n     */\r\n    function disableFaucet(address token) public onlyOwner {\r\n        require(_faucetList[token].exists, \"TokenFaucet: token faucet does not exist\");\r\n\r\n        _faucetList[token].enabled = false;\r\n    }\r\n\r\n    /**\r\n     * @dev enable a faucet\r\n     * @param token Address of tokens being updated\r\n     */\r\n    function enableFaucet(address token) public onlyOwner {\r\n        require(_faucetList[token].exists, \"TokenFaucet: token faucet does not exist\");\r\n\r\n        _faucetList[token].enabled = true;\r\n    }\r\n\r\n    /**\r\n     * @dev function to be called to receive tokens\r\n     * @param token The token address to distribute\r\n     */\r\n    function getTokens(address token) public {\r\n        require(_faucetList[token].exists, \"TokenFaucet: token faucet does not exist\");\r\n        require(_dao.isMember(msg.sender), \"TokenFaucet: message sender is not dao member\");\r\n\r\n        // distribute tokens\r\n        _distributeTokens(token, msg.sender, address(0));\r\n    }\r\n\r\n    /**\r\n     * @dev function to be called to receive tokens\r\n     * @param token The token address to distribute\r\n     * @param referral Address to an account that is referring\r\n     */\r\n    function getTokensWithReferral(address token, address referral) public {\r\n        require(_faucetList[token].exists, \"TokenFaucet: token faucet does not exist\");\r\n        require(_dao.isMember(msg.sender), \"TokenFaucet: message sender is not dao member\");\r\n        require(referral != msg.sender, \"TokenFaucet: referral cannot be message sender\");\r\n\r\n        // distribute tokens\r\n        _distributeTokens(token, msg.sender, referral);\r\n    }\r\n\r\n    /**\r\n     * @dev The way in which faucet tokens rate is calculated for recipient\r\n     * @param token Address of tokens being distributed\r\n     * @param account Address receiving the tokens\r\n     * @return Number of tokens that can be received\r\n     */\r\n    function _getRecipientTokenAmount(address token, address account) internal view returns (uint256) {\r\n        uint256 tokenAmount = getDailyRate(token);\r\n\r\n        if (_dao.stakedTokensOf(account) > 0) {\r\n            tokenAmount = tokenAmount.mul(2);\r\n        }\r\n\r\n        if (_dao.usedTokensOf(account) > 0) {\r\n            tokenAmount = tokenAmount.mul(2);\r\n        }\r\n\r\n        return tokenAmount;\r\n    }\r\n\r\n    /**\r\n     * @dev The way in which faucet tokens rate is calculated for referral\r\n     * @param token Address of tokens being distributed\r\n     * @param account Address receiving the tokens\r\n     * @return Number of tokens that can be received\r\n     */\r\n    function _getReferralTokenAmount(address token, address account) internal view returns (uint256) {\r\n        uint256 tokenAmount = 0;\r\n\r\n        if (_dao.isMember(account)) {\r\n            tokenAmount = getReferralRate(token);\r\n\r\n            if (_dao.stakedTokensOf(account) > 0) {\r\n                tokenAmount = tokenAmount.mul(2);\r\n            }\r\n\r\n            if (_dao.usedTokensOf(account) > 0) {\r\n                tokenAmount = tokenAmount.mul(2);\r\n            }\r\n        }\r\n\r\n        return tokenAmount;\r\n    }\r\n\r\n    /**\r\n     * @dev distribute tokens\r\n     * @param token The token being distributed\r\n     * @param account Address being distributing\r\n     * @param referral Address to an account that is referring\r\n     */\r\n    function _distributeTokens(address token, address account, address referral) internal {\r\n        // solhint-disable-next-line not-rely-on-time\r\n        require(nextClaimTime(account, token) <= block.timestamp, \"TokenFaucet: next claim date is not passed\");\r\n\r\n        // check if recipient exists\r\n        if (!_recipientList[account].exists) {\r\n            _recipients.push(account);\r\n            _recipientList[account].exists = true;\r\n\r\n            // check if valid referral\r\n            if (referral != address(0)) {\r\n                _recipientList[account].referral = referral;\r\n                _referralList[referral].recipients.push(account);\r\n            }\r\n        }\r\n\r\n        uint256 recipientTokenAmount = _getRecipientTokenAmount(token, account);\r\n\r\n        // update recipient status\r\n\r\n        // solhint-disable-next-line not-rely-on-time\r\n        _recipientList[account].lastUpdate[token] = block.timestamp;\r\n        _recipientList[account].tokens[token] = _recipientList[account].tokens[token].add(recipientTokenAmount);\r\n\r\n        // update faucet status\r\n        _faucetList[token].totalDistributedTokens = _faucetList[token].totalDistributedTokens.add(recipientTokenAmount);\r\n\r\n        // transfer tokens to recipient\r\n        IERC20(token).safeTransfer(account, recipientTokenAmount);\r\n\r\n        // check referral\r\n\r\n        if (_recipientList[account].referral != address(0)) {\r\n            // referral is only the first one referring\r\n            address firstReferral = _recipientList[account].referral;\r\n\r\n            uint256 referralTokenAmount = _getReferralTokenAmount(token, firstReferral);\r\n\r\n            // referral can earn only if it is dao member\r\n            if (referralTokenAmount > 0) {\r\n                // update referral status\r\n                _referralList[firstReferral].tokens[token] = _referralList[firstReferral].tokens[token].add(referralTokenAmount);\r\n\r\n                // update faucet status\r\n                _faucetList[token].totalDistributedTokens = _faucetList[token].totalDistributedTokens.add(referralTokenAmount);\r\n\r\n                // transfer tokens to referral\r\n                IERC20(token).safeTransfer(firstReferral, referralTokenAmount);\r\n            }\r\n        }\r\n    }\r\n}","ABI":"[{\"constant\":true,\"inputs\":[{\"name\":\"account\",\"type\":\"address\"},{\"name\":\"token\",\"type\":\"address\"}],\"name\":\"earnedByReferral\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"index\",\"type\":\"uint256\"}],\"name\":\"getRecipientAddress\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"token\",\"type\":\"address\"}],\"name\":\"remainingTokens\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"account\",\"type\":\"address\"}],\"name\":\"getReferral\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"account\",\"type\":\"address\"},{\"name\":\"token\",\"type\":\"address\"}],\"name\":\"nextClaimTime\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"dao\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"token\",\"type\":\"address\"}],\"name\":\"totalDistributedTokens\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"token\",\"type\":\"address\"}],\"name\":\"getTokens\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"token\",\"type\":\"address\"}],\"name\":\"getDailyRate\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"account\",\"type\":\"address\"}],\"name\":\"getReferredAddresses\",\"outputs\":[{\"name\":\"\",\"type\":\"address[]\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"token\",\"type\":\"address\"},{\"name\":\"referral\",\"type\":\"address\"}],\"name\":\"getTokensWithReferral\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"account\",\"type\":\"address\"}],\"name\":\"getReferredAddressesLength\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"token\",\"type\":\"address\"},{\"name\":\"dailyRate\",\"type\":\"uint256\"},{\"name\":\"referralRate\",\"type\":\"uint256\"}],\"name\":\"createFaucet\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"account\",\"type\":\"address\"},{\"name\":\"token\",\"type\":\"address\"}],\"name\":\"receivedTokens\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"token\",\"type\":\"address\"}],\"name\":\"disableFaucet\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"account\",\"type\":\"address\"},{\"name\":\"token\",\"type\":\"address\"}],\"name\":\"lastUpdate\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"tokenAddress\",\"type\":\"address\"},{\"name\":\"tokenAmount\",\"type\":\"uint256\"}],\"name\":\"recoverERC20\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"isOwner\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"token\",\"type\":\"address\"}],\"name\":\"isEnabled\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"token\",\"type\":\"address\"},{\"name\":\"newDailyRate\",\"type\":\"uint256\"},{\"name\":\"newReferralRate\",\"type\":\"uint256\"}],\"name\":\"setFaucetRates\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"token\",\"type\":\"address\"}],\"name\":\"getReferralRate\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"getRecipientsLength\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"token\",\"type\":\"address\"}],\"name\":\"enableFaucet\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"name\":\"dao\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"token\",\"type\":\"address\"}],\"name\":\"FaucetCreated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"}]","ContractName":"TokenFaucet","CompilerVersion":"v0.5.10+commit.5a6ea5b1","OptimizationUsed":"1","Runs":"200","ConstructorArguments":"000000000000000000000000a042c9143c8758d2ad5a3fcc08dec39f6964453e","Library":"","LicenseType":"MIT","SwarmSource":"bzzr://e29718aa0e34d218a98ff09797ef5de29b843a17802d6e6e60cf26740df77399"}]}