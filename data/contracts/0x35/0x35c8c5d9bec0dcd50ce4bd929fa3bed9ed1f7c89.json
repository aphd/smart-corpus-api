{"status":"1","message":"OK","result":[{"SourceCode":"/**\r\n * SEED Platform Factory\r\n */\r\n\r\npragma solidity ^0.5.2;\r\n\r\n\r\n/**\r\n * @title Ownable\r\n * @dev The Ownable contract has an owner address, and provides basic authorization control\r\n * functions, this simplifies the implementation of \"user permissions\".\r\n */\r\ncontract Ownable {\r\n    address private _owner;\r\n\r\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\r\n\r\n    /**\r\n     * @dev The Ownable constructor sets the original `owner` of the contract to the sender\r\n     * account.\r\n     */\r\n    constructor () internal {\r\n        _owner = msg.sender;\r\n        emit OwnershipTransferred(address(0), _owner);\r\n    }\r\n\r\n    /**\r\n     * @return the address of the owner.\r\n     */\r\n    function owner() public view returns (address) {\r\n        return _owner;\r\n    }\r\n\r\n    /**\r\n     * @dev Throws if called by any account other than the owner.\r\n     */\r\n    modifier onlyOwner() {\r\n        require(isOwner(), \"Not Owner!\");\r\n        _;\r\n    }\r\n\r\n    /**\r\n     * @return true if `msg.sender` is the owner of the contract.\r\n     */\r\n    function isOwner() public view returns (bool) {\r\n        return msg.sender == _owner;\r\n    }\r\n\r\n    /**\r\n     * @dev Allows the current owner to relinquish control of the contract.\r\n     * It will not be possible to call the functions with the `onlyOwner`\r\n     * modifier anymore.\r\n     * @notice Renouncing ownership will leave the contract without an owner,\r\n     * thereby removing any functionality that is only available to the owner.\r\n     */\r\n    function renounceOwnership() public onlyOwner {\r\n        emit OwnershipTransferred(_owner, address(0));\r\n        _owner = address(0);\r\n    }\r\n\r\n    /**\r\n     * @dev Allows the current owner to transfer control of the contract to a newOwner.\r\n     * @param newOwner The address to transfer ownership to.\r\n     */\r\n    function transferOwnership(address newOwner) public onlyOwner {\r\n        _transferOwnership(newOwner);\r\n    }\r\n\r\n    /**\r\n     * @dev Transfers control of the contract to a newOwner.\r\n     * @param newOwner The address to transfer ownership to.\r\n     */\r\n    function _transferOwnership(address newOwner) internal {\r\n        require(newOwner != address(0),\"Address 0 could not be owner\");\r\n        emit OwnershipTransferred(_owner, newOwner);\r\n        _owner = newOwner;\r\n    }\r\n}\r\n\r\n\r\n/**\r\n * @dev Wrappers over Solidity's arithmetic operations with added overflow\r\n * checks.\r\n *\r\n * Arithmetic operations in Solidity wrap on overflow. This can easily result\r\n * in bugs, because programmers usually assume that an overflow raises an\r\n * error, which is the standard behavior in high level programming languages.\r\n * `SafeMath` restores this intuition by reverting the transaction when an\r\n * operation overflows.\r\n *\r\n * Using this library instead of the unchecked operations eliminates an entire\r\n * class of bugs, so it's recommended to use it always.\r\n */\r\nlibrary SafeMath {\r\n    /**\r\n     * @dev Returns the addition of two unsigned integers, reverting on\r\n     * overflow.\r\n     *\r\n     * Counterpart to Solidity's `+` operator.\r\n     *\r\n     * Requirements:\r\n     * - Addition cannot overflow.\r\n     */\r\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        uint256 c = a + b;\r\n        require(c >= a, \"SafeMath: addition overflow\");\r\n\r\n        return c;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the subtraction of two unsigned integers, reverting on\r\n     * overflow (when the result is negative).\r\n     *\r\n     * Counterpart to Solidity's `-` operator.\r\n     *\r\n     * Requirements:\r\n     * - Subtraction cannot overflow.\r\n     */\r\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        require(b <= a, \"SafeMath: subtraction overflow\");\r\n        uint256 c = a - b;\r\n\r\n        return c;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the multiplication of two unsigned integers, reverting on\r\n     * overflow.\r\n     *\r\n     * Counterpart to Solidity's `*` operator.\r\n     *\r\n     * Requirements:\r\n     * - Multiplication cannot overflow.\r\n     */\r\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        // Gas optimization: this is cheaper than requiring 'a' not being zero, but the\r\n        // benefit is lost if 'b' is also tested.\r\n        // See: https://github.com/OpenZeppelin/openzeppelin-solidity/pull/522\r\n        if (a == 0) {\r\n            return 0;\r\n        }\r\n\r\n        uint256 c = a * b;\r\n        require(c / a == b, \"SafeMath: multiplication overflow\");\r\n\r\n        return c;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the integer division of two unsigned integers. Reverts on\r\n     * division by zero. The result is rounded towards zero.\r\n     *\r\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\r\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\r\n     * uses an invalid opcode to revert (consuming all remaining gas).\r\n     *\r\n     * Requirements:\r\n     * - The divisor cannot be zero.\r\n     */\r\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        // Solidity only automatically asserts when dividing by 0\r\n        require(b > 0, \"SafeMath: division by zero\");\r\n        uint256 c = a / b;\r\n        // assert(a == b * c + a % b); // There is no case in which this doesn't hold\r\n\r\n        return c;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\r\n     * Reverts when dividing by zero.\r\n     *\r\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\r\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\r\n     * invalid opcode to revert (consuming all remaining gas).\r\n     *\r\n     * Requirements:\r\n     * - The divisor cannot be zero.\r\n     */\r\n    function mod(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        require(b != 0, \"SafeMath: modulo by zero\");\r\n        return a % b;\r\n    }\r\n}\r\n\r\n\r\ninterface IERC20Seed {\r\n    function name() external view returns (string memory);\r\n    function symbol() external view returns (string memory);\r\n    function decimals() external view returns (uint8);\r\n    function totalSupply() external view returns (uint256);\r\n    function balanceOf(address owner) external view returns (uint256);\r\n    function transfer(address to, uint256 value) external returns (bool);\r\n    function approve(address spender, uint256 value) external returns (bool);\r\n    function transferFrom(address from, address to, uint256 value) external returns (bool);\r\n    function allowance(address owner, address spender) external view returns (uint256);\r\n    event Transfer(address indexed from, address indexed to, uint256 value);\r\n    event Approval(address indexed owner, address indexed spender, uint256 value);\r\n}\r\n\r\n\r\ninterface IAdminTools {\r\n    function setFFPAddresses(address, address) external;\r\n    function setMinterAddress(address) external returns(address);\r\n    function getMinterAddress() external view returns(address);\r\n    function getWalletOnTopAddress() external view returns (address);\r\n    function setWalletOnTopAddress(address) external returns(address);\r\n\r\n    function addWLManagers(address) external;\r\n    function removeWLManagers(address) external;\r\n    function isWLManager(address) external view returns (bool);\r\n    function addWLOperators(address) external;\r\n    function removeWLOperators(address) external;\r\n    function renounceWLManager() external;\r\n    function isWLOperator(address) external view returns (bool);\r\n    function renounceWLOperators() external;\r\n\r\n    function addFundingManagers(address) external;\r\n    function removeFundingManagers(address) external;\r\n    function isFundingManager(address) external view returns (bool);\r\n    function addFundingOperators(address) external;\r\n    function removeFundingOperators(address) external;\r\n    function renounceFundingManager() external;\r\n    function isFundingOperator(address) external view returns (bool);\r\n    function renounceFundingOperators() external;\r\n\r\n    function addFundsUnlockerManagers(address) external;\r\n    function removeFundsUnlockerManagers(address) external;\r\n    function isFundsUnlockerManager(address) external view returns (bool);\r\n    function addFundsUnlockerOperators(address) external;\r\n    function removeFundsUnlockerOperators(address) external;\r\n    function renounceFundsUnlockerManager() external;\r\n    function isFundsUnlockerOperator(address) external view returns (bool);\r\n    function renounceFundsUnlockerOperators() external;\r\n\r\n    function isWhitelisted(address) external view returns(bool);\r\n    function getWLThresholdBalance() external view returns (uint256);\r\n    function getMaxWLAmount(address) external view returns(uint256);\r\n    function getWLLength() external view returns(uint256);\r\n    function setNewThreshold(uint256) external;\r\n    function changeMaxWLAmount(address, uint256) external;\r\n    function addToWhitelist(address, uint256) external;\r\n    function addToWhitelistMassive(address[] calldata, uint256[] calldata) external returns (bool);\r\n    function removeFromWhitelist(address, uint256) external;\r\n}\r\n\r\n\r\ninterface IATDeployer {\r\n    function newAdminTools(uint256) external returns(address);\r\n    function setFactoryAddress(address) external;\r\n    function getFactoryAddress() external view returns(address);\r\n}\r\n\r\n\r\ninterface ITDeployer {\r\n    function newToken(address, string calldata, string calldata, address) external returns(address);\r\n    function setFactoryAddress(address) external;\r\n    function getFactoryAddress() external view returns(address);\r\n}\r\n\r\n\r\ninterface IFPDeployer {\r\n    function newFundingPanel(address, string calldata, bytes32, uint256, uint256,\r\n                            address, uint256, address, address, uint) external returns(address);\r\n    function setFactoryAddress(address) external;\r\n    function getFactoryAddress() external view returns(address);\r\n}\r\n\r\n\r\ncontract Factory is Ownable {\r\n    using SafeMath for uint256;\r\n\r\n    address[] public deployerList;\r\n    uint public deployerLength;\r\n    address[] public ATContractsList;\r\n    address[] public TContractsList;\r\n    address[] public FPContractsList;\r\n\r\n    mapping(address => bool) public deployers;\r\n    mapping(address => bool) public ATContracts;\r\n    mapping(address => bool) public TContracts;\r\n    mapping(address => bool) public FPContracts;\r\n\r\n    IERC20Seed private seedContract;\r\n    address private seedAddress;\r\n    IATDeployer private deployerAT;\r\n    address private ATDAddress;\r\n    ITDeployer private deployerT;\r\n    address private TDAddress;\r\n    IFPDeployer private deployerFP;\r\n    address private FPDAddress;\r\n\r\n    address private internalDEXAddress;\r\n\r\n    uint private factoryDeployBlock;\r\n\r\n    event NewPanelCreated(address, address, address, address, uint);\r\n    event ATFactoryAddressChanged();\r\n    event TFactoryAddressChanged();\r\n    event FPFactoryAddressChanged();\r\n    event InternalDEXAddressChanged();\r\n\r\n    constructor (address _seedAddress, address _ATDAddress, address _TDAddress, address _FPDAddress) public {\r\n        seedAddress = _seedAddress;\r\n        seedContract = IERC20Seed(seedAddress);\r\n        ATDAddress = _ATDAddress;\r\n        deployerAT = IATDeployer(ATDAddress);\r\n        TDAddress = _TDAddress;\r\n        deployerT = ITDeployer(_TDAddress);\r\n        FPDAddress = _FPDAddress;\r\n        deployerFP = IFPDeployer(_FPDAddress);\r\n        factoryDeployBlock = block.number;\r\n    }\r\n\r\n    /**\r\n     * @dev change AdminTols deployer address\r\n     * @param _newATD new AT deployer address\r\n     */\r\n    function changeATFactoryAddress(address _newATD) external onlyOwner {\r\n        require(block.number < 8850000, \"Time expired!\");\r\n        require(_newATD != address(0), \"Address not suitable!\");\r\n        require(_newATD != ATDAddress, \"AT factory address not changed!\");\r\n        ATDAddress = _newATD;\r\n        deployerAT = IATDeployer(ATDAddress);\r\n        emit ATFactoryAddressChanged();\r\n    }\r\n\r\n    /**\r\n     * @dev change Token deployer address\r\n     * @param _newTD new T deployer address\r\n     */\r\n    function changeTDeployerAddress(address _newTD) external onlyOwner {\r\n        require(block.number < 8850000, \"Time expired!\");\r\n        require(_newTD != address(0), \"Address not suitable!\");\r\n        require(_newTD != TDAddress, \"AT factory address not changed!\");\r\n        TDAddress = _newTD;\r\n        deployerT = ITDeployer(TDAddress);\r\n        emit TFactoryAddressChanged();\r\n    }\r\n\r\n    /**\r\n     * @dev change Funding Panel deployer address\r\n     * @param _newFPD new FP deployer address\r\n     */\r\n    function changeFPDeployerAddress(address _newFPD) external onlyOwner {\r\n        require(block.number < 8850000, \"Time expired!\");\r\n        require(_newFPD != address(0), \"Address not suitable!\");\r\n        require(_newFPD != ATDAddress, \"AT factory address not changed!\");\r\n        FPDAddress = _newFPD;\r\n        deployerFP = IFPDeployer(FPDAddress);\r\n        emit FPFactoryAddressChanged();\r\n    }\r\n\r\n    /**\r\n     * @dev set internal DEX address\r\n     * @param _dexAddress internal DEX address\r\n     */\r\n    function setInternalDEXAddress(address _dexAddress) external onlyOwner {\r\n        require(block.number < 8850000, \"Time expired!\");\r\n        require(_dexAddress != address(0), \"Address not suitable!\");\r\n        require(_dexAddress != internalDEXAddress, \"AT factory address not changed!\");\r\n        internalDEXAddress = _dexAddress;\r\n        emit InternalDEXAddressChanged();\r\n    }\r\n\r\n    /**\r\n     * @dev deploy a new set of contracts for the Panel, with all params needed by contracts. Set the minter address for Token contract,\r\n     * Owner is set as a manager in WL, Funding and FundsUnlocker, DEX is whitelisted\r\n     * @param _name name of the token to be deployed\r\n     * @param _symbol symbol of the token to be deployed\r\n     * @param _setDocURL URL of the document describing the Panel\r\n     * @param _setDocHash hash of the document describing the Panel\r\n     * @param _exchRateSeed exchange rate between SEED tokens received and tokens given to the SEED sender (multiply by 10^_exchRateDecim)\r\n     * @param _exchRateOnTop exchange rate between SEED token received and tokens minted on top (multiply by 10^_exchRateDecim)\r\n     * @param _seedMaxSupply max supply of SEED tokens accepted by this contract\r\n     * @param _WLAnonymThr max anonym threshold\r\n     */\r\n    function deployPanelContracts(string memory _name, string memory _symbol, string memory _setDocURL, bytes32 _setDocHash,\r\n                            uint256 _exchRateSeed, uint256 _exchRateOnTop, uint256 _seedMaxSupply, uint256 _WLAnonymThr) public {\r\n        address sender = msg.sender;\r\n\r\n        require(sender != address(0), \"Sender Address is zero\");\r\n        require(internalDEXAddress != address(0), \"Internal DEX Address is zero\");\r\n\r\n        deployers[sender] = true;\r\n        deployerList.push(sender);\r\n        deployerLength = deployerList.length;\r\n\r\n        address newAT = deployerAT.newAdminTools(_WLAnonymThr);\r\n        ATContracts[newAT] = true;\r\n        ATContractsList.push(newAT);\r\n        address newT = deployerT.newToken(sender, _name, _symbol, newAT);\r\n        TContracts[newT] = true;\r\n        TContractsList.push(newT);\r\n        address newFP = deployerFP.newFundingPanel(sender, _setDocURL, _setDocHash, _exchRateSeed, _exchRateOnTop,\r\n                                            seedAddress, _seedMaxSupply, newT, newAT, (deployerLength-1));\r\n        FPContracts[newFP] = true;\r\n        FPContractsList.push(newFP);\r\n\r\n        IAdminTools ATBrandNew = IAdminTools(newAT);\r\n        ATBrandNew.setFFPAddresses(address(this), newFP);\r\n        ATBrandNew.setMinterAddress(newFP);\r\n        ATBrandNew.addWLManagers(address(this));\r\n        ATBrandNew.addWLManagers(sender);\r\n        ATBrandNew.addFundingManagers(sender);\r\n        ATBrandNew.addFundsUnlockerManagers(sender);\r\n        ATBrandNew.setWalletOnTopAddress(sender);\r\n\r\n        uint256 dexMaxAmnt = _exchRateSeed.mul(300000000);  //Seed total supply\r\n        ATBrandNew.addToWhitelist(internalDEXAddress, dexMaxAmnt);\r\n\r\n        uint256 onTopMaxAmnt = _seedMaxSupply.mul(_exchRateSeed).div(10**18);\r\n        ATBrandNew.addToWhitelist(sender, onTopMaxAmnt);\r\n\r\n        ATBrandNew.removeWLManagers(address(this));\r\n\r\n        Ownable customOwnable = Ownable(newAT);\r\n        customOwnable.transferOwnership(sender);\r\n\r\n        emit NewPanelCreated(sender, newAT, newT, newFP, deployerLength);\r\n    }\r\n\r\n    /**\r\n     * @dev get deployers number\r\n     */\r\n    function getTotalDeployer() external view returns(uint256) {\r\n        return deployerList.length;\r\n    }\r\n\r\n    /**\r\n     * @dev get AT contracts number\r\n     */\r\n    function getTotalATContracts() external view returns(uint256) {\r\n        return ATContractsList.length;\r\n    }\r\n\r\n    /**\r\n     * @dev get T contracts number\r\n     */\r\n    function getTotalTContracts() external view returns(uint256) {\r\n        return TContractsList.length;\r\n    }\r\n\r\n    /**\r\n     * @dev get FP contracts number\r\n     */\r\n    function getTotalFPContracts() external view returns(uint256) {\r\n        return FPContractsList.length;\r\n    }\r\n\r\n    /**\r\n     * @dev get if address is a deployer\r\n     */\r\n    function isFactoryDeployer(address _addr) external view returns(bool) {\r\n        return deployers[_addr];\r\n    }\r\n\r\n    /**\r\n     * @dev get if address is an AT contract generated by factory\r\n     */\r\n    function isFactoryATGenerated(address _addr) external view returns(bool) {\r\n        return ATContracts[_addr];\r\n    }\r\n\r\n    /**\r\n     * @dev get if address is a T contract generated by factory\r\n     */\r\n    function isFactoryTGenerated(address _addr) external view returns(bool) {\r\n        return TContracts[_addr];\r\n    }\r\n\r\n    /**\r\n     * @dev get if address is a T contract generated by factory\r\n     */\r\n    function isFactoryFPGenerated(address _addr) external view returns(bool) {\r\n        return FPContracts[_addr];\r\n    }\r\n\r\n    /**\r\n     * @dev get the i-th element in every array\r\n     */\r\n    function getContractsByIndex(uint256 _index) external view returns (address, address, address, address) {\r\n        return(deployerList[_index], ATContractsList[_index], TContractsList[_index], FPContractsList[_index]);\r\n    }\r\n\r\n    /**\r\n     * @dev get the i-th element in FPContractsList array\r\n     */\r\n    function getFPAddressByIndex(uint256 _index) external view returns (address) {\r\n        return FPContractsList[_index];\r\n    }\r\n\r\n    /**\r\n     * @dev get the i-th element in FPContractsList array\r\n     */\r\n    function getFactoryContext() external view returns (address, address, uint) {\r\n        return (seedAddress, internalDEXAddress, factoryDeployBlock);\r\n    }\r\n\r\n}","ABI":"[{\"constant\":false,\"inputs\":[{\"name\":\"_newFPD\",\"type\":\"address\"}],\"name\":\"changeFPDeployerAddress\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_addr\",\"type\":\"address\"}],\"name\":\"isFactoryATGenerated\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"FPContractsList\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"address\"}],\"name\":\"FPContracts\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"address\"}],\"name\":\"TContracts\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_index\",\"type\":\"uint256\"}],\"name\":\"getFPAddressByIndex\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"getTotalFPContracts\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"address\"}],\"name\":\"deployers\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"getTotalTContracts\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"TContractsList\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_name\",\"type\":\"string\"},{\"name\":\"_symbol\",\"type\":\"string\"},{\"name\":\"_setDocURL\",\"type\":\"string\"},{\"name\":\"_setDocHash\",\"type\":\"bytes32\"},{\"name\":\"_exchRateSeed\",\"type\":\"uint256\"},{\"name\":\"_exchRateOnTop\",\"type\":\"uint256\"},{\"name\":\"_seedMaxSupply\",\"type\":\"uint256\"},{\"name\":\"_WLAnonymThr\",\"type\":\"uint256\"}],\"name\":\"deployPanelContracts\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"isOwner\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"address\"}],\"name\":\"ATContracts\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_addr\",\"type\":\"address\"}],\"name\":\"isFactoryDeployer\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"getTotalATContracts\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"deployerList\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_addr\",\"type\":\"address\"}],\"name\":\"isFactoryFPGenerated\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"ATContractsList\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"deployerLength\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_newATD\",\"type\":\"address\"}],\"name\":\"changeATFactoryAddress\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_newTD\",\"type\":\"address\"}],\"name\":\"changeTDeployerAddress\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_addr\",\"type\":\"address\"}],\"name\":\"isFactoryTGenerated\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"getFactoryContext\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"},{\"name\":\"\",\"type\":\"address\"},{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_dexAddress\",\"type\":\"address\"}],\"name\":\"setInternalDEXAddress\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_index\",\"type\":\"uint256\"}],\"name\":\"getContractsByIndex\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"},{\"name\":\"\",\"type\":\"address\"},{\"name\":\"\",\"type\":\"address\"},{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"getTotalDeployer\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"name\":\"_seedAddress\",\"type\":\"address\"},{\"name\":\"_ATDAddress\",\"type\":\"address\"},{\"name\":\"_TDAddress\",\"type\":\"address\"},{\"name\":\"_FPDAddress\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"NewPanelCreated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[],\"name\":\"ATFactoryAddressChanged\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[],\"name\":\"TFactoryAddressChanged\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[],\"name\":\"FPFactoryAddressChanged\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[],\"name\":\"InternalDEXAddressChanged\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"}]","ContractName":"Factory","CompilerVersion":"v0.5.2+commit.1df8f40c","OptimizationUsed":"1","Runs":"200","ConstructorArguments":"000000000000000000000000c969e16e63ff31ad4bcac3095c616644e6912d7900000000000000000000000091e28cad737f8641242acc4ba20981d1ac63eaf4000000000000000000000000145cf8d35b2ed2259c5500e6d364286c1b220ca50000000000000000000000007dc86851e49005d138b72ccd21639312b206c34e","Library":"","LicenseType":"GNU GPLv3","SwarmSource":"bzzr://543074f9a0385420d9d28d0628a504e449028fcf8366605f84167b5103c6b0d5"}]}