{"status":"1","message":"OK","result":[{"SourceCode":"pragma solidity >=0.5.0 <0.6.0;\r\n\r\ncontract Bankshot {\r\n   address payable public owner;\r\n   uint256 private vigBalance;\r\n   uint256 public ethVig;\r\n   uint256 public minEthDeposit;\r\n   uint256 public maxEthDeposit;\r\n   bool public areSubmissionsLocked;\r\n\r\n   struct Submission {\r\n       bytes32 sHash;\r\n       uint256 deposit;\r\n       bool isRevealed;\r\n   }\r\n\r\n   mapping(address => Submission[]) submissions;\r\n\r\n   event Publication(\r\n       address indexed user,\r\n       uint256 indexed subID,\r\n       uint256 indexed date\r\n   );\r\n\r\n   event Revelation(\r\n       address indexed user,\r\n       uint256 indexed subID,\r\n       uint256 indexed date,\r\n       bytes revelation\r\n   );\r\n\r\n    constructor(uint256 _ethVig,\r\n                uint256 _minEthDeposit) public {\r\n\r\n        owner = msg.sender;\r\n        ethVig = _ethVig;\r\n        minEthDeposit = _minEthDeposit;\r\n        maxEthDeposit = 1 ether;\r\n        areSubmissionsLocked = false;\r\n    }\r\n\r\n    function minEthPayable() public view returns (uint256) {\r\n        return ethVig + minEthDeposit;\r\n    }\r\n\r\n    function setEthVig(uint256 _newVig) public onlyOwner {\r\n        ethVig = _newVig;\r\n    }\r\n\r\n    function setMinEthDeposit(uint256 _newMinEthDeposit) public onlyOwner {\r\n        minEthDeposit = _newMinEthDeposit;\r\n    }\r\n\r\n    function setMaxEthDeposit(uint256 _newMaxEthDeposit) public onlyOwner {\r\n        maxEthDeposit = _newMaxEthDeposit;\r\n    }\r\n\r\n    function withdrawVig(uint256 _amount) public onlyOwner {\r\n        require(_amount <= vigBalance, \"WITHDRAW_LIMIT\");\r\n\r\n        vigBalance -= _amount;\r\n        owner.transfer(_amount);\r\n    }\r\n\r\n    function lockSubmissions() public onlyOwner {\r\n        areSubmissionsLocked = true;\r\n    }\r\n\r\n    function submitHash(bytes32 _hash) public payable paysMin paysUnderMax isUnlocked {\r\n        uint256 deposit = msg.value - ethVig;\r\n        submissions[msg.sender].push(Submission({ sHash: _hash, deposit: deposit, isRevealed: false}));\r\n        vigBalance += (msg.value - deposit);\r\n\r\n        emit Publication(msg.sender, submissions[msg.sender].length - 1, block.timestamp); // possible re-entrancy issue w/ submissions length?\r\n    }\r\n\r\n    function submissionsForAddress(address _address) public view returns(bytes32[] memory hashes, uint256[] memory deposits) {\r\n        Submission[] storage subs = submissions[_address];\r\n\r\n        hashes = new bytes32[](subs.length);\r\n        deposits = new uint256[](subs.length);\r\n\r\n        for (uint i = 0; i < subs.length; i++) {\r\n            hashes[i] = subs[i].sHash;\r\n            deposits[i] = subs[i].deposit;\r\n        }\r\n\r\n        return (hashes, deposits);\r\n    }\r\n\r\n    function revealSubmission(uint _subID, bytes memory _revelation) public {\r\n        Submission storage sub = submissions[msg.sender][_subID];\r\n        require(!sub.isRevealed, \"ALREADY_REVEALED\");\r\n\r\n        bytes32 revealHash = keccak256(abi.encodePacked(_revelation));\r\n        require(revealHash == sub.sHash, \"INVALID_REVEAL\");\r\n\r\n        sub.isRevealed = true;\r\n        emit Revelation(msg.sender, _subID, block.timestamp, _revelation);\r\n\r\n        msg.sender.transfer(sub.deposit);\r\n    }\r\n\r\n    modifier onlyOwner() {\r\n        require(msg.sender == owner, \"ONLY_OWNER\");\r\n        _;\r\n    }\r\n\r\n    modifier paysMin() {\r\n        require(msg.value >= minEthPayable(), 'INSUFFICIENT_FUNDS');\r\n        _;\r\n    }\r\n\r\n    modifier paysUnderMax() {\r\n        uint256 deposit = msg.value - ethVig;\r\n        require(deposit <= maxEthDeposit, 'OVERSIZE_DEPOSIT');\r\n        _;\r\n    }\r\n\r\n    modifier isUnlocked() {\r\n        require(!areSubmissionsLocked, 'SUBS_LOCKED');\r\n        _;\r\n    }\r\n}","ABI":"[{\"constant\":true,\"inputs\":[],\"name\":\"areSubmissionsLocked\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_hash\",\"type\":\"bytes32\"}],\"name\":\"submitHash\",\"outputs\":[],\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"ethVig\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"lockSubmissions\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_address\",\"type\":\"address\"}],\"name\":\"submissionsForAddress\",\"outputs\":[{\"name\":\"hashes\",\"type\":\"bytes32[]\"},{\"name\":\"deposits\",\"type\":\"uint256[]\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"minEthDeposit\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"minEthPayable\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_subID\",\"type\":\"uint256\"},{\"name\":\"_revelation\",\"type\":\"bytes\"}],\"name\":\"revealSubmission\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"withdrawVig\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"maxEthDeposit\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_newVig\",\"type\":\"uint256\"}],\"name\":\"setEthVig\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_newMinEthDeposit\",\"type\":\"uint256\"}],\"name\":\"setMinEthDeposit\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_newMaxEthDeposit\",\"type\":\"uint256\"}],\"name\":\"setMaxEthDeposit\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"name\":\"_ethVig\",\"type\":\"uint256\"},{\"name\":\"_minEthDeposit\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"user\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"subID\",\"type\":\"uint256\"},{\"indexed\":true,\"name\":\"date\",\"type\":\"uint256\"}],\"name\":\"Publication\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"user\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"subID\",\"type\":\"uint256\"},{\"indexed\":true,\"name\":\"date\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"revelation\",\"type\":\"bytes\"}],\"name\":\"Revelation\",\"type\":\"event\"}]","ContractName":"Bankshot","CompilerVersion":"v0.5.8+commit.23d335f2","OptimizationUsed":"0","Runs":"200","ConstructorArguments":"000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000470de4df820000","Library":"","LicenseType":"MIT","SwarmSource":"bzzr://8256a6930e78b325d2b94dffe7c72916a602a33cfc72aac3dd26e8abf1426af8"}]}