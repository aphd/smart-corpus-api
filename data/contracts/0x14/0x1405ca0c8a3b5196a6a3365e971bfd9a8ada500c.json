{"status":"1","message":"OK","result":[{"SourceCode":"pragma solidity ^0.4.24;\r\n\r\n// File: contracts/database/Minter.sol\r\n\r\ninterface Minter_Database{\r\n  function addressStorage(bytes32 _key) external view returns (address);\r\n}\r\n\r\ninterface Minter_MiniMeTokenFactory{\r\n  function createCloneToken(\r\n      address _parentToken,\r\n      uint _snapshotBlock,\r\n      string _tokenName,\r\n      uint8 _decimalUnits,\r\n      string _tokenSymbol,\r\n      bool _transfersEnabled,\r\n      address _erc20Address\r\n  ) external returns (address);\r\n}\r\n\r\ninterface Minter_MiniMeToken{\r\n  function generateTokens(address _owner, uint _amount) external returns (bool);\r\n  function changeController(address _newController) external;\r\n}\r\n\r\ncontract Minter {\r\n  Minter_Database private database;\r\n\r\n  constructor(address _database) public {\r\n    database = Minter_Database(_database);\r\n  }\r\n\r\n  function cloneToken(string _uri, address _erc20Address) external returns (address asset) {\r\n    require(msg.sender == database.addressStorage(keccak256(abi.encodePacked(\"contract\", \"CrowdsaleGeneratorERC20\"))) ||\r\n            msg.sender == database.addressStorage(keccak256(abi.encodePacked(\"contract\", \"CrowdsaleGeneratorETH\"))) ||\r\n            msg.sender == database.addressStorage(keccak256(abi.encodePacked(\"contract\", \"AssetGenerator\"))) );\r\n    Minter_MiniMeTokenFactory factory = Minter_MiniMeTokenFactory(database.addressStorage(keccak256(abi.encodePacked(\"platform.tokenFactory\"))));\r\n    asset = factory.createCloneToken(address(0), 0, _uri, uint8(18), _uri, true, _erc20Address);\r\n    return asset;\r\n  }\r\n\r\n  function mintAssetTokens(address _assetAddress, address _receiver, uint256 _amount) external returns (bool){\r\n    require(msg.sender == database.addressStorage(keccak256(abi.encodePacked(\"contract\", \"CrowdsaleERC20\"))) ||\r\n            msg.sender == database.addressStorage(keccak256(abi.encodePacked(\"contract\", \"CrowdsaleETH\"))) ||\r\n            msg.sender == database.addressStorage(keccak256(abi.encodePacked(\"contract\", \"AssetGenerator\"))) );\r\n    require(Minter_MiniMeToken(_assetAddress).generateTokens(_receiver, _amount));\r\n    return true;\r\n  }\r\n\r\n  function changeTokenController(address _assetAddress, address _newController) external returns (bool){\r\n    require(msg.sender == database.addressStorage(keccak256(abi.encodePacked(\"contract\", \"DAODeployer\"))));\r\n    Minter_MiniMeToken(_assetAddress).changeController(_newController);\r\n  }\r\n}","ABI":"[{\"constant\":false,\"inputs\":[{\"name\":\"_assetAddress\",\"type\":\"address\"},{\"name\":\"_newController\",\"type\":\"address\"}],\"name\":\"changeTokenController\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_assetAddress\",\"type\":\"address\"},{\"name\":\"_receiver\",\"type\":\"address\"},{\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"mintAssetTokens\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_uri\",\"type\":\"string\"},{\"name\":\"_erc20Address\",\"type\":\"address\"}],\"name\":\"cloneToken\",\"outputs\":[{\"name\":\"asset\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"name\":\"_database\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"}]","ContractName":"Minter","CompilerVersion":"v0.4.24+commit.e67f0147","OptimizationUsed":"1","Runs":"200","ConstructorArguments":"0000000000000000000000005fcebeb70b88e86dd880352684e775b0f4d57c71","Library":"","LicenseType":"GNU GPLv3","SwarmSource":"bzzr://d69217e0dffb1d785ecf9567a96d57efcbc7df05fc9cad0131f8810fc05d0fa3"}]}