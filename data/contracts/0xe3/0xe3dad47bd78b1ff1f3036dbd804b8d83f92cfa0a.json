{"status":"1","message":"OK","result":[{"SourceCode":"pragma solidity ^0.5.10;\r\n\r\ninterface Token {\r\n  /// @return total amount of tokens\r\n  function totalSupply() external view returns (uint256 supply);\r\n\r\n  /// @param _owner The address from which the balance will be retrieved\r\n  /// @return The balance\r\n  function balanceOf(address _owner) external view returns (uint256 balance);\r\n\r\n  /// @notice send `_value` token to `_to` from `msg.sender`\r\n  /// @param _to The address of the recipient\r\n  /// @param _value The amount of token to be transferred\r\n  /// @return Whether the transfer was successful or not\r\n  function transfer(address _to, uint256 _value) external returns (bool success);\r\n\r\n  /// @notice send `_value` token to `_to` from `_from` on the condition it is approved by `_from`\r\n  /// @param _from The address of the sender\r\n  /// @param _to The address of the recipient\r\n  /// @param _value The amount of token to be transferred\r\n  /// @return Whether the transfer was successful or not\r\n  function transferFrom(address _from, address _to, uint256 _value) external returns (bool success);\r\n\r\n  /// @notice `msg.sender` approves `_addr` to spend `_value` tokens\r\n  /// @param _spender The address of the account able to transfer the tokens\r\n  /// @param _value The amount of wei to be approved for transfer\r\n  /// @return Whether the approval was successful or not\r\n  function approve(address _spender, uint256 _value) external returns (bool success);\r\n\r\n  /// @param _owner The address of the account owning tokens\r\n  /// @param _spender The address of the account able to transfer the tokens\r\n  /// @return Amount of remaining tokens allowed to spent\r\n  function allowance(address _owner, address _spender) external view returns (uint256 remaining);\r\n\r\n  event Transfer(address indexed _from, address indexed _to, uint256 _value);\r\n  event Approval(address indexed _owner, address indexed _spender, uint256 _value);\r\n}\r\n\r\nlibrary SafeMath {\r\n    function safeMul(uint a, uint b) internal pure returns (uint) {\r\n        uint c = a * b;\r\n        assert(a == 0 || c / a == b);\r\n        return c;\r\n    }\r\n\r\n    function safeSub(uint a, uint b) internal pure returns (uint) {\r\n        assert(b <= a);\r\n        return a - b;\r\n    }\r\n\r\n    function safeAdd(uint a, uint b) internal pure returns (uint) {\r\n        uint c = a + b;\r\n        assert(c>=a && c>=b);\r\n        return c;\r\n    }\r\n\r\n    function safeDiv(uint a, uint b) internal pure returns (uint) {\r\n        assert(b > 0);\r\n        uint c = a / b;\r\n        assert(a == b * c + a % b);\r\n        return c;\r\n    }\r\n}\r\n\r\ncontract ERC20 is Token {\r\n    using SafeMath for uint256;\r\n    \r\n    mapping (address => uint256) public balance;\r\n\r\n    mapping (address => mapping (address => uint256)) public allowed;\r\n\r\n    event Transfer(address indexed from, address indexed to, uint256 value);\r\n\r\n    event TransferFrom(address indexed spender, address indexed from, address indexed to, uint256 _value);\r\n\r\n    event Approval(address indexed owner, address indexed spender, uint256 value);\r\n\r\n    uint256 constant private MAX_UINT256 = 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF;\r\n\r\n    function transfer(address _to, uint256 _value) public returns (bool success) {\r\n        require(_to != address(0), \"Can't send to null\");\r\n\r\n        balance[msg.sender] = balance[msg.sender].safeSub(_value);\r\n        balance[_to] = balance[_to].safeAdd(_value);\r\n        emit Transfer(msg.sender, _to, _value);\r\n        return true;\r\n    }\r\n\r\n    function transferFrom(address _from, address _to, uint256 _value) public returns (bool success) {\r\n        require(_to != address(0), \"Can't send to null\");\r\n        require(_to != address(this), \"Can't send to contract\");\r\n        \r\n        uint256 allowance = allowed[_from][msg.sender];\r\n        require(_value <= allowance || _from == msg.sender, \"Not allowed to send that much\");\r\n\r\n        balance[_to] = balance[_to].safeAdd(_value);\r\n        balance[_from] = balance[_from].safeSub(_value);\r\n\r\n        if (allowed[_from][msg.sender] != MAX_UINT256 && _from != msg.sender) {\r\n            allowed[_from][msg.sender] = allowed[_from][msg.sender].safeSub(_value);\r\n        }\r\n        emit Transfer(_from, _to, _value);\r\n        return true;\r\n    }\r\n\r\n    /**\r\n    * @notice `msg.sender` approves `_spender` to spend `_value` tokens\r\n    *\r\n    * @param _spender The address of the account able to transfer the tokens\r\n    * @param _value The amount of tokens to be approved for transfer\r\n    * @return Whether the approval was successful or not\r\n    */\r\n    function approve(address _spender, uint256 _value) public returns (bool success) {\r\n        require(_spender != address(0), \"spender can't be null\");\r\n\r\n        allowed[msg.sender][_spender] = _value;\r\n        emit Approval(msg.sender, _spender, _value);\r\n        return true;\r\n    }\r\n\r\n    function allowance(address _owner, address _spender) public view returns (uint256 remaining) {\r\n        remaining = allowed[_owner][_spender];\r\n    } \r\n\r\n    function totalSupply() public view returns (uint256 supply) {\r\n        return 0;\r\n    }\r\n\r\n    function balanceOf(address _owner) public view returns (uint256 ownerBalance) {\r\n        return balance[_owner];\r\n    }\r\n}\r\n\r\ncontract Ownable {\r\n    address payable public admin;\r\n\r\n  /**\r\n   * @dev The Ownable constructor sets the original `admin` of the contract to the sender\r\n   * account.\r\n   */\r\n    constructor() public {\r\n        admin = msg.sender;\r\n    }\r\n\r\n  /**\r\n   * @dev Throws if called by any account other than the admin.\r\n   */\r\n    modifier onlyAdmin() {\r\n        require(msg.sender == admin, \"Function reserved to admin\");\r\n        _;\r\n    }\r\n\r\n  /**\r\n   * @dev Allows the current admin to transfer control of the contract to a new admin.\r\n   * @param _newAdmin The address to transfer ownership to.\r\n   */\r\n\r\n    function transferOwnership(address payable _newAdmin) public onlyAdmin {\r\n        require(_newAdmin != address(0), \"New admin can't be null\");\r\n        admin = _newAdmin;\r\n    }\r\n\r\n    function destroy() public onlyAdmin {\r\n        selfdestruct(admin);\r\n    }\r\n\r\n    function destroyAndSend(address payable _recipient) public onlyAdmin {\r\n        selfdestruct(_recipient);\r\n    }\r\n}\r\n\r\ncontract NotTransferable is ERC20, Ownable {\r\n    /// @notice Enables token holders to transfer their tokens freely if true\r\n   /// @param _enabledTransfer True if transfers are allowed in the clone\r\n    bool public enabledTransfer = false;\r\n\r\n    function enableTransfers(bool _enabledTransfer) public onlyAdmin {\r\n        enabledTransfer = _enabledTransfer;\r\n    }\r\n\r\n    function transferFromContract(address _to, uint256 _value) public onlyAdmin returns (bool success) {\r\n        return super.transfer(_to, _value);\r\n    }\r\n\r\n    function transfer(address _to, uint256 _value) public returns (bool success) {\r\n        require(enabledTransfer, \"Transfers are not allowed yet\");\r\n        return super.transfer(_to, _value);\r\n    }\r\n\r\n    function transferFrom(address _from, address _to, uint256 _value) public returns (bool success) {\r\n        require(enabledTransfer, \"Transfers are not allowed yet\");\r\n        return super.transferFrom(_from, _to, _value);\r\n    }\r\n\r\n    function approve(address _spender, uint256 _value) public returns (bool) {\r\n        require(enabledTransfer, \"Transfers are not allowed yet\");\r\n        return super.approve(_spender, _value);\r\n    }\r\n}\r\n\r\ncontract Coinstantine is NotTransferable {\r\n\r\n    string constant public Name = \"Coinstantine\";\r\n\r\n    string constant public Symbol = \"CSN\";\r\n\r\n    uint8 constant public Decimals = 18;\r\n\r\n    uint256 public TotalSupply = 10 ** (8 + 18); // 100_000_000\r\n\r\n    constructor() public {\r\n        enabledTransfer = true;\r\n        balance[msg.sender] = TotalSupply;\r\n    }\r\n\r\n    function totalSupply() public view returns (uint256 supply) {\r\n        return TotalSupply;\r\n    }\r\n}","ABI":"[{\"constant\":false,\"inputs\":[{\"name\":\"_spender\",\"type\":\"address\"},{\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"name\":\"supply\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_to\",\"type\":\"address\"},{\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"transferFromContract\",\"outputs\":[{\"name\":\"success\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_from\",\"type\":\"address\"},{\"name\":\"_to\",\"type\":\"address\"},{\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[{\"name\":\"success\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"Symbol\",\"outputs\":[{\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"address\"},{\"name\":\"\",\"type\":\"address\"}],\"name\":\"allowed\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_owner\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"name\":\"ownerBalance\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"Name\",\"outputs\":[{\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"destroy\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"TotalSupply\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"enabledTransfer\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_to\",\"type\":\"address\"},{\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[{\"name\":\"success\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"Decimals\",\"outputs\":[{\"name\":\"\",\"type\":\"uint8\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_owner\",\"type\":\"address\"},{\"name\":\"_spender\",\"type\":\"address\"}],\"name\":\"allowance\",\"outputs\":[{\"name\":\"remaining\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"address\"}],\"name\":\"balance\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_newAdmin\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_enabledTransfer\",\"type\":\"bool\"}],\"name\":\"enableTransfers\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_recipient\",\"type\":\"address\"}],\"name\":\"destroyAndSend\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"admin\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"spender\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"TransferFrom\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"spender\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"}]","ContractName":"Coinstantine","CompilerVersion":"v0.5.10+commit.5a6ea5b1","OptimizationUsed":"1","Runs":"200","ConstructorArguments":"","Library":"","LicenseType":"MIT","SwarmSource":"bzzr://1c049d7ddf82c8d1f1ad4f6508cc2f67a44ec685ff9f72c7206dd0a9d93b1084"}]}