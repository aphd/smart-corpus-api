{"status":"1","message":"OK","result":[{"SourceCode":"pragma solidity ^0.4.24;\r\n\r\n// File: contracts/interfaces/EscrowReserveInterface.sol\r\n\r\ninterface EscrowReserveInterface {\r\n  function issueERC20(address _receiver, uint256 _amount, address _tokenAddress) external returns (bool);\r\n  function requestERC20(address _payer, uint256 _amount, address _tokenAddress) external returns (bool);\r\n  function approveERC20(address _receiver, uint256 _amount, address _tokenAddress) external returns (bool);\r\n  function burnERC20(uint256 _amount, address _tokenAddress) external returns (bool);\r\n}\r\n\r\n// File: contracts/interfaces/BurnableERC20.sol\r\n\r\n// @title An interface to interact with Burnable ERC20 tokens \r\ninterface BurnableERC20 { \r\n\r\n  function allowance(address tokenOwner, address spender) external view returns (uint remaining);\r\n  \r\n  function burnFrom(address _tokenHolder, uint _amount) external returns (bool success); \r\n\r\n  function burn(uint _amount) external returns (bool success); \r\n  \r\n  function totalSupply() external view returns (uint256);\r\n\r\n  function balanceOf(address _who) external view returns (uint256);\r\n\r\n  function transfer(address _to, uint256 _value) external returns (bool);\r\n\r\n  function approve(address _spender, uint256 _value) external returns (bool);\r\n\r\n  function transferFrom(address _from, address _to, uint256 _value) external returns (bool);\r\n\r\n  event Transfer(address indexed from, address indexed to, uint256 value);\r\n\r\n  event Approval(address indexed owner, address indexed spender, uint256 value);\r\n\r\n  event LogBurn(address indexed _spender, uint256 _value); \r\n}\r\n\r\n// File: contracts/database/EscrowReserve.sol\r\n\r\ninterface Events {\r\n  function transaction(string _message, address _from, address _to, uint _amount, address _token)  external;\r\n}\r\ninterface DB {\r\n  function addressStorage(bytes32 _key) external view returns (address);\r\n  function uintStorage(bytes32 _key) external view returns (uint);\r\n  function setUint(bytes32 _key, uint _value) external;\r\n  function deleteUint(bytes32 _key) external;\r\n  function setBool(bytes32 _key, bool _value) external;\r\n  function boolStorage(bytes32 _key) external view returns (bool);\r\n}\r\n\r\ncontract EscrowReserve is EscrowReserveInterface{\r\n  DB private database;\r\n  Events private events;\r\n\r\n  constructor(address _database, address _events) public {\r\n    database = DB(_database);\r\n    events = Events(_events);\r\n  }\r\n  function issueERC20(address _receiver, uint256 _amount, address _tokenAddress) external returns (bool){\r\n    require(msg.sender == database.addressStorage(keccak256(abi.encodePacked(\"contract\", \"AssetManagerEscrow\"))));\r\n    BurnableERC20 erc20 = BurnableERC20(_tokenAddress);\r\n    require(erc20.balanceOf(this) >= _amount);\r\n    require(erc20.transfer(_receiver, _amount));\r\n    events.transaction(\"ERC20 withdrawn from escrow reserve\", address(this), _receiver, _amount, _tokenAddress);\r\n    return true;\r\n  }\r\n  function requestERC20(address _payer, uint256 _amount, address _tokenAddress) external returns (bool){\r\n    require(msg.sender == database.addressStorage(keccak256(abi.encodePacked(\"contract\", \"AssetManagerEscrow\"))) ||\r\n            msg.sender == database.addressStorage(keccak256(abi.encodePacked(\"contract\", \"CrowdsaleGeneratorETH\"))) ||\r\n            msg.sender == database.addressStorage(keccak256(abi.encodePacked(\"contract\", \"CrowdsaleGeneratorERC20\"))));\r\n    require(BurnableERC20(_tokenAddress).transferFrom(_payer, address(this), _amount));\r\n    events.transaction(\"ERC20 received by escrow reserve\", _payer, address(this), _amount, _tokenAddress);\r\n  }\r\n  function approveERC20(address _receiver, uint256 _amount, address _tokenAddress) external returns (bool){\r\n    require(msg.sender == database.addressStorage(keccak256(abi.encodePacked(\"contract\", \"AssetManagerEscrow\"))));\r\n    BurnableERC20(_tokenAddress).approve(_receiver, _amount); //always returns true\r\n    events.transaction(\"ERC20 approval given by escrow reserve\", address(this), _receiver, _amount, _tokenAddress);\r\n    return true;\r\n  }\r\n  function burnERC20(uint256 _amount, address _tokenAddress) external returns (bool){\r\n    require(msg.sender == database.addressStorage(keccak256(abi.encodePacked(\"contract\", \"AssetManagerEscrow\"))));\r\n    require(BurnableERC20(_tokenAddress).burn(_amount));\r\n    events.transaction(\"ERC20 burnt by escrow reserve\", address(this), address(0), _amount, _tokenAddress);\r\n    return true;\r\n  }\r\n}","ABI":"[{\"constant\":false,\"inputs\":[{\"name\":\"_receiver\",\"type\":\"address\"},{\"name\":\"_amount\",\"type\":\"uint256\"},{\"name\":\"_tokenAddress\",\"type\":\"address\"}],\"name\":\"issueERC20\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_payer\",\"type\":\"address\"},{\"name\":\"_amount\",\"type\":\"uint256\"},{\"name\":\"_tokenAddress\",\"type\":\"address\"}],\"name\":\"requestERC20\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_amount\",\"type\":\"uint256\"},{\"name\":\"_tokenAddress\",\"type\":\"address\"}],\"name\":\"burnERC20\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_receiver\",\"type\":\"address\"},{\"name\":\"_amount\",\"type\":\"uint256\"},{\"name\":\"_tokenAddress\",\"type\":\"address\"}],\"name\":\"approveERC20\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"name\":\"_database\",\"type\":\"address\"},{\"name\":\"_events\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"}]","ContractName":"EscrowReserve","CompilerVersion":"v0.4.24+commit.e67f0147","OptimizationUsed":"1","Runs":"200","ConstructorArguments":"0000000000000000000000005fcebeb70b88e86dd880352684e775b0f4d57c71000000000000000000000000eb6533f29a54c2c18bb2ce2a100de717692a518f","Library":"","LicenseType":"GNU GPLv3","SwarmSource":"bzzr://b2fbc44ea72b5495c04c0023c5c6ddc4a0b42a3637fa9905551664947ce40f7e"}]}