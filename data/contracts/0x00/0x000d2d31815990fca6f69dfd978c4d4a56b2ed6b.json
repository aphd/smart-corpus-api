{"status":"1","message":"OK","result":[{"SourceCode":"pragma solidity 0.4.20;\r\n\r\ncontract Accessible {\r\n    /** Access Right Management **\r\n    * Copyright 2019\r\n    * Florian Weigand\r\n    * Synalytix UG, Munich\r\n    * florian(at)synalytix.de\r\n    */\r\n\r\n    address      public owner;\r\n    mapping(address => bool)     public accessAllowed;\r\n\r\n    function Accessible() public {\r\n        owner = msg.sender;\r\n    }\r\n\r\n    modifier ownership() {\r\n        require(owner == msg.sender);\r\n        _;\r\n    }\r\n\r\n    modifier accessible() {\r\n        require(accessAllowed[msg.sender]);\r\n        _;\r\n    }\r\n\r\n    function allowAccess(address _address) ownership public {\r\n        if (_address != address(0)) {\r\n            accessAllowed[_address] = true;\r\n        }\r\n    }\r\n\r\n    function denyAccess(address _address) ownership public {\r\n        if (_address != address(0)) {\r\n            accessAllowed[_address] = false;\r\n        }\r\n    }\r\n\r\n    function transferOwnership(address _address) ownership public {\r\n        if (_address != address(0)) {\r\n            owner = _address;\r\n        }\r\n    }\r\n}\r\n\r\ncontract TrueProfileStorage is Accessible {\r\n    /** Data Storage Contract **\r\n    * Copyright 2019\r\n    * Florian Weigand\r\n    * Synalytix UG, Munich\r\n    * florian(at)synalytix.de\r\n    */\r\n\r\n    /**** signature struct ****/\r\n    struct Signature {\r\n        uint8 v;\r\n        bytes32 r;\r\n        bytes32 s;\r\n        uint8 revocationReasonId;\r\n        bool isValue;\r\n    }\r\n\r\n    /**** signature storage ****/\r\n    mapping(bytes32 => Signature)   public signatureStorage;\r\n\r\n    /**** general storage of non-struct data which might\r\n    be needed for further development of main contract ****/\r\n    mapping(bytes32 => uint256)     public uIntStorage;\r\n    mapping(bytes32 => string)      public stringStorage;\r\n    mapping(bytes32 => address)     public addressStorage;\r\n    mapping(bytes32 => bytes)       public bytesStorage;\r\n    mapping(bytes32 => bool)        public boolStorage;\r\n    mapping(bytes32 => int256)      public intStorage;\r\n\r\n    /**** CRUD for Signature storage ****/\r\n    function getSignature(bytes32 _key) external view returns (uint8 v, bytes32 r, bytes32 s, uint8 revocationReasonId) {\r\n        Signature memory tempSignature = signatureStorage[_key];\r\n        if (tempSignature.isValue) {\r\n            return(tempSignature.v, tempSignature.r, tempSignature.s, tempSignature.revocationReasonId);\r\n        } else {\r\n            return(0, bytes32(0), bytes32(0), 0);\r\n        }\r\n    }\r\n\r\n    function setSignature(bytes32 _key, uint8 _v, bytes32 _r, bytes32 _s, uint8 _revocationReasonId) accessible external {\r\n        require(ecrecover(_key, _v, _r, _s) != 0x0);\r\n        Signature memory tempSignature = Signature({\r\n            v: _v,\r\n            r: _r,\r\n            s: _s,\r\n            revocationReasonId: _revocationReasonId,\r\n            isValue: true\r\n        });\r\n        signatureStorage[_key] = tempSignature;\r\n    }\r\n\r\n    function deleteSignature(bytes32 _key) accessible external {\r\n        require(signatureStorage[_key].isValue);\r\n        Signature memory tempSignature = Signature({\r\n            v: 0,\r\n            r: bytes32(0),\r\n            s: bytes32(0),\r\n            revocationReasonId: 0,\r\n            isValue: false\r\n        });\r\n        signatureStorage[_key] = tempSignature;\r\n    }\r\n\r\n    /**** Get Methods for additional storage ****/\r\n    function getAddress(bytes32 _key) external view returns (address) {\r\n        return addressStorage[_key];\r\n    }\r\n\r\n    function getUint(bytes32 _key) external view returns (uint) {\r\n        return uIntStorage[_key];\r\n    }\r\n\r\n    function getString(bytes32 _key) external view returns (string) {\r\n        return stringStorage[_key];\r\n    }\r\n\r\n    function getBytes(bytes32 _key) external view returns (bytes) {\r\n        return bytesStorage[_key];\r\n    }\r\n\r\n    function getBool(bytes32 _key) external view returns (bool) {\r\n        return boolStorage[_key];\r\n    }\r\n\r\n    function getInt(bytes32 _key) external view returns (int) {\r\n        return intStorage[_key];\r\n    }\r\n\r\n    /**** Set Methods for additional storage ****/\r\n    function setAddress(bytes32 _key, address _value) accessible external {\r\n        addressStorage[_key] = _value;\r\n    }\r\n\r\n    function setUint(bytes32 _key, uint _value) accessible external {\r\n        uIntStorage[_key] = _value;\r\n    }\r\n\r\n    function setString(bytes32 _key, string _value) accessible external {\r\n        stringStorage[_key] = _value;\r\n    }\r\n\r\n    function setBytes(bytes32 _key, bytes _value) accessible external {\r\n        bytesStorage[_key] = _value;\r\n    }\r\n\r\n    function setBool(bytes32 _key, bool _value) accessible external {\r\n        boolStorage[_key] = _value;\r\n    }\r\n\r\n    function setInt(bytes32 _key, int _value) accessible external {\r\n        intStorage[_key] = _value;\r\n    }\r\n\r\n    /**** Delete Methods for additional storage ****/\r\n    function deleteAddress(bytes32 _key) accessible external {\r\n        delete addressStorage[_key];\r\n    }\r\n\r\n    function deleteUint(bytes32 _key) accessible external {\r\n        delete uIntStorage[_key];\r\n    }\r\n\r\n    function deleteString(bytes32 _key) accessible external {\r\n        delete stringStorage[_key];\r\n    }\r\n\r\n    function deleteBytes(bytes32 _key) accessible external {\r\n        delete bytesStorage[_key];\r\n    }\r\n\r\n    function deleteBool(bytes32 _key) accessible external {\r\n        delete boolStorage[_key];\r\n    }\r\n\r\n    function deleteInt(bytes32 _key) accessible external {\r\n        delete intStorage[_key];\r\n    }\r\n}\r\n\r\ncontract TrueProfileLogic is Accessible {\r\n    /** Logic Contract (updatable) **\r\n    * Copyright 2019\r\n    * Florian Weigand\r\n    * Synalytix UG, Munich\r\n    * florian(at)synalytix.de\r\n    */\r\n\r\n    TrueProfileStorage trueProfileStorage;\r\n\r\n    function TrueProfileLogic(address _trueProfileStorage) public {\r\n        trueProfileStorage = TrueProfileStorage(_trueProfileStorage);\r\n    }\r\n\r\n    /**** Signature logic methods ****/\r\n\r\n    // add or update TrueProof\r\n    // if not present add to array\r\n    // if present the old TrueProof can be replaced with a new TrueProof\r\n    function addTrueProof(bytes32 _key, uint8 _v, bytes32 _r, bytes32 _s) accessible external {\r\n        require(accessAllowed[ecrecover(_key, _v, _r, _s)]);\r\n        // the certifcate is valid, so set the revokationReasonId to 0\r\n        uint8 revokationReasonId = 0;\r\n        trueProfileStorage.setSignature(_key, _v, _r, _s, revokationReasonId);\r\n    }\r\n\r\n    // if the TrueProof was issued by error it can be revoked\r\n    // for revocation a reason id needs to be given\r\n    function revokeTrueProof(bytes32 _key, uint8 _revocationReasonId) accessible external {\r\n        require(_revocationReasonId != 0);\r\n\r\n        uint8 v;\r\n        bytes32 r;\r\n        bytes32 s;\r\n        uint8 oldRevocationReasonId;\r\n        (v, r, s, oldRevocationReasonId) = trueProfileStorage.getSignature(_key);\r\n\r\n        require(v != 0);\r\n\r\n        // set the revokation reason id to the new value\r\n        trueProfileStorage.setSignature(_key, v, r, s, _revocationReasonId);\r\n    }\r\n\r\n    function isValidTrueProof(bytes32 _key) external view returns (bool) {\r\n        // needs to be not revoked AND needs to have a valid signature\r\n        if (this.isValidSignatureTrueProof(_key) && this.isNotRevokedTrueProof(_key)) {\r\n            return true;\r\n        } else {\r\n            return false;   \r\n        }\r\n    }\r\n\r\n    function isValidSignatureTrueProof(bytes32 _key) external view returns (bool) {\r\n        uint8 v;\r\n        bytes32 r;\r\n        bytes32 s;\r\n        uint8 revocationReasonId;\r\n        (v, r, s, revocationReasonId) = trueProfileStorage.getSignature(_key);\r\n\r\n        // needs to have a valid signature\r\n        if (accessAllowed[ecrecover(_key, v, r, s)]) {\r\n            return true;\r\n        } else {\r\n            return false;   \r\n        }\r\n    }\r\n\r\n    function isNotRevokedTrueProof(bytes32 _key) external view returns (bool) {\r\n        uint8 v;\r\n        bytes32 r;\r\n        bytes32 s;\r\n        uint8 revocationReasonId;\r\n        (v, r, s, revocationReasonId) = trueProfileStorage.getSignature(_key);\r\n\r\n        // needs to be not revoked\r\n        if (revocationReasonId == 0) {\r\n            return true;\r\n        } else {\r\n            return false;\r\n        }\r\n    }\r\n\r\n    function getSignature(bytes32 _key) external view returns (uint8 v, bytes32 r, bytes32 s, uint8 revocationReasonId) {\r\n        return trueProfileStorage.getSignature(_key);\r\n    }\r\n\r\n    function getRevocationReasonId(bytes32 _key) external view returns (uint8) {\r\n        uint8 v;\r\n        bytes32 r;\r\n        bytes32 s;\r\n        uint8 revocationReasonId;\r\n        (v, r, s, revocationReasonId) = trueProfileStorage.getSignature(_key);\r\n\r\n        return revocationReasonId;\r\n    }\r\n}","ABI":"[{\"constant\":true,\"inputs\":[{\"name\":\"_key\",\"type\":\"bytes32\"}],\"name\":\"getRevocationReasonId\",\"outputs\":[{\"name\":\"\",\"type\":\"uint8\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_key\",\"type\":\"bytes32\"}],\"name\":\"isValidSignatureTrueProof\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_key\",\"type\":\"bytes32\"}],\"name\":\"isNotRevokedTrueProof\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_address\",\"type\":\"address\"}],\"name\":\"denyAccess\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"address\"}],\"name\":\"accessAllowed\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_address\",\"type\":\"address\"}],\"name\":\"allowAccess\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_key\",\"type\":\"bytes32\"}],\"name\":\"getSignature\",\"outputs\":[{\"name\":\"v\",\"type\":\"uint8\"},{\"name\":\"r\",\"type\":\"bytes32\"},{\"name\":\"s\",\"type\":\"bytes32\"},{\"name\":\"revocationReasonId\",\"type\":\"uint8\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_key\",\"type\":\"bytes32\"},{\"name\":\"_revocationReasonId\",\"type\":\"uint8\"}],\"name\":\"revokeTrueProof\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_key\",\"type\":\"bytes32\"},{\"name\":\"_v\",\"type\":\"uint8\"},{\"name\":\"_r\",\"type\":\"bytes32\"},{\"name\":\"_s\",\"type\":\"bytes32\"}],\"name\":\"addTrueProof\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_address\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_key\",\"type\":\"bytes32\"}],\"name\":\"isValidTrueProof\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"name\":\"_trueProfileStorage\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"}]","ContractName":"TrueProfileLogic","CompilerVersion":"v0.4.20+commit.3155dd80","OptimizationUsed":"1","Runs":"200","ConstructorArguments":"000000000000000000000000ddf251ffd75478892a721e196eacc6e38e8ac4dd","Library":"","LicenseType":"MIT","SwarmSource":"bzzr://a08716105a19a27b7de63e465320a2e27ac77536337b7d32cc210e29b8484169"}]}