{"status":"1","message":"OK","result":[{"SourceCode":"pragma solidity ^0.4.23;\r\n/*\r\n *          \r\n *              KOL Community Foundation\r\n *             Dev:Jack Koe\r\n *             Special for: KOL\r\n *   \r\n *             20200406\r\n *  \r\n */\r\n\r\n\r\n\r\n\r\n library SafeMath {\r\n   function mul(uint a, uint b) internal pure  returns (uint) {\r\n     uint c = a * b;\r\n     require(a == 0 || c / a == b);\r\n     return c;\r\n   }\r\n   function div(uint a, uint b) internal pure returns (uint) {\r\n     require(b > 0);\r\n     uint c = a / b;\r\n     require(a == b * c + a % b);\r\n     return c;\r\n   }\r\n   function sub(uint a, uint b) internal pure returns (uint) {\r\n     require(b <= a);\r\n     return a - b;\r\n   }\r\n   function add(uint a, uint b) internal pure returns (uint) {\r\n     uint c = a + b;\r\n     require(c >= a);\r\n     return c;\r\n   }\r\n   function max64(uint64 a, uint64 b) internal  pure returns (uint64) {\r\n     return a >= b ? a : b;\r\n   }\r\n   function min64(uint64 a, uint64 b) internal  pure returns (uint64) {\r\n     return a < b ? a : b;\r\n   }\r\n   function max256(uint256 a, uint256 b) internal  pure returns (uint256) {\r\n     return a >= b ? a : b;\r\n   }\r\n   function min256(uint256 a, uint256 b) internal  pure returns (uint256) {\r\n     return a < b ? a : b;\r\n   }\r\n }\r\n\r\n /**\r\n  * @title KOL Node Lock & Release Contract\r\n  * @dev visit: https://github.com/jackoelv/KOL/\r\n */\r\n\r\n contract ERC20Basic {\r\n   uint public totalSupply;\r\n   function balanceOf(address who) public constant returns (uint);\r\n   function transfer(address to, uint value) public;\r\n   event Transfer(address indexed from, address indexed to, uint value);\r\n }\r\n\r\n contract ERC20 is ERC20Basic {\r\n   function allowance(address owner, address spender) public constant returns (uint);\r\n   function transferFrom(address from, address to, uint value) public;\r\n   function approve(address spender, uint value) public;\r\n   event Approval(address indexed owner, address indexed spender, uint value);\r\n }\r\n\r\n /**\r\n  * @title KOL Node Lock & Release Contract\r\n  * @dev visit: https://github.com/jackoelv/KOL/\r\n */\r\n\r\n contract BasicToken is ERC20Basic {\r\n\r\n   using SafeMath for uint;\r\n\r\n   mapping(address => uint) balances;\r\n\r\n   function transfer(address _to, uint _value) public{\r\n     balances[msg.sender] = balances[msg.sender].sub(_value);\r\n     balances[_to] = balances[_to].add(_value);\r\n     emit Transfer(msg.sender, _to, _value);\r\n   }\r\n\r\n   function balanceOf(address _owner) public constant returns (uint balance) {\r\n     return balances[_owner];\r\n   }\r\n }\r\n\r\n /**\r\n  * @title KOL Node Lock & Release Contract\r\n  * @dev visit: https://github.com/jackoelv/KOL/\r\n */\r\n\r\n contract StandardToken is BasicToken, ERC20 {\r\n   mapping (address => mapping (address => uint)) allowed;\r\n   uint256 public userSupplyed;\r\n\r\n   function transferFrom(address _from, address _to, uint _value) public {\r\n     balances[_to] = balances[_to].add(_value);\r\n     balances[_from] = balances[_from].sub(_value);\r\n     allowed[_from][msg.sender] = allowed[_from][msg.sender].sub(_value);\r\n     emit Transfer(_from, _to, _value);\r\n   }\r\n\r\n   function approve(address _spender, uint _value) public{\r\n     require((_value == 0) || (allowed[msg.sender][_spender] == 0)) ;\r\n     allowed[msg.sender][_spender] = _value;\r\n     emit Approval(msg.sender, _spender, _value);\r\n   }\r\n\r\n   function allowance(address _owner, address _spender) public constant returns (uint remaining) {\r\n     return allowed[_owner][_spender];\r\n   }\r\n }\r\n contract KOL is StandardToken {\r\n   function queryNode(address _addr) public view returns(bool);\r\n   function querySuperNode(address _addr) public view returns(bool);\r\n }\r\n\r\n /**\r\n  * @title KOL Node Lock & Release Contract\r\n  * @dev visit: https://github.com/jackoelv/KOL/\r\n */\r\n\r\n contract Ownable {\r\n     address public owner;\r\n\r\n     constructor() public{\r\n         owner = msg.sender;\r\n     }\r\n\r\n     modifier onlyOwner {\r\n         require(msg.sender == owner);\r\n         _;\r\n     }\r\n     function transferOwnership(address newOwner) onlyOwner public{\r\n         if (newOwner != address(0)) {\r\n             owner = newOwner;\r\n         }\r\n     }\r\n }\r\n /**\r\n  * @title KOL Node Lock & Release Contract\r\n  * @dev visit: https://github.com/jackoelv/KOL/\r\n */\r\ncontract KOLLockNode is Ownable{\r\n  using SafeMath for uint256;\r\n  string public name = \"KOL Node Lock\";\r\n  KOL public token;\r\n\r\n  uint256 public dealTime =  3 days;\r\n  uint256 public missionId = 0;\r\n  uint256 public nodeRate = 0;\r\n  uint256 public releasedAll = 0;\r\n  uint256 public balanceAll = 0;\r\n  /* 正式环境 */\r\n\r\n  uint16 public constant totalSuperNodes = 21;\r\n  uint16 public constant totalNodes = 500;\r\n  uint16 public constant halfSuperNodes = 11;\r\n  uint16 public constant mostNodes = 335;\r\n  uint16 public constant halfNodes = 251;\r\n  uint16 public constant minSuperNodes = 15;\r\n  uint16 public constant minNodes = 101;\r\n\r\n\r\n  uint16 public constant most = 67;\r\n  uint16 public constant half = 51;\r\n  uint16 public constant less = 33;\r\n\r\n  mapping(address => mapping(uint256 => bool)) private Voter;\r\n\r\n  constructor(address _tokenAddress) public {\r\n    token = KOL(_tokenAddress);\r\n  }\r\n\r\n  event MissionPassed(uint256 _missionId,bytes32 _name);\r\n  event OfferingFinished(uint256 _missionId,uint256 _totalAmount,uint256 _length);\r\n  event MissionLaunched(bytes32 _name,uint256 _missionId,address _whoLaunch);\r\n  event AllTokenBack(address _fund,uint256 _amount);\r\n  event Recycled(address _node,uint256 _amount);\r\n  event RateChanged(uint256 _rate);\r\n\r\n\r\n  modifier onlySuperNode() {\r\n    require(token.querySuperNode(msg.sender));\r\n      _;\r\n  }\r\n  modifier onlyNode() {\r\n      require(token.queryNode(msg.sender));\r\n      _;\r\n  }\r\n  modifier onlyNodes() {\r\n      require(token.querySuperNode(msg.sender)||token.queryNode(msg.sender));\r\n      _;\r\n  }\r\n\r\n  struct KolMission{\r\n    uint256 startTime;\r\n    uint256 endTime;\r\n    uint256 totalAmount;\r\n    uint256 offeringAmount;\r\n    uint256 rate;\r\n    bytes32 name;\r\n    address recycleNodeAddr;\r\n    uint16 agreeNodes;\r\n    uint16 refuseNodes;\r\n    uint16 agreeSuperNodes;\r\n    uint16 refuseSuperNodes;\r\n    bool superPassed;\r\n    bool nodePassed;\r\n    bool done;\r\n  }\r\n  mapping (uint256 => KolMission) private missionList;\r\n\r\n  struct KolOffering{\r\n    address target;\r\n    uint256 targetAmount;\r\n  }\r\n\r\n  mapping (address => uint256) private nodeBalance;\r\n  mapping (address => uint256) private nodeReleasedBalance;\r\n\r\n  KolOffering[] private kolOfferings;\r\n  mapping(uint256 => KolOffering[]) private offeringList;\r\n\r\n  function missionPassed(uint256 _missionId) private {\r\n    emit MissionPassed(_missionId,missionList[_missionId].name);\r\n  }\r\n  function createKolMission(bytes32 _name,uint256 _totalAmount,address _recycleNodeAddr,uint256 _rate) onlyNodes public {\r\n      bytes32 iName = _name;\r\n      uint256 balance = token.balanceOf(this);\r\n      uint256 allLeftBalance = balanceAll.sub(releasedAll);\r\n      require(balance >= allLeftBalance.add(_totalAmount));\r\n      missionList[missionId] = KolMission(uint256(now),\r\n                                          uint256(now + dealTime),\r\n                                          _totalAmount,\r\n                                          0,\r\n                                          _rate,\r\n                                          iName,\r\n                                          _recycleNodeAddr,\r\n                                          0,\r\n                                          0,\r\n                                          0,\r\n                                          0,\r\n                                          false,\r\n                                          false,\r\n                                          false);\r\n\r\n      missionId++;\r\n      emit MissionLaunched(iName,missionId-1,msg.sender);\r\n  }\r\n  function voteMission(uint16 _type,uint256 _missionId,bool _agree) onlyNodes public{\r\n    require(!Voter[msg.sender][_missionId]);\r\n    require(!missionList[_missionId].done);\r\n    uint16 minNodesNum = minNodes;\r\n    uint16 minSuperNodesNum = minSuperNodes;\r\n    uint16 passNodes = halfNodes;\r\n    uint16 passSuperNodes = halfSuperNodes;\r\n    uint16 rate = half;\r\n\r\n    if (_type == 1){\r\n      require(token.querySuperNode(msg.sender));\r\n    }else if (_type ==2){\r\n      require(token.queryNode(msg.sender));\r\n    }\r\n\r\n    if(now > missionList[_missionId].endTime){\r\n      if ( _type == 1 ){\r\n        if (\r\n          (missionList[_missionId].agreeSuperNodes + missionList[_missionId].refuseSuperNodes)>=minSuperNodesNum\r\n          &&\r\n          missionList[_missionId].agreeSuperNodes >= (missionList[_missionId].agreeSuperNodes + missionList[_missionId].refuseSuperNodes) * rate/100\r\n          ){\r\n            missionList[_missionId].superPassed = true;\r\n            missionPassed(_missionId);\r\n        }\r\n      }else if (_type ==2 ){\r\n        //节点投票\r\n        if (\r\n          (missionList[_missionId].agreeNodes + missionList[_missionId].refuseNodes)>=minNodesNum\r\n          &&\r\n          missionList[_missionId].agreeNodes >= (missionList[_missionId].refuseNodes + missionList[_missionId].refuseNodes) * rate/100\r\n          ){\r\n            missionList[_missionId].nodePassed = true;\r\n        }\r\n      }\r\n    }else{\r\n      if(_agree == true){\r\n        if (_type == 1){\r\n          missionList[_missionId].agreeSuperNodes++;\r\n        }else if(_type == 2){\r\n          missionList[_missionId].agreeNodes++;\r\n        }\r\n      }\r\n      else{\r\n        if (_type == 1){\r\n          missionList[_missionId].refuseSuperNodes++;\r\n        }else if(_type == 2){\r\n          missionList[_missionId].refuseNodes++;\r\n        }\r\n      }\r\n      if (_type == 1){\r\n        if (missionList[_missionId].agreeSuperNodes >= passSuperNodes) {\r\n            missionList[_missionId].superPassed = true;\r\n            missionPassed(_missionId);\r\n        }else if (missionList[_missionId].refuseSuperNodes >= passSuperNodes) {\r\n            missionList[_missionId].done = true;\r\n        }\r\n      }else if (_type ==2){\r\n        if (missionList[_missionId].agreeNodes >= passNodes) {\r\n            missionList[_missionId].nodePassed = true;\r\n        }else if (missionList[_missionId].refuseNodes >= passNodes) {\r\n            missionList[_missionId].done = true;\r\n        }\r\n      }\r\n    }\r\n    Voter[msg.sender][_missionId] = true;\r\n  }\r\n\r\n  function excuteVote(uint256 _missionId) onlyOwner public {\r\n    require(!missionList[_missionId].done);\r\n    require(uint256(now) < (missionList[_missionId].endTime + uint256(dealTime)));\r\n    require(missionList[_missionId].superPassed);\r\n    require(missionList[_missionId].nodePassed);\r\n    if (missionList[_missionId].name == \"TRANSFER ALL KOL TO FUND\"){\r\n      transferAllKolToFund();\r\n      missionList[_missionId].done = true;\r\n    }else if (missionList[_missionId].name == \"RECYCLE KOL FROM OLDNODE\"){\r\n      recycleKOL(missionList[_missionId].recycleNodeAddr);\r\n      missionList[_missionId].done = true;\r\n    }else if(missionList[_missionId].name == \"CHANGE RELEASE RATE\"){\r\n      nodeRate = missionList[_missionId].rate;\r\n      missionList[_missionId].done = true;\r\n      emit RateChanged(nodeRate);\r\n    }else{\r\n      require(token.balanceOf(this).add(releasedAll) >= balanceAll.add(missionList[_missionId].totalAmount));\r\n      require(missionList[_missionId].totalAmount == missionList[_missionId].offeringAmount);\r\n      for (uint m = 0; m < offeringList[_missionId].length; m++){\r\n        //这里要做一个记账。\r\n        /* token.transfer(offeringList[_missionId][m].target, offeringList[_missionId][m].targetAmount); */\r\n        nodeBalance[offeringList[_missionId][m].target] = nodeBalance[offeringList[_missionId][m].target].add(offeringList[_missionId][m].targetAmount);\r\n      }\r\n      balanceAll = balanceAll.add(missionList[_missionId].offeringAmount);\r\n      nodeRate = missionList[_missionId].rate;\r\n      missionList[_missionId].done = true;\r\n      emit RateChanged(nodeRate);\r\n      emit OfferingFinished(_missionId,missionList[_missionId].offeringAmount,offeringList[_missionId].length);\r\n    }\r\n\r\n  }\r\n  function getMission1(uint256 _missionId) public view returns(uint256,\r\n                                                            uint256,\r\n                                                            uint256,\r\n                                                            uint256,\r\n                                                            uint256,\r\n                                                            bytes32,\r\n                                                            address){\r\n    return(missionList[_missionId].startTime,\r\n            missionList[_missionId].endTime,\r\n            missionList[_missionId].totalAmount,\r\n            missionList[_missionId].offeringAmount,\r\n            missionList[_missionId].rate,\r\n            missionList[_missionId].name,\r\n            missionList[_missionId].recycleNodeAddr);\r\n  }\r\n  function getMission2(uint256 _missionId) public view returns(uint16,\r\n                                                              uint16,\r\n                                                              uint16,\r\n                                                              uint16,\r\n                                                              bool,\r\n                                                              bool,\r\n                                                              bool){\r\n    return(\r\n          missionList[_missionId].agreeNodes,\r\n          missionList[_missionId].refuseNodes,\r\n          missionList[_missionId].agreeSuperNodes,\r\n          missionList[_missionId].refuseSuperNodes,\r\n          missionList[_missionId].superPassed,\r\n          missionList[_missionId].nodePassed,\r\n          missionList[_missionId].done);\r\n  }\r\n  function getOfferings(uint256 _missionId,uint256 _id) public view returns(address,uint256,uint256){\r\n    return(offeringList[_missionId][_id].target,offeringList[_missionId][_id].targetAmount,offeringList[_missionId].length);\r\n  }\r\n\r\n  function addKolOffering(uint256 _missionId,address[] _target ,uint256[] _targetAmount) onlyNodes public{\r\n    require(missionList[_missionId].superPassed);\r\n    require(!missionList[_missionId].done);\r\n    require(_target.length == _targetAmount.length);\r\n    bool isNode = false;\r\n    for (uint j = 0; j< _targetAmount.length; j++){\r\n\r\n      isNode = token.queryNode(_target[j])||token.querySuperNode(_target[j]);\r\n      require(isNode);\r\n      missionList[_missionId].offeringAmount = missionList[_missionId].offeringAmount.add(_targetAmount[j]);\r\n      offeringList[_missionId].push(KolOffering(_target[j],_targetAmount[j]));\r\n\r\n    }\r\n    require(missionList[_missionId].totalAmount >= missionList[_missionId].offeringAmount);\r\n\r\n  }\r\n  function voted(address _node,uint256 _missionId) public view returns(bool){\r\n    return Voter[_node][_missionId];\r\n  }\r\n  function getKOL() onlyNodes public {\r\n\r\n    require(nodeBalance[msg.sender] > 0);\r\n    uint256 amount = nodeBalance[msg.sender].mul(nodeRate).div(100);\r\n    uint256 releaseKol = amount.sub(nodeReleasedBalance[msg.sender]);\r\n    require(releaseKol > 0);\r\n    require(nodeReleasedBalance[msg.sender].add(releaseKol)<=nodeBalance[msg.sender]);\r\n    require(token.balanceOf(this) >= releaseKol);\r\n\r\n    token.transfer(msg.sender, releaseKol);\r\n    nodeReleasedBalance[msg.sender] = nodeReleasedBalance[msg.sender].add(releaseKol);\r\n    releasedAll = releasedAll.add(releaseKol);\r\n  }\r\n  function queryBalance(address _node) onlyNodes public view returns(uint256,uint256){\r\n    return(nodeBalance[_node],nodeReleasedBalance[_node]);\r\n  }\r\n  function transferAllKolToFund() private {\r\n    address fund = 0x27750e6D41Aef99501eBC256538c6A13a254Ea15;\r\n    uint256 balance = token.balanceOf(this);\r\n    token.transfer(fund, balance);\r\n    emit AllTokenBack(fund,balance);\r\n  }\r\n  function recycleKOL(address _node) private {\r\n    require((!token.queryNode(_node)) && (!token.querySuperNode(msg.sender)));\r\n    require(nodeBalance[_node] > 0);\r\n    uint256 recycles = nodeBalance[_node].sub(nodeReleasedBalance[_node]);\r\n    balanceAll = balanceAll.sub(recycles);\r\n    nodeBalance[_node] = nodeReleasedBalance[_node];\r\n    emit Recycled(_node,recycles);\r\n  }\r\n  function leftKOL() public view returns(uint256,bool) {\r\n    uint256 balance = token.balanceOf(this);\r\n    uint256 allLeftBalance = balanceAll.sub(releasedAll);\r\n    if (balance >= allLeftBalance)\r\n      return(balance.sub(allLeftBalance),true);\r\n    else\r\n      return(allLeftBalance.sub(balance),false);\r\n  }\r\n\r\n}","ABI":"[{\"constant\":false,\"inputs\":[{\"name\":\"_missionId\",\"type\":\"uint256\"}],\"name\":\"excuteVote\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"leftKOL\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"},{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_node\",\"type\":\"address\"}],\"name\":\"queryBalance\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"},{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"balanceAll\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"minNodes\",\"outputs\":[{\"name\":\"\",\"type\":\"uint16\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"releasedAll\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"minSuperNodes\",\"outputs\":[{\"name\":\"\",\"type\":\"uint16\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_missionId\",\"type\":\"uint256\"},{\"name\":\"_id\",\"type\":\"uint256\"}],\"name\":\"getOfferings\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"},{\"name\":\"\",\"type\":\"uint256\"},{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"most\",\"outputs\":[{\"name\":\"\",\"type\":\"uint16\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"halfSuperNodes\",\"outputs\":[{\"name\":\"\",\"type\":\"uint16\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_type\",\"type\":\"uint16\"},{\"name\":\"_missionId\",\"type\":\"uint256\"},{\"name\":\"_agree\",\"type\":\"bool\"}],\"name\":\"voteMission\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"totalNodes\",\"outputs\":[{\"name\":\"\",\"type\":\"uint16\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"mostNodes\",\"outputs\":[{\"name\":\"\",\"type\":\"uint16\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"totalSuperNodes\",\"outputs\":[{\"name\":\"\",\"type\":\"uint16\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_missionId\",\"type\":\"uint256\"},{\"name\":\"_target\",\"type\":\"address[]\"},{\"name\":\"_targetAmount\",\"type\":\"uint256[]\"}],\"name\":\"addKolOffering\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_name\",\"type\":\"bytes32\"},{\"name\":\"_totalAmount\",\"type\":\"uint256\"},{\"name\":\"_recycleNodeAddr\",\"type\":\"address\"},{\"name\":\"_rate\",\"type\":\"uint256\"}],\"name\":\"createKolMission\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"missionId\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_missionId\",\"type\":\"uint256\"}],\"name\":\"getMission2\",\"outputs\":[{\"name\":\"\",\"type\":\"uint16\"},{\"name\":\"\",\"type\":\"uint16\"},{\"name\":\"\",\"type\":\"uint16\"},{\"name\":\"\",\"type\":\"uint16\"},{\"name\":\"\",\"type\":\"bool\"},{\"name\":\"\",\"type\":\"bool\"},{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"dealTime\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_node\",\"type\":\"address\"},{\"name\":\"_missionId\",\"type\":\"uint256\"}],\"name\":\"voted\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"less\",\"outputs\":[{\"name\":\"\",\"type\":\"uint16\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_missionId\",\"type\":\"uint256\"}],\"name\":\"getMission1\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"},{\"name\":\"\",\"type\":\"uint256\"},{\"name\":\"\",\"type\":\"uint256\"},{\"name\":\"\",\"type\":\"uint256\"},{\"name\":\"\",\"type\":\"uint256\"},{\"name\":\"\",\"type\":\"bytes32\"},{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"halfNodes\",\"outputs\":[{\"name\":\"\",\"type\":\"uint16\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"getKOL\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"half\",\"outputs\":[{\"name\":\"\",\"type\":\"uint16\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"token\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"nodeRate\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"name\":\"_tokenAddress\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"_missionId\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"_name\",\"type\":\"bytes32\"}],\"name\":\"MissionPassed\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"_missionId\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"_totalAmount\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"_length\",\"type\":\"uint256\"}],\"name\":\"OfferingFinished\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"_name\",\"type\":\"bytes32\"},{\"indexed\":false,\"name\":\"_missionId\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"_whoLaunch\",\"type\":\"address\"}],\"name\":\"MissionLaunched\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"_fund\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"AllTokenBack\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"_node\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"Recycled\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"_rate\",\"type\":\"uint256\"}],\"name\":\"RateChanged\",\"type\":\"event\"}]","ContractName":"KOLLockNode","CompilerVersion":"v0.4.23+commit.124ca40d","OptimizationUsed":"0","Runs":"200","ConstructorArguments":"0000000000000000000000000946e36c2887025c389ef85ea5f9150e0bed4d69","Library":"","LicenseType":"Apache-2.0","SwarmSource":"bzzr://f33c93ce405ac64406b4b060d9000dcee2716f227c02596e9bf3c715957c4346"}]}