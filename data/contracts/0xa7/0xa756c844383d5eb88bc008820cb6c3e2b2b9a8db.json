{"status":"1","message":"OK","result":[{"SourceCode":"// File: openzeppelin-solidity/contracts/GSN/Context.sol\r\n\r\npragma solidity ^0.5.0;\r\n\r\n/*\r\n * @dev Provides information about the current execution context, including the\r\n * sender of the transaction and its data. While these are generally available\r\n * via msg.sender and msg.data, they should not be accessed in such a direct\r\n * manner, since when dealing with GSN meta-transactions the account sending and\r\n * paying for execution may not be the actual sender (as far as an application\r\n * is concerned).\r\n *\r\n * This contract is only required for intermediate, library-like contracts.\r\n */\r\ncontract Context {\r\n    // Empty internal constructor, to prevent people from mistakenly deploying\r\n    // an instance of this contract, which should be used via inheritance.\r\n    constructor () internal { }\r\n    // solhint-disable-previous-line no-empty-blocks\r\n\r\n    function _msgSender() internal view returns (address payable) {\r\n        return msg.sender;\r\n    }\r\n\r\n    function _msgData() internal view returns (bytes memory) {\r\n        this; // silence state mutability warning without generating bytecode - see https://github.com/ethereum/solidity/issues/2691\r\n        return msg.data;\r\n    }\r\n}\r\n\r\n// File: openzeppelin-solidity/contracts/token/ERC20/IERC20.sol\r\n\r\npragma solidity ^0.5.0;\r\n\r\n/**\r\n * @dev Interface of the ERC20 standard as defined in the EIP. Does not include\r\n * the optional functions; to access them see {ERC20Detailed}.\r\n */\r\ninterface IERC20 {\r\n    /**\r\n     * @dev Returns the amount of tokens in existence.\r\n     */\r\n    function totalSupply() external view returns (uint256);\r\n\r\n    /**\r\n     * @dev Returns the amount of tokens owned by `account`.\r\n     */\r\n    function balanceOf(address account) external view returns (uint256);\r\n\r\n    /**\r\n     * @dev Moves `amount` tokens from the caller's account to `recipient`.\r\n     *\r\n     * Returns a boolean value indicating whether the operation succeeded.\r\n     *\r\n     * Emits a {Transfer} event.\r\n     */\r\n    function transfer(address recipient, uint256 amount) external returns (bool);\r\n\r\n    /**\r\n     * @dev Returns the remaining number of tokens that `spender` will be\r\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\r\n     * zero by default.\r\n     *\r\n     * This value changes when {approve} or {transferFrom} are called.\r\n     */\r\n    function allowance(address owner, address spender) external view returns (uint256);\r\n\r\n    /**\r\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\r\n     *\r\n     * Returns a boolean value indicating whether the operation succeeded.\r\n     *\r\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\r\n     * that someone may use both the old and the new allowance by unfortunate\r\n     * transaction ordering. One possible solution to mitigate this race\r\n     * condition is to first reduce the spender's allowance to 0 and set the\r\n     * desired value afterwards:\r\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\r\n     *\r\n     * Emits an {Approval} event.\r\n     */\r\n    function approve(address spender, uint256 amount) external returns (bool);\r\n\r\n    /**\r\n     * @dev Moves `amount` tokens from `sender` to `recipient` using the\r\n     * allowance mechanism. `amount` is then deducted from the caller's\r\n     * allowance.\r\n     *\r\n     * Returns a boolean value indicating whether the operation succeeded.\r\n     *\r\n     * Emits a {Transfer} event.\r\n     */\r\n    function transferFrom(address sender, address recipient, uint256 amount) external returns (bool);\r\n\r\n    /**\r\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\r\n     * another (`to`).\r\n     *\r\n     * Note that `value` may be zero.\r\n     */\r\n    event Transfer(address indexed from, address indexed to, uint256 value);\r\n\r\n    /**\r\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\r\n     * a call to {approve}. `value` is the new allowance.\r\n     */\r\n    event Approval(address indexed owner, address indexed spender, uint256 value);\r\n}\r\n\r\n// File: openzeppelin-solidity/contracts/math/SafeMath.sol\r\n\r\npragma solidity ^0.5.0;\r\n\r\n/**\r\n * @dev Wrappers over Solidity's arithmetic operations with added overflow\r\n * checks.\r\n *\r\n * Arithmetic operations in Solidity wrap on overflow. This can easily result\r\n * in bugs, because programmers usually assume that an overflow raises an\r\n * error, which is the standard behavior in high level programming languages.\r\n * `SafeMath` restores this intuition by reverting the transaction when an\r\n * operation overflows.\r\n *\r\n * Using this library instead of the unchecked operations eliminates an entire\r\n * class of bugs, so it's recommended to use it always.\r\n */\r\nlibrary SafeMath {\r\n    /**\r\n     * @dev Returns the addition of two unsigned integers, reverting on\r\n     * overflow.\r\n     *\r\n     * Counterpart to Solidity's `+` operator.\r\n     *\r\n     * Requirements:\r\n     * - Addition cannot overflow.\r\n     */\r\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        uint256 c = a + b;\r\n        require(c >= a, \"SafeMath: addition overflow\");\r\n\r\n        return c;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the subtraction of two unsigned integers, reverting on\r\n     * overflow (when the result is negative).\r\n     *\r\n     * Counterpart to Solidity's `-` operator.\r\n     *\r\n     * Requirements:\r\n     * - Subtraction cannot overflow.\r\n     */\r\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        return sub(a, b, \"SafeMath: subtraction overflow\");\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the subtraction of two unsigned integers, reverting with custom message on\r\n     * overflow (when the result is negative).\r\n     *\r\n     * Counterpart to Solidity's `-` operator.\r\n     *\r\n     * Requirements:\r\n     * - Subtraction cannot overflow.\r\n     *\r\n     * _Available since v2.4.0._\r\n     */\r\n    function sub(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\r\n        require(b <= a, errorMessage);\r\n        uint256 c = a - b;\r\n\r\n        return c;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the multiplication of two unsigned integers, reverting on\r\n     * overflow.\r\n     *\r\n     * Counterpart to Solidity's `*` operator.\r\n     *\r\n     * Requirements:\r\n     * - Multiplication cannot overflow.\r\n     */\r\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        // Gas optimization: this is cheaper than requiring 'a' not being zero, but the\r\n        // benefit is lost if 'b' is also tested.\r\n        // See: https://github.com/OpenZeppelin/openzeppelin-contracts/pull/522\r\n        if (a == 0) {\r\n            return 0;\r\n        }\r\n\r\n        uint256 c = a * b;\r\n        require(c / a == b, \"SafeMath: multiplication overflow\");\r\n\r\n        return c;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the integer division of two unsigned integers. Reverts on\r\n     * division by zero. The result is rounded towards zero.\r\n     *\r\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\r\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\r\n     * uses an invalid opcode to revert (consuming all remaining gas).\r\n     *\r\n     * Requirements:\r\n     * - The divisor cannot be zero.\r\n     */\r\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        return div(a, b, \"SafeMath: division by zero\");\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the integer division of two unsigned integers. Reverts with custom message on\r\n     * division by zero. The result is rounded towards zero.\r\n     *\r\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\r\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\r\n     * uses an invalid opcode to revert (consuming all remaining gas).\r\n     *\r\n     * Requirements:\r\n     * - The divisor cannot be zero.\r\n     *\r\n     * _Available since v2.4.0._\r\n     */\r\n    function div(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\r\n        // Solidity only automatically asserts when dividing by 0\r\n        require(b > 0, errorMessage);\r\n        uint256 c = a / b;\r\n        // assert(a == b * c + a % b); // There is no case in which this doesn't hold\r\n\r\n        return c;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\r\n     * Reverts when dividing by zero.\r\n     *\r\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\r\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\r\n     * invalid opcode to revert (consuming all remaining gas).\r\n     *\r\n     * Requirements:\r\n     * - The divisor cannot be zero.\r\n     */\r\n    function mod(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        return mod(a, b, \"SafeMath: modulo by zero\");\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\r\n     * Reverts with custom message when dividing by zero.\r\n     *\r\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\r\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\r\n     * invalid opcode to revert (consuming all remaining gas).\r\n     *\r\n     * Requirements:\r\n     * - The divisor cannot be zero.\r\n     *\r\n     * _Available since v2.4.0._\r\n     */\r\n    function mod(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\r\n        require(b != 0, errorMessage);\r\n        return a % b;\r\n    }\r\n}\r\n\r\n// File: openzeppelin-solidity/contracts/token/ERC20/ERC20.sol\r\n\r\npragma solidity ^0.5.0;\r\n\r\n\r\n\r\n\r\n/**\r\n * @dev Implementation of the {IERC20} interface.\r\n *\r\n * This implementation is agnostic to the way tokens are created. This means\r\n * that a supply mechanism has to be added in a derived contract using {_mint}.\r\n * For a generic mechanism see {ERC20Mintable}.\r\n *\r\n * TIP: For a detailed writeup see our guide\r\n * https://forum.zeppelin.solutions/t/how-to-implement-erc20-supply-mechanisms/226[How\r\n * to implement supply mechanisms].\r\n *\r\n * We have followed general OpenZeppelin guidelines: functions revert instead\r\n * of returning `false` on failure. This behavior is nonetheless conventional\r\n * and does not conflict with the expectations of ERC20 applications.\r\n *\r\n * Additionally, an {Approval} event is emitted on calls to {transferFrom}.\r\n * This allows applications to reconstruct the allowance for all accounts just\r\n * by listening to said events. Other implementations of the EIP may not emit\r\n * these events, as it isn't required by the specification.\r\n *\r\n * Finally, the non-standard {decreaseAllowance} and {increaseAllowance}\r\n * functions have been added to mitigate the well-known issues around setting\r\n * allowances. See {IERC20-approve}.\r\n */\r\ncontract ERC20 is Context, IERC20 {\r\n    using SafeMath for uint256;\r\n\r\n    mapping (address => uint256) private _balances;\r\n\r\n    mapping (address => mapping (address => uint256)) private _allowances;\r\n\r\n    uint256 private _totalSupply;\r\n\r\n    /**\r\n     * @dev See {IERC20-totalSupply}.\r\n     */\r\n    function totalSupply() public view returns (uint256) {\r\n        return _totalSupply;\r\n    }\r\n\r\n    /**\r\n     * @dev See {IERC20-balanceOf}.\r\n     */\r\n    function balanceOf(address account) public view returns (uint256) {\r\n        return _balances[account];\r\n    }\r\n\r\n    /**\r\n     * @dev See {IERC20-transfer}.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - `recipient` cannot be the zero address.\r\n     * - the caller must have a balance of at least `amount`.\r\n     */\r\n    function transfer(address recipient, uint256 amount) public returns (bool) {\r\n        _transfer(_msgSender(), recipient, amount);\r\n        return true;\r\n    }\r\n\r\n    /**\r\n     * @dev See {IERC20-allowance}.\r\n     */\r\n    function allowance(address owner, address spender) public view returns (uint256) {\r\n        return _allowances[owner][spender];\r\n    }\r\n\r\n    /**\r\n     * @dev See {IERC20-approve}.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - `spender` cannot be the zero address.\r\n     */\r\n    function approve(address spender, uint256 amount) public returns (bool) {\r\n        _approve(_msgSender(), spender, amount);\r\n        return true;\r\n    }\r\n\r\n    /**\r\n     * @dev See {IERC20-transferFrom}.\r\n     *\r\n     * Emits an {Approval} event indicating the updated allowance. This is not\r\n     * required by the EIP. See the note at the beginning of {ERC20};\r\n     *\r\n     * Requirements:\r\n     * - `sender` and `recipient` cannot be the zero address.\r\n     * - `sender` must have a balance of at least `amount`.\r\n     * - the caller must have allowance for `sender`'s tokens of at least\r\n     * `amount`.\r\n     */\r\n    function transferFrom(address sender, address recipient, uint256 amount) public returns (bool) {\r\n        _transfer(sender, recipient, amount);\r\n        _approve(sender, _msgSender(), _allowances[sender][_msgSender()].sub(amount, \"ERC20: transfer amount exceeds allowance\"));\r\n        return true;\r\n    }\r\n\r\n    /**\r\n     * @dev Atomically increases the allowance granted to `spender` by the caller.\r\n     *\r\n     * This is an alternative to {approve} that can be used as a mitigation for\r\n     * problems described in {IERC20-approve}.\r\n     *\r\n     * Emits an {Approval} event indicating the updated allowance.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - `spender` cannot be the zero address.\r\n     */\r\n    function increaseAllowance(address spender, uint256 addedValue) public returns (bool) {\r\n        _approve(_msgSender(), spender, _allowances[_msgSender()][spender].add(addedValue));\r\n        return true;\r\n    }\r\n\r\n    /**\r\n     * @dev Atomically decreases the allowance granted to `spender` by the caller.\r\n     *\r\n     * This is an alternative to {approve} that can be used as a mitigation for\r\n     * problems described in {IERC20-approve}.\r\n     *\r\n     * Emits an {Approval} event indicating the updated allowance.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - `spender` cannot be the zero address.\r\n     * - `spender` must have allowance for the caller of at least\r\n     * `subtractedValue`.\r\n     */\r\n    function decreaseAllowance(address spender, uint256 subtractedValue) public returns (bool) {\r\n        _approve(_msgSender(), spender, _allowances[_msgSender()][spender].sub(subtractedValue, \"ERC20: decreased allowance below zero\"));\r\n        return true;\r\n    }\r\n\r\n    /**\r\n     * @dev Moves tokens `amount` from `sender` to `recipient`.\r\n     *\r\n     * This is internal function is equivalent to {transfer}, and can be used to\r\n     * e.g. implement automatic token fees, slashing mechanisms, etc.\r\n     *\r\n     * Emits a {Transfer} event.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - `sender` cannot be the zero address.\r\n     * - `recipient` cannot be the zero address.\r\n     * - `sender` must have a balance of at least `amount`.\r\n     */\r\n    function _transfer(address sender, address recipient, uint256 amount) internal {\r\n        require(sender != address(0), \"ERC20: transfer from the zero address\");\r\n        require(recipient != address(0), \"ERC20: transfer to the zero address\");\r\n\r\n        _balances[sender] = _balances[sender].sub(amount, \"ERC20: transfer amount exceeds balance\");\r\n        _balances[recipient] = _balances[recipient].add(amount);\r\n        emit Transfer(sender, recipient, amount);\r\n    }\r\n\r\n    /** @dev Creates `amount` tokens and assigns them to `account`, increasing\r\n     * the total supply.\r\n     *\r\n     * Emits a {Transfer} event with `from` set to the zero address.\r\n     *\r\n     * Requirements\r\n     *\r\n     * - `to` cannot be the zero address.\r\n     */\r\n    function _mint(address account, uint256 amount) internal {\r\n        require(account != address(0), \"ERC20: mint to the zero address\");\r\n\r\n        _totalSupply = _totalSupply.add(amount);\r\n        _balances[account] = _balances[account].add(amount);\r\n        emit Transfer(address(0), account, amount);\r\n    }\r\n\r\n    /**\r\n     * @dev Destroys `amount` tokens from `account`, reducing the\r\n     * total supply.\r\n     *\r\n     * Emits a {Transfer} event with `to` set to the zero address.\r\n     *\r\n     * Requirements\r\n     *\r\n     * - `account` cannot be the zero address.\r\n     * - `account` must have at least `amount` tokens.\r\n     */\r\n    function _burn(address account, uint256 amount) internal {\r\n        require(account != address(0), \"ERC20: burn from the zero address\");\r\n\r\n        _balances[account] = _balances[account].sub(amount, \"ERC20: burn amount exceeds balance\");\r\n        _totalSupply = _totalSupply.sub(amount);\r\n        emit Transfer(account, address(0), amount);\r\n    }\r\n\r\n    /**\r\n     * @dev Sets `amount` as the allowance of `spender` over the `owner`s tokens.\r\n     *\r\n     * This is internal function is equivalent to `approve`, and can be used to\r\n     * e.g. set automatic allowances for certain subsystems, etc.\r\n     *\r\n     * Emits an {Approval} event.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - `owner` cannot be the zero address.\r\n     * - `spender` cannot be the zero address.\r\n     */\r\n    function _approve(address owner, address spender, uint256 amount) internal {\r\n        require(owner != address(0), \"ERC20: approve from the zero address\");\r\n        require(spender != address(0), \"ERC20: approve to the zero address\");\r\n\r\n        _allowances[owner][spender] = amount;\r\n        emit Approval(owner, spender, amount);\r\n    }\r\n\r\n    /**\r\n     * @dev Destroys `amount` tokens from `account`.`amount` is then deducted\r\n     * from the caller's allowance.\r\n     *\r\n     * See {_burn} and {_approve}.\r\n     */\r\n    function _burnFrom(address account, uint256 amount) internal {\r\n        _burn(account, amount);\r\n        _approve(account, _msgSender(), _allowances[account][_msgSender()].sub(amount, \"ERC20: burn amount exceeds allowance\"));\r\n    }\r\n}\r\n\r\n// File: contracts/PurchaseListener.sol\r\n\r\npragma solidity ^0.5.16;\r\n\r\ninterface PurchaseListener {\r\n    // TODO: find out about how to best detect who implements an interface\r\n    //   see at least https://github.com/ethereum/EIPs/blob/master/EIPS/eip-165.md\r\n    // function isPurchaseListener() external returns (bool);\r\n\r\n    /**\r\n     * Similarly to ETH transfer, returning false will decline the transaction\r\n     *   (declining should probably cause revert, but that's up to the caller)\r\n     * IMPORTANT: include onlyMarketplace modifier to your implementations!\r\n     */\r\n    function onPurchase(bytes32 productId, address subscriber, uint endTimestamp, uint priceDatacoin, uint feeDatacoin)\r\n        external returns (bool accepted);\r\n}\r\n\r\n// File: contracts/Ownable.sol\r\n\r\npragma solidity ^0.5.16;\r\n\r\n/**\r\n * @title Ownable\r\n * @dev The Ownable contract has an owner address, and provides basic authorization control\r\n * functions, this simplifies the implementation of \"user permissions\".\r\n */\r\ncontract Ownable {\r\n    address public owner;\r\n    address public pendingOwner;\r\n\r\n    event OwnershipTransferred(\r\n        address indexed previousOwner,\r\n        address indexed newOwner\r\n    );\r\n\r\n    /**\r\n     * @dev The Ownable constructor sets the original `owner` of the contract to the sender\r\n     * account.\r\n     */\r\n    constructor() public {\r\n        owner = msg.sender;\r\n    }\r\n\r\n    /**\r\n     * @dev Throws if called by any account other than the owner.\r\n     */\r\n    modifier onlyOwner() {\r\n        require(msg.sender == owner, \"onlyOwner\");\r\n        _;\r\n    }\r\n\r\n    /**\r\n     * @dev Allows the current owner to set the pendingOwner address.\r\n     * @param newOwner The address to transfer ownership to.\r\n     */\r\n    function transferOwnership(address newOwner) public onlyOwner {\r\n        pendingOwner = newOwner;\r\n    }\r\n\r\n    /**\r\n     * @dev Allows the pendingOwner address to finalize the transfer.\r\n     */\r\n    function claimOwnership() public {\r\n        require(msg.sender == pendingOwner, \"onlyPendingOwner\");\r\n        emit OwnershipTransferred(owner, pendingOwner);\r\n        owner = pendingOwner;\r\n        pendingOwner = address(0);\r\n    }\r\n}\r\n\r\n// File: contracts/Marketplace.sol\r\n\r\n// solhint-disable not-rely-on-time\r\npragma solidity ^0.5.16;\r\n\r\n\r\n\r\n\r\n\r\n\r\ncontract IMarketplace {\r\n    enum ProductState {\r\n        NotDeployed,                // non-existent or deleted\r\n        Deployed                    // created or redeployed\r\n    }\r\n\r\n    enum Currency {\r\n        DATA,                       // \"token wei\" (10^-18 DATA)\r\n        USD                         // attodollars (10^-18 USD)\r\n    }\r\n\r\n    enum WhitelistState{\r\n        None,\r\n        Pending,\r\n        Approved,\r\n        Rejected\r\n    }\r\n    function getSubscription(bytes32 productId, address subscriber) public view returns (bool isValid, uint endTimestamp) {}\r\n    function getPriceInData(uint subscriptionSeconds, uint price, Currency unit) public view returns (uint datacoinAmount) {}\r\n}\r\ncontract IMarketplace1 is IMarketplace{\r\n    function getProduct(bytes32 id) public view returns (string memory name, address owner, address beneficiary, uint pricePerSecond, Currency currency, uint minimumSubscriptionSeconds, ProductState state) {}\r\n}\r\ncontract IMarketplace2 is IMarketplace{\r\n    function getProduct(bytes32 id) public view returns (string memory name, address owner, address beneficiary, uint pricePerSecond, Currency currency, uint minimumSubscriptionSeconds, ProductState state, bool requiresWhitelist) {}\r\n    function buyFor(bytes32 productId, uint subscriptionSeconds, address recipient) public {}\r\n}\r\n/**\r\n * @title Streamr Marketplace\r\n * @dev note about numbers:\r\n *   All prices and exchange rates are in \"decimal fixed-point\", that is, scaled by 10^18, like ETH vs wei.\r\n *  Seconds are integers as usual.\r\n *\r\n * Next version TODO:\r\n *  - EIP-165 inferface definition; PurchaseListener\r\n */\r\ncontract Marketplace is Ownable, IMarketplace2 {\r\n    using SafeMath for uint256;\r\n\r\n    // product events\r\n    event ProductCreated(address indexed owner, bytes32 indexed id, string name, address beneficiary, uint pricePerSecond, Currency currency, uint minimumSubscriptionSeconds);\r\n    event ProductUpdated(address indexed owner, bytes32 indexed id, string name, address beneficiary, uint pricePerSecond, Currency currency, uint minimumSubscriptionSeconds);\r\n    event ProductDeleted(address indexed owner, bytes32 indexed id, string name, address beneficiary, uint pricePerSecond, Currency currency, uint minimumSubscriptionSeconds);\r\n    event ProductImported(address indexed owner, bytes32 indexed id, string name, address beneficiary, uint pricePerSecond, Currency currency, uint minimumSubscriptionSeconds);\r\n    event ProductRedeployed(address indexed owner, bytes32 indexed id, string name, address beneficiary, uint pricePerSecond, Currency currency, uint minimumSubscriptionSeconds);\r\n    event ProductOwnershipOffered(address indexed owner, bytes32 indexed id, address indexed to);\r\n    event ProductOwnershipChanged(address indexed newOwner, bytes32 indexed id, address indexed oldOwner);\r\n\r\n    // subscription events\r\n    event Subscribed(bytes32 indexed productId, address indexed subscriber, uint endTimestamp);\r\n    event NewSubscription(bytes32 indexed productId, address indexed subscriber, uint endTimestamp);\r\n    event SubscriptionExtended(bytes32 indexed productId, address indexed subscriber, uint endTimestamp);\r\n    event SubscriptionImported(bytes32 indexed productId, address indexed subscriber, uint endTimestamp);\r\n    event SubscriptionTransferred(bytes32 indexed productId, address indexed from, address indexed to, uint secondsTransferred);\r\n\r\n    // currency events\r\n    event ExchangeRatesUpdated(uint timestamp, uint dataInUsd);\r\n\r\n    // whitelist events\r\n    event WhitelistRequested(bytes32 indexed productId, address indexed subscriber);\r\n    event WhitelistApproved(bytes32 indexed productId, address indexed subscriber);\r\n    event WhitelistRejected(bytes32 indexed productId, address indexed subscriber);\r\n    event WhitelistEnabled(bytes32 indexed productId);\r\n    event WhitelistDisabled(bytes32 indexed productId);\r\n\r\n    //txFee events\r\n    event TxFeeChanged(uint256 indexed newTxFee);\r\n\r\n\r\n    struct Product {\r\n        bytes32 id;\r\n        string name;\r\n        address owner;\r\n        address beneficiary;        // account where revenue is directed to\r\n        uint pricePerSecond;\r\n        Currency priceCurrency;\r\n        uint minimumSubscriptionSeconds;\r\n        ProductState state;\r\n        address newOwnerCandidate;  // Two phase hand-over to minimize the chance that the product ownership is lost to a non-existent address.\r\n        bool requiresWhitelist;\r\n        mapping(address => TimeBasedSubscription) subscriptions;\r\n        mapping(address => WhitelistState) whitelist;\r\n    }\r\n\r\n    struct TimeBasedSubscription {\r\n        uint endTimestamp;\r\n    }\r\n\r\n    /////////////// Marketplace lifecycle /////////////////\r\n\r\n    ERC20 public datacoin;\r\n\r\n    address public currencyUpdateAgent;\r\n    IMarketplace1 prev_marketplace;\r\n    uint256 public txFee;\r\n\r\n    constructor(address datacoinAddress, address currencyUpdateAgentAddress, address prev_marketplace_address) Ownable() public {\r\n        _initialize(datacoinAddress, currencyUpdateAgentAddress, prev_marketplace_address);\r\n    }\r\n\r\n    function _initialize(address datacoinAddress, address currencyUpdateAgentAddress, address prev_marketplace_address) internal {\r\n        currencyUpdateAgent = currencyUpdateAgentAddress;\r\n        datacoin = ERC20(datacoinAddress);\r\n        prev_marketplace = IMarketplace1(prev_marketplace_address);\r\n    }\r\n\r\n    ////////////////// Product management /////////////////\r\n\r\n    mapping (bytes32 => Product) public products;\r\n    /*\r\n        checks this marketplace first, then the previous\r\n    */\r\n    function getProduct(bytes32 id) public view returns (string memory name, address owner, address beneficiary, uint pricePerSecond, Currency currency, uint minimumSubscriptionSeconds, ProductState state, bool requiresWhitelist) {\r\n        (name, owner, beneficiary, pricePerSecond, currency, minimumSubscriptionSeconds, state, requiresWhitelist) = _getProductLocal(id);\r\n        if (owner != address(0))\r\n            return (name, owner, beneficiary, pricePerSecond, currency, minimumSubscriptionSeconds, state, requiresWhitelist);\r\n        (name, owner, beneficiary, pricePerSecond, currency, minimumSubscriptionSeconds, state) = prev_marketplace.getProduct(id);\r\n        return (name, owner, beneficiary, pricePerSecond, currency, minimumSubscriptionSeconds, state, false);\r\n    }\r\n\r\n    /**\r\n    checks only this marketplace, not the previous marketplace\r\n     */\r\n\r\n    function _getProductLocal(bytes32 id) internal view returns (string memory name, address owner, address beneficiary, uint pricePerSecond, Currency currency, uint minimumSubscriptionSeconds, ProductState state, bool requiresWhitelist) {\r\n        Product memory p = products[id];\r\n        return (\r\n            p.name,\r\n            p.owner,\r\n            p.beneficiary,\r\n            p.pricePerSecond,\r\n            p.priceCurrency,\r\n            p.minimumSubscriptionSeconds,\r\n            p.state,\r\n            p.requiresWhitelist\r\n        );\r\n    }\r\n\r\n    // also checks that p exists: p.owner == 0 for non-existent products\r\n    modifier onlyProductOwner(bytes32 productId) {\r\n        (,address _owner,,,,,,) = getProduct(productId);\r\n        require(_owner != address(0), \"error_notFound\");\r\n        require(_owner == msg.sender || owner == msg.sender, \"error_productOwnersOnly\");\r\n        _;\r\n    }\r\n\r\n    /**\r\n     * Imports product details (but NOT subscription details) from previous marketplace\r\n     */\r\n    function _importProductIfNeeded(bytes32 productId) internal returns (bool imported){\r\n        Product storage p = products[productId];\r\n        if(p.id != 0x0)\r\n            return false;\r\n        (string memory _name, address _owner, address _beneficiary, uint _pricePerSecond, IMarketplace1.Currency _priceCurrency, uint _minimumSubscriptionSeconds, IMarketplace1.ProductState _state) = prev_marketplace.getProduct(productId);\r\n        if(_owner == address(0))\r\n            return false;\r\n        p.id = productId;\r\n        p.name = _name;\r\n        p.owner = _owner;\r\n        p.beneficiary = _beneficiary;\r\n        p.pricePerSecond = _pricePerSecond;\r\n        p.priceCurrency = _priceCurrency;\r\n        p.minimumSubscriptionSeconds = _minimumSubscriptionSeconds;\r\n        p.state = _state;\r\n        emit ProductImported(p.owner, p.id, p.name, p.beneficiary, p.pricePerSecond, p.priceCurrency, p.minimumSubscriptionSeconds);\r\n        return true;\r\n    }\r\n\r\n    function _importSubscriptionIfNeeded(bytes32 productId, address subscriber) internal returns (bool imported) {\r\n        bool _productImported = _importProductIfNeeded(productId);\r\n\r\n        // check that subscription didn't already exist in current marketplace\r\n        (Product storage product, TimeBasedSubscription storage sub) = _getSubscriptionLocal(productId, subscriber);\r\n        if (sub.endTimestamp != 0x0) { return false; }\r\n\r\n        // check that subscription exists in the previous marketplace(s)\r\n        // only call prev_marketplace.getSubscription() if product exists there\r\n        // consider e.g. product created in current marketplace but subscription still doesn't exist\r\n        // if _productImported, it must have existed in previous marketplace so no need to perform check\r\n        if(!_productImported){\r\n            (,address _owner_prev,,,,,) = prev_marketplace.getProduct(productId);\r\n            if (_owner_prev == address(0)) { return false; }\r\n        }\r\n        (, uint _endTimestamp) = prev_marketplace.getSubscription(productId, subscriber);\r\n        if (_endTimestamp == 0x0) { return false; }\r\n        product.subscriptions[subscriber] = TimeBasedSubscription(_endTimestamp);\r\n        emit SubscriptionImported(productId, subscriber, _endTimestamp);\r\n        return true;\r\n    }\r\n    function createProduct(bytes32 id, string memory name, address beneficiary, uint pricePerSecond, Currency currency, uint minimumSubscriptionSeconds) public whenNotHalted {\r\n        _createProduct(id, name, beneficiary, pricePerSecond, currency, minimumSubscriptionSeconds, false);\r\n    }\r\n\r\n    function createProductWithWhitelist(bytes32 id, string memory name, address beneficiary, uint pricePerSecond, Currency currency, uint minimumSubscriptionSeconds) public whenNotHalted {\r\n        _createProduct(id, name, beneficiary, pricePerSecond, currency, minimumSubscriptionSeconds, true);\r\n        emit WhitelistEnabled(id);\r\n    }\r\n\r\n\r\n    function _createProduct(bytes32 id, string memory name, address beneficiary, uint pricePerSecond, Currency currency, uint minimumSubscriptionSeconds, bool requiresWhitelist) internal {\r\n        require(id != 0x0, \"error_nullProductId\");\r\n        require(pricePerSecond > 0, \"error_freeProductsNotSupported\");\r\n        (,address _owner,,,,,,) = getProduct(id);\r\n        require(_owner == address(0), \"error_alreadyExists\");\r\n        products[id] = Product({id: id, name: name, owner: msg.sender, beneficiary: beneficiary, pricePerSecond: pricePerSecond,\r\n            priceCurrency: currency, minimumSubscriptionSeconds: minimumSubscriptionSeconds, state: ProductState.Deployed, newOwnerCandidate: address(0), requiresWhitelist: requiresWhitelist});\r\n        emit ProductCreated(msg.sender, id, name, beneficiary, pricePerSecond, currency, minimumSubscriptionSeconds);\r\n    }\r\n\r\n    /**\r\n    * Stop offering the product\r\n    */\r\n    function deleteProduct(bytes32 productId) public onlyProductOwner(productId) {\r\n        _importProductIfNeeded(productId);\r\n        Product storage p = products[productId];\r\n        require(p.state == ProductState.Deployed, \"error_notDeployed\");\r\n        p.state = ProductState.NotDeployed;\r\n        emit ProductDeleted(p.owner, productId, p.name, p.beneficiary, p.pricePerSecond, p.priceCurrency, p.minimumSubscriptionSeconds);\r\n    }\r\n\r\n    /**\r\n    * Return product to market\r\n    */\r\n    function redeployProduct(bytes32 productId) public onlyProductOwner(productId) {\r\n        _importProductIfNeeded(productId);\r\n        Product storage p = products[productId];\r\n        require(p.state == ProductState.NotDeployed, \"error_mustBeNotDeployed\");\r\n        p.state = ProductState.Deployed;\r\n        emit ProductRedeployed(p.owner, productId, p.name, p.beneficiary, p.pricePerSecond, p.priceCurrency, p.minimumSubscriptionSeconds);\r\n    }\r\n\r\n    function updateProduct(bytes32 productId, string memory name, address beneficiary, uint pricePerSecond, Currency currency, uint minimumSubscriptionSeconds, bool redeploy) public onlyProductOwner(productId) {\r\n        require(pricePerSecond > 0, \"error_freeProductsNotSupported\");\r\n        _importProductIfNeeded(productId);\r\n        Product storage p = products[productId];\r\n        p.name = name;\r\n        p.beneficiary = beneficiary;\r\n        p.pricePerSecond = pricePerSecond;\r\n        p.priceCurrency = currency;\r\n        p.minimumSubscriptionSeconds = minimumSubscriptionSeconds;\r\n        emit ProductUpdated(p.owner, p.id, name, beneficiary, pricePerSecond, currency, minimumSubscriptionSeconds);\r\n        if(redeploy)\r\n            redeployProduct(productId);\r\n    }\r\n\r\n    /**\r\n    * Changes ownership of the product. Two phase hand-over minimizes the chance that the product ownership is lost to a non-existent address.\r\n    */\r\n    function offerProductOwnership(bytes32 productId, address newOwnerCandidate) public onlyProductOwner(productId) {\r\n        _importProductIfNeeded(productId);\r\n        // that productId exists is already checked in onlyProductOwner\r\n        products[productId].newOwnerCandidate = newOwnerCandidate;\r\n        emit ProductOwnershipOffered(products[productId].owner, productId, newOwnerCandidate);\r\n    }\r\n\r\n    /**\r\n    * Changes ownership of the product. Two phase hand-over minimizes the chance that the product ownership is lost to a non-existent address.\r\n    */\r\n    function claimProductOwnership(bytes32 productId) public whenNotHalted {\r\n        _importProductIfNeeded(productId);\r\n        // also checks that productId exists (newOwnerCandidate is zero for non-existent)\r\n        Product storage p = products[productId];\r\n        require(msg.sender == p.newOwnerCandidate, \"error_notPermitted\");\r\n        emit ProductOwnershipChanged(msg.sender, productId, p.owner);\r\n        p.owner = msg.sender;\r\n        p.newOwnerCandidate = address(0);\r\n    }\r\n\r\n    /////////////// Whitelist management ///////////////\r\n\r\n    function setRequiresWhitelist(bytes32 productId, bool _requiresWhitelist) public onlyProductOwner(productId) {\r\n        _importProductIfNeeded(productId);\r\n        Product storage p = products[productId];\r\n        require(p.id != 0x0, \"error_notFound\");\r\n        p.requiresWhitelist = _requiresWhitelist;\r\n        if(_requiresWhitelist)\r\n            emit WhitelistEnabled(productId);\r\n        else\r\n            emit WhitelistDisabled(productId);\r\n    }\r\n\r\n    function whitelistApprove(bytes32 productId, address subscriber) public onlyProductOwner(productId) {\r\n        _importProductIfNeeded(productId);\r\n        Product storage p = products[productId];\r\n        require(p.id != 0x0, \"error_notFound\");\r\n        require(p.requiresWhitelist, \"error_whitelistNotEnabled\");\r\n        p.whitelist[subscriber] = WhitelistState.Approved;\r\n        emit WhitelistApproved(productId, subscriber);\r\n    }\r\n\r\n    function whitelistReject(bytes32 productId, address subscriber) public onlyProductOwner(productId) {\r\n        _importProductIfNeeded(productId);\r\n        Product storage p = products[productId];\r\n        require(p.id != 0x0, \"error_notFound\");\r\n        require(p.requiresWhitelist, \"error_whitelistNotEnabled\");\r\n        p.whitelist[subscriber] = WhitelistState.Rejected;\r\n        emit WhitelistRejected(productId, subscriber);\r\n    }\r\n\r\n    function whitelistRequest(bytes32 productId) public {\r\n        _importProductIfNeeded(productId);\r\n        Product storage p = products[productId];\r\n        require(p.id != 0x0, \"error_notFound\");\r\n        require(p.requiresWhitelist, \"error_whitelistNotEnabled\");\r\n        require(p.whitelist[msg.sender] == WhitelistState.None, \"error_whitelistRequestAlreadySubmitted\");\r\n        p.whitelist[msg.sender] = WhitelistState.Pending;\r\n        emit WhitelistRequested(productId, msg.sender);\r\n    }\r\n\r\n    function getWhitelistState(bytes32 productId, address subscriber) public view returns (WhitelistState wlstate) {\r\n        (, address _owner,,,,,,) = getProduct(productId);\r\n        require(_owner != address(0), \"error_notFound\");\r\n        //if it's not local this will return 0, which is WhitelistState.None\r\n        Product storage p = products[productId];\r\n        return p.whitelist[subscriber];\r\n    }\r\n\r\n    /////////////// Subscription management ///////////////\r\n\r\n    function getSubscription(bytes32 productId, address subscriber) public view returns (bool isValid, uint endTimestamp) {\r\n        (,address _owner,,,,,,) = _getProductLocal(productId);\r\n        if (_owner == address(0)) {\r\n            return prev_marketplace.getSubscription(productId,subscriber);\r\n        }\r\n\r\n        (, TimeBasedSubscription storage sub) = _getSubscriptionLocal(productId, subscriber);\r\n        if (sub.endTimestamp == 0x0) {\r\n            // only call prev_marketplace.getSubscription() if product exists in previous marketplace too\r\n            (,address _owner_prev,,,,,) = prev_marketplace.getProduct(productId);\r\n            if (_owner_prev != address(0)) {\r\n                return prev_marketplace.getSubscription(productId,subscriber);\r\n            }\r\n        }\r\n        return (_isValid(sub), sub.endTimestamp);\r\n    }\r\n\r\n    function getSubscriptionTo(bytes32 productId) public view returns (bool isValid, uint endTimestamp) {\r\n        return getSubscription(productId, msg.sender);\r\n    }\r\n\r\n    /**\r\n     * Checks if the given address currently has a valid subscription\r\n     * @param productId to check\r\n     * @param subscriber to check\r\n     */\r\n    function hasValidSubscription(bytes32 productId, address subscriber) public view returns (bool isValid) {\r\n        (isValid,) = getSubscription(productId, subscriber);\r\n    }\r\n\r\n    /**\r\n     * Enforces payment rules, triggers PurchaseListener event\r\n     */\r\n    function _subscribe(bytes32 productId, uint addSeconds, address subscriber, bool requirePayment) internal {\r\n        _importSubscriptionIfNeeded(productId, subscriber);\r\n        (Product storage p, TimeBasedSubscription storage oldSub) = _getSubscriptionLocal(productId, subscriber);\r\n        require(p.state == ProductState.Deployed, \"error_notDeployed\");\r\n        require(!p.requiresWhitelist || p.whitelist[subscriber] == WhitelistState.Approved, \"error_whitelistNotAllowed\");\r\n        uint endTimestamp;\r\n\r\n        if (oldSub.endTimestamp > block.timestamp) {\r\n            require(addSeconds > 0, \"error_topUpTooSmall\");\r\n            endTimestamp = oldSub.endTimestamp.add(addSeconds);\r\n            oldSub.endTimestamp = endTimestamp;\r\n            emit SubscriptionExtended(p.id, subscriber, endTimestamp);\r\n        } else {\r\n            require(addSeconds >= p.minimumSubscriptionSeconds, \"error_newSubscriptionTooSmall\");\r\n            endTimestamp = block.timestamp.add(addSeconds);\r\n            TimeBasedSubscription memory newSub = TimeBasedSubscription(endTimestamp);\r\n            p.subscriptions[subscriber] = newSub;\r\n            emit NewSubscription(p.id, subscriber, endTimestamp);\r\n        }\r\n        emit Subscribed(p.id, subscriber, endTimestamp);\r\n\r\n        uint256 price = 0;\r\n        uint256 fee = 0;\r\n        address recipient = p.beneficiary;\r\n        if (requirePayment) {\r\n            price = getPriceInData(addSeconds, p.pricePerSecond, p.priceCurrency);\r\n            fee = txFee.mul(price).div(1 ether);\r\n            require(datacoin.transferFrom(msg.sender, recipient, price.sub(fee)), \"error_paymentFailed\");\r\n            if (fee > 0) {\r\n                require(datacoin.transferFrom(msg.sender, owner, fee), \"error_paymentFailed\");\r\n            }\r\n        }\r\n\r\n        uint256 codeSize;\r\n        assembly { codeSize := extcodesize(recipient) }  // solium-disable-line security/no-inline-assembly\r\n        if (codeSize > 0) {\r\n            // solium-disable-next-line security/no-low-level-calls\r\n            (bool success, bytes memory returnData) = recipient.call(\r\n                abi.encodeWithSignature(\"onPurchase(bytes32,address,uint256,uint256,uint256)\",\r\n                productId, subscriber, oldSub.endTimestamp, price, fee)\r\n            );\r\n\r\n            if (success) {\r\n                (bool accepted) = abi.decode(returnData, (bool));\r\n                require(accepted, \"error_rejectedBySeller\");\r\n            }\r\n        }\r\n    }\r\n\r\n    function grantSubscription(bytes32 productId, uint subscriptionSeconds, address recipient) public whenNotHalted onlyProductOwner(productId){\r\n        return _subscribe(productId, subscriptionSeconds, recipient, false);\r\n    }\r\n\r\n\r\n    function buyFor(bytes32 productId, uint subscriptionSeconds, address recipient) public whenNotHalted {\r\n        return _subscribe(productId, subscriptionSeconds, recipient, true);\r\n    }\r\n\r\n\r\n    /**\r\n     * Purchases access to this stream for msg.sender.\r\n     * If the address already has a valid subscription, extends the subscription by the given period.\r\n     * @dev since v4.0: Notify the seller if the seller implements PurchaseListener interface\r\n     */\r\n    function buy(bytes32 productId, uint subscriptionSeconds) public whenNotHalted {\r\n        buyFor(productId,subscriptionSeconds, msg.sender);\r\n    }\r\n\r\n\r\n    /** Gets subscriptions info from the subscriptions stored in this contract */\r\n    function _getSubscriptionLocal(bytes32 productId, address subscriber) internal view returns (Product storage p, TimeBasedSubscription storage s) {\r\n        p = products[productId];\r\n        require(p.id != 0x0, \"error_notFound\");\r\n        s = p.subscriptions[subscriber];\r\n    }\r\n\r\n    function _isValid(TimeBasedSubscription storage s) internal view returns (bool) {\r\n        return s.endTimestamp >= block.timestamp;   // solium-disable-line security/no-block-members\r\n    }\r\n\r\n    // TODO: transfer allowance to another Marketplace contract\r\n    // Mechanism basically is that this Marketplace draws from the allowance and credits\r\n    //   the account on another Marketplace; OR that there is a central credit pool (say, an ERC20 token)\r\n    // Creating another ERC20 token for this could be a simple fix: it would need the ability to transfer allowances\r\n\r\n    /////////////// Currency management ///////////////\r\n\r\n    // Exchange rates are formatted as \"decimal fixed-point\", that is, scaled by 10^18, like ether.\r\n    //        Exponent: 10^18 15 12  9  6  3  0\r\n    //                      |  |  |  |  |  |  |\r\n    uint public dataPerUsd = 100000000000000000;   // ~= 0.1 DATA/USD\r\n\r\n    /**\r\n    * Update currency exchange rates; all purchases are still billed in DATAcoin\r\n    * @param timestamp in seconds when the exchange rates were last updated\r\n    * @param dataUsd how many data atoms (10^-18 DATA) equal one USD dollar\r\n    */\r\n    function updateExchangeRates(uint timestamp, uint dataUsd) public {\r\n        require(msg.sender == currencyUpdateAgent, \"error_notPermitted\");\r\n        require(dataUsd > 0, \"error_invalidRate\");\r\n        dataPerUsd = dataUsd;\r\n        emit ExchangeRatesUpdated(timestamp, dataUsd);\r\n    }\r\n\r\n    /**\r\n    * Helper function to calculate (hypothetical) subscription cost for given seconds and price, using current exchange rates.\r\n    * @param subscriptionSeconds length of hypothetical subscription, as a non-scaled integer\r\n    * @param price nominal price scaled by 10^18 (\"token wei\" or \"attodollars\")\r\n    * @param unit unit of the number price\r\n    */\r\n    function getPriceInData(uint subscriptionSeconds, uint price, Currency unit) public view returns (uint datacoinAmount) {\r\n        if (unit == Currency.DATA) {\r\n            return price.mul(subscriptionSeconds);\r\n        }\r\n        return price.mul(dataPerUsd).div(10**18).mul(subscriptionSeconds);\r\n    }\r\n\r\n    /////////////// Admin functionality ///////////////\r\n\r\n    event Halted();\r\n    event Resumed();\r\n    bool public halted = false;\r\n\r\n    modifier whenNotHalted() {\r\n        require(!halted || owner == msg.sender, \"error_halted\");\r\n        _;\r\n    }\r\n    function halt() public onlyOwner {\r\n        halted = true;\r\n        emit Halted();\r\n    }\r\n    function resume() public onlyOwner {\r\n        halted = false;\r\n        emit Resumed();\r\n    }\r\n\r\n    function reInitialize(address datacoinAddress, address currencyUpdateAgentAddress, address prev_marketplace_address) public onlyOwner {\r\n        _initialize(datacoinAddress, currencyUpdateAgentAddress, prev_marketplace_address);\r\n    }\r\n\r\n    function setTxFee(uint256 newTxFee) public onlyOwner {\r\n        require(newTxFee <= 1 ether, \"error_invalidTxFee\");\r\n        txFee = newTxFee;\r\n        emit TxFeeChanged(txFee);\r\n    }\r\n}","ABI":"[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"datacoinAddress\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"currencyUpdateAgentAddress\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"prev_marketplace_address\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"timestamp\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"dataInUsd\",\"type\":\"uint256\"}],\"name\":\"ExchangeRatesUpdated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[],\"name\":\"Halted\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"productId\",\"type\":\"bytes32\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"subscriber\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"endTimestamp\",\"type\":\"uint256\"}],\"name\":\"NewSubscription\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"id\",\"type\":\"bytes32\"},{\"indexed\":false,\"internalType\":\"string\",\"name\":\"name\",\"type\":\"string\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"beneficiary\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"pricePerSecond\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"enum IMarketplace.Currency\",\"name\":\"currency\",\"type\":\"uint8\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"minimumSubscriptionSeconds\",\"type\":\"uint256\"}],\"name\":\"ProductCreated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"id\",\"type\":\"bytes32\"},{\"indexed\":false,\"internalType\":\"string\",\"name\":\"name\",\"type\":\"string\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"beneficiary\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"pricePerSecond\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"enum IMarketplace.Currency\",\"name\":\"currency\",\"type\":\"uint8\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"minimumSubscriptionSeconds\",\"type\":\"uint256\"}],\"name\":\"ProductDeleted\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"id\",\"type\":\"bytes32\"},{\"indexed\":false,\"internalType\":\"string\",\"name\":\"name\",\"type\":\"string\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"beneficiary\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"pricePerSecond\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"enum IMarketplace.Currency\",\"name\":\"currency\",\"type\":\"uint8\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"minimumSubscriptionSeconds\",\"type\":\"uint256\"}],\"name\":\"ProductImported\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"id\",\"type\":\"bytes32\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"oldOwner\",\"type\":\"address\"}],\"name\":\"ProductOwnershipChanged\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"id\",\"type\":\"bytes32\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"}],\"name\":\"ProductOwnershipOffered\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"id\",\"type\":\"bytes32\"},{\"indexed\":false,\"internalType\":\"string\",\"name\":\"name\",\"type\":\"string\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"beneficiary\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"pricePerSecond\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"enum IMarketplace.Currency\",\"name\":\"currency\",\"type\":\"uint8\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"minimumSubscriptionSeconds\",\"type\":\"uint256\"}],\"name\":\"ProductRedeployed\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"id\",\"type\":\"bytes32\"},{\"indexed\":false,\"internalType\":\"string\",\"name\":\"name\",\"type\":\"string\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"beneficiary\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"pricePerSecond\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"enum IMarketplace.Currency\",\"name\":\"currency\",\"type\":\"uint8\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"minimumSubscriptionSeconds\",\"type\":\"uint256\"}],\"name\":\"ProductUpdated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[],\"name\":\"Resumed\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"productId\",\"type\":\"bytes32\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"subscriber\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"endTimestamp\",\"type\":\"uint256\"}],\"name\":\"Subscribed\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"productId\",\"type\":\"bytes32\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"subscriber\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"endTimestamp\",\"type\":\"uint256\"}],\"name\":\"SubscriptionExtended\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"productId\",\"type\":\"bytes32\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"subscriber\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"endTimestamp\",\"type\":\"uint256\"}],\"name\":\"SubscriptionImported\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"productId\",\"type\":\"bytes32\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"secondsTransferred\",\"type\":\"uint256\"}],\"name\":\"SubscriptionTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"newTxFee\",\"type\":\"uint256\"}],\"name\":\"TxFeeChanged\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"productId\",\"type\":\"bytes32\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"subscriber\",\"type\":\"address\"}],\"name\":\"WhitelistApproved\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"productId\",\"type\":\"bytes32\"}],\"name\":\"WhitelistDisabled\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"productId\",\"type\":\"bytes32\"}],\"name\":\"WhitelistEnabled\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"productId\",\"type\":\"bytes32\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"subscriber\",\"type\":\"address\"}],\"name\":\"WhitelistRejected\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"productId\",\"type\":\"bytes32\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"subscriber\",\"type\":\"address\"}],\"name\":\"WhitelistRequested\",\"type\":\"event\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"productId\",\"type\":\"bytes32\"},{\"internalType\":\"uint256\",\"name\":\"subscriptionSeconds\",\"type\":\"uint256\"}],\"name\":\"buy\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"productId\",\"type\":\"bytes32\"},{\"internalType\":\"uint256\",\"name\":\"subscriptionSeconds\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"recipient\",\"type\":\"address\"}],\"name\":\"buyFor\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"claimOwnership\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"productId\",\"type\":\"bytes32\"}],\"name\":\"claimProductOwnership\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"id\",\"type\":\"bytes32\"},{\"internalType\":\"string\",\"name\":\"name\",\"type\":\"string\"},{\"internalType\":\"address\",\"name\":\"beneficiary\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"pricePerSecond\",\"type\":\"uint256\"},{\"internalType\":\"enum IMarketplace.Currency\",\"name\":\"currency\",\"type\":\"uint8\"},{\"internalType\":\"uint256\",\"name\":\"minimumSubscriptionSeconds\",\"type\":\"uint256\"}],\"name\":\"createProduct\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"id\",\"type\":\"bytes32\"},{\"internalType\":\"string\",\"name\":\"name\",\"type\":\"string\"},{\"internalType\":\"address\",\"name\":\"beneficiary\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"pricePerSecond\",\"type\":\"uint256\"},{\"internalType\":\"enum IMarketplace.Currency\",\"name\":\"currency\",\"type\":\"uint8\"},{\"internalType\":\"uint256\",\"name\":\"minimumSubscriptionSeconds\",\"type\":\"uint256\"}],\"name\":\"createProductWithWhitelist\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"currencyUpdateAgent\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"dataPerUsd\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"datacoin\",\"outputs\":[{\"internalType\":\"contract ERC20\",\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"productId\",\"type\":\"bytes32\"}],\"name\":\"deleteProduct\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"subscriptionSeconds\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"price\",\"type\":\"uint256\"},{\"internalType\":\"enum IMarketplace.Currency\",\"name\":\"unit\",\"type\":\"uint8\"}],\"name\":\"getPriceInData\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"datacoinAmount\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"id\",\"type\":\"bytes32\"}],\"name\":\"getProduct\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"name\",\"type\":\"string\"},{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"beneficiary\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"pricePerSecond\",\"type\":\"uint256\"},{\"internalType\":\"enum IMarketplace.Currency\",\"name\":\"currency\",\"type\":\"uint8\"},{\"internalType\":\"uint256\",\"name\":\"minimumSubscriptionSeconds\",\"type\":\"uint256\"},{\"internalType\":\"enum IMarketplace.ProductState\",\"name\":\"state\",\"type\":\"uint8\"},{\"internalType\":\"bool\",\"name\":\"requiresWhitelist\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"productId\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"subscriber\",\"type\":\"address\"}],\"name\":\"getSubscription\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"isValid\",\"type\":\"bool\"},{\"internalType\":\"uint256\",\"name\":\"endTimestamp\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"productId\",\"type\":\"bytes32\"}],\"name\":\"getSubscriptionTo\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"isValid\",\"type\":\"bool\"},{\"internalType\":\"uint256\",\"name\":\"endTimestamp\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"productId\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"subscriber\",\"type\":\"address\"}],\"name\":\"getWhitelistState\",\"outputs\":[{\"internalType\":\"enum IMarketplace.WhitelistState\",\"name\":\"wlstate\",\"type\":\"uint8\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"productId\",\"type\":\"bytes32\"},{\"internalType\":\"uint256\",\"name\":\"subscriptionSeconds\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"recipient\",\"type\":\"address\"}],\"name\":\"grantSubscription\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"halt\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"halted\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"productId\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"subscriber\",\"type\":\"address\"}],\"name\":\"hasValidSubscription\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"isValid\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"productId\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"newOwnerCandidate\",\"type\":\"address\"}],\"name\":\"offerProductOwnership\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"pendingOwner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"name\":\"products\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"id\",\"type\":\"bytes32\"},{\"internalType\":\"string\",\"name\":\"name\",\"type\":\"string\"},{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"beneficiary\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"pricePerSecond\",\"type\":\"uint256\"},{\"internalType\":\"enum IMarketplace.Currency\",\"name\":\"priceCurrency\",\"type\":\"uint8\"},{\"internalType\":\"uint256\",\"name\":\"minimumSubscriptionSeconds\",\"type\":\"uint256\"},{\"internalType\":\"enum IMarketplace.ProductState\",\"name\":\"state\",\"type\":\"uint8\"},{\"internalType\":\"address\",\"name\":\"newOwnerCandidate\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"requiresWhitelist\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"address\",\"name\":\"datacoinAddress\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"currencyUpdateAgentAddress\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"prev_marketplace_address\",\"type\":\"address\"}],\"name\":\"reInitialize\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"productId\",\"type\":\"bytes32\"}],\"name\":\"redeployProduct\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"resume\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"productId\",\"type\":\"bytes32\"},{\"internalType\":\"bool\",\"name\":\"_requiresWhitelist\",\"type\":\"bool\"}],\"name\":\"setRequiresWhitelist\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"newTxFee\",\"type\":\"uint256\"}],\"name\":\"setTxFee\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"txFee\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"timestamp\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"dataUsd\",\"type\":\"uint256\"}],\"name\":\"updateExchangeRates\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"productId\",\"type\":\"bytes32\"},{\"internalType\":\"string\",\"name\":\"name\",\"type\":\"string\"},{\"internalType\":\"address\",\"name\":\"beneficiary\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"pricePerSecond\",\"type\":\"uint256\"},{\"internalType\":\"enum IMarketplace.Currency\",\"name\":\"currency\",\"type\":\"uint8\"},{\"internalType\":\"uint256\",\"name\":\"minimumSubscriptionSeconds\",\"type\":\"uint256\"},{\"internalType\":\"bool\",\"name\":\"redeploy\",\"type\":\"bool\"}],\"name\":\"updateProduct\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"productId\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"subscriber\",\"type\":\"address\"}],\"name\":\"whitelistApprove\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"productId\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"subscriber\",\"type\":\"address\"}],\"name\":\"whitelistReject\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"productId\",\"type\":\"bytes32\"}],\"name\":\"whitelistRequest\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"}]","ContractName":"Marketplace","CompilerVersion":"v0.5.17+commit.d19bba13","OptimizationUsed":"1","Runs":"20","ConstructorArguments":"0000000000000000000000000cf0ee63788a0849fe5297f3407f701e122cc023000000000000000000000000eb3977fcdf4254e34e89b2329ed9be7ebbeec9b8000000000000000000000000a10151d088f6f2705a05d6c83719e99e079a61c1","Library":"","LicenseType":"GNU LGPLv3","SwarmSource":"bzzr://e4485926a88828d7b40bf1074eecf4e7bdf2dcd0f7c0e9d840031c9bff3655fe"}]}