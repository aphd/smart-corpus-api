{"status":"1","message":"OK","result":[{"SourceCode":"pragma solidity ^0.5.10;\r\n\r\ncontract ValueProvider {\r\n    function getValue(bytes32 key) public view returns (bytes32 value);\r\n    event ValueUpdate(bytes32 indexed key, bytes32 indexed value);\r\n}\r\n\r\ncontract DMap3 is ValueProvider {\r\n    address                   public allocator;\r\n    mapping(bytes32=>bool)    public locked;\r\n    mapping(bytes32=>bytes32) public values;\r\n    mapping(bytes32=>address) public owners;\r\n    mapping(bytes32=>address) public offered;\r\n\r\n    event ValueUpdate( bytes32 indexed key\r\n                     , bytes32 indexed value );\r\n    event ValueLocked( bytes32 indexed key\r\n                     , bytes32 indexed value );\r\n    event OwnerUpdate( bytes32 indexed key\r\n                     , address indexed oldOwner\r\n                     , address indexed newOwner );\r\n\r\n    constructor() public {\r\n        allocator = msg.sender;\r\n    }\r\n    function setAllocator(address newAllocator) public {\r\n        assert(msg.sender == allocator);\r\n        allocator = newAllocator;\r\n    }\r\n    function allocate(bytes32 key, address owner) public {\r\n        assert( ! locked[key]);\r\n        assert(msg.sender == allocator);\r\n        assert(owner != address(0));\r\n        assert(owners[key] != address(0));\r\n        owners[key] = owner;\r\n        emit OwnerUpdate(key, address(this), owner);\r\n    }\r\n    function lock(bytes32 key) public {\r\n        assert( ! locked[key]); // one lock event\r\n        assert(msg.sender == owners[key]);\r\n        locked[key] = true;\r\n        owners[key] = address(0);\r\n        offered[key] = address(0);\r\n        emit ValueLocked(key, values[key]);\r\n    }\r\n    function offer(bytes32 key, address to) public {\r\n        assert( ! locked[key]);\r\n        assert(msg.sender == owners[key]);\r\n        offered[key] = to;\r\n    }\r\n    function accept(bytes32 key) public {\r\n        assert( ! locked[key]);\r\n        assert(msg.sender == offered[key]);\r\n        emit OwnerUpdate(key, owners[key], offered[key]);\r\n        owners[key] = msg.sender;\r\n        offered[key] = address(0);\r\n    }\r\n    function setValue(bytes32 key, bytes32 value) public {\r\n        assert( ! locked[key]);\r\n        assert(msg.sender == owners[key]);\r\n        values[key] = value;\r\n        emit ValueUpdate(key, value);\r\n    }\r\n    function getValue(bytes32 key) public view returns (bytes32) {\r\n        return values[key];\r\n    }\r\n}","ABI":"[{\"constant\":false,\"inputs\":[{\"name\":\"key\",\"type\":\"bytes32\"}],\"name\":\"lock\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"key\",\"type\":\"bytes32\"},{\"name\":\"value\",\"type\":\"bytes32\"}],\"name\":\"setValue\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"key\",\"type\":\"bytes32\"},{\"name\":\"to\",\"type\":\"address\"}],\"name\":\"offer\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"key\",\"type\":\"bytes32\"}],\"name\":\"getValue\",\"outputs\":[{\"name\":\"\",\"type\":\"bytes32\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"bytes32\"}],\"name\":\"offered\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"allocator\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"key\",\"type\":\"bytes32\"},{\"name\":\"owner\",\"type\":\"address\"}],\"name\":\"allocate\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"newAllocator\",\"type\":\"address\"}],\"name\":\"setAllocator\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"bytes32\"}],\"name\":\"locked\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"bytes32\"}],\"name\":\"values\",\"outputs\":[{\"name\":\"\",\"type\":\"bytes32\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"key\",\"type\":\"bytes32\"}],\"name\":\"accept\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"bytes32\"}],\"name\":\"owners\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"key\",\"type\":\"bytes32\"},{\"indexed\":true,\"name\":\"value\",\"type\":\"bytes32\"}],\"name\":\"ValueUpdate\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"key\",\"type\":\"bytes32\"},{\"indexed\":true,\"name\":\"value\",\"type\":\"bytes32\"}],\"name\":\"ValueLocked\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"key\",\"type\":\"bytes32\"},{\"indexed\":true,\"name\":\"oldOwner\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnerUpdate\",\"type\":\"event\"}]","ContractName":"DMap3","CompilerVersion":"v0.5.10+commit.5a6ea5b1","OptimizationUsed":"1","Runs":"200","ConstructorArguments":"","Library":"","LicenseType":"GNU GPLv3","SwarmSource":"bzzr://d98aec9b43b4728b340b7310350e80d947bef65a7b80a26bbc3b1d618faffe27"}]}