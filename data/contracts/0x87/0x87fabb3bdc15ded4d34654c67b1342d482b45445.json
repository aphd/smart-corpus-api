{"status":"1","message":"OK-Missing/Invalid API Key, rate limit of 1/3sec applied","result":[{"SourceCode":"// File: openzeppelin-solidity/contracts/math/SafeMath.sol\r\n\r\npragma solidity ^0.5.0;\r\n\r\n/**\r\n * @dev Wrappers over Solidity's arithmetic operations with added overflow\r\n * checks.\r\n *\r\n * Arithmetic operations in Solidity wrap on overflow. This can easily result\r\n * in bugs, because programmers usually assume that an overflow raises an\r\n * error, which is the standard behavior in high level programming languages.\r\n * `SafeMath` restores this intuition by reverting the transaction when an\r\n * operation overflows.\r\n *\r\n * Using this library instead of the unchecked operations eliminates an entire\r\n * class of bugs, so it's recommended to use it always.\r\n */\r\nlibrary SafeMath {\r\n    /**\r\n     * @dev Returns the addition of two unsigned integers, reverting on\r\n     * overflow.\r\n     *\r\n     * Counterpart to Solidity's `+` operator.\r\n     *\r\n     * Requirements:\r\n     * - Addition cannot overflow.\r\n     */\r\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        uint256 c = a + b;\r\n        require(c >= a, \"SafeMath: addition overflow\");\r\n\r\n        return c;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the subtraction of two unsigned integers, reverting on\r\n     * overflow (when the result is negative).\r\n     *\r\n     * Counterpart to Solidity's `-` operator.\r\n     *\r\n     * Requirements:\r\n     * - Subtraction cannot overflow.\r\n     */\r\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        require(b <= a, \"SafeMath: subtraction overflow\");\r\n        uint256 c = a - b;\r\n\r\n        return c;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the multiplication of two unsigned integers, reverting on\r\n     * overflow.\r\n     *\r\n     * Counterpart to Solidity's `*` operator.\r\n     *\r\n     * Requirements:\r\n     * - Multiplication cannot overflow.\r\n     */\r\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        // Gas optimization: this is cheaper than requiring 'a' not being zero, but the\r\n        // benefit is lost if 'b' is also tested.\r\n        // See: https://github.com/OpenZeppelin/openzeppelin-solidity/pull/522\r\n        if (a == 0) {\r\n            return 0;\r\n        }\r\n\r\n        uint256 c = a * b;\r\n        require(c / a == b, \"SafeMath: multiplication overflow\");\r\n\r\n        return c;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the integer division of two unsigned integers. Reverts on\r\n     * division by zero. The result is rounded towards zero.\r\n     *\r\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\r\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\r\n     * uses an invalid opcode to revert (consuming all remaining gas).\r\n     *\r\n     * Requirements:\r\n     * - The divisor cannot be zero.\r\n     */\r\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        // Solidity only automatically asserts when dividing by 0\r\n        require(b > 0, \"SafeMath: division by zero\");\r\n        uint256 c = a / b;\r\n        // assert(a == b * c + a % b); // There is no case in which this doesn't hold\r\n\r\n        return c;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\r\n     * Reverts when dividing by zero.\r\n     *\r\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\r\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\r\n     * invalid opcode to revert (consuming all remaining gas).\r\n     *\r\n     * Requirements:\r\n     * - The divisor cannot be zero.\r\n     */\r\n    function mod(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        require(b != 0, \"SafeMath: modulo by zero\");\r\n        return a % b;\r\n    }\r\n}\r\n\r\n// File: openzeppelin-solidity/contracts/token/ERC20/IERC20.sol\r\n\r\npragma solidity ^0.5.0;\r\n\r\n/**\r\n * @dev Interface of the ERC20 standard as defined in the EIP. Does not include\r\n * the optional functions; to access them see `ERC20Detailed`.\r\n */\r\ninterface IERC20 {\r\n    /**\r\n     * @dev Returns the amount of tokens in existence.\r\n     */\r\n    function totalSupply() external view returns (uint256);\r\n\r\n    /**\r\n     * @dev Returns the amount of tokens owned by `account`.\r\n     */\r\n    function balanceOf(address account) external view returns (uint256);\r\n\r\n    /**\r\n     * @dev Moves `amount` tokens from the caller's account to `recipient`.\r\n     *\r\n     * Returns a boolean value indicating whether the operation succeeded.\r\n     *\r\n     * Emits a `Transfer` event.\r\n     */\r\n    function transfer(address recipient, uint256 amount) external returns (bool);\r\n\r\n    /**\r\n     * @dev Returns the remaining number of tokens that `spender` will be\r\n     * allowed to spend on behalf of `owner` through `transferFrom`. This is\r\n     * zero by default.\r\n     *\r\n     * This value changes when `approve` or `transferFrom` are called.\r\n     */\r\n    function allowance(address owner, address spender) external view returns (uint256);\r\n\r\n    /**\r\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\r\n     *\r\n     * Returns a boolean value indicating whether the operation succeeded.\r\n     *\r\n     * > Beware that changing an allowance with this method brings the risk\r\n     * that someone may use both the old and the new allowance by unfortunate\r\n     * transaction ordering. One possible solution to mitigate this race\r\n     * condition is to first reduce the spender's allowance to 0 and set the\r\n     * desired value afterwards:\r\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\r\n     *\r\n     * Emits an `Approval` event.\r\n     */\r\n    function approve(address spender, uint256 amount) external returns (bool);\r\n\r\n    /**\r\n     * @dev Moves `amount` tokens from `sender` to `recipient` using the\r\n     * allowance mechanism. `amount` is then deducted from the caller's\r\n     * allowance.\r\n     *\r\n     * Returns a boolean value indicating whether the operation succeeded.\r\n     *\r\n     * Emits a `Transfer` event.\r\n     */\r\n    function transferFrom(address sender, address recipient, uint256 amount) external returns (bool);\r\n\r\n    /**\r\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\r\n     * another (`to`).\r\n     *\r\n     * Note that `value` may be zero.\r\n     */\r\n    event Transfer(address indexed from, address indexed to, uint256 value);\r\n\r\n    /**\r\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\r\n     * a call to `approve`. `value` is the new allowance.\r\n     */\r\n    event Approval(address indexed owner, address indexed spender, uint256 value);\r\n}\r\n\r\n// File: openzeppelin-solidity/contracts/token/ERC20/ERC20.sol\r\n\r\npragma solidity ^0.5.0;\r\n\r\n\r\n\r\n/**\r\n * @dev Implementation of the `IERC20` interface.\r\n *\r\n * This implementation is agnostic to the way tokens are created. This means\r\n * that a supply mechanism has to be added in a derived contract using `_mint`.\r\n * For a generic mechanism see `ERC20Mintable`.\r\n *\r\n * *For a detailed writeup see our guide [How to implement supply\r\n * mechanisms](https://forum.zeppelin.solutions/t/how-to-implement-erc20-supply-mechanisms/226).*\r\n *\r\n * We have followed general OpenZeppelin guidelines: functions revert instead\r\n * of returning `false` on failure. This behavior is nonetheless conventional\r\n * and does not conflict with the expectations of ERC20 applications.\r\n *\r\n * Additionally, an `Approval` event is emitted on calls to `transferFrom`.\r\n * This allows applications to reconstruct the allowance for all accounts just\r\n * by listening to said events. Other implementations of the EIP may not emit\r\n * these events, as it isn't required by the specification.\r\n *\r\n * Finally, the non-standard `decreaseAllowance` and `increaseAllowance`\r\n * functions have been added to mitigate the well-known issues around setting\r\n * allowances. See `IERC20.approve`.\r\n */\r\ncontract ERC20 is IERC20 {\r\n    using SafeMath for uint256;\r\n\r\n    mapping (address => uint256) private _balances;\r\n\r\n    mapping (address => mapping (address => uint256)) private _allowances;\r\n\r\n    uint256 private _totalSupply;\r\n\r\n    /**\r\n     * @dev See `IERC20.totalSupply`.\r\n     */\r\n    function totalSupply() public view returns (uint256) {\r\n        return _totalSupply;\r\n    }\r\n\r\n    /**\r\n     * @dev See `IERC20.balanceOf`.\r\n     */\r\n    function balanceOf(address account) public view returns (uint256) {\r\n        return _balances[account];\r\n    }\r\n\r\n    /**\r\n     * @dev See `IERC20.transfer`.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - `recipient` cannot be the zero address.\r\n     * - the caller must have a balance of at least `amount`.\r\n     */\r\n    function transfer(address recipient, uint256 amount) public returns (bool) {\r\n        _transfer(msg.sender, recipient, amount);\r\n        return true;\r\n    }\r\n\r\n    /**\r\n     * @dev See `IERC20.allowance`.\r\n     */\r\n    function allowance(address owner, address spender) public view returns (uint256) {\r\n        return _allowances[owner][spender];\r\n    }\r\n\r\n    /**\r\n     * @dev See `IERC20.approve`.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - `spender` cannot be the zero address.\r\n     */\r\n    function approve(address spender, uint256 value) public returns (bool) {\r\n        _approve(msg.sender, spender, value);\r\n        return true;\r\n    }\r\n\r\n    /**\r\n     * @dev See `IERC20.transferFrom`.\r\n     *\r\n     * Emits an `Approval` event indicating the updated allowance. This is not\r\n     * required by the EIP. See the note at the beginning of `ERC20`;\r\n     *\r\n     * Requirements:\r\n     * - `sender` and `recipient` cannot be the zero address.\r\n     * - `sender` must have a balance of at least `value`.\r\n     * - the caller must have allowance for `sender`'s tokens of at least\r\n     * `amount`.\r\n     */\r\n    function transferFrom(address sender, address recipient, uint256 amount) public returns (bool) {\r\n        _transfer(sender, recipient, amount);\r\n        _approve(sender, msg.sender, _allowances[sender][msg.sender].sub(amount));\r\n        return true;\r\n    }\r\n\r\n    /**\r\n     * @dev Atomically increases the allowance granted to `spender` by the caller.\r\n     *\r\n     * This is an alternative to `approve` that can be used as a mitigation for\r\n     * problems described in `IERC20.approve`.\r\n     *\r\n     * Emits an `Approval` event indicating the updated allowance.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - `spender` cannot be the zero address.\r\n     */\r\n    function increaseAllowance(address spender, uint256 addedValue) public returns (bool) {\r\n        _approve(msg.sender, spender, _allowances[msg.sender][spender].add(addedValue));\r\n        return true;\r\n    }\r\n\r\n    /**\r\n     * @dev Atomically decreases the allowance granted to `spender` by the caller.\r\n     *\r\n     * This is an alternative to `approve` that can be used as a mitigation for\r\n     * problems described in `IERC20.approve`.\r\n     *\r\n     * Emits an `Approval` event indicating the updated allowance.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - `spender` cannot be the zero address.\r\n     * - `spender` must have allowance for the caller of at least\r\n     * `subtractedValue`.\r\n     */\r\n    function decreaseAllowance(address spender, uint256 subtractedValue) public returns (bool) {\r\n        _approve(msg.sender, spender, _allowances[msg.sender][spender].sub(subtractedValue));\r\n        return true;\r\n    }\r\n\r\n    /**\r\n     * @dev Moves tokens `amount` from `sender` to `recipient`.\r\n     *\r\n     * This is internal function is equivalent to `transfer`, and can be used to\r\n     * e.g. implement automatic token fees, slashing mechanisms, etc.\r\n     *\r\n     * Emits a `Transfer` event.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - `sender` cannot be the zero address.\r\n     * - `recipient` cannot be the zero address.\r\n     * - `sender` must have a balance of at least `amount`.\r\n     */\r\n    function _transfer(address sender, address recipient, uint256 amount) internal {\r\n        require(sender != address(0), \"ERC20: transfer from the zero address\");\r\n        require(recipient != address(0), \"ERC20: transfer to the zero address\");\r\n\r\n        _balances[sender] = _balances[sender].sub(amount);\r\n        _balances[recipient] = _balances[recipient].add(amount);\r\n        emit Transfer(sender, recipient, amount);\r\n    }\r\n\r\n    /** @dev Creates `amount` tokens and assigns them to `account`, increasing\r\n     * the total supply.\r\n     *\r\n     * Emits a `Transfer` event with `from` set to the zero address.\r\n     *\r\n     * Requirements\r\n     *\r\n     * - `to` cannot be the zero address.\r\n     */\r\n    function _mint(address account, uint256 amount) internal {\r\n        require(account != address(0), \"ERC20: mint to the zero address\");\r\n\r\n        _totalSupply = _totalSupply.add(amount);\r\n        _balances[account] = _balances[account].add(amount);\r\n        emit Transfer(address(0), account, amount);\r\n    }\r\n\r\n     /**\r\n     * @dev Destoys `amount` tokens from `account`, reducing the\r\n     * total supply.\r\n     *\r\n     * Emits a `Transfer` event with `to` set to the zero address.\r\n     *\r\n     * Requirements\r\n     *\r\n     * - `account` cannot be the zero address.\r\n     * - `account` must have at least `amount` tokens.\r\n     */\r\n    function _burn(address account, uint256 value) internal {\r\n        require(account != address(0), \"ERC20: burn from the zero address\");\r\n\r\n        _totalSupply = _totalSupply.sub(value);\r\n        _balances[account] = _balances[account].sub(value);\r\n        emit Transfer(account, address(0), value);\r\n    }\r\n\r\n    /**\r\n     * @dev Sets `amount` as the allowance of `spender` over the `owner`s tokens.\r\n     *\r\n     * This is internal function is equivalent to `approve`, and can be used to\r\n     * e.g. set automatic allowances for certain subsystems, etc.\r\n     *\r\n     * Emits an `Approval` event.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - `owner` cannot be the zero address.\r\n     * - `spender` cannot be the zero address.\r\n     */\r\n    function _approve(address owner, address spender, uint256 value) internal {\r\n        require(owner != address(0), \"ERC20: approve from the zero address\");\r\n        require(spender != address(0), \"ERC20: approve to the zero address\");\r\n\r\n        _allowances[owner][spender] = value;\r\n        emit Approval(owner, spender, value);\r\n    }\r\n\r\n    /**\r\n     * @dev Destoys `amount` tokens from `account`.`amount` is then deducted\r\n     * from the caller's allowance.\r\n     *\r\n     * See `_burn` and `_approve`.\r\n     */\r\n    function _burnFrom(address account, uint256 amount) internal {\r\n        _burn(account, amount);\r\n        _approve(account, msg.sender, _allowances[account][msg.sender].sub(amount));\r\n    }\r\n}\r\n\r\n// File: openzeppelin-solidity/contracts/ownership/Ownable.sol\r\n\r\npragma solidity ^0.5.0;\r\n\r\n/**\r\n * @dev Contract module which provides a basic access control mechanism, where\r\n * there is an account (an owner) that can be granted exclusive access to\r\n * specific functions.\r\n *\r\n * This module is used through inheritance. It will make available the modifier\r\n * `onlyOwner`, which can be aplied to your functions to restrict their use to\r\n * the owner.\r\n */\r\ncontract Ownable {\r\n    address private _owner;\r\n\r\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\r\n\r\n    /**\r\n     * @dev Initializes the contract setting the deployer as the initial owner.\r\n     */\r\n    constructor () internal {\r\n        _owner = msg.sender;\r\n        emit OwnershipTransferred(address(0), _owner);\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the address of the current owner.\r\n     */\r\n    function owner() public view returns (address) {\r\n        return _owner;\r\n    }\r\n\r\n    /**\r\n     * @dev Throws if called by any account other than the owner.\r\n     */\r\n    modifier onlyOwner() {\r\n        require(isOwner(), \"Ownable: caller is not the owner\");\r\n        _;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns true if the caller is the current owner.\r\n     */\r\n    function isOwner() public view returns (bool) {\r\n        return msg.sender == _owner;\r\n    }\r\n\r\n    /**\r\n     * @dev Leaves the contract without owner. It will not be possible to call\r\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\r\n     *\r\n     * > Note: Renouncing ownership will leave the contract without an owner,\r\n     * thereby removing any functionality that is only available to the owner.\r\n     */\r\n    function renounceOwnership() public onlyOwner {\r\n        emit OwnershipTransferred(_owner, address(0));\r\n        _owner = address(0);\r\n    }\r\n\r\n    /**\r\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\r\n     * Can only be called by the current owner.\r\n     */\r\n    function transferOwnership(address newOwner) public onlyOwner {\r\n        _transferOwnership(newOwner);\r\n    }\r\n\r\n    /**\r\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\r\n     */\r\n    function _transferOwnership(address newOwner) internal {\r\n        require(newOwner != address(0), \"Ownable: new owner is the zero address\");\r\n        emit OwnershipTransferred(_owner, newOwner);\r\n        _owner = newOwner;\r\n    }\r\n}\r\n\r\n// File: openzeppelin-solidity/contracts/utils/Address.sol\r\n\r\npragma solidity ^0.5.0;\r\n\r\n/**\r\n * @dev Collection of functions related to the address type,\r\n */\r\nlibrary Address {\r\n    /**\r\n     * @dev Returns true if `account` is a contract.\r\n     *\r\n     * This test is non-exhaustive, and there may be false-negatives: during the\r\n     * execution of a contract's constructor, its address will be reported as\r\n     * not containing a contract.\r\n     *\r\n     * > It is unsafe to assume that an address for which this function returns\r\n     * false is an externally-owned account (EOA) and not a contract.\r\n     */\r\n    function isContract(address account) internal view returns (bool) {\r\n        // This method relies in extcodesize, which returns 0 for contracts in\r\n        // construction, since the code is only stored at the end of the\r\n        // constructor execution.\r\n\r\n        uint256 size;\r\n        // solhint-disable-next-line no-inline-assembly\r\n        assembly { size := extcodesize(account) }\r\n        return size > 0;\r\n    }\r\n}\r\n\r\n// File: openzeppelin-solidity/contracts/utils/ReentrancyGuard.sol\r\n\r\npragma solidity ^0.5.0;\r\n\r\n/**\r\n * @dev Contract module that helps prevent reentrant calls to a function.\r\n *\r\n * Inheriting from `ReentrancyGuard` will make the `nonReentrant` modifier\r\n * available, which can be aplied to functions to make sure there are no nested\r\n * (reentrant) calls to them.\r\n *\r\n * Note that because there is a single `nonReentrant` guard, functions marked as\r\n * `nonReentrant` may not call one another. This can be worked around by making\r\n * those functions `private`, and then adding `external` `nonReentrant` entry\r\n * points to them.\r\n */\r\ncontract ReentrancyGuard {\r\n    /// @dev counter to allow mutex lock with only one SSTORE operation\r\n    uint256 private _guardCounter;\r\n\r\n    constructor () internal {\r\n        // The counter starts at one to prevent changing it from zero to a non-zero\r\n        // value, which is a more expensive operation.\r\n        _guardCounter = 1;\r\n    }\r\n\r\n    /**\r\n     * @dev Prevents a contract from calling itself, directly or indirectly.\r\n     * Calling a `nonReentrant` function from another `nonReentrant`\r\n     * function is not supported. It is possible to prevent this from happening\r\n     * by making the `nonReentrant` function external, and make it call a\r\n     * `private` function that does the actual work.\r\n     */\r\n    modifier nonReentrant() {\r\n        _guardCounter += 1;\r\n        uint256 localCounter = _guardCounter;\r\n        _;\r\n        require(localCounter == _guardCounter, \"ReentrancyGuard: reentrant call\");\r\n    }\r\n}\r\n\r\n// File: original_contracts/IWhitelisted.sol\r\n\r\npragma solidity 0.5.11;\r\n\r\n\r\ninterface IWhitelisted {\r\n\r\n    function isWhitelisted(address account) external view returns (bool);\r\n}\r\n\r\n// File: original_contracts/lib/IExchange.sol\r\n\r\npragma solidity 0.5.11;\r\n\r\n\r\ninterface IExchange {\r\n    function swap(\r\n        IERC20 fromToken,\r\n        IERC20 toToken,\r\n        uint256 fromAmount,\r\n        uint256 toAmount,\r\n        address exchange,\r\n        bytes calldata payload) external payable returns (uint256);\r\n}\r\n\r\n// File: openzeppelin-solidity/contracts/token/ERC20/SafeERC20.sol\r\n\r\npragma solidity ^0.5.0;\r\n\r\n\r\n\r\n\r\n/**\r\n * @title SafeERC20\r\n * @dev Wrappers around ERC20 operations that throw on failure (when the token\r\n * contract returns false). Tokens that return no value (and instead revert or\r\n * throw on failure) are also supported, non-reverting calls are assumed to be\r\n * successful.\r\n * To use this library you can add a `using SafeERC20 for ERC20;` statement to your contract,\r\n * which allows you to call the safe operations as `token.safeTransfer(...)`, etc.\r\n */\r\nlibrary SafeERC20 {\r\n    using SafeMath for uint256;\r\n    using Address for address;\r\n\r\n    function safeTransfer(IERC20 token, address to, uint256 value) internal {\r\n        callOptionalReturn(token, abi.encodeWithSelector(token.transfer.selector, to, value));\r\n    }\r\n\r\n    function safeTransferFrom(IERC20 token, address from, address to, uint256 value) internal {\r\n        callOptionalReturn(token, abi.encodeWithSelector(token.transferFrom.selector, from, to, value));\r\n    }\r\n\r\n    function safeApprove(IERC20 token, address spender, uint256 value) internal {\r\n        // safeApprove should only be called when setting an initial allowance,\r\n        // or when resetting it to zero. To increase and decrease it, use\r\n        // 'safeIncreaseAllowance' and 'safeDecreaseAllowance'\r\n        // solhint-disable-next-line max-line-length\r\n        require((value == 0) || (token.allowance(address(this), spender) == 0),\r\n            \"SafeERC20: approve from non-zero to non-zero allowance\"\r\n        );\r\n        callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, value));\r\n    }\r\n\r\n    function safeIncreaseAllowance(IERC20 token, address spender, uint256 value) internal {\r\n        uint256 newAllowance = token.allowance(address(this), spender).add(value);\r\n        callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\r\n    }\r\n\r\n    function safeDecreaseAllowance(IERC20 token, address spender, uint256 value) internal {\r\n        uint256 newAllowance = token.allowance(address(this), spender).sub(value);\r\n        callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\r\n    }\r\n\r\n    /**\r\n     * @dev Imitates a Solidity high-level call (i.e. a regular function call to a contract), relaxing the requirement\r\n     * on the return value: the return value is optional (but if data is returned, it must not be false).\r\n     * @param token The token targeted by the call.\r\n     * @param data The call data (encoded using abi.encode or one of its variants).\r\n     */\r\n    function callOptionalReturn(IERC20 token, bytes memory data) private {\r\n        // We need to perform a low level call here, to bypass Solidity's return data size checking mechanism, since\r\n        // we're implementing it ourselves.\r\n\r\n        // A Solidity high level call has three parts:\r\n        //  1. The target address is checked to verify it contains contract code\r\n        //  2. The call itself is made, and success asserted\r\n        //  3. The return value is decoded, which in turn checks the size of the returned data.\r\n        // solhint-disable-next-line max-line-length\r\n        require(address(token).isContract(), \"SafeERC20: call to non-contract\");\r\n\r\n        // solhint-disable-next-line avoid-low-level-calls\r\n        (bool success, bytes memory returndata) = address(token).call(data);\r\n        require(success, \"SafeERC20: low-level call failed\");\r\n\r\n        if (returndata.length > 0) { // Return data is optional\r\n            // solhint-disable-next-line max-line-length\r\n            require(abi.decode(returndata, (bool)), \"SafeERC20: ERC20 operation did not succeed\");\r\n        }\r\n    }\r\n}\r\n\r\n// File: original_contracts/IGST2.sol\r\n\r\npragma solidity 0.5.11;\r\n\r\ninterface IGST2 {\r\n\r\n    function freeUpTo(uint256 value) external returns (uint256 freed);\r\n\r\n    function balanceOf(address who) external view returns (uint256);\r\n\r\n    function mint(uint256 value) external;\r\n}\r\n\r\n// File: original_contracts/lib/Utils.sol\r\n\r\npragma solidity 0.5.11;\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\nlibrary Utils {\r\n    using SafeMath for uint256;\r\n    using SafeERC20 for IERC20;\r\n\r\n    address constant ETH_ADDRESS = address(\r\n        0xEeeeeEeeeEeEeeEeEeEeeEEEeeeeEeeeeeeeEEeE\r\n    );\r\n\r\n    uint256 constant MAX_UINT = 2 ** 256 - 1;\r\n\r\n    struct Route {\r\n        address payable exchange;\r\n        address targetExchange;\r\n        uint percent;\r\n        bytes payload;\r\n        uint256 networkFee;\r\n    }\r\n\r\n    struct Path {\r\n        address from;\r\n        address to;\r\n        Route[] routes;\r\n    }\r\n\r\n    function ethAddress() internal pure returns (address) {return ETH_ADDRESS;}\r\n\r\n    function maxUint() internal pure returns (uint256) {return MAX_UINT;}\r\n\r\n    function approve(\r\n        address addressToApprove,\r\n        address token\r\n    ) internal {\r\n        if (token != ETH_ADDRESS) {\r\n            IERC20 _token = IERC20(token);\r\n\r\n            uint allowance = _token.allowance(address(this), addressToApprove);\r\n\r\n            if (allowance == 0) {\r\n                _token.safeApprove(addressToApprove, MAX_UINT);\r\n            }\r\n        }\r\n    }\r\n\r\n    function transferTokens(\r\n        address token,\r\n        address payable destination,\r\n        uint256 amount\r\n    )\r\n    internal\r\n    {\r\n        if (token == ETH_ADDRESS) {\r\n            destination.transfer(amount);\r\n        }\r\n        else {\r\n            IERC20(token).safeTransfer(destination, amount);\r\n        }\r\n    }\r\n\r\n    function tokenBalance(\r\n        address token,\r\n        address account\r\n    )\r\n    internal\r\n    view\r\n    returns (uint256)\r\n    {\r\n        if (token == ETH_ADDRESS) {\r\n            return account.balance;\r\n        } else {\r\n            return IERC20(token).balanceOf(account);\r\n        }\r\n    }\r\n\r\n    function mintGasTokens(address gasToken, uint256 amount) internal {\r\n        IGST2(gasToken).mint(amount);\r\n    }\r\n\r\n    /**\r\n    * @dev Helper method to refund gas using gas tokens\r\n    */\r\n    function refundGas(address gasToken, uint256 initialGas, uint256 mintPrice) internal {\r\n\r\n        uint256 mintBase = 32254;\r\n        uint256 mintToken = 36543;\r\n        uint256 freeBase = 14154;\r\n        uint256 freeToken = 6870;\r\n        uint256 reimburse = 24000;\r\n\r\n        uint256 tokens = initialGas.sub(\r\n            gasleft()).add(freeBase).div(reimburse.mul(2).sub(freeToken)\r\n        );\r\n\r\n        uint256 mintCost = mintBase.add(tokens.mul(mintToken));\r\n        uint256 freeCost = freeBase.add(tokens.mul(freeToken));\r\n        uint256 maxreimburse = tokens.mul(reimburse);\r\n\r\n        uint256 efficiency = maxreimburse.mul(tx.gasprice).mul(100).div(\r\n            mintCost.mul(mintPrice).add(freeCost.mul(tx.gasprice))\r\n        );\r\n\r\n        if (efficiency > 100) {\r\n            freeGasTokens(gasToken, tokens);\r\n        }\r\n    }\r\n    \r\n    /**\r\n    * @dev Helper method to free gas tokens\r\n    */\r\n    function freeGasTokens(address gasToken, uint256 tokens) internal {\r\n\r\n        uint256 tokensToFree = tokens;\r\n        uint256 safeNumTokens = 0;\r\n        uint256 gas = gasleft();\r\n\r\n        if (gas >= 27710) {\r\n            safeNumTokens = gas.sub(27710).div(1148 + 5722 + 150);\r\n        }\r\n\r\n        if (tokensToFree > safeNumTokens) {\r\n            tokensToFree = safeNumTokens;\r\n        }\r\n\r\n        uint256 gasTokenBal = IGST2(gasToken).balanceOf(address(this));\r\n\r\n        if (tokensToFree > 0 && gasTokenBal >= tokensToFree) {\r\n            IGST2(gasToken).freeUpTo(tokensToFree);\r\n        }\r\n\r\n    }\r\n}\r\n\r\n// File: original_contracts/TokenTransferProxy.sol\r\n\r\npragma solidity 0.5.11;\r\n\r\n\r\n\r\n\r\n\r\n/**\r\n* @dev Allows owner of the contract to transfer tokens on behalf of user.\r\n* User will need to approve this contract to spend tokens on his/her behalf\r\n* on Paraswap platform\r\n*/\r\ncontract TokenTransferProxy is Ownable {\r\n    using SafeERC20 for IERC20;\r\n\r\n    /**\r\n    * @dev Allows owner of the contract to transfer tokens on user's behalf\r\n    * @dev Swapper contract will be the owner of this contract\r\n    * @param token Address of the token\r\n    * @param from Address from which tokens will be transferred\r\n    * @param to Receipent address of the tokens\r\n    * @param amount Amount of tokens to transfer\r\n    */\r\n    function transferFrom(\r\n        address token,\r\n        address from,\r\n        address to,\r\n        uint256 amount\r\n    )\r\n        external\r\n        onlyOwner\r\n    {\r\n        IERC20(token).safeTransferFrom(from, to, amount);\r\n    }\r\n\r\n}\r\n\r\n// File: original_contracts/IPartnerRegistry.sol\r\n\r\npragma solidity 0.5.11;\r\n\r\n\r\ninterface IPartnerRegistry {\r\n\r\n    function getPartnerContract(string calldata referralId) external view returns(address);\r\n\r\n    function addPartner(\r\n        string calldata referralId,\r\n        address feeWallet,\r\n        uint256 fee,\r\n        uint256 paraswapShare,\r\n        uint256 partnerShare,\r\n        address owner\r\n    )\r\n        external;\r\n\r\n    function removePartner(string calldata referralId) external;\r\n}\r\n\r\n// File: original_contracts/IPartner.sol\r\n\r\npragma solidity 0.5.11;\r\n\r\n\r\ninterface IPartner {\r\n\r\n    function getReferralId() external view returns(string memory);\r\n\r\n    function getFeeWallet() external view returns(address payable);\r\n\r\n    function getFee() external view returns(uint256);\r\n\r\n    function getPartnerShare() external returns(uint256);\r\n\r\n    function getParaswapShare() external returns(uint256);\r\n\r\n    function changeFeeWallet(address payable feeWallet) external;\r\n\r\n    function changeFee(uint256 newFee) external;\r\n}\r\n\r\n// File: original_contracts/AugustusSwapper.sol\r\n\r\npragma solidity 0.5.11;\r\npragma experimental ABIEncoderV2;\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\ncontract AugustusSwapper is ReentrancyGuard, Ownable {\r\n    using SafeMath for uint256;\r\n    using SafeERC20 for IERC20;\r\n    using Address for address;\r\n\r\n    TokenTransferProxy private _tokenTransferProxy;\r\n\r\n    bool private _paused;\r\n\r\n    IWhitelisted private _whitelisted;\r\n    address private _gasToken;\r\n\r\n    IPartnerRegistry private _partnerRegistry;\r\n    address payable private _feeWallet;\r\n\r\n    event Paused();\r\n    event Unpaused();\r\n\r\n    event Swapped(\r\n        address indexed beneficiary,\r\n        address indexed srcToken,\r\n        address indexed destToken,\r\n        uint256 srcAmount,\r\n        uint256 receivedAmount,\r\n        uint256 expectedAmount,\r\n        uint256 fee,\r\n        string referrer\r\n    );\r\n\r\n    event FeeTaken(\r\n        uint256 fee,\r\n        uint256 partnerShare,\r\n        uint256 paraswapShare\r\n    );\r\n\r\n    /**\r\n     * @dev Modifier to make a function callable only when the contract is not paused.\r\n     */\r\n    modifier whenNotPaused() {\r\n        require(!_paused, \"Pausable: paused\");\r\n        _;\r\n    }\r\n\r\n    /**\r\n     * @dev Modifier to make a function callable only when the contract is paused.\r\n     */\r\n    modifier whenPaused() {\r\n        require(_paused, \"Pausable: not paused\");\r\n        _;\r\n    }\r\n\r\n    constructor(\r\n        address whitelist,\r\n        address gasToken,\r\n        address partnerRegistry,\r\n        address payable feeWallet\r\n    )\r\n        public\r\n    {\r\n\r\n        _partnerRegistry = IPartnerRegistry(partnerRegistry);\r\n        _tokenTransferProxy = new TokenTransferProxy();\r\n        _whitelisted = IWhitelisted(whitelist);\r\n        _gasToken = gasToken;\r\n        _feeWallet = feeWallet;\r\n    }\r\n\r\n    /**\r\n    * @dev Fallback method to allow exchanges to transfer back ethers for a particular swap\r\n    * It will only allow contracts to send funds to it\r\n    */\r\n    function() external payable whenNotPaused {\r\n        address account = msg.sender;\r\n        require(\r\n            account.isContract(),\r\n            \"Sender is not a contract\"\r\n        );\r\n    }\r\n    \r\n    function getPartnerRegistry() external view returns(address) {\r\n        return address(_partnerRegistry);\r\n    }\r\n\r\n    function getWhitelistAddress() external view returns(address) {\r\n        return address(_whitelisted);\r\n    }\r\n\r\n    function getFeeWallet() external view returns(address) {\r\n        return _feeWallet;\r\n    }\r\n\r\n    function setFeeWallet(address payable feeWallet) external onlyOwner {\r\n        require(feeWallet != address(0), \"Invalid address\");\r\n        _feeWallet = feeWallet;\r\n    }\r\n\r\n    function setPartnerRegistry(address partnerRegistry) external onlyOwner {\r\n        require(partnerRegistry != address(0), \"Invalid address\");\r\n        _partnerRegistry = IPartnerRegistry(partnerRegistry);\r\n    }\r\n\r\n    function setWhitelistAddress(address whitelisted) external onlyOwner {\r\n        require(whitelisted != address(0), \"Invalid whitelist address\");\r\n        _whitelisted = IWhitelisted(whitelisted);\r\n    }\r\n\r\n    function getTokenTransferProxy() external view returns (address) {\r\n        return address(_tokenTransferProxy);\r\n    }\r\n\r\n    /**\r\n     * @dev Returns true if the contract is paused, and false otherwise.\r\n     */\r\n    function paused() external view returns (bool) {\r\n        return _paused;\r\n    }\r\n\r\n    /**\r\n     * @dev Called by a pauser to pause, triggers stopped state.\r\n     */\r\n    function pause() external onlyOwner whenNotPaused {\r\n        _paused = true;\r\n        emit Paused();\r\n    }\r\n\r\n    /**\r\n     * @dev Called by a pauser to unpause, returns to normal state.\r\n     */\r\n    function unpause() external onlyOwner whenPaused {\r\n        _paused = false;\r\n        emit Unpaused();\r\n    }\r\n\r\n    /**\r\n    * @dev Allows owner of the contract to transfer tokens any tokens which are assigned to the contract\r\n    * This method is for saftey if by any chance tokens or ETHs are assigned to the contract by mistake\r\n    * @dev token Address of the token to be transferred\r\n    * @dev destination Recepient of the token\r\n    * @dev amount Amount of tokens to be transferred\r\n    */\r\n    function ownerTransferTokens(\r\n        address token,\r\n        address payable destination,\r\n        uint256 amount\r\n    )\r\n    external\r\n    onlyOwner\r\n    {\r\n        Utils.transferTokens(token, destination, amount);\r\n    }\r\n\r\n    /**\r\n    * @dev Allows owner of the contract to mint more gas tokens\r\n    * @param amount Amount of gas tokens to mint\r\n    */\r\n    function mintGasTokens(uint256 amount) external onlyOwner {\r\n        Utils.mintGasTokens(_gasToken, amount);\r\n    }\r\n\r\n    /**\r\n   * @dev The function which performs the multi path swap.\r\n   * It is a nonreentrant function\r\n   * @param fromToken Address of the source token\r\n   * @param toToken Address of the destination token\r\n   * @param fromAmount Amount of source tokens to be swapped\r\n   * @param toAmount Minimum destination token amount expected out of this swap\r\n   * @param expectedAmount Expected amount of destination tokens without slippage\r\n   * @param path Route to be taken for this swap to take place\r\n   * @param mintPrice Price of gas at the time of minting of gas tokens, if any. In wei\r\n   * @param beneficiary Beneficiary address\r\n   * @param referrer referral id\r\n   */\r\n    function multiSwap(\r\n        IERC20 fromToken,\r\n        IERC20 toToken,\r\n        uint256 fromAmount,\r\n        uint256 toAmount,\r\n        uint256 expectedAmount,\r\n        Utils.Path[] memory path,\r\n        uint256 mintPrice,\r\n        address payable beneficiary,\r\n        string memory referrer\r\n    )\r\n        public\r\n        payable\r\n        whenNotPaused\r\n        nonReentrant\r\n        returns (uint256)\r\n    {\r\n        require(bytes(referrer).length > 0, \"Invalid referrer\");\r\n\r\n        uint256 receivedAmount = performSwap(\r\n            fromToken,\r\n            toToken,\r\n            fromAmount,\r\n            toAmount,\r\n            path,\r\n            mintPrice\r\n        );\r\n\r\n        uint256 remainingAmount = receivedAmount;\r\n        uint256 fee = 0;\r\n        if (receivedAmount > toAmount) {\r\n            fee = _takeFee(\r\n                toToken,\r\n                receivedAmount,\r\n                referrer\r\n            );\r\n\r\n            remainingAmount = receivedAmount.sub(fee);\r\n        }\r\n\r\n        if (beneficiary == address(0)){\r\n            Utils.transferTokens(address(toToken), msg.sender, remainingAmount);\r\n        }\r\n        else {\r\n            Utils.transferTokens(address(toToken), beneficiary, remainingAmount);\r\n        }\r\n\r\n        //Contract should not have any remaining balance after entire execution\r\n        require(\r\n            Utils.tokenBalance(address(toToken), address(this)) == 0,\r\n            \"Destination tokens are stuck\"\r\n        );\r\n\r\n        emit Swapped(\r\n            msg.sender,\r\n            address(fromToken),\r\n            address(toToken),\r\n            fromAmount,\r\n            receivedAmount,\r\n            expectedAmount,\r\n            fee,\r\n            referrer\r\n        );\r\n\r\n        return receivedAmount;\r\n    }\r\n\r\n    function performSwap(\r\n        IERC20 fromToken,\r\n        IERC20 toToken,\r\n        uint256 fromAmount,\r\n        uint256 toAmount,\r\n        Utils.Path[] memory path,\r\n        uint256 mintPrice\r\n    )\r\n        private\r\n        returns(uint256)\r\n    {\r\n        uint initialGas = gasleft();\r\n\r\n        uint _fromAmount = fromAmount;\r\n\r\n        require(path.length > 0, \"Path noth provided for swap\");\r\n        require(path[0].from == address(fromToken), \"First from token does not match\");\r\n\r\n        //if fromToken is not ETH then transfer tokens from user to this contract\r\n        if (address(fromToken) != Utils.ethAddress()) {\r\n            _tokenTransferProxy.transferFrom(\r\n                address(fromToken),\r\n                msg.sender,\r\n                address(this),\r\n                fromAmount\r\n            );\r\n        }\r\n\r\n        for (uint i = 0; i < path.length; i++) {\r\n            IERC20 _fromToken = IERC20(path[i].from);\r\n            IERC20 _toToken = IERC20(path[i].to);\r\n\r\n            for (uint j = 0; j < path[i].routes.length; j++) {\r\n                Utils.Route memory route = path[i].routes[j];\r\n\r\n                //Calculating tokens to be passed to the relevant exchange\r\n                //percentage should be 200 for 2%\r\n                uint fromAmountSlice = _fromAmount.mul(route.percent).div(10000);\r\n                uint256 value = route.networkFee;\r\n\r\n                if (j == path[i].routes.length.sub(1)) {\r\n                    uint256 remBal = Utils.tokenBalance(address(_fromToken), address(this));\r\n\r\n                    fromAmountSlice = remBal;\r\n\r\n                    if (address(_fromToken) == Utils.ethAddress()) {\r\n                        fromAmountSlice = fromAmountSlice.sub(value);\r\n                    }\r\n                }\r\n\r\n                //Check if exchange is supported\r\n                require(_whitelisted.isWhitelisted(route.exchange), \"Exchange not whitelisted\");\r\n\r\n                IExchange dex = IExchange(route.exchange);\r\n\r\n                Utils.approve(route.exchange, address(_fromToken));\r\n\r\n                //Call to the exchange\r\n                if (address(_fromToken) == Utils.ethAddress()) {\r\n                    value = value.add(fromAmountSlice);\r\n\r\n                    dex.swap.value(value)(_fromToken, _toToken, fromAmountSlice, 1, route.targetExchange, route.payload);\r\n                }\r\n                else {\r\n                    _fromToken.safeTransfer(route.exchange, fromAmountSlice);\r\n\r\n                    dex.swap.value(value)(_fromToken, _toToken, fromAmountSlice, 1, route.targetExchange, route.payload);\r\n                }\r\n            }\r\n\r\n            _fromAmount = Utils.tokenBalance(address(_toToken), address(this));\r\n\r\n            //Contract should not have any remaining balance after execution\r\n            require(\r\n                Utils.tokenBalance(address(_fromToken), address(this)) == 0,\r\n                \"From tokens are stuck\"\r\n            );\r\n        }\r\n\r\n        uint256 receivedAmount = Utils.tokenBalance(address(toToken), address(this));\r\n        require(\r\n            receivedAmount >= toAmount,\r\n            \"Received amount of tokens are less then expected\"\r\n        );\r\n\r\n        if (mintPrice > 0) {\r\n            Utils.refundGas(_gasToken, initialGas, mintPrice);\r\n        }\r\n        return receivedAmount;\r\n    }\r\n\r\n    function _takeFee(\r\n        IERC20 toToken,\r\n        uint256 receivedAmount,\r\n        string memory referrer\r\n    )\r\n        private\r\n        returns(uint256)\r\n    {\r\n        address partnerContract = _partnerRegistry.getPartnerContract(referrer);\r\n        if (partnerContract == address(0)) {\r\n            return 0;\r\n        }\r\n\r\n        uint256 feePercent = IPartner(partnerContract).getFee();\r\n        uint256 partnerSharePercent = IPartner(partnerContract).getPartnerShare();\r\n        address payable partnerFeeWallet = IPartner(partnerContract).getFeeWallet();\r\n\r\n        uint256 fee = receivedAmount.mul(feePercent).div(10000);\r\n        uint256 partnerShare = fee.mul(partnerSharePercent).div(10000);\r\n        uint256 paraswapShare = fee.sub(partnerShare);\r\n\r\n        Utils.transferTokens(address(toToken), partnerFeeWallet, partnerShare);\r\n        Utils.transferTokens(address(toToken), _feeWallet, paraswapShare);\r\n\r\n        emit FeeTaken(fee, partnerShare, paraswapShare);\r\n        return fee;\r\n    }\r\n}","ABI":"[{\"constant\":false,\"inputs\":[],\"name\":\"unpause\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"getFeeWallet\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"paused\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"contract IERC20\",\"name\":\"fromToken\",\"type\":\"address\"},{\"internalType\":\"contract IERC20\",\"name\":\"toToken\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"fromAmount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"toAmount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"expectedAmount\",\"type\":\"uint256\"},{\"components\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"components\":[{\"internalType\":\"address payable\",\"name\":\"exchange\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"targetExchange\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"percent\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"payload\",\"type\":\"bytes\"},{\"internalType\":\"uint256\",\"name\":\"networkFee\",\"type\":\"uint256\"}],\"internalType\":\"struct Utils.Route[]\",\"name\":\"routes\",\"type\":\"tuple[]\"}],\"internalType\":\"struct Utils.Path[]\",\"name\":\"path\",\"type\":\"tuple[]\"},{\"internalType\":\"uint256\",\"name\":\"mintPrice\",\"type\":\"uint256\"},{\"internalType\":\"address payable\",\"name\":\"beneficiary\",\"type\":\"address\"},{\"internalType\":\"string\",\"name\":\"referrer\",\"type\":\"string\"}],\"name\":\"multiSwap\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"pause\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"address\",\"name\":\"partnerRegistry\",\"type\":\"address\"}],\"name\":\"setPartnerRegistry\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"isOwner\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"address payable\",\"name\":\"feeWallet\",\"type\":\"address\"}],\"name\":\"setFeeWallet\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"getWhitelistAddress\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"address\",\"name\":\"whitelisted\",\"type\":\"address\"}],\"name\":\"setWhitelistAddress\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"getPartnerRegistry\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"mintGasTokens\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"getTokenTransferProxy\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"},{\"internalType\":\"address payable\",\"name\":\"destination\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"ownerTransferTokens\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"whitelist\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"gasToken\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"partnerRegistry\",\"type\":\"address\"},{\"internalType\":\"address payable\",\"name\":\"feeWallet\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"fallback\"},{\"anonymous\":false,\"inputs\":[],\"name\":\"Paused\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[],\"name\":\"Unpaused\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"beneficiary\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"srcToken\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"destToken\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"srcAmount\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"receivedAmount\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"expectedAmount\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"fee\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"string\",\"name\":\"referrer\",\"type\":\"string\"}],\"name\":\"Swapped\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"fee\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"partnerShare\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"paraswapShare\",\"type\":\"uint256\"}],\"name\":\"FeeTaken\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"}]","ContractName":"AugustusSwapper","CompilerVersion":"v0.5.11+commit.c082d0b4","OptimizationUsed":"1","Runs":"200","ConstructorArguments":"000000000000000000000000aa755c51d4b5015c53673d9061f58b4095f1a2930000000000000000000000000000000000b3f879cb30fe243b4dfee438691c0400000000000000000000000076464327a9d1c84a9d98cc4ba1f8159fe0dcb2640000000000000000000000007f0af2bdfccbfdb0704dcc155f4a9453d2097289","Library":"","LicenseType":"Unlicense","SwarmSource":"bzzr://71c7987ce556ea78755f5a72fae0916a8d15d9a1c1ff13d95f6558c39f018051"}]}