{"status":"1","message":"OK","result":[{"SourceCode":"// Copyright (C) 2020 Zerion Inc. <https://zerion.io>\r\n//\r\n// This program is free software: you can redistribute it and/or modify\r\n// it under the terms of the GNU General Public License as published by\r\n// the Free Software Foundation, either version 3 of the License, or\r\n// (at your option) any later version.\r\n//\r\n// This program is distributed in the hope that it will be useful,\r\n// but WITHOUT ANY WARRANTY; without even the implied warranty of\r\n// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the\r\n// GNU General Public License for more details.\r\n//\r\n// You should have received a copy of the GNU General Public License\r\n// along with this program. If not, see <https://www.gnu.org/licenses/>.\r\n\r\npragma solidity 0.6.5;\r\npragma experimental ABIEncoderV2;\r\n\r\n\r\ninterface ERC20 {\r\n    function symbol() external view returns (string memory);\r\n    function decimals() external view returns (uint8);\r\n    function totalSupply() external view returns (uint256);\r\n}\r\n\r\n\r\nstruct TokenMetadata {\r\n    address token;\r\n    string name;\r\n    string symbol;\r\n    uint8 decimals;\r\n}\r\n\r\n\r\nstruct Component {\r\n    address token;\r\n    string tokenType;\r\n    uint256 rate;\r\n}\r\n\r\n\r\n/**\r\n * @title Token adapter interface.\r\n * @dev getMetadata() and getComponents() functions MUST be implemented.\r\n * @author Igor Sobolev <sobolev@zerion.io>\r\n */\r\ninterface TokenAdapter {\r\n\r\n    /**\r\n     * @dev MUST return TokenMetadata struct with ERC20-style token info.\r\n     * struct TokenMetadata {\r\n     *     address token;\r\n     *     string name;\r\n     *     string symbol;\r\n     *     uint8 decimals;\r\n     * }\r\n     */\r\n    function getMetadata(address token) external view returns (TokenMetadata memory);\r\n\r\n    /**\r\n    * @dev MUST return array of Component structs with underlying tokens rates for the given token.\r\n    * struct Component {\r\n    *     address token;    // Address of token contract\r\n    *     string tokenType; // Token type (\"ERC20\" by default)\r\n    *     uint256 rate;     // Price per share (1e18)\r\n    * }\r\n    */\r\n    function getComponents(address token) external view returns (Component[] memory);\r\n}\r\n\r\n\r\n/**\r\n * @dev CToken contract interface.\r\n * Only the functions required for CompoundTokenAdapter contract are added.\r\n * The CToken contract is available here\r\n * github.com/compound-finance/compound-protocol/blob/master/contracts/CToken.sol.\r\n */\r\ninterface CToken {\r\n    function exchangeRateStored() external view returns (uint256);\r\n    function underlying() external view returns (address);\r\n}\r\n\r\n/**\r\n * @dev stableswap contract interface.\r\n * Only the functions required for CurveAdapter contract are added.\r\n * The stableswap contract is available here\r\n * github.com/curvefi/curve-contract/blob/compounded/vyper/stableswap.vy.\r\n */\r\n// solhint-disable-next-line contract-name-camelcase\r\ninterface stableswap {\r\n    function coins(int128) external view returns (address);\r\n    function balances(int128) external view returns (uint256);\r\n}\r\n\r\n\r\n/**\r\n * @title Token adapter for Curve pool tokens.\r\n * @dev Implementation of TokenAdapter interface.\r\n * @author Igor Sobolev <sobolev@zerion.io>\r\n */\r\ncontract CurveTokenAdapter is TokenAdapter {\r\n\r\n    address internal constant COMPOUND_POOL_TOKEN = 0x845838DF265Dcd2c412A1Dc9e959c7d08537f8a2;\r\n    address internal constant Y_POOL_TOKEN = 0xdF5e0e81Dff6FAF3A7e52BA697820c5e32D806A8;\r\n    address internal constant BUSD_POOL_TOKEN = 0x3B3Ac5386837Dc563660FB6a0937DFAa5924333B;\r\n\r\n    /**\r\n     * @return TokenMetadata struct with ERC20-style token info.\r\n     * @dev Implementation of TokenAdapter interface function.\r\n     */\r\n    function getMetadata(address token) external view override returns (TokenMetadata memory) {\r\n        return TokenMetadata({\r\n            token: token,\r\n            name: string(abi.encodePacked(ERC20(token).symbol(), \" pool\")),\r\n            symbol: ERC20(token).symbol(),\r\n            decimals: ERC20(token).decimals()\r\n        });\r\n    }\r\n\r\n    /**\r\n     * @return Array of Component structs with underlying tokens rates for the given asset.\r\n     * @dev Implementation of TokenAdapter interface function.\r\n     */\r\n    function getComponents(address token) external view override returns (Component[] memory) {\r\n        (stableswap ss, uint256 length, string memory tokenType) = getPoolInfo(token);\r\n        Component[] memory underlyingTokens = new Component[](length);\r\n\r\n        for (uint256 i = 0; i < length; i++) {\r\n            underlyingTokens[i] = Component({\r\n                token: ss.coins(int128(i)),\r\n                tokenType: tokenType,\r\n                rate: ss.balances(int128(i)) * 1e18 / ERC20(token).totalSupply()\r\n            });\r\n        }\r\n\r\n        return underlyingTokens;\r\n    }\r\n\r\n    /**\r\n     * @return Stableswap address, number of coins, type of tokens inside.\r\n     */\r\n    function getPoolInfo(address token) internal pure returns (stableswap, uint256, string memory) {\r\n        if (token == COMPOUND_POOL_TOKEN) {\r\n            return (stableswap(0xA2B47E3D5c44877cca798226B7B8118F9BFb7A56), 2, \"CToken\");\r\n        } else if (token == Y_POOL_TOKEN) {\r\n            return (stableswap(0x45F783CCE6B7FF23B2ab2D70e416cdb7D6055f51), 4, \"YToken\");\r\n        } else if (token == BUSD_POOL_TOKEN) {\r\n            return (stableswap(0x79a8C46DeA5aDa233ABaFFD40F3A0A2B1e5A4F27), 4, \"YToken\");\r\n        } else {\r\n            return (stableswap(address(0)), 0, \"\");\r\n        }\r\n    }\r\n}","ABI":"[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"}],\"name\":\"getComponents\",\"outputs\":[{\"components\":[{\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"},{\"internalType\":\"string\",\"name\":\"tokenType\",\"type\":\"string\"},{\"internalType\":\"uint256\",\"name\":\"rate\",\"type\":\"uint256\"}],\"internalType\":\"struct Component[]\",\"name\":\"\",\"type\":\"tuple[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"}],\"name\":\"getMetadata\",\"outputs\":[{\"components\":[{\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"},{\"internalType\":\"string\",\"name\":\"name\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"symbol\",\"type\":\"string\"},{\"internalType\":\"uint8\",\"name\":\"decimals\",\"type\":\"uint8\"}],\"internalType\":\"struct TokenMetadata\",\"name\":\"\",\"type\":\"tuple\"}],\"stateMutability\":\"view\",\"type\":\"function\"}]","ContractName":"CurveTokenAdapter","CompilerVersion":"v0.6.5+commit.f956cc89","OptimizationUsed":"1","Runs":"200","ConstructorArguments":"","Library":"","LicenseType":"GNU LGPLv3","SwarmSource":"ipfs://90e4e28029c130d2d7c3a1a03aded38fdb48e9f5d326113251d1051484098d63"}]}