{"status":"1","message":"OK","result":[{"SourceCode":"pragma solidity ^0.5.8;\r\n\r\n/*\r\n * Ownable\r\n *\r\n * Base contract with an owner.\r\n * Provides onlyOwner modifier, which prevents function from running if it is called by anyone other than the owner.\r\n */\r\n\r\ncontract Ownable {\r\n    address public owner;\r\n\r\n    constructor() public {\r\n        owner = msg.sender;\r\n    }\r\n\r\n    modifier onlyOwner() {\r\n        require(\r\n            msg.sender == owner,\r\n            \"The function can only be called by the owner\"\r\n        );\r\n        _;\r\n    }\r\n\r\n    function transferOwnership(address newOwner) public onlyOwner {\r\n        if (newOwner != address(0)) {\r\n            owner = newOwner;\r\n        }\r\n    }\r\n}\r\n\r\ncontract DepositLockerInterface {\r\n    function slash(address _depositorToBeSlashed) public;\r\n\r\n}\r\n\r\n/*\r\n  The DepositLocker contract locks the deposits for all of the winning\r\n  participants of the auction.\r\n\r\n  When the auction is running, the auction contract registers participants that\r\n  have successfully bid with the registerDepositor function. The DepositLocker\r\n  contracts keeps track of the number of participants and also keeps track if a\r\n  participant address can withdraw the deposit.\r\n\r\n  All of the participants have to pay the same eth amount when the auction ends.\r\n  The auction contract will deposit the sum of all amounts with a call to\r\n  deposit.\r\n\r\n*/\r\n\r\ncontract DepositLocker is DepositLockerInterface, Ownable {\r\n    bool public initialized = false;\r\n    bool public deposited = false;\r\n\r\n    /* We maintain two special addresses:\r\n       - the slasher, that is allowed to call the slash function\r\n       - the depositorsProxy that registers depositors and deposits a value for\r\n         all of the registered depositors with the deposit function. In our case\r\n         this will be the auction contract.\r\n    */\r\n\r\n    address public slasher;\r\n    address public depositorsProxy;\r\n    uint public releaseTimestamp;\r\n\r\n    mapping(address => bool) public canWithdraw;\r\n    uint numberOfDepositors = 0;\r\n    uint valuePerDepositor;\r\n\r\n    event DepositorRegistered(\r\n        address depositorAddress,\r\n        uint numberOfDepositors\r\n    );\r\n    event Deposit(\r\n        uint totalValue,\r\n        uint valuePerDepositor,\r\n        uint numberOfDepositors\r\n    );\r\n    event Withdraw(address withdrawer, uint value);\r\n    event Slash(address slashedDepositor, uint slashedValue);\r\n\r\n    modifier isInitialised() {\r\n        require(initialized, \"The contract was not initialized.\");\r\n        _;\r\n    }\r\n\r\n    modifier isDeposited() {\r\n        require(deposited, \"no deposits yet\");\r\n        _;\r\n    }\r\n\r\n    modifier isNotDeposited() {\r\n        require(!deposited, \"already deposited\");\r\n        _;\r\n    }\r\n\r\n    modifier onlyDepositorsProxy() {\r\n        require(\r\n            msg.sender == depositorsProxy,\r\n            \"Only the depositorsProxy can call this function.\"\r\n        );\r\n        _;\r\n    }\r\n\r\n    function() external {}\r\n\r\n    function init(\r\n        uint _releaseTimestamp,\r\n        address _slasher,\r\n        address _depositorsProxy\r\n    ) external onlyOwner {\r\n        require(!initialized, \"The contract is already initialised.\");\r\n        require(\r\n            _releaseTimestamp > now,\r\n            \"The release timestamp must be in the future\"\r\n        );\r\n\r\n        releaseTimestamp = _releaseTimestamp;\r\n        slasher = _slasher;\r\n        depositorsProxy = _depositorsProxy;\r\n        initialized = true;\r\n        owner = address(0);\r\n    }\r\n\r\n    function registerDepositor(address _depositor)\r\n        public\r\n        isInitialised\r\n        isNotDeposited\r\n        onlyDepositorsProxy\r\n    {\r\n        require(\r\n            canWithdraw[_depositor] == false,\r\n            \"can only register Depositor once\"\r\n        );\r\n        canWithdraw[_depositor] = true;\r\n        numberOfDepositors += 1;\r\n        emit DepositorRegistered(_depositor, numberOfDepositors);\r\n    }\r\n\r\n    function deposit(uint _valuePerDepositor)\r\n        public\r\n        payable\r\n        isInitialised\r\n        isNotDeposited\r\n        onlyDepositorsProxy\r\n    {\r\n        require(numberOfDepositors > 0, \"no depositors\");\r\n        require(_valuePerDepositor > 0, \"_valuePerDepositor must be positive\");\r\n\r\n        uint depositAmount = numberOfDepositors * _valuePerDepositor;\r\n        require(\r\n            _valuePerDepositor == depositAmount / numberOfDepositors,\r\n            \"Overflow in depositAmount calculation\"\r\n        );\r\n        require(\r\n            msg.value == depositAmount,\r\n            \"the deposit does not match the required value\"\r\n        );\r\n\r\n        valuePerDepositor = _valuePerDepositor;\r\n        deposited = true;\r\n        emit Deposit(msg.value, valuePerDepositor, numberOfDepositors);\r\n    }\r\n\r\n    function withdraw() public isInitialised isDeposited {\r\n        require(\r\n            now >= releaseTimestamp,\r\n            \"The deposit cannot be withdrawn yet.\"\r\n        );\r\n        require(canWithdraw[msg.sender], \"cannot withdraw from sender\");\r\n\r\n        canWithdraw[msg.sender] = false;\r\n        msg.sender.transfer(valuePerDepositor);\r\n        emit Withdraw(msg.sender, valuePerDepositor);\r\n    }\r\n\r\n    function slash(address _depositorToBeSlashed)\r\n        public\r\n        isInitialised\r\n        isDeposited\r\n    {\r\n        require(\r\n            msg.sender == slasher,\r\n            \"Only the slasher can call this function.\"\r\n        );\r\n        require(canWithdraw[_depositorToBeSlashed], \"cannot slash address\");\r\n        canWithdraw[_depositorToBeSlashed] = false;\r\n        address(0).transfer(valuePerDepositor);\r\n        emit Slash(_depositorToBeSlashed, valuePerDepositor);\r\n    }\r\n}\r\n\r\ncontract ValidatorAuction is Ownable {\r\n    // auction constants set on deployment\r\n    uint public auctionDurationInDays;\r\n    uint public startPrice;\r\n    uint public minimalNumberOfParticipants;\r\n    uint public maximalNumberOfParticipants;\r\n\r\n    AuctionState public auctionState;\r\n    DepositLocker public depositLocker;\r\n    mapping(address => bool) public whitelist;\r\n    mapping(address => uint) public bids;\r\n    address[] public bidders;\r\n    uint public startTime;\r\n    uint public closeTime;\r\n    uint public lowestSlotPrice;\r\n\r\n    event BidSubmitted(\r\n        address bidder,\r\n        uint bidValue,\r\n        uint slotPrice,\r\n        uint timestamp\r\n    );\r\n    event AddressWhitelisted(address whitelistedAddress);\r\n    event AuctionDeployed(\r\n        uint startPrice,\r\n        uint auctionDurationInDays,\r\n        uint minimalNumberOfParticipants,\r\n        uint maximalNumberOfParticipants\r\n    );\r\n    event AuctionStarted(uint startTime);\r\n    event AuctionDepositPending(\r\n        uint closeTime,\r\n        uint lowestSlotPrice,\r\n        uint totalParticipants\r\n    );\r\n    event AuctionEnded(\r\n        uint closeTime,\r\n        uint lowestSlotPrice,\r\n        uint totalParticipants\r\n    );\r\n    event AuctionFailed(uint closeTime, uint numberOfBidders);\r\n\r\n    enum AuctionState {\r\n        Deployed,\r\n        Started,\r\n        DepositPending, /* all slots sold, someone needs to call depositBids */\r\n        Ended,\r\n        Failed\r\n    }\r\n\r\n    modifier stateIs(AuctionState state) {\r\n        require(\r\n            auctionState == state,\r\n            \"Auction is not in the proper state for desired action.\"\r\n        );\r\n        _;\r\n    }\r\n\r\n    constructor(\r\n        uint _startPriceInWei,\r\n        uint _auctionDurationInDays,\r\n        uint _minimalNumberOfParticipants,\r\n        uint _maximalNumberOfParticipants,\r\n        DepositLocker _depositLocker\r\n    ) public {\r\n        require(\r\n            _auctionDurationInDays > 0,\r\n            \"Duration of auction must be greater than 0\"\r\n        );\r\n        require(\r\n            _auctionDurationInDays < 100 * 365,\r\n            \"Duration of auction must be less than 100 years\"\r\n        );\r\n        require(\r\n            _minimalNumberOfParticipants > 0,\r\n            \"Minimal number of participants must be greater than 0\"\r\n        );\r\n        require(\r\n            _maximalNumberOfParticipants > 0,\r\n            \"Number of participants must be greater than 0\"\r\n        );\r\n        require(\r\n            _minimalNumberOfParticipants <= _maximalNumberOfParticipants,\r\n            \"The minimal number of participants must be smaller than the maximal number of participants.\"\r\n        );\r\n        require(\r\n            // To prevent overflows\r\n            _startPriceInWei < 10 ** 30,\r\n            \"The start price is too big.\"\r\n        );\r\n\r\n        startPrice = _startPriceInWei;\r\n        auctionDurationInDays = _auctionDurationInDays;\r\n        maximalNumberOfParticipants = _maximalNumberOfParticipants;\r\n        minimalNumberOfParticipants = _minimalNumberOfParticipants;\r\n        depositLocker = _depositLocker;\r\n\r\n        lowestSlotPrice = ~uint(0);\r\n\r\n        emit AuctionDeployed(\r\n            startPrice,\r\n            auctionDurationInDays,\r\n            _minimalNumberOfParticipants,\r\n            _maximalNumberOfParticipants\r\n        );\r\n        auctionState = AuctionState.Deployed;\r\n    }\r\n\r\n    function() external payable stateIs(AuctionState.Started) {\r\n        bid();\r\n    }\r\n\r\n    function bid() public payable stateIs(AuctionState.Started) {\r\n        require(now > startTime, \"It is too early to bid.\");\r\n        require(\r\n            now <= startTime + auctionDurationInDays * 1 days,\r\n            \"Auction has already ended.\"\r\n        );\r\n        uint slotPrice = currentPrice();\r\n        require(\r\n            msg.value >= slotPrice,\r\n            \"Not enough ether was provided for bidding.\"\r\n        );\r\n        require(whitelist[msg.sender], \"The sender is not whitelisted.\");\r\n        require(!isSenderContract(), \"The sender cannot be a contract.\");\r\n        require(\r\n            bidders.length < maximalNumberOfParticipants,\r\n            \"The limit of participants has already been reached.\"\r\n        );\r\n        require(bids[msg.sender] == 0, \"The sender has already bid.\");\r\n\r\n        bids[msg.sender] = msg.value;\r\n        bidders.push(msg.sender);\r\n        if (slotPrice < lowestSlotPrice) {\r\n            lowestSlotPrice = slotPrice;\r\n        }\r\n\r\n        depositLocker.registerDepositor(msg.sender);\r\n        emit BidSubmitted(msg.sender, msg.value, slotPrice, now);\r\n\r\n        if (bidders.length == maximalNumberOfParticipants) {\r\n            transitionToDepositPending();\r\n        }\r\n    }\r\n\r\n    function startAuction() public onlyOwner stateIs(AuctionState.Deployed) {\r\n        require(\r\n            depositLocker.initialized(),\r\n            \"The deposit locker contract is not initialized\"\r\n        );\r\n\r\n        auctionState = AuctionState.Started;\r\n        startTime = now;\r\n\r\n        emit AuctionStarted(now);\r\n    }\r\n\r\n    function depositBids() public stateIs(AuctionState.DepositPending) {\r\n        auctionState = AuctionState.Ended;\r\n        depositLocker.deposit.value(lowestSlotPrice * bidders.length)(\r\n            lowestSlotPrice\r\n        );\r\n        emit AuctionEnded(closeTime, lowestSlotPrice, bidders.length);\r\n    }\r\n\r\n    function closeAuction() public stateIs(AuctionState.Started) {\r\n        require(\r\n            now > startTime + auctionDurationInDays * 1 days,\r\n            \"The auction cannot be closed this early.\"\r\n        );\r\n        assert(bidders.length < maximalNumberOfParticipants);\r\n\r\n        if (bidders.length >= minimalNumberOfParticipants) {\r\n            transitionToDepositPending();\r\n        } else {\r\n            transitionToAuctionFailed();\r\n        }\r\n    }\r\n\r\n    function addToWhitelist(address[] memory addressesToWhitelist)\r\n        public\r\n        onlyOwner\r\n        stateIs(AuctionState.Deployed)\r\n    {\r\n        for (uint32 i = 0; i < addressesToWhitelist.length; i++) {\r\n            whitelist[addressesToWhitelist[i]] = true;\r\n            emit AddressWhitelisted(addressesToWhitelist[i]);\r\n        }\r\n    }\r\n\r\n    function withdraw() public {\r\n        require(\r\n            auctionState == AuctionState.Ended ||\r\n                auctionState == AuctionState.Failed,\r\n            \"You cannot withdraw before the auction is ended or it failed.\"\r\n        );\r\n\r\n        if (auctionState == AuctionState.Ended) {\r\n            withdrawAfterAuctionEnded();\r\n        } else if (auctionState == AuctionState.Failed) {\r\n            withdrawAfterAuctionFailed();\r\n        } else {\r\n            assert(false); // Should be unreachable\r\n        }\r\n    }\r\n\r\n    function currentPrice()\r\n        public\r\n        view\r\n        stateIs(AuctionState.Started)\r\n        returns (uint)\r\n    {\r\n        assert(now >= startTime);\r\n        uint secondsSinceStart = (now - startTime);\r\n        return priceAtElapsedTime(secondsSinceStart);\r\n    }\r\n\r\n    function priceAtElapsedTime(uint secondsSinceStart)\r\n        public\r\n        view\r\n        returns (uint)\r\n    {\r\n        // To prevent overflows\r\n        require(\r\n            secondsSinceStart < 100 * 365 days,\r\n            \"Times longer than 100 years are not supported.\"\r\n        );\r\n        uint msSinceStart = 1000 * secondsSinceStart;\r\n        uint relativeAuctionTime = msSinceStart / auctionDurationInDays;\r\n        uint decayDivisor = 746571428571;\r\n        uint decay = relativeAuctionTime ** 3 / decayDivisor;\r\n        uint price = startPrice *\r\n            (1 + relativeAuctionTime) /\r\n            (1 + relativeAuctionTime + decay);\r\n        return price;\r\n    }\r\n\r\n    function withdrawAfterAuctionEnded() internal stateIs(AuctionState.Ended) {\r\n        require(\r\n            bids[msg.sender] > lowestSlotPrice,\r\n            \"The sender has nothing to withdraw.\"\r\n        );\r\n\r\n        uint valueToWithdraw = bids[msg.sender] - lowestSlotPrice;\r\n        assert(valueToWithdraw <= bids[msg.sender]);\r\n\r\n        bids[msg.sender] = lowestSlotPrice;\r\n\r\n        msg.sender.transfer(valueToWithdraw);\r\n    }\r\n\r\n    function withdrawAfterAuctionFailed()\r\n        internal\r\n        stateIs(AuctionState.Failed)\r\n    {\r\n        require(bids[msg.sender] > 0, \"The sender has nothing to withdraw.\");\r\n\r\n        uint valueToWithdraw = bids[msg.sender];\r\n\r\n        bids[msg.sender] = 0;\r\n\r\n        msg.sender.transfer(valueToWithdraw);\r\n    }\r\n\r\n    function transitionToDepositPending()\r\n        internal\r\n        stateIs(AuctionState.Started)\r\n    {\r\n        auctionState = AuctionState.DepositPending;\r\n        closeTime = now;\r\n        emit AuctionDepositPending(closeTime, lowestSlotPrice, bidders.length);\r\n    }\r\n\r\n    function transitionToAuctionFailed()\r\n        internal\r\n        stateIs(AuctionState.Started)\r\n    {\r\n        auctionState = AuctionState.Failed;\r\n        closeTime = now;\r\n        emit AuctionFailed(closeTime, bidders.length);\r\n    }\r\n\r\n    function isSenderContract() internal view returns (bool isContract) {\r\n        uint32 size;\r\n        address sender = msg.sender;\r\n        // solium-disable-next-line security/no-inline-assembly\r\n        assembly {\r\n            size := extcodesize(sender)\r\n        }\r\n        return (size > 0);\r\n    }\r\n}","ABI":"[{\"constant\":true,\"inputs\":[],\"name\":\"lowestSlotPrice\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"bid\",\"outputs\":[],\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"closeAuction\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"withdraw\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"depositBids\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"maximalNumberOfParticipants\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"auctionDurationInDays\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"closeTime\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"address\"}],\"name\":\"bids\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"startAuction\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"secondsSinceStart\",\"type\":\"uint256\"}],\"name\":\"priceAtElapsedTime\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"startTime\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"addressesToWhitelist\",\"type\":\"address[]\"}],\"name\":\"addToWhitelist\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"auctionState\",\"outputs\":[{\"name\":\"\",\"type\":\"uint8\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"address\"}],\"name\":\"whitelist\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"currentPrice\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"depositLocker\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"bidders\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"startPrice\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"minimalNumberOfParticipants\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"name\":\"_startPriceInWei\",\"type\":\"uint256\"},{\"name\":\"_auctionDurationInDays\",\"type\":\"uint256\"},{\"name\":\"_minimalNumberOfParticipants\",\"type\":\"uint256\"},{\"name\":\"_maximalNumberOfParticipants\",\"type\":\"uint256\"},{\"name\":\"_depositLocker\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"fallback\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"bidder\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"bidValue\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"slotPrice\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"timestamp\",\"type\":\"uint256\"}],\"name\":\"BidSubmitted\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"whitelistedAddress\",\"type\":\"address\"}],\"name\":\"AddressWhitelisted\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"startPrice\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"auctionDurationInDays\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"minimalNumberOfParticipants\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"maximalNumberOfParticipants\",\"type\":\"uint256\"}],\"name\":\"AuctionDeployed\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"startTime\",\"type\":\"uint256\"}],\"name\":\"AuctionStarted\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"closeTime\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"lowestSlotPrice\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"totalParticipants\",\"type\":\"uint256\"}],\"name\":\"AuctionDepositPending\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"closeTime\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"lowestSlotPrice\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"totalParticipants\",\"type\":\"uint256\"}],\"name\":\"AuctionEnded\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"closeTime\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"numberOfBidders\",\"type\":\"uint256\"}],\"name\":\"AuctionFailed\",\"type\":\"event\"}]","ContractName":"ValidatorAuction","CompilerVersion":"v0.5.8+commit.23d335f2","OptimizationUsed":"0","Runs":"200","ConstructorArguments":"0000000000000000000000000000000000000000000000000de0b6b3a764000000000000000000000000000000000000000000000000000000000000000000020000000000000000000000000000000000000000000000000000000000000032000000000000000000000000000000000000000000000000000000000000007b000000000000000000000000901132a28d870af790603caf520ca2451def4241","Library":"","LicenseType":"MIT","SwarmSource":"bzzr://8df853cf715539b89f9c3a23b1a3a10da409f15d8a30317cb5000e0c5659dc45"}]}