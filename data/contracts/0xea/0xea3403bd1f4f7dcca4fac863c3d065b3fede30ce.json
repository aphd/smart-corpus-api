{"status":"1","message":"OK","result":[{"SourceCode":"pragma solidity ^0.4.16;\r\ncontract Token{\r\n    uint256 public totalSupply;\r\n\r\n    function balanceOf(address _owner) public constant returns (uint256 balance);\r\n    function trashOf(address _owner) public constant returns (uint256 trash);\r\n    function transfer(address _to, uint256 _value) public returns (bool success);\r\n    function inTrash(uint256 _value) internal returns (bool success);\r\n    function transferFrom(address _from, address _to, uint256 _value) public returns (bool success);\r\n    function approve(address _spender, uint256 _value) public returns (bool success);\r\n    function allowance(address _owner, address _spender) public constant returns (uint256 remaining);\r\n    \r\n    event Transfer(address indexed _from, address indexed _to, uint256 _value);\r\n    event InTrash(address indexed _from, uint256 _value);\r\n    event Approval(address indexed _owner, address indexed _spender, uint256 _value);\r\n    event transferLogs(address,string,uint);\r\n}\r\n\r\ncontract AladTTS is Token {\r\n    // ===============\r\n    // BASE \r\n    // ===============\r\n    string public name;                 //名称\r\n    string public symbol;               //token简称\r\n    uint32 public rate;                 //门票汇率\r\n    uint32 public consume;              //门票消耗\r\n    uint256 public totalConsume;        //门票总消耗\r\n    uint256 public bigJackpot;          //大奖池 \r\n    uint256 public smallJackpot;        //小奖池\r\n    uint256 public consumeRule;         //减半规则\r\n    address owner;                      //合约作者\r\n  \r\n    // ===============\r\n    // INIT \r\n    // ===============\r\n    modifier onlyOwner(){\r\n        require (msg.sender==owner);\r\n        _;\r\n    }\r\n    function () payable public {}\r\n    \r\n    // 构造器\r\n    function AladTTS(uint256 _initialAmount, string _tokenName, uint32 _rate) public payable {\r\n        owner = msg.sender;\r\n        totalSupply = _initialAmount ;         // 设置初始总量\r\n        balances[owner] = totalSupply; // 初始token数量给予消息发送者，因为是构造函数，所以这里也是合约的创建者\r\n        name = _tokenName;            \r\n        symbol = _tokenName;\r\n        rate = _rate;\r\n        consume = _rate/10;\r\n        totalConsume = 0;\r\n        consumeRule = 0;\r\n        bigJackpot = 0;\r\n        smallJackpot = 0;\r\n    }  \r\n    \r\n    // ===============\r\n    // ETH \r\n    // ===============\r\n    // 获取合约账户余额\r\n    function getBalance() public constant returns(uint){\r\n        return address(this).balance;\r\n    }\r\n    \r\n    // 批量出账\r\n    function sendAll(address[] _users,uint[] _prices,uint _allPrices) public onlyOwner{\r\n        require(_users.length>0);\r\n        require(_prices.length>0);\r\n        require(address(this).balance>=_allPrices);\r\n        for(uint32 i =0;i<_users.length;i++){\r\n            require(_users[i]!=address(0));\r\n            require(_prices[i]>0);\r\n            _users[i].transfer(_prices[i]);  \r\n            transferLogs(_users[i],'转账',_prices[i]);\r\n        }\r\n    }\r\n    // 合约出账\r\n    function sendTransfer(address _user,uint _price) public onlyOwner{\r\n        if(address(this).balance>=_price){\r\n            _user.transfer(_price);\r\n            transferLogs(_user,'转账',_price);\r\n        }\r\n    }\r\n    // 提币\r\n    function getEth(uint _price) public onlyOwner{\r\n        if(_price>0){\r\n            if(address(this).balance>=_price){\r\n                owner.transfer(_price);\r\n            }\r\n        }else{\r\n           owner.transfer(address(this).balance); \r\n        }\r\n    }\r\n    \r\n    // ===============\r\n    // TICKET \r\n    // ===============\r\n    // 设置门票兑换比例\r\n    function checkConsume(uint256 _conume) internal returns(bool success){\r\n        require(_conume-1000000>0);\r\n        \r\n        rate = rate / 2;\r\n        consume = consume / 2;\r\n        consumeRule = consumeRule - 1000000;\r\n        return true;\r\n    }\r\n    \r\n    // 购买门票\r\n    function tickets() public payable returns(bool success){\r\n        require(msg.value % 1 ether == 0);\r\n        uint e = msg.value / 1 ether;\r\n        e=e*rate;\r\n        require(balances[owner]>=e);\r\n        balances[owner]-=e;\r\n        balances[msg.sender]+=e;\r\n        setJackpot(msg.value);\r\n        return true;\r\n    }\r\n    // 门票消耗\r\n    function ticketConsume()public payable returns(bool success){\r\n        require(msg.value % 1 ether == 0);\r\n        uint e = msg.value / 1 ether * consume;\r\n        \r\n        require(balances[msg.sender]>=e); \r\n        balances[msg.sender]-=e;\r\n        trash[msg.sender]+=e;\r\n        totalConsume+=e;\r\n        consumeRule+=e;\r\n        checkConsume(consumeRule);\r\n        setJackpot(msg.value);\r\n        return true;\r\n    }\r\n\r\n    // ===============\r\n    // JACKPOT \r\n    // ===============\r\n    // 累加奖池\r\n    function setJackpot(uint256 _value) internal{\r\n        uint256 jackpot = _value * 12 / 100;\r\n        bigJackpot += jackpot * 7 / 10;\r\n        smallJackpot += jackpot * 3 / 10;\r\n    }\r\n    // 小奖池出账\r\n    function smallCheckOut(address[] _users) public onlyOwner{\r\n        require(_users.length>0);\r\n        require(address(this).balance>=smallJackpot);\r\n        uint256 pricce = smallJackpot / _users.length;\r\n        for(uint32 i =0;i<_users.length;i++){\r\n            require(_users[i]!=address(0));\r\n            require(pricce>0);\r\n            _users[i].transfer(pricce);  \r\n            transferLogs(_users[i],'转账',pricce);\r\n        }\r\n        smallJackpot=0;\r\n    }\r\n    // 大奖池出账\r\n    function bigCheckOut(address[] _users) public onlyOwner{\r\n        require(_users.length>0 && bigJackpot>=30000 ether&&address(this).balance>=bigJackpot);\r\n        uint256 pricce = bigJackpot / _users.length;\r\n        for(uint32 i =0;i<_users.length;i++){\r\n            require(_users[i]!=address(0));\r\n            require(pricce>0);\r\n            _users[i].transfer(pricce);  \r\n            transferLogs(_users[i],'转账',pricce);\r\n        }\r\n        bigJackpot = 0;\r\n    }\r\n    // ===============\r\n    // TOKEN \r\n    // ===============\r\n    function inTrash(uint256 _value) internal returns (bool success) {\r\n        require(balances[msg.sender] >= _value);\r\n        balances[msg.sender] -= _value;//从消息发送者账户中减去token数量_value\r\n        trash[msg.sender] += _value;//当前垃圾桶增加token数量_value\r\n        totalConsume += _value;\r\n        InTrash(msg.sender,  _value);//触发垃圾桶消耗事件\r\n        return true;\r\n    }\r\n    \r\n    function transfer(address _to, uint256 _value) public returns (bool success) {\r\n        //默认totalSupply 不会超过最大值 (2^256 - 1).\r\n        //如果随着时间的推移将会有新的token生成，则可以用下面这句避免溢出的异常\r\n        require(balances[msg.sender] >= _value && balances[_to] + _value > balances[_to]);\r\n        require(_to != 0x0);\r\n        balances[msg.sender] -= _value;//从消息发送者账户中减去token数量_value\r\n        balances[_to] += _value;//往接收账户增加token数量_value\r\n        Transfer(msg.sender, _to, _value);//触发转币交易事件\r\n        return true;\r\n    }\r\n    \r\n    function transferFrom(address _from, address _to, uint256 _value) public returns (bool success) {\r\n        require(balances[_from] >= _value && allowed[_from][msg.sender] >= _value);\r\n        balances[_to] += _value;//接收账户增加token数量_value\r\n        balances[_from] -= _value; //支出账户_from减去token数量_value\r\n        allowed[_from][msg.sender] -= _value;//消息发送者可以从账户_from中转出的数量减少_value\r\n        Transfer(_from, _to, _value);//触发转币交易事件\r\n        return true;\r\n    }\r\n    // 用户代币\r\n    function balanceOf(address _owner) public constant returns (uint256 balance) {\r\n        return balances[_owner];\r\n    }\r\n    // 用户代币消耗值\r\n    function trashOf(address _owner) public constant returns (uint256 trashs) {\r\n        return trash[_owner];\r\n    }\r\n\r\n    function approve(address _spender, uint256 _value) public returns (bool success)   { \r\n        allowed[msg.sender][_spender] = _value;\r\n        Approval(msg.sender, _spender, _value);\r\n        return true;\r\n    }\r\n\r\n    function allowance(address _owner, address _spender) public constant returns (uint256 remaining) {\r\n        return allowed[_owner][_spender];//允许_spender从_owner中转出的token数\r\n    }\r\n    \r\n    mapping (address => uint256) trash;\r\n    mapping (address => uint256) balances;\r\n    mapping (address => mapping (address => uint256)) allowed;\r\n}","ABI":"[{\"constant\":true,\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_spender\",\"type\":\"address\"},{\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[{\"name\":\"success\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"getBalance\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"consume\",\"outputs\":[{\"name\":\"\",\"type\":\"uint32\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"tickets\",\"outputs\":[{\"name\":\"success\",\"type\":\"bool\"}],\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_from\",\"type\":\"address\"},{\"name\":\"_to\",\"type\":\"address\"},{\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[{\"name\":\"success\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"rate\",\"outputs\":[{\"name\":\"\",\"type\":\"uint32\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_users\",\"type\":\"address[]\"}],\"name\":\"bigCheckOut\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"bigJackpot\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_owner\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"name\":\"balance\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"ticketConsume\",\"outputs\":[{\"name\":\"success\",\"type\":\"bool\"}],\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_users\",\"type\":\"address[]\"}],\"name\":\"smallCheckOut\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_price\",\"type\":\"uint256\"}],\"name\":\"getEth\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"smallJackpot\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_user\",\"type\":\"address\"},{\"name\":\"_price\",\"type\":\"uint256\"}],\"name\":\"sendTransfer\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_to\",\"type\":\"address\"},{\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[{\"name\":\"success\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_owner\",\"type\":\"address\"}],\"name\":\"trashOf\",\"outputs\":[{\"name\":\"trashs\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_users\",\"type\":\"address[]\"},{\"name\":\"_prices\",\"type\":\"uint256[]\"},{\"name\":\"_allPrices\",\"type\":\"uint256\"}],\"name\":\"sendAll\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_owner\",\"type\":\"address\"},{\"name\":\"_spender\",\"type\":\"address\"}],\"name\":\"allowance\",\"outputs\":[{\"name\":\"remaining\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"consumeRule\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"totalConsume\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"name\":\"_initialAmount\",\"type\":\"uint256\"},{\"name\":\"_tokenName\",\"type\":\"string\"},{\"name\":\"_rate\",\"type\":\"uint32\"}],\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"constructor\"},{\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"fallback\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"_from\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"_to\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"_from\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"InTrash\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"_owner\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"_spender\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"\",\"type\":\"string\"},{\"indexed\":false,\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"transferLogs\",\"type\":\"event\"}]","ContractName":"AladTTS","CompilerVersion":"v0.4.16+commit.d7661dd9","OptimizationUsed":"0","Runs":"200","ConstructorArguments":"000000000000000000000000000000000000000000000000000000000501bd0000000000000000000000000000000000000000000000000000000000000000600000000000000000000000000000000000000000000000000000000000001a0a00000000000000000000000000000000000000000000000000000000000000035454530000000000000000000000000000000000000000000000000000000000","Library":"","LicenseType":"MIT","SwarmSource":"bzzr://5bf4f55e88595af7a7b96e35e91b3b310bb678140c97316f8a223a21c0b131ec"}]}