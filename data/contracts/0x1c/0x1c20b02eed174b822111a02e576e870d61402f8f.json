{"status":"1","message":"OK","result":[{"SourceCode":"pragma solidity >=0.4.23;\r\n\r\n/// @title Math operations with safety checks\r\n/// @author Melonport AG <team@melonport.com>\r\n/// @notice From https://github.com/status-im/status-network-token/blob/master/contracts/safeMath.sol\r\n\r\nlibrary safeMath {\r\n  function mul(uint a, uint b) internal returns (uint) {\r\n    uint c = a * b;\r\n    assert(a == 0 || c / a == b);\r\n    return c;\r\n  }\r\n\r\n  function div(uint a, uint b) internal returns (uint) {\r\n    uint c = a / b;\r\n    return c;\r\n  }\r\n\r\n  function sub(uint a, uint b) internal returns (uint) {\r\n    assert(b <= a);\r\n    return a - b;\r\n  }\r\n\r\n  function add(uint a, uint b) internal returns (uint) {\r\n    uint c = a + b;\r\n    assert(c >= a);\r\n    return c;\r\n  }\r\n\r\n  function max64(uint64 a, uint64 b) internal constant returns (uint64) {\r\n    return a >= b ? a : b;\r\n  }\r\n\r\n  function min64(uint64 a, uint64 b) internal constant returns (uint64) {\r\n    return a < b ? a : b;\r\n  }\r\n\r\n  function max256(uint256 a, uint256 b) internal constant returns (uint256) {\r\n    return a >= b ? a : b;\r\n  }\r\n\r\n  function min256(uint256 a, uint256 b) internal constant returns (uint256) {\r\n    return a < b ? a : b;\r\n  }\r\n}\r\n\r\n/// @title ERC20 Token Interface\r\n/// @author Melonport AG <team@melonport.com>\r\n/// @notice See https://github.com/ethereum/EIPs/issues/20\r\ncontract ERC20Interface {\r\n\r\n    // EVENTS\r\n\r\n    event Transfer(address indexed _from, address indexed _to, uint256 _value);\r\n    event Approval(address indexed _owner, address indexed _spender, uint256 _value);\r\n\r\n    // CONSTANT METHODS\r\n\r\n    function totalSupply() constant returns (uint256 totalSupply) {}\r\n    function balanceOf(address _owner) constant returns (uint256 balance) {}\r\n    function allowance(address _owner, address _spender) constant returns (uint256 remaining) {}\r\n\r\n    // NON-CONSTANT METHODS\r\n\r\n    function transfer(address _to, uint256 _value) returns (bool success) {}\r\n    function transferFrom(address _from, address _to, uint256 _value) returns (bool success) {}\r\n    function approve(address _spender, uint256 _value) returns (bool success) {}\r\n}\r\n\r\n/// @title ERC20 Token\r\n/// @author Melonport AG <team@melonport.com>\r\n/// @notice Original taken from https://github.com/ethereum/EIPs/issues/20\r\n/// @notice Checked against integer overflow\r\ncontract ERC20 is ERC20Interface {\r\n\r\n    function transfer(address _to, uint256 _value) returns (bool success) {\r\n        if (balances[msg.sender] >= _value && balances[_to] + _value > balances[_to]) {\r\n            balances[msg.sender] -= _value;\r\n            balances[_to] += _value;\r\n            Transfer(msg.sender, _to, _value);\r\n            return true;\r\n        } else { throw; }\r\n    }\r\n\r\n    function transferFrom(address _from, address _to, uint256 _value) returns (bool success) {\r\n        if (balances[_from] >= _value && allowed[_from][msg.sender] >= _value && balances[_to] + _value > balances[_to]) {\r\n            balances[_to] += _value;\r\n            balances[_from] -= _value;\r\n            allowed[_from][msg.sender] -= _value;\r\n            Transfer(_from, _to, _value);\r\n            return true;\r\n        } else { throw; }\r\n    }\r\n\r\n    function balanceOf(address _owner) constant returns (uint256 balance) {\r\n        return balances[_owner];\r\n    }\r\n\r\n    function approve(address _spender, uint256 _value) returns (bool success) {\r\n        // See: https://github.com/ethereum/EIPs/issues/20#issuecomment-263555598\r\n        if (_value > 0) {\r\n            require(allowed[msg.sender][_spender] == 0);\r\n        }\r\n        allowed[msg.sender][_spender] = _value;\r\n        Approval(msg.sender, _spender, _value);\r\n        return true;\r\n    }\r\n\r\n    function allowance(address _owner, address _spender) constant returns (uint256 remaining) {\r\n        return allowed[_owner][_spender];\r\n    }\r\n\r\n    mapping (address => uint256) balances;\r\n\r\n    mapping (address => mapping (address => uint256)) allowed;\r\n\r\n    uint256 public totalSupply;\r\n\r\n}\r\n\r\n\r\ncontract CouncilVesting {\r\n    using safeMath for uint;\r\n\r\n    // FIELDS\r\n\r\n    // Constructor fields\r\n    ERC20 public MELON_CONTRACT;   // MLN as ERC20 contract\r\n    address public owner;          // deployer; can interrupt vesting\r\n    // Methods fields\r\n    bool public interrupted;       // whether vesting is still possible\r\n    bool public isVestingStarted;  // whether vesting period has begun\r\n    uint public totalVestingAmount; // quantity of vested Melon in total\r\n    uint public vestingStartTime;  // timestamp when vesting is set\r\n    uint public vestingPeriod;     // total vesting period in seconds\r\n    address public beneficiary;    // address of the beneficiary\r\n    uint public withdrawn;         // quantity of Melon withdrawn so far\r\n\r\n    // MODIFIERS\r\n\r\n    modifier not_interrupted() {\r\n        require(\r\n            !interrupted,\r\n            \"The contract has been interrupted\"\r\n        );\r\n        _;\r\n    }\r\n\r\n    modifier only_owner() {\r\n        require(\r\n            msg.sender == owner,\r\n            \"Only owner can do this\"\r\n        );\r\n        _;\r\n    }\r\n\r\n    modifier only_beneficiary() {\r\n        require(\r\n            msg.sender == beneficiary,\r\n            \"Only beneficiary can do this\"\r\n        );\r\n        _;\r\n    }\r\n\r\n    modifier vesting_not_started() {\r\n        require(\r\n            !isVestingStarted,\r\n            \"Vesting cannot be started\"\r\n        );\r\n        _;\r\n    }\r\n\r\n    modifier vesting_started() {\r\n        require(\r\n            isVestingStarted,\r\n            \"Vesting must be started\"\r\n        );\r\n        _;\r\n    }\r\n\r\n    /// @notice Calculates the quantity of Melon asset that's currently withdrawable\r\n    /// @return withdrawable Quantity of withdrawable Melon asset\r\n    function calculateWithdrawable() public view returns (uint withdrawable) {\r\n        uint timePassed = block.timestamp.sub(vestingStartTime);\r\n\r\n        if (timePassed < vestingPeriod) {\r\n            uint vested = totalVestingAmount.mul(timePassed).div(vestingPeriod);\r\n            withdrawable = vested.sub(withdrawn);\r\n        } else {\r\n            withdrawable = totalVestingAmount.sub(withdrawn);\r\n        }\r\n    }\r\n\r\n    // NON-CONSTANT METHODS\r\n\r\n    /// @param ofMelonAsset Address of Melon asset\r\n    constructor(address ofMelonAsset, address ofOwner) {\r\n        MELON_CONTRACT = ERC20(ofMelonAsset);\r\n        owner = ofOwner;\r\n    }\r\n\r\n    /// @param ofBeneficiary Address of beneficiary\r\n    /// @param ofMelonQuantity Address of MLN asset\r\n    /// @param ofVestingPeriod Vesting period in seconds from vestingStartTime\r\n    function setVesting(\r\n        address ofBeneficiary,\r\n        uint ofMelonQuantity,\r\n        uint ofVestingPeriod\r\n    )\r\n        external\r\n        only_owner\r\n        not_interrupted\r\n        vesting_not_started\r\n    {\r\n        require(ofMelonQuantity > 0, \"Must vest some MLN\");\r\n        require(\r\n            MELON_CONTRACT.transferFrom(msg.sender, this, ofMelonQuantity),\r\n            \"MLN deposit failed\"\r\n        );\r\n        isVestingStarted = true;\r\n        vestingStartTime = block.timestamp;\r\n        totalVestingAmount = ofMelonQuantity;\r\n        vestingPeriod = ofVestingPeriod;\r\n        beneficiary = ofBeneficiary;\r\n    }\r\n\r\n    /// @notice Withdraw\r\n    function withdraw()\r\n        external\r\n        only_beneficiary\r\n        vesting_started\r\n        not_interrupted\r\n    {\r\n        uint withdrawable = calculateWithdrawable();\r\n        withdrawn = withdrawn.add(withdrawable);\r\n        require(\r\n            MELON_CONTRACT.transfer(beneficiary, withdrawable),\r\n            \"Transfer to beneficiary failed\"\r\n        );\r\n    }\r\n\r\n    /// @notice Withdraw vested tokens to beneficiary\r\n    /// @notice Send remainder back to owner\r\n    /// @notice Prevent further vesting\r\n    function forceWithdrawalAndInterrupt()\r\n        external\r\n        only_owner\r\n        vesting_started\r\n        not_interrupted\r\n    {\r\n        interrupted = true;\r\n        uint remainingVested = calculateWithdrawable();\r\n        uint totalToBeVested = withdrawn.add(remainingVested);\r\n        uint remainingUnvested = totalVestingAmount.sub(totalToBeVested);\r\n        withdrawn = totalVestingAmount;\r\n        require(\r\n            MELON_CONTRACT.transfer(beneficiary, remainingVested),\r\n            \"Transfer to beneficiary failed\"\r\n        );\r\n        require(\r\n            MELON_CONTRACT.transfer(owner, remainingUnvested),\r\n            \"Transfer to owner failed\"\r\n        );\r\n    }\r\n}","ABI":"[{\"constant\":true,\"inputs\":[],\"name\":\"totalVestingAmount\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"isVestingStarted\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"beneficiary\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"withdraw\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"interrupted\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"vestingPeriod\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"vestingStartTime\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"withdrawn\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"forceWithdrawalAndInterrupt\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"MELON_CONTRACT\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"ofBeneficiary\",\"type\":\"address\"},{\"name\":\"ofMelonQuantity\",\"type\":\"uint256\"},{\"name\":\"ofVestingPeriod\",\"type\":\"uint256\"}],\"name\":\"setVesting\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"calculateWithdrawable\",\"outputs\":[{\"name\":\"withdrawable\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"name\":\"ofMelonAsset\",\"type\":\"address\"},{\"name\":\"ofOwner\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"}]","ContractName":"CouncilVesting","CompilerVersion":"v0.4.25+commit.59dbf8f1","OptimizationUsed":"1","Runs":"200","ConstructorArguments":"000000000000000000000000ec67005c4e498ec7f55e092bd1d35cbc47c918920000000000000000000000008e452b55e3e00428ad90f9683565ae1fba16efbf","Library":"","LicenseType":"MIT","SwarmSource":"bzzr://98035a585ee272f0740e9caff12f0c12487d60e4b92c85a91c5ee48924dbe091"}]}