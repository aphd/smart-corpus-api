{"status":"1","message":"OK","result":[{"SourceCode":"pragma solidity >= 0.4.24;\r\n\r\n//by AGAINST Network Team\r\n\r\ninterface erc20 {\r\n    function name() external returns (string);\r\n\tfunction symbol() external returns (string);\r\n\tfunction decimals() external returns (uint8);\r\n    function transfer(address receiver, uint amount) external;\r\n\tfunction transferFrom(address from, address to, uint value) external;\r\n    function balanceOf(address tokenOwner) constant external returns (uint balance);\r\n    function allowance(address _owner, address _spender) constant external returns (uint remaining); \r\n}\r\n\r\ncontract againstTokenRegister {\r\n    string public name = \"AGAINST TKDEX\";\r\n    string public symbol = \"AGAINST\";\r\n    string public comment = \"AGAINST Token Index & Full DEX 1.0\";\r\n    address internal owner;\r\n    uint public indexCount = 0;\r\n\tuint public registerFee = 0;\r\n    uint public ratePlaces = 9;\r\n    uint public openMarketFee = 0;\r\n    uint public actionFee = 10**15;\r\n    uint internal minQtd = (10**18)/(10**5);\r\n\t\r\n\tevent orderPlaced(address token, address tokenPair, address ownerId, uint orderId);\r\n\tevent orderDone(address token, address tokenPair, uint orderId, uint doneId);\r\n\tevent orderCanceled(address token, address tokenPair, uint orderId);\r\n\tevent orderRemovedLowBalance(address token, address tokenPair, uint orderId);\r\n    event ctrWithdraw(address wallet, uint value);\r\n  \r\n    struct order {\r\n      uint orderId;\r\n      address orderOwner;\r\n      uint rate;\r\n      uint amount;\r\n      bool sell; \r\n      uint date;\r\n    } \r\n   \r\n    struct done {\r\n\t  uint orderId;\r\n      address fillOwner;\r\n      uint fillAmount;\r\n      uint fillDate;\r\n      uint rate;   \r\n    }\r\n\t\r\n\tstruct market {  \r\n      bool exists;\r\n      address tokenPair;\r\n      uint ordersCount;\r\n      uint donesCount;\r\n\t  mapping(uint => order) orders; \r\n      mapping(uint => done) dones;\r\n\t}\r\n\r\n    struct voted {\r\n      bool like;\r\n      bool dislike;\r\n    }\r\n\r\n    struct token {\r\n      address tokenBase;\r\n      string name;\r\n      string symbol;\r\n      uint decimals;\r\n      uint likesCount;\r\n      uint dislikesCount; \r\n      uint marketsCount;\r\n      mapping(uint => address) marketIndex; \r\n      mapping(address => market) markets;\r\n      mapping(address => voted) voteStatus;\r\n    }\r\n\t\r\n    mapping(uint => address) public index;\r\n\tmapping(address => token) public tokens;\r\n    mapping(address => bool) public exists;\t\r\n    \t\r\n\tconstructor() public {\r\n       owner = address(msg.sender); \r\n    }\r\n\r\n    function () public {\r\n      bool pass = false;\r\n      require(pass,\"Nothing Here\");\r\n    }\r\n\r\n    function getTokenByAddr(address _addr) public view returns (string _name, \r\n                                                                string _symbol, \r\n                                                                uint _decimals, \r\n                                                                uint _marketsCount) {\r\n\r\n       return (tokens[_addr].name,\r\n               tokens[_addr].symbol,\r\n               tokens[_addr].decimals,\r\n               tokens[_addr].marketsCount);\r\n    }\r\n\r\n    function getTokenByIndex(uint _index) public view returns (address _tokenBase, \r\n                                                               string _name, \r\n                                                               string _symbol, \r\n                                                               uint _decimals, \r\n                                                               uint _marketsCount) {\r\n       return (tokens[index[_index]].tokenBase, \r\n               tokens[index[_index]].name,\r\n               tokens[index[_index]].symbol,\r\n               tokens[index[_index]].decimals,\r\n               tokens[index[_index]].marketsCount);\r\n    }\r\n\r\n    function getLikesByAddr(address _addr) public view returns (uint _likesCount, uint _dislikesCount) {\r\n       return (tokens[_addr].likesCount, tokens[_addr].dislikesCount);\r\n    }\r\n\r\n    function getVoteStatus(address _addr) public view returns (bool _like, bool _dislike) {\r\n      return (tokens[_addr].voteStatus[msg.sender].like, tokens[_addr].voteStatus[msg.sender].dislike);\r\n    }\r\n\r\n    function getLikesByIndex(uint _index) public view returns (address tokenBase, uint _likesCount, uint _dislikesCount) {\r\n       return (tokens[index[_index]].tokenBase, tokens[index[_index]].likesCount, tokens[index[_index]].dislikesCount);\r\n    }\r\n\r\n    function getPairByAddr(address _base, address _pairAddr) public view returns (uint _ordersCount, uint _donesCount, bool _exists) {        \r\n       return (tokens[_base].markets[_pairAddr].ordersCount,\r\n               tokens[_base].markets[_pairAddr].donesCount,\r\n               tokens[_base].markets[_pairAddr].exists);\r\n    }\r\n\r\n    function getPairByIndex(address _base, uint _pairIndex) public view returns (address _tokenPair, uint _ordersCount, uint _donesCount) {\r\n       return (tokens[_base].markets[tokens[_base].marketIndex[_pairIndex]].tokenPair,\r\n               tokens[_base].markets[tokens[_base].marketIndex[_pairIndex]].ordersCount,\r\n               tokens[_base].markets[tokens[_base].marketIndex[_pairIndex]].donesCount);\r\n    }\r\n\r\n    function getOrders(address _base, address _pair, uint _orderIndex) public view returns (uint _orderId,\r\n                                                                                            address _owner,\r\n                                                                                            uint _rate,\r\n                                                                                            uint _amount,\r\n                                                                                            bool _sell) {\r\n       return (tokens[_base].markets[_pair].orders[_orderIndex].orderId,\r\n               tokens[_base].markets[_pair].orders[_orderIndex].orderOwner,\r\n               tokens[_base].markets[_pair].orders[_orderIndex].rate,\r\n               tokens[_base].markets[_pair].orders[_orderIndex].amount,\r\n               tokens[_base].markets[_pair].orders[_orderIndex].sell);\r\n    }\r\n\r\n    function getDones(address _base, address _pair, uint _doneIndex) public view returns (uint _orderId,\r\n                                                                                          address _fillOwner,\r\n                                                                                          uint _fillAmount,\r\n                                                                                          uint _fillDate,\r\n                                                                                          uint _rate) {\r\n       return (tokens[_base].markets[_pair].dones[_doneIndex].orderId,\r\n               tokens[_base].markets[_pair].dones[_doneIndex].fillOwner,\r\n               tokens[_base].markets[_pair].dones[_doneIndex].fillAmount,\r\n               tokens[_base].markets[_pair].dones[_doneIndex].fillDate,\r\n               tokens[_base].markets[_pair].dones[_doneIndex].rate);\r\n    }\t\r\n\r\n\tfunction changeOwner(address _newOwner) public {\r\n\t  if (msg.sender == owner) {\r\n\t    owner = _newOwner;\r\n\t  }\r\n\t}\r\n\r\n\tfunction registerToken(address _token) public payable {\r\n\t   require((msg.sender == owner) || (msg.value >= registerFee), \"Register Fee Very Low\");\r\n\t   erc20 refToken = erc20(_token);\r\n       if (!exists[_token]) {            \r\n            indexCount = indexCount+1;\r\n            index[indexCount] = _token; \r\n            tokens[_token].tokenBase = _token;  \r\n            tokens[_token].name = refToken.name();\t\t\r\n            tokens[_token].symbol = refToken.symbol();\r\n            tokens[_token].decimals = refToken.decimals();\t\t\t\r\n            tokens[_token].likesCount = 0;\r\n            tokens[_token].dislikesCount = 0;\r\n            tokens[_token].marketsCount = 0; \t\t\r\n            exists[_token] = true;            \r\n       }\t             \r\n\t   if (address(this).balance > 0) {\r\n\t\t    require(owner.send(address(this).balance),\"Send error\");\r\n\t   }\r\n\t}\r\n\r\n    function createMarket(address _token, address _tokenPair) public payable {\r\n      require(msg.value >= openMarketFee, \"Open Market Fee Very Low\");\r\n      require(exists[_token] && exists[_tokenPair],\"token or tokenPair not listed\");     \r\n      require(!tokens[_token].markets[_tokenPair].exists,\"Market already exists\");\r\n      require(tokens[_token].tokenBase != _tokenPair,\"Not allowed token = tokenPair\");\r\n      tokens[_token].marketsCount = tokens[_token].marketsCount+1;\r\n      tokens[_token].marketIndex[tokens[_token].marketsCount] = _tokenPair;\r\n      tokens[_token].markets[_tokenPair].tokenPair = _tokenPair;\r\n      tokens[_token].markets[_tokenPair].ordersCount = 0;\r\n      tokens[_token].markets[_tokenPair].donesCount = 0;\r\n      tokens[_token].markets[_tokenPair].exists = true;\r\n    }\r\n\r\n    function createOrder(address _token, address _tokenPair, uint _rate, uint _amount, bool _sell) public payable {\r\n       require(msg.value >= actionFee);  \r\n       require(_token != _tokenPair,\"Not allowed token = tokenPair\");     \r\n       require(exists[_token] && exists[_tokenPair],\"Token or tokenPair not listed\");\r\n       require((_rate > 0) && (_rate <= (10**(ratePlaces*2)) && (_amount > 0) && (_amount <= 10**36)),\"Invalid Values\");\r\n       tokens[_token].markets[_tokenPair].ordersCount = tokens[_token].markets[_tokenPair].ordersCount+1;\r\n       tokens[_token].markets[_tokenPair].orders[tokens[_token].markets[_tokenPair].ordersCount].orderId = tokens[_token].markets[_tokenPair].ordersCount;\r\n       tokens[_token].markets[_tokenPair].orders[tokens[_token].markets[_tokenPair].ordersCount].orderOwner = msg.sender; \r\n       tokens[_token].markets[_tokenPair].orders[tokens[_token].markets[_tokenPair].ordersCount].rate = _rate;\r\n       tokens[_token].markets[_tokenPair].orders[tokens[_token].markets[_tokenPair].ordersCount].amount = _amount;\r\n       tokens[_token].markets[_tokenPair].orders[tokens[_token].markets[_tokenPair].ordersCount].sell = _sell;\r\n       tokens[_token].markets[_tokenPair].orders[tokens[_token].markets[_tokenPair].ordersCount].date = now;\r\n\t   emit orderPlaced(_token, _tokenPair, msg.sender, tokens[_token].markets[_tokenPair].ordersCount);\r\n    }\r\n\t\r\n\tfunction tokenLike(address _token) public {\t\r\n        require(exists[_token], \"Token not listed\");    \r\n        if (!tokens[_token].voteStatus[msg.sender].like) {\r\n\t      tokens[_token].likesCount = tokens[_token].likesCount+1;\r\n          tokens[_token].voteStatus[msg.sender].like = true;\r\n          if (tokens[_token].voteStatus[msg.sender].dislike) {\r\n\t          tokens[_token].dislikesCount = tokens[_token].dislikesCount-1;\r\n              tokens[_token].voteStatus[msg.sender].dislike = false;\r\n          }\r\n        } else {\r\n          tokens[_token].likesCount = tokens[_token].likesCount-1;\r\n          tokens[_token].voteStatus[msg.sender].like = false;\r\n        }\t   \r\n\t}\r\n\t\r\n\tfunction tokenDislike(address _token) public {\r\n        require(exists[_token],\"Token not listed\");\r\n   \t    if (!tokens[_token].voteStatus[msg.sender].dislike) {\r\n\t      tokens[_token].dislikesCount = tokens[_token].dislikesCount+1;\r\n          tokens[_token].voteStatus[msg.sender].dislike = true;\r\n          if (tokens[_token].voteStatus[msg.sender].like) {\r\n            tokens[_token].likesCount = tokens[_token].likesCount-1;\r\n            tokens[_token].voteStatus[msg.sender].like = false;\r\n          }\t   \r\n        } else {\r\n\t      tokens[_token].dislikesCount = tokens[_token].dislikesCount-1;\r\n          tokens[_token].voteStatus[msg.sender].dislike = false;\r\n        }\t   \r\n\t}\t\t\r\n\t\r\n\tfunction changeRegisterFee(uint _registerFee) public {\r\n\t   require(msg.sender == owner);\r\n\t   registerFee = _registerFee;\t  \r\n\t}\t\r\n\r\n\tfunction changeOpenMarketFee(uint _openMarketFee) public {\r\n\t   require(msg.sender == owner,\"Access denied\");\r\n\t   openMarketFee = _openMarketFee;\r\n\t}\r\n\r\n\tfunction changeActionFee(uint _actionFee) public {\r\n\t   require(msg.sender == owner,\"Access denied\");\r\n\t   actionFee = _actionFee;\r\n\t}\r\n\r\n    function withdraw() public {\r\n        uint amount = address(this).balance; \r\n        if (owner.send(amount)) {\r\n           emit ctrWithdraw(owner, amount);     \r\n        }  \r\n    }\r\n\r\n    function cancelOrder(uint _orderId, address _token, address _tokenPair) public payable {\r\n       require(tokens[_token].markets[_tokenPair].ordersCount > 0, \"bof orders\"); \r\n       uint orderAmount = tokens[_token].markets[_tokenPair].orders[_orderId].amount;\r\n       erc20 tokenMaker = erc20(tokens[_token].tokenBase);\r\n       if (tokens[_token].markets[_tokenPair].orders[_orderId].orderOwner != msg.sender) {\r\n          require(\r\n                   (tokenMaker.allowance(tokens[_token].markets[_tokenPair].orders[_orderId].orderOwner, address(this)) < orderAmount) ||\r\n                   (tokenMaker.balanceOf(tokens[_token].markets[_tokenPair].orders[_orderId].orderOwner) < orderAmount), \"Only garbage can be removed by you here\"\r\n          );\t\r\n       }             \r\n       uint top = tokens[_token].markets[_tokenPair].ordersCount;\r\n       tokens[_token].markets[_tokenPair].ordersCount = tokens[_token].markets[_tokenPair].ordersCount-1;      \r\n       if (tokens[_token].markets[_tokenPair].orders[top].amount > 0) {\r\n           tokens[_token].markets[_tokenPair].orders[_orderId] = tokens[_token].markets[_tokenPair].orders[top];       \r\n           tokens[_token].markets[_tokenPair].orders[_orderId].orderId = _orderId;\r\n           tokens[_token].markets[_tokenPair].orders[top].amount = 0;           \r\n       }       \r\n\t   emit orderCanceled(_token, _tokenPair, _orderId);\r\n       if (msg.sender.send(actionFee)) {\r\n          emit ctrWithdraw(msg.sender, actionFee);     \r\n       }  \r\n    } \r\n\r\n    function fillOrder(uint _orderID, address _token, address _tokenPair, uint _rate, uint _amountFill) public payable {             \r\n       require(tokens[_token].markets[_tokenPair].orders[_orderID].orderId > 0,\"Not placed\"); \r\n       require((_amountFill > 0) && (_amountFill <= 10**36),\"Fill out of range\");\r\n       require(_rate == tokens[_token].markets[_tokenPair].orders[_orderID].rate,\"Rate error\");\r\n       erc20 tokenMaker = erc20(tokens[_token].tokenBase);\r\n       erc20 tokenTaker = erc20(tokens[_token].markets[_tokenPair].tokenPair);      \t\r\n\t   uint amount =  (((_amountFill*tokens[_token].markets[_tokenPair].orders[_orderID].rate)/(10**tokens[_tokenPair].decimals))*(10**tokens[_token].decimals))/(10**ratePlaces);\r\n       require(tokenTaker.allowance(msg.sender, address(this)) >= _amountFill, \"Verify taker approval\");\r\n       require(tokenTaker.balanceOf(msg.sender) >= _amountFill, \"Verify taker balance\");\t\r\n       require(tokenMaker.allowance(tokens[_token].markets[_tokenPair].orders[_orderID].orderOwner, address(this)) >= amount, \"Verify maker approval\");\r\n       require(tokenMaker.balanceOf(tokens[_token].markets[_tokenPair].orders[_orderID].orderOwner) >= amount, \"Verify maker balance\");\t\r\n       require(tokens[_token].markets[_tokenPair].orders[_orderID].amount >= amount,\"Amount error\"); \r\n\t   tokens[_token].markets[_tokenPair].orders[_orderID].amount=tokens[_token].markets[_tokenPair].orders[_orderID].amount-amount;\t         \r\n       tokenMaker.transferFrom(tokens[_token].markets[_tokenPair].orders[_orderID].orderOwner, msg.sender,amount);\r\n       tokenTaker.transferFrom(msg.sender,tokens[_token].markets[_tokenPair].orders[_orderID].orderOwner,_amountFill);\r\n       tokens[_token].markets[_tokenPair].donesCount = tokens[_token].markets[_tokenPair].donesCount+1;\r\n\t   tokens[_token].markets[_tokenPair].dones[tokens[_token].markets[_tokenPair].donesCount].orderId = _orderID;\r\n       tokens[_token].markets[_tokenPair].dones[tokens[_token].markets[_tokenPair].donesCount].fillOwner = msg.sender;\r\n       tokens[_token].markets[_tokenPair].dones[tokens[_token].markets[_tokenPair].donesCount].fillAmount = _amountFill;\r\n       tokens[_token].markets[_tokenPair].dones[tokens[_token].markets[_tokenPair].donesCount].fillDate = now;\r\n       tokens[_token].markets[_tokenPair].dones[tokens[_token].markets[_tokenPair].donesCount].rate = _rate;\r\n\t   emit orderDone(_token, _tokenPair, _orderID, tokens[_token].markets[_tokenPair].donesCount);\r\n       if (tokens[_token].markets[_tokenPair].orders[_orderID].amount*(10**(18-tokens[_token].decimals)) < minQtd) {\r\n          require(tokens[_token].markets[_tokenPair].ordersCount > 0, \"bof orders\");\r\n          uint top = tokens[_token].markets[_tokenPair].ordersCount;\r\n          tokens[_token].markets[_tokenPair].ordersCount = tokens[_token].markets[_tokenPair].ordersCount-1;\r\n          if (address(tokens[_token].markets[_tokenPair].orders[_orderID].orderOwner).send(actionFee)) {\r\n             emit ctrWithdraw(address(tokens[_token].markets[_tokenPair].orders[_orderID].orderOwner), actionFee);     \r\n          }          \r\n          if (tokens[_token].markets[_tokenPair].orders[top].amount > 0) {\r\n              tokens[_token].markets[_tokenPair].orders[_orderID] = tokens[_token].markets[_tokenPair].orders[top];          \r\n              tokens[_token].markets[_tokenPair].orders[_orderID].orderId = _orderID;\r\n              tokens[_token].markets[_tokenPair].orders[top].amount = 0;   \r\n          }          \r\n\t      emit orderRemovedLowBalance(_token, _tokenPair, _orderID);\r\n       }\r\n    }  \r\n}","ABI":"[{\"constant\":true,\"inputs\":[],\"name\":\"registerFee\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_token\",\"type\":\"address\"}],\"name\":\"registerToken\",\"outputs\":[],\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"actionFee\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_token\",\"type\":\"address\"},{\"name\":\"_tokenPair\",\"type\":\"address\"},{\"name\":\"_rate\",\"type\":\"uint256\"},{\"name\":\"_amount\",\"type\":\"uint256\"},{\"name\":\"_sell\",\"type\":\"bool\"}],\"name\":\"createOrder\",\"outputs\":[],\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"indexCount\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_token\",\"type\":\"address\"},{\"name\":\"_tokenPair\",\"type\":\"address\"}],\"name\":\"createMarket\",\"outputs\":[],\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_actionFee\",\"type\":\"uint256\"}],\"name\":\"changeActionFee\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_base\",\"type\":\"address\"},{\"name\":\"_pairAddr\",\"type\":\"address\"}],\"name\":\"getPairByAddr\",\"outputs\":[{\"name\":\"_ordersCount\",\"type\":\"uint256\"},{\"name\":\"_donesCount\",\"type\":\"uint256\"},{\"name\":\"_exists\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"index\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_base\",\"type\":\"address\"},{\"name\":\"_pair\",\"type\":\"address\"},{\"name\":\"_doneIndex\",\"type\":\"uint256\"}],\"name\":\"getDones\",\"outputs\":[{\"name\":\"_orderId\",\"type\":\"uint256\"},{\"name\":\"_fillOwner\",\"type\":\"address\"},{\"name\":\"_fillAmount\",\"type\":\"uint256\"},{\"name\":\"_fillDate\",\"type\":\"uint256\"},{\"name\":\"_rate\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"withdraw\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_base\",\"type\":\"address\"},{\"name\":\"_pairIndex\",\"type\":\"uint256\"}],\"name\":\"getPairByIndex\",\"outputs\":[{\"name\":\"_tokenPair\",\"type\":\"address\"},{\"name\":\"_ordersCount\",\"type\":\"uint256\"},{\"name\":\"_donesCount\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_addr\",\"type\":\"address\"}],\"name\":\"getVoteStatus\",\"outputs\":[{\"name\":\"_like\",\"type\":\"bool\"},{\"name\":\"_dislike\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_token\",\"type\":\"address\"}],\"name\":\"tokenDislike\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_index\",\"type\":\"uint256\"}],\"name\":\"getTokenByIndex\",\"outputs\":[{\"name\":\"_tokenBase\",\"type\":\"address\"},{\"name\":\"_name\",\"type\":\"string\"},{\"name\":\"_symbol\",\"type\":\"string\"},{\"name\":\"_decimals\",\"type\":\"uint256\"},{\"name\":\"_marketsCount\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_addr\",\"type\":\"address\"}],\"name\":\"getTokenByAddr\",\"outputs\":[{\"name\":\"_name\",\"type\":\"string\"},{\"name\":\"_symbol\",\"type\":\"string\"},{\"name\":\"_decimals\",\"type\":\"uint256\"},{\"name\":\"_marketsCount\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_token\",\"type\":\"address\"}],\"name\":\"tokenLike\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"ratePlaces\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_registerFee\",\"type\":\"uint256\"}],\"name\":\"changeRegisterFee\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_orderID\",\"type\":\"uint256\"},{\"name\":\"_token\",\"type\":\"address\"},{\"name\":\"_tokenPair\",\"type\":\"address\"},{\"name\":\"_rate\",\"type\":\"uint256\"},{\"name\":\"_amountFill\",\"type\":\"uint256\"}],\"name\":\"fillOrder\",\"outputs\":[],\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_newOwner\",\"type\":\"address\"}],\"name\":\"changeOwner\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_orderId\",\"type\":\"uint256\"},{\"name\":\"_token\",\"type\":\"address\"},{\"name\":\"_tokenPair\",\"type\":\"address\"}],\"name\":\"cancelOrder\",\"outputs\":[],\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_openMarketFee\",\"type\":\"uint256\"}],\"name\":\"changeOpenMarketFee\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"address\"}],\"name\":\"tokens\",\"outputs\":[{\"name\":\"tokenBase\",\"type\":\"address\"},{\"name\":\"name\",\"type\":\"string\"},{\"name\":\"symbol\",\"type\":\"string\"},{\"name\":\"decimals\",\"type\":\"uint256\"},{\"name\":\"likesCount\",\"type\":\"uint256\"},{\"name\":\"dislikesCount\",\"type\":\"uint256\"},{\"name\":\"marketsCount\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_index\",\"type\":\"uint256\"}],\"name\":\"getLikesByIndex\",\"outputs\":[{\"name\":\"tokenBase\",\"type\":\"address\"},{\"name\":\"_likesCount\",\"type\":\"uint256\"},{\"name\":\"_dislikesCount\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"openMarketFee\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_base\",\"type\":\"address\"},{\"name\":\"_pair\",\"type\":\"address\"},{\"name\":\"_orderIndex\",\"type\":\"uint256\"}],\"name\":\"getOrders\",\"outputs\":[{\"name\":\"_orderId\",\"type\":\"uint256\"},{\"name\":\"_owner\",\"type\":\"address\"},{\"name\":\"_rate\",\"type\":\"uint256\"},{\"name\":\"_amount\",\"type\":\"uint256\"},{\"name\":\"_sell\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"comment\",\"outputs\":[{\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"address\"}],\"name\":\"exists\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_addr\",\"type\":\"address\"}],\"name\":\"getLikesByAddr\",\"outputs\":[{\"name\":\"_likesCount\",\"type\":\"uint256\"},{\"name\":\"_dislikesCount\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"fallback\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"token\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"tokenPair\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"ownerId\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"orderId\",\"type\":\"uint256\"}],\"name\":\"orderPlaced\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"token\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"tokenPair\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"orderId\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"doneId\",\"type\":\"uint256\"}],\"name\":\"orderDone\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"token\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"tokenPair\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"orderId\",\"type\":\"uint256\"}],\"name\":\"orderCanceled\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"token\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"tokenPair\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"orderId\",\"type\":\"uint256\"}],\"name\":\"orderRemovedLowBalance\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"wallet\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"ctrWithdraw\",\"type\":\"event\"}]","ContractName":"againstTokenRegister","CompilerVersion":"v0.4.24+commit.e67f0147","OptimizationUsed":"1","Runs":"200","ConstructorArguments":"","Library":"","LicenseType":"MIT","SwarmSource":"bzzr://d486681ed451996a6229b1103732341c5279d4748b52b7d746d4c871730ee38b"}]}