{"status":"1","message":"OK","result":[{"SourceCode":"pragma solidity ^0.4.24;\r\n\r\n// File: contracts/math/SafeMath.sol\r\n\r\n// https://github.com/OpenZeppelin/zeppelin-solidity/blob/master/contracts/math/SafeMath.sol\r\n\r\n// @title SafeMath: overflow/underflow checks\r\n// @notice Math operations with safety checks that throw on error\r\nlibrary SafeMath {\r\n\r\n  // @notice Multiplies two numbers, throws on overflow.\r\n  function mul(uint256 a, uint256 b) internal pure returns (uint256) {\r\n    if (a == 0) {\r\n      return 0;\r\n    }\r\n    uint256 c = a * b;\r\n    assert(c / a == b);\r\n    return c;\r\n  }\r\n\r\n  // @notice Integer division of two numbers, truncating the quotient.\r\n  function div(uint256 a, uint256 b) internal pure returns (uint256) {\r\n    // assert(b > 0); // Solidity automatically throws when dividing by 0\r\n    // uint256 c = a / b;\r\n    // assert(a == b * c + a % b); // There is no case in which this doesn't hold\r\n    return a / b;\r\n  }\r\n\r\n  // @notice Subtracts two numbers, throws on overflow (i.e. if subtrahend is greater than minuend).\r\n  function sub(uint256 a, uint256 b) internal pure returns (uint256) {\r\n    assert(b <= a);\r\n    return a - b;\r\n  }\r\n\r\n  // @notice Adds two numbers, throws on overflow.\r\n  function add(uint256 a, uint256 b) internal pure returns (uint256) {\r\n    uint256 c = a + b;\r\n    assert(c >= a);\r\n    return c;\r\n  }\r\n\r\n  // @notice Returns fractional amount\r\n  function getFractionalAmount(uint256 _amount, uint256 _percentage)\r\n  internal\r\n  pure\r\n  returns (uint256) {\r\n    return div(mul(_amount, _percentage), 100);\r\n  }\r\n\r\n}\r\n\r\n// File: contracts/database/API.sol\r\n\r\ninterface TokenView {\r\n  function totalSupply() external view returns (uint);\r\n  function balanceOf(address _investor) external view returns (uint);\r\n  function valuePerToken() external view returns (uint);\r\n  function scalingFactor() external view returns (uint);\r\n  function assetIncome() external view returns (uint);\r\n  function getERC20() external view returns (address);\r\n}\r\n\r\ninterface DBView {\r\n  function uintStorage(bytes32 _key) external view returns (uint);\r\n  function stringStorage(bytes32 _key) external  view returns (string);\r\n  function addressStorage(bytes32 _key) external  view returns (address);\r\n  function bytesStorage(bytes32 _key) external view returns (bytes);\r\n  function bytes32Storage(bytes32 _key) external view returns (bytes32);\r\n  function boolStorage(bytes32 _key) external view returns (bool);\r\n  function intStorage(bytes32 _key) external view returns (bool);\r\n}\r\n\r\n// @title A contract that gets variables from the _database\r\n// @notice The API contract can only view the database. It has no write privileges\r\ncontract API {\r\n  using SafeMath for uint256;\r\n\r\n  DBView private database;\r\n  uint constant scalingFactor = 10e32;\r\n\r\n  constructor(address _database)\r\n  public {\r\n    database = DBView(_database);\r\n  }\r\n\r\n  function getContract(string _name)\r\n  public\r\n  view\r\n  returns (address) {\r\n    return database.addressStorage(keccak256(abi.encodePacked('contract', _name)));\r\n  }\r\n\r\n  function getAddr(bytes32 _key)\r\n  public\r\n  view\r\n  returns (address) {\r\n    return database.addressStorage(_key);\r\n  }\r\n\r\n  function getUint(bytes32 _key)\r\n  public\r\n  view\r\n  returns (uint) {\r\n    return database.uintStorage(_key);\r\n  }\r\n\r\n  function hashSB(string _a, bytes32 _b)\r\n  public\r\n  pure\r\n  returns (bytes32) {\r\n    return keccak256(abi.encodePacked(_a, _b));\r\n  }\r\n\r\n  function getMethodID(string _functionString)\r\n  public\r\n  pure\r\n  returns (bytes4) {\r\n    return bytes4(keccak256(abi.encodePacked(_functionString)));\r\n  }\r\n\r\n  //////////////////////////////////////////////////////////////////////////////////////////////////////////////////\r\n  //                                        Crowdsale and Assets\r\n  //////////////////////////////////////////////////////////////////////////////////////////////////////////////////\r\n  function getAssetFundingToken(address _assetAddress)\r\n  public\r\n  view\r\n  returns(address) {\r\n    address fundingTokenAddress = TokenView(_assetAddress).getERC20();\r\n    return fundingTokenAddress;\r\n  }\r\n\r\n  // IF we decide not to store assetIncome\r\n  // function getAssetIncome(address _assetAddress)\r\n  // public\r\n  // view\r\n  // returns (uint) {\r\n  //   TokenView asset = TokenView(_assetAddress);\r\n  //   uint valuePerToken =  asset.valuePerToken();\r\n  //   return (valuePerToken * (asset.totalSupply())) / asset.scalingFactor();\r\n  // }\r\n\r\n  function getAssetROI(address _assetAddress)\r\n  public\r\n  view\r\n  returns (uint) {\r\n    TokenView assetToken = TokenView(_assetAddress);\r\n    return (assetToken.assetIncome() * 100) /  assetToken.totalSupply();\r\n  }\r\n\r\n  function getCrowdsaleGoal(address _assetAddress)\r\n  public\r\n  view\r\n  returns(uint) {\r\n    uint fundingGoal = database.uintStorage(keccak256(abi.encodePacked(\"crowdsale.goal\", _assetAddress)));\r\n    return fundingGoal;\r\n  }\r\n\r\n  function getCrowdsaleDeadline(address _assetAddress)\r\n  public\r\n  view\r\n  returns(uint) {\r\n    return database.uintStorage(keccak256(abi.encodePacked(\"crowdsale.deadline\", _assetAddress)));\r\n  }\r\n\r\n  function crowdsaleFinalized(address _assetAddress)\r\n  public\r\n  view\r\n  returns(bool) {\r\n    return database.boolStorage(keccak256(abi.encodePacked(\"crowdsale.finalized\", _assetAddress)));\r\n  }\r\n\r\n  function crowdsalePaid(address _assetAddress)\r\n  public\r\n  view\r\n  returns(bool) {\r\n    return database.boolStorage(keccak256(abi.encodePacked(\"crowdsale.paid\", _assetAddress)));\r\n  }\r\n\r\n  function crowdsaleFailed(address _assetAddress)\r\n  public\r\n  view\r\n  returns(bool) {\r\n    return (now > getCrowdsaleDeadline(_assetAddress) && !crowdsaleFinalized(_assetAddress));\r\n  }\r\n\r\n\r\n  //////////////////////////////////////////////////////////////////////////////////////////////////////////////////\r\n  //                                        Asset Manager and Operator\r\n  //////////////////////////////////////////////////////////////////////////////////////////////////////////////////\r\n\r\n  function getAssetManager(address _assetAddress)\r\n  public\r\n  view\r\n  returns(address) {\r\n    address managerAddress = database.addressStorage(keccak256(abi.encodePacked(\"asset.manager\", _assetAddress)));\r\n    return managerAddress;\r\n  }\r\n\r\n  function getAssetManagerFee(address _assetAddress)\r\n  public\r\n  view\r\n  returns(uint) {\r\n    uint managerFee = database.uintStorage(keccak256(abi.encodePacked(\"asset.managerTokens\", _assetAddress)));\r\n    return managerFee;\r\n  }\r\n\r\n  function getAssetPlatformFee(address _assetAddress)\r\n  public\r\n  view\r\n  returns(uint) {\r\n    uint platformFee = database.uintStorage(keccak256(abi.encodePacked(\"asset.platformTokens\", _assetAddress)));\r\n    return platformFee;\r\n  }\r\n\r\n  function getAssetManagerEscrowID(address _assetAddress, address _manager)\r\n  public\r\n  pure\r\n  returns(bytes32) {\r\n    bytes32 managerEscrowID = keccak256(abi.encodePacked(_assetAddress, _manager));\r\n    return managerEscrowID;\r\n  }\r\n\r\n  function getAssetManagerEscrow(bytes32 _managerEscrowID)\r\n  public\r\n  view\r\n  returns (uint) {\r\n    return database.uintStorage(keccak256(abi.encodePacked(\"asset.escrow\", _managerEscrowID)));\r\n  }\r\n\r\n  function getAssetManagerEscrowRemaining(bytes32 _managerEscrowID)\r\n  public\r\n  view\r\n  returns(uint) {\r\n    uint redeemed = getAssetManagerEscrowRedeemed(_managerEscrowID);\r\n    uint escrow = getAssetManagerEscrow(_managerEscrowID);\r\n    return escrow.sub(redeemed);\r\n  }\r\n\r\n  function getAssetManagerEscrowRedeemed(bytes32 _managerEscrowID)\r\n  public\r\n  view\r\n  returns(uint) {\r\n    uint escrowRedeemed = database.uintStorage(keccak256(abi.encodePacked(\"asset.escrowRedeemed\", _managerEscrowID)));\r\n    return escrowRedeemed;\r\n  }\r\n\r\n  function getAssetModelID(address _assetAddress)\r\n  public\r\n  view\r\n  returns(bytes32) {\r\n    bytes32 modelID = database.bytes32Storage(keccak256(abi.encodePacked(\"asset.modelID\", _assetAddress)));\r\n    return modelID;\r\n  }\r\n\r\n  function getAssetOperator(address _assetAddress)\r\n  public\r\n  view\r\n  returns(address) {\r\n    bytes32 modelID = getAssetModelID(_assetAddress);\r\n    address operatorAddress = getModelOperator(modelID);\r\n    return operatorAddress;\r\n  }\r\n\r\n  function generateOperatorID(string _operatorURI)\r\n  public\r\n  pure\r\n  returns(bytes32) {\r\n    bytes32 operatorID = keccak256(abi.encodePacked(\"operator.uri\", _operatorURI));\r\n    return operatorID;\r\n  }\r\n\r\n  function getOperatorID(address _operatorAddress)\r\n  public\r\n  view\r\n  returns(bytes32) {\r\n    bytes32 operatorID = database.bytes32Storage(keccak256(abi.encodePacked(\"operator\", _operatorAddress)));\r\n    return operatorID;\r\n  }\r\n\r\n  function getOperatorAddress(bytes32 _operatorID)\r\n  public\r\n  view\r\n  returns(address) {\r\n    address operatorAddress = database.addressStorage(keccak256(abi.encodePacked(\"operator\", _operatorID)));\r\n    return operatorAddress;\r\n  }\r\n\r\n  function getOperatorIPFS(bytes32 _operatorID)\r\n  public\r\n  view\r\n  returns(string) {\r\n    return database.stringStorage(keccak256(abi.encodePacked(\"operator.ipfs\", _operatorID)));\r\n  }\r\n\r\n  function generateModelID(string _modelURI, bytes32 _operatorID)\r\n  public\r\n  pure\r\n  returns(bytes32) {\r\n    bytes32 modelID = keccak256(abi.encodePacked('model.id', _operatorID, _modelURI));\r\n    return modelID;\r\n  }\r\n\r\n  function getModelOperator(bytes32 _modelID)\r\n  public\r\n  view\r\n  returns(address) {\r\n    address operatorAddress = database.addressStorage(keccak256(abi.encodePacked(\"model.operator\", _modelID)));\r\n    return operatorAddress;\r\n  }\r\n\r\n  function getModelIPFS(bytes32 _modelID)\r\n  public\r\n  view\r\n  returns(string) {\r\n    return database.stringStorage(keccak256(abi.encodePacked(\"model.ipfs\", _modelID)));\r\n  }\r\n\r\n  function getManagerAssetCount(address _manager)\r\n  public\r\n  view\r\n  returns(uint) {\r\n    return database.uintStorage(keccak256(abi.encodePacked(\"manager.assets\", _manager)));\r\n  }\r\n\r\n  function getCollateralLevel(address _manager)\r\n  public\r\n  view\r\n  returns(uint) {\r\n    return database.uintStorage(keccak256(abi.encodePacked(\"collateral.base\"))).add(database.uintStorage(keccak256(abi.encodePacked(\"collateral.level\", getManagerAssetCount(_manager)))));\r\n  }\r\n\r\n\r\n  //////////////////////////////////////////////////////////////////////////////////////////////////////////////////\r\n  //                                        Platform and Contract State\r\n  //////////////////////////////////////////////////////////////////////////////////////////////////////////////////\r\n//Platform functions\r\n  function getPlatformToken()\r\n  public\r\n  view\r\n  returns(address) {\r\n    address tokenAddress = database.addressStorage(keccak256(abi.encodePacked(\"platform.token\")));\r\n    return tokenAddress;\r\n  }\r\n\r\n  function getPlatformTokenFactory()\r\n  public\r\n  view\r\n  returns(address) {\r\n    address factoryAddress = database.addressStorage(keccak256(abi.encodePacked(\"platform.tokenFactory\")));\r\n    return factoryAddress;\r\n  }\r\n\r\n  function getPlatformFee()\r\n  public\r\n  view\r\n  returns(uint) {\r\n    uint fee = database.uintStorage(keccak256(abi.encodePacked(\"platform.fee\")));\r\n    return fee;\r\n  }\r\n\r\n  function getPlatformPercentage()\r\n  public\r\n  view\r\n  returns(uint) {\r\n    uint percentage = database.uintStorage(keccak256(abi.encodePacked(\"platform.percentage\")));\r\n    return percentage;\r\n  }\r\n\r\n  function getPlatformAssetsWallet()\r\n  public\r\n  view\r\n  returns(address) {\r\n    address walletAddress = database.addressStorage(keccak256(abi.encodePacked(\"platform.wallet.assets\")));\r\n    return walletAddress;\r\n  }\r\n\r\n  function getPlatformFundsWallet()\r\n  public\r\n  view\r\n  returns(address) {\r\n    address walletAddress = database.addressStorage(keccak256(abi.encodePacked(\"platform.wallet.funds\")));\r\n    return walletAddress;\r\n  }\r\n\r\n  function getContractAddress(string _contractName)\r\n  public\r\n  view\r\n  returns(address) {\r\n    address contractAddress = database.addressStorage(keccak256(abi.encodePacked(\"contract\", _contractName)));\r\n    return contractAddress;\r\n  }\r\n\r\n  function contractPaused(address _contract)\r\n  public\r\n  view\r\n  returns(bool) {\r\n    bool status = database.boolStorage(keccak256(abi.encodePacked(\"paused\", _contract)));\r\n    return status;\r\n  }\r\n\r\n  //////////////////////////////////////////////////////////////////////////////////////////////////////////////////\r\n  //                                        Ownership\r\n  //////////////////////////////////////////////////////////////////////////////////////////////////////////////////\r\n\r\n  function contractOwner(address _account)\r\n  public\r\n  view\r\n  returns(bool) {\r\n    bool status = database.boolStorage(keccak256(abi.encodePacked(\"owner\", _account)));\r\n    return status;\r\n  }\r\n\r\n}","ABI":"[{\"constant\":true,\"inputs\":[{\"name\":\"_assetAddress\",\"type\":\"address\"}],\"name\":\"crowdsaleFinalized\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_contractName\",\"type\":\"string\"}],\"name\":\"getContractAddress\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_modelID\",\"type\":\"bytes32\"}],\"name\":\"getModelIPFS\",\"outputs\":[{\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_assetAddress\",\"type\":\"address\"}],\"name\":\"getAssetFundingToken\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_assetAddress\",\"type\":\"address\"}],\"name\":\"getAssetManager\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_assetAddress\",\"type\":\"address\"}],\"name\":\"getCrowdsaleDeadline\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"getPlatformPercentage\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"getPlatformAssetsWallet\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_assetAddress\",\"type\":\"address\"}],\"name\":\"getAssetROI\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_contract\",\"type\":\"address\"}],\"name\":\"contractPaused\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_name\",\"type\":\"string\"}],\"name\":\"getContract\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_functionString\",\"type\":\"string\"}],\"name\":\"getMethodID\",\"outputs\":[{\"name\":\"\",\"type\":\"bytes4\"}],\"payable\":false,\"stateMutability\":\"pure\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_modelURI\",\"type\":\"string\"},{\"name\":\"_operatorID\",\"type\":\"bytes32\"}],\"name\":\"generateModelID\",\"outputs\":[{\"name\":\"\",\"type\":\"bytes32\"}],\"payable\":false,\"stateMutability\":\"pure\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_assetAddress\",\"type\":\"address\"}],\"name\":\"crowdsalePaid\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_key\",\"type\":\"bytes32\"}],\"name\":\"getAddr\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_operatorURI\",\"type\":\"string\"}],\"name\":\"generateOperatorID\",\"outputs\":[{\"name\":\"\",\"type\":\"bytes32\"}],\"payable\":false,\"stateMutability\":\"pure\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_account\",\"type\":\"address\"}],\"name\":\"contractOwner\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_operatorAddress\",\"type\":\"address\"}],\"name\":\"getOperatorID\",\"outputs\":[{\"name\":\"\",\"type\":\"bytes32\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_assetAddress\",\"type\":\"address\"}],\"name\":\"crowdsaleFailed\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"getPlatformFee\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_manager\",\"type\":\"address\"}],\"name\":\"getManagerAssetCount\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_assetAddress\",\"type\":\"address\"}],\"name\":\"getAssetManagerFee\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_operatorID\",\"type\":\"bytes32\"}],\"name\":\"getOperatorIPFS\",\"outputs\":[{\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_managerEscrowID\",\"type\":\"bytes32\"}],\"name\":\"getAssetManagerEscrow\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_assetAddress\",\"type\":\"address\"}],\"name\":\"getCrowdsaleGoal\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_a\",\"type\":\"string\"},{\"name\":\"_b\",\"type\":\"bytes32\"}],\"name\":\"hashSB\",\"outputs\":[{\"name\":\"\",\"type\":\"bytes32\"}],\"payable\":false,\"stateMutability\":\"pure\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_modelID\",\"type\":\"bytes32\"}],\"name\":\"getModelOperator\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_managerEscrowID\",\"type\":\"bytes32\"}],\"name\":\"getAssetManagerEscrowRemaining\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_assetAddress\",\"type\":\"address\"}],\"name\":\"getAssetOperator\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"getPlatformToken\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_managerEscrowID\",\"type\":\"bytes32\"}],\"name\":\"getAssetManagerEscrowRedeemed\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_assetAddress\",\"type\":\"address\"},{\"name\":\"_manager\",\"type\":\"address\"}],\"name\":\"getAssetManagerEscrowID\",\"outputs\":[{\"name\":\"\",\"type\":\"bytes32\"}],\"payable\":false,\"stateMutability\":\"pure\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"getPlatformFundsWallet\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_key\",\"type\":\"bytes32\"}],\"name\":\"getUint\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"getPlatformTokenFactory\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_assetAddress\",\"type\":\"address\"}],\"name\":\"getAssetModelID\",\"outputs\":[{\"name\":\"\",\"type\":\"bytes32\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_manager\",\"type\":\"address\"}],\"name\":\"getCollateralLevel\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_operatorID\",\"type\":\"bytes32\"}],\"name\":\"getOperatorAddress\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_assetAddress\",\"type\":\"address\"}],\"name\":\"getAssetPlatformFee\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"name\":\"_database\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"}]","ContractName":"API","CompilerVersion":"v0.4.24+commit.e67f0147","OptimizationUsed":"1","Runs":"200","ConstructorArguments":"0000000000000000000000005fcebeb70b88e86dd880352684e775b0f4d57c71","Library":"","LicenseType":"GNU GPLv3","SwarmSource":"bzzr://d8b87c60992e35d4e0881e4aa6f6d5116d28ddecee318f1ae631e448b0ed1a54"}]}