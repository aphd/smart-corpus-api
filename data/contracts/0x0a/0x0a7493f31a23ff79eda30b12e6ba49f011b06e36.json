{"status":"1","message":"OK","result":[{"SourceCode":"pragma solidity ^0.6.0;\r\n\r\ninterface TokenInterface {\r\n    function approve(address, uint) external;\r\n    function transfer(address, uint) external;\r\n    function transferFrom(address, address, uint) external;\r\n    function deposit() external payable;\r\n    function withdraw(uint) external;\r\n    function balanceOf(address) external view returns (uint);\r\n}\r\n\r\ninterface ManagerLike {\r\n    function cdpCan(address, uint, address) external view returns (uint);\r\n    function ilks(uint) external view returns (bytes32);\r\n    function last(address) external view returns (uint);\r\n    function count(address) external view returns (uint);\r\n    function owns(uint) external view returns (address);\r\n    function urns(uint) external view returns (address);\r\n    function vat() external view returns (address);\r\n    function open(bytes32, address) external returns (uint);\r\n    function give(uint, address) external;\r\n    function cdpAllow(uint, address, uint) external;\r\n    function urnAllow(address, uint) external;\r\n    function frob(uint, int, int) external;\r\n    function flux(uint, address, uint) external;\r\n    function move(uint, address, uint) external;\r\n    function exit(\r\n        address,\r\n        uint,\r\n        address,\r\n        uint\r\n    ) external;\r\n    function quit(uint, address) external;\r\n    function enter(address, uint) external;\r\n    function shift(uint, uint) external;\r\n}\r\n\r\ninterface VatLike {\r\n    function can(address, address) external view returns (uint);\r\n    function ilks(bytes32) external view returns (uint, uint, uint, uint, uint);\r\n    function dai(address) external view returns (uint);\r\n    function urns(bytes32, address) external view returns (uint, uint);\r\n    function frob(\r\n        bytes32,\r\n        address,\r\n        address,\r\n        address,\r\n        int,\r\n        int\r\n    ) external;\r\n    function hope(address) external;\r\n    function move(address, address, uint) external;\r\n    function gem(bytes32, address) external view returns (uint);\r\n\r\n}\r\n\r\ninterface TokenJoinInterface {\r\n    function dec() external returns (uint);\r\n    function gem() external returns (TokenInterface);\r\n    function join(address, uint) external payable;\r\n    function exit(address, uint) external;\r\n}\r\n\r\ninterface DaiJoinInterface {\r\n    function vat() external returns (VatLike);\r\n    function dai() external returns (TokenInterface);\r\n    function join(address, uint) external payable;\r\n    function exit(address, uint) external;\r\n}\r\n\r\ninterface JugLike {\r\n    function drip(bytes32) external returns (uint);\r\n}\r\n\r\ninterface PotLike {\r\n    function pie(address) external view returns (uint);\r\n    function drip() external returns (uint);\r\n    function join(uint) external;\r\n    function exit(uint) external;\r\n}\r\n\r\ninterface MemoryInterface {\r\n    function getUint(uint _id) external returns (uint _num);\r\n    function setUint(uint _id, uint _val) external;\r\n}\r\n\r\ninterface InstaMapping {\r\n    function gemJoinMapping(bytes32) external view returns (address);\r\n}\r\n\r\ninterface EventInterface {\r\n    function emitEvent(uint _connectorType, uint _connectorID, bytes32 _eventCode, bytes calldata _eventData) external;\r\n}\r\n\r\ncontract DSMath {\r\n\r\n    uint256 constant RAY = 10 ** 27;\r\n    uint constant WAD = 10 ** 18;\r\n\r\n    function add(uint x, uint y) internal pure returns (uint z) {\r\n        require((z = x + y) >= x, \"math-not-safe\");\r\n    }\r\n\r\n    function sub(uint x, uint y) internal pure returns (uint z) {\r\n        require((z = x - y) <= x, \"sub-overflow\");\r\n    }\r\n\r\n    function mul(uint x, uint y) internal pure returns (uint z) {\r\n        require(y == 0 || (z = x * y) / y == x, \"math-not-safe\");\r\n    }\r\n\r\n    function wmul(uint x, uint y) internal pure returns (uint z) {\r\n        z = add(mul(x, y), WAD / 2) / WAD;\r\n    }\r\n\r\n    function wdiv(uint x, uint y) internal pure returns (uint z) {\r\n        z = add(mul(x, WAD), y / 2) / y;\r\n    }\r\n\r\n    function rdiv(uint x, uint y) internal pure returns (uint z) {\r\n        z = add(mul(x, RAY), y / 2) / y;\r\n    }\r\n\r\n    function rmul(uint x, uint y) internal pure returns (uint z) {\r\n        z = add(mul(x, y), RAY / 2) / RAY;\r\n    }\r\n\r\n    function toInt(uint x) internal pure returns (int y) {\r\n        y = int(x);\r\n        require(y >= 0, \"int-overflow\");\r\n    }\r\n\r\n    function toRad(uint wad) internal pure returns (uint rad) {\r\n        rad = mul(wad, 10 ** 27);\r\n    }\r\n\r\n    function convertTo18(address colAddr, uint256 _amt) internal returns (uint256 amt) {\r\n        amt = mul(\r\n            _amt,\r\n            10 ** (18 - TokenJoinInterface(colAddr).dec())\r\n        );\r\n    }\r\n}\r\n\r\n\r\ncontract Helpers is DSMath {\r\n    /**\r\n     * @dev Return ETH Address.\r\n     */\r\n    function getAddressETH() internal pure returns (address) {\r\n        return 0xEeeeeEeeeEeEeeEeEeEeeEEEeeeeEeeeeeeeEEeE;\r\n    }\r\n\r\n    /**\r\n     * @dev Return WETH Address.\r\n     */\r\n    function getAddressWETH() internal pure returns (address) {\r\n        return 0xC02aaA39b223FE8D0A0e5C4F27eAD9083C756Cc2;\r\n    }\r\n\r\n    /**\r\n     * @dev Return InstAaMemory Address.\r\n     */\r\n    function getMemoryAddr() internal pure returns (address) {\r\n        return 0x8a5419CfC711B2343c17a6ABf4B2bAFaBb06957F;\r\n    }\r\n\r\n    /**\r\n     * @dev Return InstaEvent Address.\r\n     */\r\n    function getEventAddr() internal pure returns (address) {\r\n        return 0x2af7ea6Cb911035f3eb1ED895Cb6692C39ecbA97;\r\n    }\r\n\r\n    /**\r\n     * @dev Get Uint value from InstaMemory Contract.\r\n    */\r\n    function getUint(uint getId, uint val) internal returns (uint returnVal) {\r\n        returnVal = getId == 0 ? val : MemoryInterface(getMemoryAddr()).getUint(getId);\r\n    }\r\n\r\n    /**\r\n     * @dev Set Uint value in InstaMemory Contract.\r\n    */\r\n    function setUint(uint setId, uint val) internal {\r\n        if (setId != 0) MemoryInterface(getMemoryAddr()).setUint(setId, val);\r\n    }\r\n\r\n    /**\r\n     * @dev Connector Details\r\n    */\r\n    function connectorID() public pure returns(uint _type, uint _id) {\r\n        (_type, _id) = (1, 4);\r\n    }\r\n}\r\n\r\n\r\ncontract MakerMCDAddresses is Helpers {\r\n    /**\r\n     * @dev Return Maker MCD Manager Address.\r\n    */\r\n    function getMcdManager() internal pure returns (address) {\r\n        return 0x5ef30b9986345249bc32d8928B7ee64DE9435E39;\r\n    }\r\n\r\n    /**\r\n     * @dev Return Maker MCD DAI Address.\r\n    */\r\n    function getMcdDai() internal pure returns (address) {\r\n        return 0x6B175474E89094C44Da98b954EedeAC495271d0F;\r\n    }\r\n\r\n    /**\r\n     * @dev Return Maker MCD DAI_Join Address.\r\n    */\r\n    function getMcdDaiJoin() internal pure returns (address) {\r\n        return 0x9759A6Ac90977b93B58547b4A71c78317f391A28;\r\n    }\r\n\r\n    /**\r\n     * @dev Return Maker MCD Jug Address.\r\n    */\r\n    function getMcdJug() internal pure returns (address) {\r\n        return 0x19c0976f590D67707E62397C87829d896Dc0f1F1;\r\n    }\r\n\r\n    /**\r\n     * @dev Return Maker MCD Pot Address.\r\n    */\r\n    function getMcdPot() internal pure returns (address) {\r\n        return 0x197E90f9FAD81970bA7976f33CbD77088E5D7cf7;\r\n    }\r\n}\r\n\r\ncontract MakerHelpers is MakerMCDAddresses {\r\n    /**\r\n     * @dev Return InstaMapping Address.\r\n     */\r\n    function getMappingAddr() internal pure returns (address) {\r\n        return 0xe81F70Cc7C0D46e12d70efc60607F16bbD617E88;\r\n    }\r\n\r\n    /**\r\n     * @dev Return Close Vault Address.\r\n    */\r\n    function getGiveAddress() internal pure returns (address) {\r\n        return 0x4dD58550eb15190a5B3DfAE28BB14EeC181fC267;\r\n    }\r\n\r\n    /**\r\n     * @dev Get Vault's ilk.\r\n    */\r\n    function getVaultData(address manager, uint vault) internal view returns (bytes32 ilk, address urn) {\r\n        ilk = ManagerLike(manager).ilks(vault);\r\n        urn = ManagerLike(manager).urns(vault);\r\n    }\r\n\r\n    /**\r\n     * @dev Gem Join address is ETH type collateral.\r\n    */\r\n    function isEth(address tknAddr) internal pure returns (bool) {\r\n        return tknAddr == getAddressWETH() ? true : false;\r\n    }\r\n\r\n    /**\r\n     * @dev Maker MCD flux.\r\n    */\r\n    function flux(uint vault, address dst, uint wad) internal {\r\n        ManagerLike(getMcdManager()).flux(vault, dst, wad);\r\n    }\r\n\r\n    /**\r\n     * @dev Maker MCD move.\r\n    */\r\n    function move(uint vault, address dst, uint rad) internal {\r\n        ManagerLike(getMcdManager()).move(vault, dst, rad);\r\n    }\r\n\r\n    /**\r\n     * @dev Maker MCD frob.\r\n    */\r\n    function frob(uint vault, int dink, int dart) internal {\r\n        ManagerLike(getMcdManager()).frob(vault, dink, dart);\r\n    }\r\n\r\n    /**\r\n     * @dev Get Vault Debt Amount.\r\n    */\r\n    function _getVaultDebt(\r\n        address vat,\r\n        bytes32 ilk,\r\n        address urn\r\n    ) internal view returns (uint debt) {\r\n        (, uint rate,,,) = VatLike(vat).ilks(ilk);\r\n        (, uint art) = VatLike(vat).urns(ilk, urn);\r\n        debt = rmul(rate, art);\r\n\r\n    }\r\n\r\n    /**\r\n     * @dev Get Borrow Amount.\r\n    */\r\n    function _getBorrowAmt(\r\n        address vat,\r\n        address urn,\r\n        bytes32 ilk,\r\n        uint amt\r\n    ) internal returns (int dart)\r\n    {\r\n        address jug = getMcdJug();\r\n        uint rate = JugLike(jug).drip(ilk);\r\n        uint dai = VatLike(vat).dai(urn);\r\n        if (dai < mul(amt, RAY)) {\r\n            dart = toInt(sub(mul(amt, RAY), dai) / rate);\r\n            dart = mul(uint(dart), rate) < mul(amt, RAY) ? dart + 1 : dart;\r\n        }\r\n    }\r\n\r\n    /**\r\n     * @dev Get Payback Amount.\r\n    */\r\n    function _getWipeAmt(\r\n        address vat,\r\n        uint amt,\r\n        address urn,\r\n        bytes32 ilk\r\n    ) internal view returns (int dart)\r\n    {\r\n        (, uint rate,,,) = VatLike(vat).ilks(ilk);\r\n        (, uint art) = VatLike(vat).urns(ilk, urn);\r\n        dart = toInt(amt / rate);\r\n        dart = uint(dart) <= art ? - dart : - toInt(art);\r\n    }\r\n\r\n    /**\r\n     * @dev Convert String to bytes32.\r\n    */\r\n    function stringToBytes32(string memory str) internal pure returns (bytes32 result) {\r\n        require(bytes(str).length != 0, \"String-Empty\");\r\n        // solium-disable-next-line security/no-inline-assembly\r\n        assembly {\r\n            result := mload(add(str, 32))\r\n        }\r\n    }\r\n\r\n    /**\r\n     * @dev Get vault ID. If `vault` is 0, get last opened vault.\r\n    */\r\n    function getVault(address manager, uint vault) internal view returns (uint _vault) {\r\n        if (vault == 0) {\r\n            require(ManagerLike(manager).count(address(this)) > 0, \"No-Vault-Opened\");\r\n            _vault = ManagerLike(manager).last(address(this));\r\n        } else {\r\n            _vault = vault;\r\n        }\r\n    }\r\n}\r\n\r\n\r\ncontract BasicResolver is MakerHelpers {\r\n    event LogOpen(uint256 indexed vault, bytes32 indexed ilk);\r\n    event LogClose(uint256 indexed vault, bytes32 indexed ilk);\r\n    event LogDeposit(uint256 indexed vault, bytes32 indexed ilk, uint256 tokenAmt, uint256 getId, uint256 setId);\r\n    event LogWithdraw(uint256 indexed vault, bytes32 indexed ilk, uint256 tokenAmt, uint256 getId, uint256 setId);\r\n    event LogBorrow(uint256 indexed vault, bytes32 indexed ilk, uint256 tokenAmt, uint256 getId, uint256 setId);\r\n    event LogPayback(uint256 indexed vault, bytes32 indexed ilk, uint256 tokenAmt, uint256 getId, uint256 setId);\r\n\r\n    /**\r\n     * @dev Open Vault\r\n     * @param colType Type of Collateral.(eg: 'ETH-A')\r\n    */\r\n    function open(string calldata colType) external payable returns (uint vault) {\r\n        bytes32 ilk = stringToBytes32(colType);\r\n        require(InstaMapping(getMappingAddr()).gemJoinMapping(ilk) != address(0), \"wrong-col-type\");\r\n        vault = ManagerLike(getMcdManager()).open(ilk, address(this));\r\n\r\n        emit LogOpen(vault, ilk);\r\n        bytes32 _eventCode = keccak256(\"LogOpen(uint256,bytes32)\");\r\n        bytes memory _eventParam = abi.encode(vault, ilk);\r\n        (uint _type, uint _id) = connectorID();\r\n        EventInterface(getEventAddr()).emitEvent(_type, _id, _eventCode, _eventParam);\r\n    }\r\n\r\n    /**\r\n     * @dev Close Vault\r\n     * @param vault Vault ID to close.\r\n    */\r\n    function close(uint vault) external payable {\r\n        address manager = getMcdManager();\r\n        uint _vault = getVault(manager, vault);\r\n\r\n        (bytes32 ilk, address urn) = getVaultData(manager, _vault);\r\n\r\n        ManagerLike managerContract = ManagerLike(manager);\r\n\r\n        (uint ink, uint art) = VatLike(managerContract.vat()).urns(ilk, urn);\r\n        require(ink == 0 && art == 0, \"vault-assets-not-0\");\r\n        require(managerContract.owns(_vault) == address(this), \"not-owner\");\r\n\r\n        managerContract.give(_vault, getGiveAddress());\r\n\r\n        emit LogClose(_vault, ilk);\r\n        bytes32 _eventCode = keccak256(\"LogClose(uint256,bytes32)\");\r\n        bytes memory _eventParam = abi.encode(_vault, ilk);\r\n        (uint _type, uint _id) = connectorID();\r\n        EventInterface(getEventAddr()).emitEvent(_type, _id, _eventCode, _eventParam);\r\n    }\r\n\r\n    /**\r\n     * @dev Deposit ETH/ERC20_Token Collateral.\r\n     * @param vault Vault ID.\r\n     * @param amt token amount to deposit.\r\n     * @param getId Get token amount at this ID from `InstaMemory` Contract.\r\n     * @param setId Set token amount at this ID in `InstaMemory` Contract.\r\n    */\r\n    function deposit(\r\n        uint vault,\r\n        uint amt,\r\n        uint getId,\r\n        uint setId\r\n    ) external payable\r\n    {\r\n        address manager = getMcdManager();\r\n        uint _amt = getUint(getId, amt);\r\n        uint _vault = getVault(manager, vault);\r\n        (bytes32 ilk,) = getVaultData(manager, _vault);\r\n\r\n        address colAddr = InstaMapping(getMappingAddr()).gemJoinMapping(ilk);\r\n\r\n        TokenJoinInterface tokenJoinContract = TokenJoinInterface(colAddr);\r\n        TokenInterface tokenContract = tokenJoinContract.gem();\r\n        if (isEth(address(tokenContract))) {\r\n            _amt = _amt == uint(-1) ? address(this).balance : _amt;\r\n            tokenContract.deposit.value(_amt)();\r\n        } else {\r\n            _amt = _amt == uint(-1) ?  tokenContract.balanceOf(address(this)) : _amt;\r\n        }\r\n\r\n        tokenContract.approve(address(colAddr), _amt);\r\n        tokenJoinContract.join(address(this), _amt);\r\n\r\n        ManagerLike managerContract = ManagerLike(manager);\r\n        VatLike(managerContract.vat()).frob(\r\n            managerContract.ilks(_vault),\r\n            managerContract.urns(_vault),\r\n            address(this),\r\n            address(this),\r\n            toInt(convertTo18(colAddr, _amt)),\r\n            0\r\n        );\r\n\r\n        setUint(setId, _amt);\r\n\r\n        emit LogDeposit(_vault, ilk, _amt, getId, setId);\r\n        bytes32 _eventCode = keccak256(\"LogDeposit(uint256,bytes32,uint256,uint256,uint256)\");\r\n        bytes memory _eventParam = abi.encode(_vault, ilk, _amt, getId, setId);\r\n        (uint _type, uint _id) = connectorID();\r\n        EventInterface(getEventAddr()).emitEvent(_type, _id, _eventCode, _eventParam);\r\n    }\r\n\r\n    /**\r\n     * @dev Withdraw ETH/ERC20_Token Collateral.\r\n     * @param vault Vault ID.\r\n     * @param amt token amount to withdraw.\r\n     * @param getId Get token amount at this ID from `InstaMemory` Contract.\r\n     * @param setId Set token amount at this ID in `InstaMemory` Contract.\r\n    */\r\n    function withdraw(\r\n        uint vault,\r\n        uint amt,\r\n        uint getId,\r\n        uint setId\r\n    ) external payable {\r\n        address manager = getMcdManager();\r\n        uint _amt = getUint(getId, amt);\r\n        uint _vault = getVault(manager, vault);\r\n\r\n        (bytes32 ilk, address urn) = getVaultData(manager, _vault);\r\n\r\n        address colAddr = InstaMapping(getMappingAddr()).gemJoinMapping(ilk);\r\n\r\n        (uint ink,) = VatLike(ManagerLike(manager).vat()).urns(ilk, urn);\r\n        _amt = _amt == uint(-1) ? ink : _amt;\r\n        uint _amt18 = convertTo18(colAddr, _amt);\r\n\r\n        frob(\r\n            _vault,\r\n            -toInt(_amt18),\r\n            0\r\n        );\r\n\r\n        flux(\r\n            _vault,\r\n            address(this),\r\n            _amt18\r\n        );\r\n\r\n        TokenInterface tokenContract = TokenJoinInterface(colAddr).gem();\r\n        if (isEth(address(tokenContract))) {\r\n            TokenJoinInterface(colAddr).exit(address(this), _amt);\r\n            tokenContract.withdraw(_amt);\r\n        } else {\r\n            TokenJoinInterface(colAddr).exit(address(this), _amt);\r\n        }\r\n\r\n        setUint(setId, _amt);\r\n\r\n        emit LogWithdraw(_vault, ilk, _amt, getId, setId);\r\n        bytes32 _eventCode = keccak256(\"LogWithdraw(uint256,bytes32,uint256,uint256,uint256)\");\r\n        bytes memory _eventParam = abi.encode(_vault, ilk, _amt, getId, setId);\r\n        (uint _type, uint _id) = connectorID();\r\n        EventInterface(getEventAddr()).emitEvent(_type, _id, _eventCode, _eventParam);\r\n    }\r\n\r\n    /**\r\n     * @dev Borrow DAI.\r\n     * @param vault Vault ID.\r\n     * @param amt token amount to borrow.\r\n     * @param getId Get token amount at this ID from `InstaMemory` Contract.\r\n     * @param setId Set token amount at this ID in `InstaMemory` Contract.\r\n    */\r\n    function borrow(\r\n        uint vault,\r\n        uint amt,\r\n        uint getId,\r\n        uint setId\r\n    ) external payable {\r\n        address manager = getMcdManager();\r\n\r\n        uint _amt = getUint(getId, amt);\r\n        uint _vault = getVault(manager, vault);\r\n\r\n        address daiJoin = getMcdDaiJoin();\r\n        (bytes32 ilk, address urn) = getVaultData(manager, _vault);\r\n\r\n        address vat = ManagerLike(manager).vat();\r\n\r\n        frob(\r\n            _vault,\r\n            0,\r\n            _getBorrowAmt(\r\n                vat,\r\n                urn,\r\n                ilk,\r\n                _amt\r\n            )\r\n        );\r\n\r\n        move(\r\n            _vault,\r\n            address(this),\r\n            toRad(_amt)\r\n        );\r\n\r\n        VatLike vatContract = VatLike(vat);\r\n        if (vatContract.can(address(this), address(daiJoin)) == 0) {\r\n            vatContract.hope(daiJoin);\r\n        }\r\n\r\n        DaiJoinInterface(daiJoin).exit(address(this), _amt);\r\n\r\n        setUint(setId, _amt);\r\n\r\n        emit LogBorrow(_vault, ilk, _amt, getId, setId);\r\n        bytes32 _eventCode = keccak256(\"LogBorrow(uint256,bytes32,uint256,uint256,uint256)\");\r\n        bytes memory _eventParam = abi.encode(_vault, ilk, _amt, getId, setId);\r\n        (uint _type, uint _id) = connectorID();\r\n        EventInterface(getEventAddr()).emitEvent(_type, _id, _eventCode, _eventParam);\r\n    }\r\n\r\n    /**\r\n     * @dev Payback borrowed DAI.\r\n     * @param vault Vault ID.\r\n     * @param amt token amount to payback.\r\n     * @param getId Get token amount at this ID from `InstaMemory` Contract.\r\n     * @param setId Set token amount at this ID in `InstaMemory` Contract.\r\n    */\r\n    function payback(\r\n        uint vault,\r\n        uint amt,\r\n        uint getId,\r\n        uint setId\r\n    ) external payable {\r\n        address manager = getMcdManager();\r\n\r\n        uint _amt = getUint(getId, amt);\r\n        uint _vault = getVault(manager, vault);\r\n        (bytes32 ilk, address urn) = getVaultData(manager, _vault);\r\n\r\n        address vat = ManagerLike(manager).vat();\r\n\r\n        _amt = _amt == uint(-1) ? _getVaultDebt(vat, ilk, urn) : _amt;\r\n\r\n        DaiJoinInterface daiJoinContract = DaiJoinInterface(getMcdDaiJoin());\r\n        daiJoinContract.dai().approve(getMcdDaiJoin(), _amt);\r\n        daiJoinContract.join(urn, _amt);\r\n\r\n        frob(\r\n            _vault,\r\n            0,\r\n            _getWipeAmt(\r\n                vat,\r\n                VatLike(vat).dai(urn),\r\n                urn,\r\n                ilk\r\n            )\r\n        );\r\n\r\n        setUint(setId, _amt);\r\n\r\n        emit LogPayback(_vault, ilk, _amt, getId, setId);\r\n        bytes32 _eventCode = keccak256(\"LogPayback(uint256,bytes32,uint256,uint256,uint256)\");\r\n        bytes memory _eventParam = abi.encode(_vault, ilk, _amt, getId, setId);\r\n        (uint _type, uint _id) = connectorID();\r\n        EventInterface(getEventAddr()).emitEvent(_type, _id, _eventCode, _eventParam);\r\n    }\r\n}\r\n\r\n\r\ncontract BasicExtraResolver is BasicResolver {\r\n    event LogWithdrawLiquidated(uint256 indexed vault, bytes32 indexed ilk, uint256 tokenAmt, uint256 getId, uint256 setId);\r\n\r\n    /**\r\n     * @dev Withdraw leftover ETH/ERC20_Token after Liquidation.\r\n     * @param vault Vault ID.\r\n     * @param amt token amount to Withdraw.\r\n     * @param getId Get token amount at this ID from `InstaMemory` Contract.\r\n     * @param setId Set token amount at this ID in `InstaMemory` Contract.\r\n    */\r\n    function withdrawLiquidated(\r\n        uint vault,\r\n        uint amt,\r\n        uint getId,\r\n        uint setId\r\n    )\r\n    external payable {\r\n        address manager = getMcdManager();\r\n        uint _amt = getUint(getId, amt);\r\n\r\n        (bytes32 ilk, address urn) = getVaultData(manager, vault);\r\n        uint colBal = VatLike(ManagerLike(manager).vat()).gem(ilk, urn);\r\n        address colAddr = InstaMapping(getMappingAddr()).gemJoinMapping(ilk);\r\n\r\n        _amt = _amt == uint(-1) ? colBal : _amt;\r\n\r\n        uint _amt18 = convertTo18(colAddr, _amt);\r\n\r\n        flux(\r\n            vault,\r\n            address(this),\r\n            _amt18\r\n        );\r\n\r\n        TokenJoinInterface tokenJoinContract = TokenJoinInterface(colAddr);\r\n        TokenInterface tokenContract = tokenJoinContract.gem();\r\n        tokenJoinContract.exit(address(this), _amt);\r\n        if (isEth(address(tokenContract))) {\r\n            tokenContract.withdraw(_amt);\r\n        }\r\n\r\n        setUint(setId, _amt);\r\n\r\n        emit LogWithdrawLiquidated(vault, ilk, _amt, getId, setId);\r\n        bytes32 _eventCode = keccak256(\"LogWithdrawLiquidated(uint256,bytes32,uint256,uint256,uint256)\");\r\n        bytes memory _eventParam = abi.encode(vault, ilk, _amt, getId, setId);\r\n        (uint _type, uint _id) = connectorID();\r\n        EventInterface(getEventAddr()).emitEvent(_type, _id, _eventCode, _eventParam);\r\n    }\r\n\r\n}\r\n\r\ncontract DsrResolver is BasicExtraResolver {\r\n    event LogDepositDai(uint256 tokenAmt, uint256 getId, uint256 setId);\r\n    event LogWithdrawDai(uint256 tokenAmt, uint256 getId, uint256 setId);\r\n\r\n    /**\r\n     * @dev Deposit DAI in DSR.\r\n     * @param amt DAI amount to deposit.\r\n     * @param getId Get token amount at this ID from `InstaMemory` Contract.\r\n     * @param setId Set token amount at this ID in `InstaMemory` Contract.\r\n    */\r\n    function depositDai(\r\n        uint amt,\r\n        uint getId,\r\n        uint setId\r\n    ) external payable {\r\n        uint _amt = getUint(getId, amt);\r\n        address pot = getMcdPot();\r\n        address daiJoin = getMcdDaiJoin();\r\n        DaiJoinInterface daiJoinContract = DaiJoinInterface(daiJoin);\r\n\r\n        _amt = _amt == uint(-1) ?\r\n            daiJoinContract.dai().balanceOf(address(this)) :\r\n            _amt;\r\n\r\n        VatLike vat = daiJoinContract.vat();\r\n        PotLike potContract = PotLike(pot);\r\n\r\n        uint chi = potContract.drip();\r\n\r\n        daiJoinContract.dai().approve(daiJoin, _amt);\r\n        daiJoinContract.join(address(this), _amt);\r\n        if (vat.can(address(this), address(pot)) == 0) {\r\n            vat.hope(pot);\r\n        }\r\n        potContract.join(mul(_amt, RAY) / chi);\r\n        setUint(setId, _amt);\r\n\r\n        emit LogDepositDai(_amt, getId, setId);\r\n        bytes32 _eventCode = keccak256(\"LogDepositDai(uint256,uint256,uint256)\");\r\n        bytes memory _eventParam = abi.encode(_amt, getId, setId);\r\n        (uint _type, uint _id) = connectorID();\r\n        EventInterface(getEventAddr()).emitEvent(_type, _id, _eventCode, _eventParam);\r\n    }\r\n\r\n    /**\r\n     * @dev Withdraw DAI from DSR.\r\n     * @param amt DAI amount to withdraw.\r\n     * @param getId Get token amount at this ID from `InstaMemory` Contract.\r\n     * @param setId Set token amount at this ID in `InstaMemory` Contract.\r\n    */\r\n    function withdrawDai(\r\n        uint amt,\r\n        uint getId,\r\n        uint setId\r\n    ) external payable {\r\n        address daiJoin = getMcdDaiJoin();\r\n\r\n        uint _amt = getUint(getId, amt);\r\n\r\n        DaiJoinInterface daiJoinContract = DaiJoinInterface(daiJoin);\r\n        VatLike vat = daiJoinContract.vat();\r\n        PotLike potContract = PotLike(getMcdPot());\r\n\r\n        uint chi = potContract.drip();\r\n        uint pie = _amt == uint(-1) ?\r\n            potContract.pie(address(this)) :\r\n            mul(_amt, RAY) / chi;\r\n\r\n        potContract.exit(pie);\r\n\r\n        uint bal = vat.dai(address(this));\r\n        if (vat.can(address(this), address(daiJoin)) == 0) {\r\n            vat.hope(daiJoin);\r\n        }\r\n        daiJoinContract.exit(\r\n            address(this),\r\n            bal >= mul(_amt, RAY) ? _amt : bal / RAY\r\n        );\r\n\r\n        setUint(setId, _amt);\r\n\r\n        emit LogWithdrawDai(_amt, getId, setId);\r\n        bytes32 _eventCode = keccak256(\"LogWithdrawDai(uint256,uint256,uint256)\");\r\n        bytes memory _eventParam = abi.encode(_amt, getId, setId);\r\n        (uint _type, uint _id) = connectorID();\r\n        EventInterface(getEventAddr()).emitEvent(_type, _id, _eventCode, _eventParam);\r\n    }\r\n}\r\n\r\ncontract ConnectMaker is DsrResolver {\r\n    string public constant name = \"MakerDao-v1\";\r\n}","ABI":"[{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"vault\",\"type\":\"uint256\"},{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"ilk\",\"type\":\"bytes32\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"tokenAmt\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"getId\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"setId\",\"type\":\"uint256\"}],\"name\":\"LogBorrow\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"vault\",\"type\":\"uint256\"},{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"ilk\",\"type\":\"bytes32\"}],\"name\":\"LogClose\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"vault\",\"type\":\"uint256\"},{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"ilk\",\"type\":\"bytes32\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"tokenAmt\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"getId\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"setId\",\"type\":\"uint256\"}],\"name\":\"LogDeposit\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"tokenAmt\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"getId\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"setId\",\"type\":\"uint256\"}],\"name\":\"LogDepositDai\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"vault\",\"type\":\"uint256\"},{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"ilk\",\"type\":\"bytes32\"}],\"name\":\"LogOpen\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"vault\",\"type\":\"uint256\"},{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"ilk\",\"type\":\"bytes32\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"tokenAmt\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"getId\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"setId\",\"type\":\"uint256\"}],\"name\":\"LogPayback\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"vault\",\"type\":\"uint256\"},{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"ilk\",\"type\":\"bytes32\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"tokenAmt\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"getId\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"setId\",\"type\":\"uint256\"}],\"name\":\"LogWithdraw\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"tokenAmt\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"getId\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"setId\",\"type\":\"uint256\"}],\"name\":\"LogWithdrawDai\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"vault\",\"type\":\"uint256\"},{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"ilk\",\"type\":\"bytes32\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"tokenAmt\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"getId\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"setId\",\"type\":\"uint256\"}],\"name\":\"LogWithdrawLiquidated\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"vault\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"amt\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"getId\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"setId\",\"type\":\"uint256\"}],\"name\":\"borrow\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"vault\",\"type\":\"uint256\"}],\"name\":\"close\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"connectorID\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"_type\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_id\",\"type\":\"uint256\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"vault\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"amt\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"getId\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"setId\",\"type\":\"uint256\"}],\"name\":\"deposit\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"amt\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"getId\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"setId\",\"type\":\"uint256\"}],\"name\":\"depositDai\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"colType\",\"type\":\"string\"}],\"name\":\"open\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"vault\",\"type\":\"uint256\"}],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"vault\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"amt\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"getId\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"setId\",\"type\":\"uint256\"}],\"name\":\"payback\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"vault\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"amt\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"getId\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"setId\",\"type\":\"uint256\"}],\"name\":\"withdraw\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"amt\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"getId\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"setId\",\"type\":\"uint256\"}],\"name\":\"withdrawDai\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"vault\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"amt\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"getId\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"setId\",\"type\":\"uint256\"}],\"name\":\"withdrawLiquidated\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"}]","ContractName":"ConnectMaker","CompilerVersion":"v0.6.0+commit.26b70077","OptimizationUsed":"0","Runs":"200","ConstructorArguments":"","Library":"","LicenseType":"MIT","SwarmSource":"ipfs://935d02311128fa8dda0fe78f96fbdc038a29194dcf0678c0b88a8271b69154f3"}]}