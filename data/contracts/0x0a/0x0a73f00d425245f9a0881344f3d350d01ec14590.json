{"status":"1","message":"OK","result":[{"SourceCode":"pragma solidity ^0.5.10;\r\n\r\ncontract Oracle {\r\n    \r\n     /** Contract Constructor\r\n    * @param ethPrice the starting price of ETH in USD, represented as 150000000 = 150.00 USD\r\n    * @dev The message sender is assigned as the contract administrator\r\n    */\r\n    constructor (uint ethPrice) public {\r\n        admins[msg.sender] = true;\r\n        addAsset(\"ETHUSD\", ethPrice);\r\n    }\r\n\r\n    Asset[] public assets;\r\n    uint[8][] private prices; // includes 6 decimal places, 12000000 = 12.000000\r\n    uint[8][] public lastWeekPrices; // includes 6 decimal places, 120000000 = 12.000000\r\n    mapping(address => bool) public admins;\r\n    mapping(address => bool) public readers;\r\n    uint constant DAILY_PRICE_TIME_MIN = 18 hours;  \r\n    uint constant WEEKLY_PRICE_TIME_MIN = 5 days;    \r\n    uint constant EDIT_PRICE_TIME_MAX = 45 minutes;   // allows oracle to rectify obvious mistakes\r\n    \r\n    struct Asset {\r\n        bytes32 name;\r\n        uint lastPriceUpdateTime;\r\n        uint lastSettlePriceTime;\r\n        uint8 currentDay;\r\n        bool isFinalDay;\r\n    }\r\n    \r\n    event AssetAdded(\r\n        uint indexed id,\r\n        bytes32 name,\r\n        uint price\r\n    );\r\n\r\n    event PriceUpdated(\r\n        uint indexed id,\r\n        bytes32 name,\r\n        uint price,\r\n        uint timestamp,\r\n        uint8 dayNumber\r\n    );\r\n\r\n    event SettlePrice(\r\n        uint indexed id,\r\n        bytes32 name,\r\n        uint price,\r\n        uint timestamp,\r\n        uint8 dayNumber\r\n    );\r\n\r\n    event PriceCorrected(\r\n        uint indexed id,\r\n        bytes32 indexed name, \r\n        uint price,\r\n        uint timestamp,\r\n        uint8 dayNumber\r\n    );\r\n    \r\n        modifier onlyAdmin()\r\n    {\r\n        require(admins[msg.sender]);\r\n        _;\r\n    }\r\n    \r\n       /** Grant administrator priviledges to a user\r\n    * @param newAdmin the address to promote\r\n    */\r\n    function addAdmin(address newAdmin)\r\n        public\r\n        onlyAdmin\r\n    {\r\n        admins[newAdmin] = true;\r\n    }\r\n\r\n    /** Add a new asset tracked by the Oracle\r\n    * @param _name the plaintext name of the asset\r\n    * @param _startPrice the starting price of the asset in USD * 10^6, eg 120000 = $0.120000\r\n    * @dev this should usually be called on a Settlement Day\r\n    * @return id the newly assigned ID of the asset\r\n    */\r\n    function addAsset(bytes32 _name, uint _startPrice)\r\n        public\r\n        returns (uint id2)\r\n    {\r\n        require (admins[msg.sender] || msg.sender == address(this));\r\n        // Fill the asset struct\r\n        Asset memory asset;\r\n        asset.name = _name;\r\n        asset.currentDay = 0;\r\n        asset.lastPriceUpdateTime = now;\r\n        asset.lastSettlePriceTime = now - 5 days;\r\n        assets.push(asset);\r\n        // set up price array and LR\r\n        uint[8] memory _prices;\r\n        lastWeekPrices.push(_prices);\r\n        _prices[0] = _startPrice;\r\n        prices.push(_prices);\r\n        emit AssetAdded(assets.length - 1, _name, _startPrice);\r\n        emit PriceUpdated(assets.length - 1, _name, _startPrice, now, asset.currentDay);\r\n        return assets.length - 1;\r\n    }\r\n    \r\n\r\n    /** Quickly fix an erroneous price\r\n    * @param assetID the id of the asset to change\r\n    * @param newPrice the new price to change to\r\n    * @dev this must be called within 30 minutes of the lates price update occurence\r\n    */\r\n    function editPrice(uint assetID, uint newPrice)\r\n        public\r\n        onlyAdmin\r\n    {\r\n        Asset storage asset = assets[assetID];\r\n        require(now < asset.lastPriceUpdateTime + EDIT_PRICE_TIME_MAX);\r\n        prices[assetID][asset.currentDay] = newPrice;\r\n        emit PriceUpdated(assetID, asset.name, newPrice, now, asset.currentDay);\r\n        emit PriceCorrected(assetID, asset.name, newPrice, now, asset.currentDay);\r\n    }\r\n\r\n    /** Grant an address permision to access private information about the assets\r\n    * @param newReader the address of the account to grant reading priviledges\r\n    * @dev this allows the reader to use the getCurrentPricesFunction\r\n    */\r\n    function addReader(address newReader)\r\n        public\r\n        onlyAdmin\r\n    {\r\n        readers[newReader] = true;\r\n    }\r\n    \r\n    /** Return the entire current price array for a given asset\r\n    * @param id the asset id of the desired asset\r\n    * @return currentPrices the price array for the asset\r\n    * @dev only the admin and addresses granted readership may call this function\r\n    */\r\n    function getCurrentPrices(uint id)\r\n        public\r\n        view\r\n        returns (uint[8] memory currentPrices)\r\n    {\r\n        require (admins[msg.sender] || readers[msg.sender]);\r\n        currentPrices = prices[id];\r\n    }\r\n\r\n    /** Return only the latest prices\r\n    * @param id the asset id of the desired asset\r\n    * @return price the latest price of the given asset\r\n    * @dev only the admin or a designated reader may call this function\r\n    */\r\n    function getCurrentPrice(uint id)\r\n        public\r\n        view\r\n        returns (uint price)\r\n    {\r\n        require (admins[msg.sender] || readers[msg.sender]);    \r\n        price =  prices[id][assets[id].currentDay];\r\n    }\r\n\r\n    /** Get the timestamp of the last price update time\r\n    * @param id the asset id of the desired asset\r\n    * @return timestamp the price update timestamp\r\n    */\r\n    function getLastUpdateTime(uint id)\r\n        public\r\n        view\r\n        returns (uint timestamp)\r\n    {\r\n        timestamp = assets[id].lastPriceUpdateTime;\r\n    }\r\n\r\n    /** Get the timestamp of the last settle update time\r\n    * @param id the asset id of the desired asset\r\n    * @return timestamp the settle timestamp\r\n    */\r\n    function getLastSettleTime(uint id)\r\n        public\r\n        view\r\n        returns (uint timestamp)\r\n    {\r\n        timestamp = assets[id].lastSettlePriceTime;\r\n    }\r\n    /*\r\n    * used it setting the starting price on Take\r\n    * setting to 7 tells settlment to ignore for that settlement, as the settlement would be it's start price\r\n    */\r\n    function getPriceDay(uint id)\r\n        public\r\n        view\r\n        returns (uint8 currentday)\r\n    {\r\n        if (assets[id].isFinalDay) currentday = 7;\r\n        else currentday = assets[id].currentDay + 1;\r\n    }\r\n    \r\n    /** Show if the current day is the final price update before settle\r\n    * @param id the asset id of the desired asset\r\n    * @return true if it is the final day, false otherwise\r\n    */\r\n    function isFinalDay(uint id)\r\n        public\r\n        view\r\n        returns (bool)\r\n    {\r\n        return assets[id].isFinalDay;\r\n    }\r\n    \r\n    /** Show if the last price update was a settle price update\r\n    * @param id the asset id of the desired asset\r\n    * @return true if the last update was a settle, false otherwise\r\n    * This makes sure the oracle cannot sneak it a settlement unaware\r\n    */\r\n    function isSettleDay(uint id)\r\n        public\r\n        view\r\n        returns (bool)\r\n    {\r\n        return (assets[id].currentDay == 0);\r\n    }\r\n   \r\n    /** Remove administrator priviledges from a user\r\n    * @param toRemove the address to demote\r\n    * @notice you may not remove yourself\r\n    */\r\n    function removeAdmin(address toRemove)\r\n        public\r\n        onlyAdmin\r\n    {\r\n        require(toRemove != msg.sender);\r\n        admins[toRemove] = false;\r\n    }\r\n    \r\n      /** Publishes an asset price. Does not initiate a settlement.\r\n    * @param assetID the ID of the asset to update\r\n    * @param price the current price of the asset * 10^6\r\n    * @param finalDayStatus true if this is the last intraweek price update (the next will be a settle)\r\n    * @dev this can only be called after the required time has elapsed since the most recent price update\r\n    * @dev if finalDayStatus is true this function cannot be called again until after settle\r\n    */ \r\n    function setIntraweekPrice(uint assetID, uint price, bool finalDayStatus)\r\n        public\r\n        onlyAdmin\r\n    {\r\n        Asset storage asset = assets[assetID];        \r\n        // Prevent price update too early\r\n        require(now > asset.lastPriceUpdateTime + DAILY_PRICE_TIME_MIN);\r\n        require(!asset.isFinalDay);\r\n        asset.currentDay = asset.currentDay + 1;\r\n        asset.lastPriceUpdateTime = now;\r\n        prices[assetID][asset.currentDay] = price;\r\n        asset.isFinalDay = finalDayStatus;\r\n        emit PriceUpdated(assetID, asset.name, price, now, asset.currentDay);\r\n    }\r\n    \r\n    \r\n    /** Publishes a new asset price while updating data for a new week of prices\r\n    * @param assetID the id of the asset to update\r\n    * @param price the current price of the asset * 10^6\r\n    * @dev Moves the current prices into LastWeekPrices, overwriting them\r\n    */\r\n    function setSettlePrice(uint assetID, uint price)\r\n        public\r\n        onlyAdmin\r\n    {\r\n        Asset storage asset = assets[assetID];\r\n        // Timing restrictions to prevent oracle cheating\r\n        require(now > asset.lastPriceUpdateTime + DAILY_PRICE_TIME_MIN);\r\n        require(now > asset.lastSettlePriceTime + WEEKLY_PRICE_TIME_MIN);\r\n        require(asset.isFinalDay);\r\n        // push current prices into previous week\r\n        lastWeekPrices[assetID] = prices[assetID];\r\n        // Set up new price array\r\n        asset.currentDay = 0;\r\n        uint[8] memory newPrices;\r\n        newPrices[0] = price;\r\n        prices[assetID] = newPrices;\r\n        asset.lastPriceUpdateTime = now;\r\n        asset.lastSettlePriceTime = now;\r\n        asset.isFinalDay = false;\r\n        emit PriceUpdated(assetID, asset.name, price, now, asset.currentDay);\r\n        emit SettlePrice(assetID, asset.name, price, now, asset.currentDay);\r\n    }\r\n    \r\n}","ABI":"[{\"constant\":true,\"inputs\":[{\"name\":\"id\",\"type\":\"uint256\"}],\"name\":\"getLastSettleTime\",\"outputs\":[{\"name\":\"timestamp\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"id\",\"type\":\"uint256\"}],\"name\":\"getCurrentPrices\",\"outputs\":[{\"name\":\"currentPrices\",\"type\":\"uint256[8]\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"toRemove\",\"type\":\"address\"}],\"name\":\"removeAdmin\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"id\",\"type\":\"uint256\"}],\"name\":\"isFinalDay\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"uint256\"},{\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"lastWeekPrices\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"address\"}],\"name\":\"admins\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"assetID\",\"type\":\"uint256\"},{\"name\":\"price\",\"type\":\"uint256\"},{\"name\":\"finalDayStatus\",\"type\":\"bool\"}],\"name\":\"setIntraweekPrice\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"address\"}],\"name\":\"readers\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"newAdmin\",\"type\":\"address\"}],\"name\":\"addAdmin\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"assetID\",\"type\":\"uint256\"},{\"name\":\"price\",\"type\":\"uint256\"}],\"name\":\"setSettlePrice\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_name\",\"type\":\"bytes32\"},{\"name\":\"_startPrice\",\"type\":\"uint256\"}],\"name\":\"addAsset\",\"outputs\":[{\"name\":\"id2\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"id\",\"type\":\"uint256\"}],\"name\":\"isSettleDay\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"newReader\",\"type\":\"address\"}],\"name\":\"addReader\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"id\",\"type\":\"uint256\"}],\"name\":\"getPriceDay\",\"outputs\":[{\"name\":\"currentday\",\"type\":\"uint8\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"id\",\"type\":\"uint256\"}],\"name\":\"getCurrentPrice\",\"outputs\":[{\"name\":\"price\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"assets\",\"outputs\":[{\"name\":\"name\",\"type\":\"bytes32\"},{\"name\":\"lastPriceUpdateTime\",\"type\":\"uint256\"},{\"name\":\"lastSettlePriceTime\",\"type\":\"uint256\"},{\"name\":\"currentDay\",\"type\":\"uint8\"},{\"name\":\"isFinalDay\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"assetID\",\"type\":\"uint256\"},{\"name\":\"newPrice\",\"type\":\"uint256\"}],\"name\":\"editPrice\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"id\",\"type\":\"uint256\"}],\"name\":\"getLastUpdateTime\",\"outputs\":[{\"name\":\"timestamp\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"name\":\"ethPrice\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"id\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"name\",\"type\":\"bytes32\"},{\"indexed\":false,\"name\":\"price\",\"type\":\"uint256\"}],\"name\":\"AssetAdded\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"id\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"name\",\"type\":\"bytes32\"},{\"indexed\":false,\"name\":\"price\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"timestamp\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"dayNumber\",\"type\":\"uint8\"}],\"name\":\"PriceUpdated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"id\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"name\",\"type\":\"bytes32\"},{\"indexed\":false,\"name\":\"price\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"timestamp\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"dayNumber\",\"type\":\"uint8\"}],\"name\":\"SettlePrice\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"id\",\"type\":\"uint256\"},{\"indexed\":true,\"name\":\"name\",\"type\":\"bytes32\"},{\"indexed\":false,\"name\":\"price\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"timestamp\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"dayNumber\",\"type\":\"uint8\"}],\"name\":\"PriceCorrected\",\"type\":\"event\"}]","ContractName":"Oracle","CompilerVersion":"v0.5.10+commit.5a6ea5b1","OptimizationUsed":"1","Runs":"200","ConstructorArguments":"000000000000000000000000000000000000000000000000000000000d519390","Library":"","LicenseType":"MIT","SwarmSource":"bzzr://a149010686cd9a716c03ff7f858217049084142fcb1cfe42fd3e440656ee42cb"}]}