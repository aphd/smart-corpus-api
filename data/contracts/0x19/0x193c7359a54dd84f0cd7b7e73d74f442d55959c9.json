{"status":"1","message":"OK","result":[{"SourceCode":"{\"BasicToken.sol\":{\"content\":\"pragma solidity ^0.4.24;\\n\\nimport \\\"./ERC20Basic.sol\\\";\\nimport \\\"./SafeMath.sol\\\";\\n\\ncontract BasicToken is ERC20Basic {\\n  using SafeMath for uint256;\\n\\n  mapping(address =\\u003e uint256) balances;\\n\\n  uint256 totalSupply_;\\n\\n  /**\\n  * @dev total number of tokens in existence\\n  */\\n  function totalSupply() public view returns (uint256) {\\n    return totalSupply_;\\n  }\\n\\n  \\n\\n  /**\\n  * @dev Gets the balance of the specified address.\\n  * @param _owner The address to query the the balance of.\\n  * @return An uint256 representing the amount owned by the passed address.\\n  */\\n  function balanceOf(address _owner) public view returns (uint256 balance) {\\n    return balances[_owner];\\n  }\\n\\n}\"},\"BurnableToken.sol\":{\"content\":\"pragma solidity ^0.4.24;\\n\\nimport \\\"./StandardToken.sol\\\";\\n\\ncontract BurnableToken is StandardToken {\\n\\n  event Burn(address indexed burner, uint256 value);\\n\\n  /**\\n   * @dev Burns a specific amount of tokens.\\n   * @param _value The amount of token to be burned.\\n   */\\n  function burn(uint256 _value) public {\\n    require(_value \\u003c= balances[msg.sender]);\\n    // no need to require value \\u003c= totalSupply, since that would imply the\\n    // sender\\u0027s balance is greater than the totalSupply, which *should* be an assertion failure\\n\\n    address burner = msg.sender;\\n    balances[burner] = balances[burner].sub(_value);\\n    totalSupply_ = totalSupply_.sub(_value);\\n    emit Burn(burner, _value);\\n    emit Transfer(burner, address(0), _value);\\n  }\\n}\"},\"ERC20.sol\":{\"content\":\"pragma solidity ^0.4.24;\\nimport \\\"./ERC20Basic.sol\\\";\\n\\ncontract ERC20 is ERC20Basic {\\n  // Optional token name\\n  string  public  name = \\\"zeosX\\\";\\n  string  public  symbol;\\n  uint256  public  decimals = 18; // standard token precision. override to customize\\n    \\n  function allowance(address owner, address spender) public view returns (uint256);\\n  function transferFrom(address from, address to, uint256 value) public returns (bool);\\n  function approve(address spender, uint256 value) public returns (bool);\\n  event Approval(address indexed owner, address indexed spender, uint256 value);\\n}\"},\"ERC20Basic.sol\":{\"content\":\"pragma solidity ^0.4.24;\\n\\ncontract ERC20Basic {\\n  function totalSupply() public view returns (uint256);\\n  function balanceOf(address who) public view returns (uint256);\\n  function transfer(address to, uint256 value) public returns (bool);\\n  event Transfer(address indexed from, address indexed to, uint256 value);\\n}\"},\"KYCVerification.sol\":{\"content\":\"pragma solidity ^0.4.24;\\n\\nimport \\\"./Owned.sol\\\";\\n\\ncontract KYCVerification is Owned{\\n    \\n    mapping(address =\\u003e bool) public kycAddress;\\n    \\n    event LogKYCVerification(address _kycAddress,bool _status);\\n    \\n    constructor () public {\\n        owner = msg.sender;\\n    }\\n\\n    function updateVerifcationBatch(address[] _kycAddress,bool _status) onlyOwner public returns(bool)\\n    {\\n        for(uint tmpIndex = 0; tmpIndex \\u003c _kycAddress.length; tmpIndex++)\\n        {\\n            kycAddress[_kycAddress[tmpIndex]] = _status;\\n            emit LogKYCVerification(_kycAddress[tmpIndex],_status);\\n        }\\n        \\n        return true;\\n    }\\n    \\n    function updateVerifcation(address _kycAddress,bool _status) onlyOwner public returns(bool)\\n    {\\n        kycAddress[_kycAddress] = _status;\\n        \\n        emit LogKYCVerification(_kycAddress,_status);\\n        \\n        return true;\\n    }\\n    \\n    function isVerified(address _user) view public returns(bool)\\n    {\\n        return kycAddress[_user] == true; \\n    }\\n}\"},\"Owned.sol\":{\"content\":\"pragma solidity ^0.4.24;\\n\\ncontract Owned {\\n    address public owner;\\n\\n    modifier onlyOwner {\\n        require(msg.sender == owner);\\n        _;\\n    }\\n\\n    function transferOwnership(address newOwner) onlyOwner public {\\n        owner = newOwner;\\n    }\\n}\"},\"SafeMath.sol\":{\"content\":\"pragma solidity ^0.4.24;\\n/**\\n * @title SafeMath\\n * @dev Math operations with safety checks that throw on error\\n */\\n \\nlibrary SafeMath {\\n  function mul(uint256 a, uint256 b) internal pure returns (uint256) {\\n    if (a == 0) {\\n      return 0;\\n    }\\n    uint256 c = a * b;\\n    assert(c / a == b);\\n    return c;\\n  }\\n\\n  function div(uint256 a, uint256 b) internal pure returns (uint256) {\\n    // assert(b \\u003e 0); // Solidity automatically throws when dividing by 0\\n    uint256 c = a / b;\\n    // assert(a == b * c + a % b); // There is no case in which this doesn\\u0027t hold\\n    return c;\\n  }\\n\\n  function sub(uint256 a, uint256 b) internal pure returns (uint256) {\\n    assert(b \\u003c= a);\\n    return a - b;\\n  }\\n\\n  function add(uint256 a, uint256 b) internal pure returns (uint256) {\\n    uint256 c = a + b;\\n    assert(c \\u003e= a);\\n    return c;\\n  }\\n}\"},\"StandardToken.sol\":{\"content\":\"pragma solidity ^0.4.24;\\n\\nimport \\\"./ERC20.sol\\\";\\nimport \\\"./BasicToken.sol\\\";\\n\\ncontract StandardToken is ERC20, BasicToken {\\n\\n  mapping (address =\\u003e mapping (address =\\u003e uint256)) internal allowed;\\n\\n  function multiTransfer(address[] _to,uint[] _value) public returns (bool);\\n\\n  /**\\n   * @dev Transfer tokens from one address to another\\n   * @param _from address The address which you want to send tokens from\\n   * @param _to address The address which you want to transfer to\\n   * @param _value uint256 the amount of tokens to be transferred\\n   */\\n  function transferFrom(address _from, address _to, uint256 _value) public returns (bool) {\\n    require(_to != address(0));\\n    require(_value \\u003c= balances[_from]);\\n    require(_value \\u003c= allowed[_from][msg.sender]);\\n\\n    balances[_from] = balances[_from].sub(_value);\\n    balances[_to] = balances[_to].add(_value);\\n    allowed[_from][msg.sender] = allowed[_from][msg.sender].sub(_value);\\n    emit Transfer(_from, _to, _value);\\n    return true;\\n  }\\n\\n  /**\\n   * @dev Approve the passed address to spend the specified amount of tokens on behalf of msg.sender.\\n   *\\n   * Beware that changing an allowance with this method brings the risk that someone may use both the old\\n   * and the new allowance by unfortunate transaction ordering. One possible solution to mitigate this\\n   * race condition is to first reduce the spender\\u0027s allowance to 0 and set the desired value afterwards:\\n   * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n   * @param _spender The address which will spend the funds.\\n   * @param _value The amount of tokens to be spent.\\n   */\\n  function approve(address _spender, uint256 _value) public returns (bool) {\\n    allowed[msg.sender][_spender] = _value;\\n    emit Approval(msg.sender, _spender, _value);\\n    return true;\\n  }\\n\\n  /**\\n   * @dev Function to check the amount of tokens that an owner allowed to a spender.\\n   * @param _owner address The address which owns the funds.\\n   * @param _spender address The address which will spend the funds.\\n   * @return A uint256 specifying the amount of tokens still available for the spender.\\n   */\\n  function allowance(address _owner, address _spender) public view returns (uint256) {\\n    return allowed[_owner][_spender];\\n  }\\n\\n  /**\\n   * @dev Increase the amount of tokens that an owner allowed to a spender.\\n   *\\n   * approve should be called when allowed[_spender] == 0. To increment\\n   * allowed value is better to use this function to avoid 2 calls (and wait until\\n   * the first transaction is mined)\\n   * From MonolithDAO Token.sol\\n   * @param _spender The address which will spend the funds.\\n   * @param _addedValue The amount of tokens to increase the allowance by.\\n   */\\n  function increaseApproval(address _spender, uint _addedValue) public returns (bool) {\\n    allowed[msg.sender][_spender] = allowed[msg.sender][_spender].add(_addedValue);\\n    emit Approval(msg.sender, _spender, allowed[msg.sender][_spender]);\\n    return true;\\n  }\\n\\n  /**\\n   * @dev Decrease the amount of tokens that an owner allowed to a spender.\\n   *\\n   * approve should be called when allowed[_spender] == 0. To decrement\\n   * allowed value is better to use this function to avoid 2 calls (and wait until\\n   * the first transaction is mined)\\n   * From MonolithDAO Token.sol\\n   * @param _spender The address which will spend the funds.\\n   * @param _subtractedValue The amount of tokens to decrease the allowance by.\\n   */\\n  function decreaseApproval(address _spender, uint _subtractedValue) public returns (bool) {\\n    uint oldValue = allowed[msg.sender][_spender];\\n    if (_subtractedValue \\u003e oldValue) {\\n      allowed[msg.sender][_spender] = 0;\\n    } else {\\n      allowed[msg.sender][_spender] = oldValue.sub(_subtractedValue);\\n    }\\n    emit Approval(msg.sender, _spender, allowed[msg.sender][_spender]);\\n    return true;\\n  }\\n\\n}\"},\"UTRAToken.sol\":{\"content\":\"pragma solidity ^0.4.24;\\n/* import \\\"./oraclizeAPI_0.5.sol\\\"; */\\nimport \\\"./Owned.sol\\\";\\nimport \\\"./BurnableToken.sol\\\";\\nimport \\\"./KYCVerification.sol\\\";\\n\\ninterface tokenRecipient { function receiveApproval(address _from, uint256 _value, address _token, bytes _extraData) external; }\\n\\ncontract UTRAToken is Owned, BurnableToken {\\n\\n    string public name = \\\"SurePAY Utility, Transaction, Reward and Access Token.\\\";\\n    string public symbol = \\\"UTRA\\\";\\n    uint8 public decimals = 5;\\n    \\n    uint256 public initialSupply = 8100000000 * (10 ** uint256(decimals));\\n    uint256 public totalSupply = 8100000000 * (10 ** uint256(decimals));\\n    uint256 public externalAuthorizePurchase = 0;\\n    \\n    \\n    mapping (address =\\u003e bool) public frozenAccount;\\n    mapping(address =\\u003e uint8) authorizedCaller;\\n    mapping (address =\\u003e bool) public lockingEnabled;\\n    \\n    bool public kycEnabled = true;\\n\\n    KYCVerification public kycVerification;\\n\\n    event KYCMandateUpdate(bool _kycEnabled);\\n    event KYCContractAddressUpdate(KYCVerification _kycAddress);\\n    event LockFunds(address _buyer,bool _status);\\n\\n\\n    modifier onlyAuthCaller(){\\n        require(authorizedCaller[msg.sender] == 1 || msg.sender == owner);\\n        _;\\n    }\\n    \\n    /*\\n        check locking status of user address.\\n    */\\n    modifier lockingVerified(address _guy) {\\n        if(lockingEnabled[_guy] == true){\\n            revert(\\\"Account is locked\\\");\\n        }\\n        _;\\n    }\\n    \\n    modifier kycVerified(address _guy) {\\n      if(kycEnabled == true){\\n          if(kycVerification.isVerified(_guy) == false)\\n          {\\n              revert(\\\"KYC Not Verified\\\");\\n          }\\n      }\\n      _;\\n    }\\n    \\n     modifier frozenVerified(address _guy) {\\n        if(frozenAccount[_guy] == true)\\n        {\\n            revert(\\\"Account is freeze\\\");\\n        }\\n        _;\\n    }\\n\\n    function updateKycContractAddress(KYCVerification _kycAddress) public onlyOwner returns(bool)\\n    {\\n      kycVerification = _kycAddress;\\n\\n      emit KYCContractAddressUpdate(_kycAddress);\\n\\n      return true;\\n    }\\n\\n    function updateKycMandate(bool _kycEnabled) public onlyAuthCaller returns(bool)\\n    {\\n        kycEnabled = _kycEnabled;\\n        emit KYCMandateUpdate(_kycEnabled);\\n        return true;\\n    }\\n    \\n    function forceUpdateLockStatus(address _holder,bool _lock) public onlyAuthCaller returns(bool)\\n    {\\n        lockingEnabled[_holder] = _lock;\\n        emit LockFunds(_holder, _lock);\\n        return true;\\n    }\\n\\n    /* This generates a public event on the blockchain that will notify clients */\\n    event FrozenFunds(address target, bool frozen);\\n    \\n    /* Events */\\n    event AuthorizedCaller(address caller);\\n    event DeAuthorizedCaller(address caller);\\n\\n    /* Initializes contract with initial supply tokens to the creator of the contract */\\n    constructor() public {\\n        owner = msg.sender;\\n        balances[0x49156f159aAf87207fD54401eB1F73974968768C] = totalSupply;\\n        \\n        /* unlock totalSupply holder account */\\n        \\n        lockingEnabled[0x49156f159aAf87207fD54401eB1F73974968768C] = false;\\n        \\n        emit Transfer(address(0x0), address(this), totalSupply);\\n        emit Transfer(address(this), address(0x49156f159aAf87207fD54401eB1F73974968768C), totalSupply);\\n            \\n        authorizedCaller[msg.sender] = 1;\\n        emit AuthorizedCaller(msg.sender);\\n    }\\n    \\n    /* authorize caller */\\n    function authorizeCaller(address _caller) public onlyOwner returns(bool) \\n    {\\n        authorizedCaller[_caller] = 1;\\n        emit AuthorizedCaller(_caller);\\n        return true;\\n    }\\n    \\n    /* deauthorize caller */\\n    function deAuthorizeCaller(address _caller) public onlyOwner returns(bool) \\n    {\\n        authorizedCaller[_caller] = 0;\\n        emit DeAuthorizedCaller(_caller);\\n        return true;\\n    }\\n    \\n    function () payable public {\\n        revert();\\n    }\\n    \\n\\n    /* Internal transfer, only can be called by this contract */\\n    function _transfer(address _from, address _to, uint _value) internal {\\n        require (_to != 0x0);                               // Prevent transfer to 0x0 address. Use burn() instead\\n        require (balances[_from] \\u003e _value);                // Check if the sender has enough\\n        require (balances[_to].add(_value) \\u003e balances[_to]); // Check for overflow\\n        balances[_from] = balances[_from].sub(_value);                         // Subtract from the sender\\n        balances[_to] = balances[_to].add(_value);                           // Add the same to the recipient\\n        emit Transfer(_from, _to, _value);\\n    }\\n\\n    /// @notice Create `mintedAmount` tokens and send it to `target`\\n    /// @param target Address to receive the tokens\\n    /// @param mintedAmount the amount of tokens it will receive\\n    function mintToken(address target, uint256 mintedAmount) onlyOwner public {\\n        balances[target] = balances[target].add(mintedAmount);\\n        totalSupply = totalSupply.add(mintedAmount);\\n        emit Transfer(0, this, mintedAmount);\\n        emit Transfer(this, target, mintedAmount);\\n    }\\n\\n    /// @notice `freeze? Prevent | Allow` `target` from sending \\u0026 receiving tokens\\n    /// @param target Address to be frozen\\n    /// @param freeze either to freeze it or not\\n    function freezeAccount(address target, bool freeze) onlyOwner public {\\n        frozenAccount[target] = freeze;\\n        emit FrozenFunds(target, freeze);\\n    }\\n\\n\\n    function purchaseToken(address _receiver, uint _tokens) onlyAuthCaller public {\\n        require(_tokens \\u003e 0);\\n        require(initialSupply \\u003e _tokens);\\n        \\n        lockingEnabled[_receiver] = true;\\n        emit LockFunds(_receiver, true);\\n        \\n        initialSupply = initialSupply.sub(_tokens);\\n        _transfer(owner, _receiver, _tokens);              // makes the transfers\\n        externalAuthorizePurchase = externalAuthorizePurchase.add(_tokens);\\n    }\\n\\n    /**\\n      * @dev transfer token for a specified address\\n      * @param _to The address to transfer to.\\n      * @param _value The amount to be transferred.\\n    */\\n    function transfer(address _to, uint256 _value) public kycVerified(msg.sender) frozenVerified(msg.sender) lockingVerified(msg.sender)  returns (bool) {\\n        _transfer(msg.sender,_to,_value);\\n        return true;\\n    }\\n    \\n    /*\\n        Please make sure before calling this function from UI, Sender has sufficient balance for \\n        All transfers \\n    */\\n    function multiTransfer(address[] _to,uint[] _value) public kycVerified(msg.sender) frozenVerified(msg.sender) lockingVerified(msg.sender) returns (bool) {\\n        require(_to.length == _value.length, \\\"Length of Destination should be equal to value\\\");\\n        for(uint _interator = 0;_interator \\u003c _to.length; _interator++ )\\n        {\\n            _transfer(msg.sender,_to[_interator],_value[_interator]);\\n        }\\n        return true;    \\n    }\\n    \\n    /*\\n        Lock user address\\n    */\\n    function lockUserAddress() public returns(bool){\\n        lockingEnabled[msg.sender] = true;\\n        emit LockFunds(msg.sender, true);\\n    }\\n    \\n    /*\\n        Unlock User Address\\n    */\\n    function unlockUserAddress() public returns(bool){\\n        lockingEnabled[msg.sender] = false;\\n        emit LockFunds(msg.sender, false);\\n    }\\n}\\n\"}}","ABI":"[{\"constant\":true,\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_spender\",\"type\":\"address\"},{\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_caller\",\"type\":\"address\"}],\"name\":\"deAuthorizeCaller\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_receiver\",\"type\":\"address\"},{\"name\":\"_tokens\",\"type\":\"uint256\"}],\"name\":\"purchaseToken\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_to\",\"type\":\"address[]\"},{\"name\":\"_value\",\"type\":\"uint256[]\"}],\"name\":\"multiTransfer\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_from\",\"type\":\"address\"},{\"name\":\"_to\",\"type\":\"address\"},{\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_caller\",\"type\":\"address\"}],\"name\":\"authorizeCaller\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"decimals\",\"outputs\":[{\"name\":\"\",\"type\":\"uint8\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"initialSupply\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"burn\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"address\"}],\"name\":\"lockingEnabled\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_spender\",\"type\":\"address\"},{\"name\":\"_subtractedValue\",\"type\":\"uint256\"}],\"name\":\"decreaseApproval\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"kycVerification\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_owner\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"name\":\"balance\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"target\",\"type\":\"address\"},{\"name\":\"mintedAmount\",\"type\":\"uint256\"}],\"name\":\"mintToken\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_kycAddress\",\"type\":\"address\"}],\"name\":\"updateKycContractAddress\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"externalAuthorizePurchase\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"unlockUserAddress\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_holder\",\"type\":\"address\"},{\"name\":\"_lock\",\"type\":\"bool\"}],\"name\":\"forceUpdateLockStatus\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"kycEnabled\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_to\",\"type\":\"address\"},{\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"address\"}],\"name\":\"frozenAccount\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"lockUserAddress\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_kycEnabled\",\"type\":\"bool\"}],\"name\":\"updateKycMandate\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_spender\",\"type\":\"address\"},{\"name\":\"_addedValue\",\"type\":\"uint256\"}],\"name\":\"increaseApproval\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_owner\",\"type\":\"address\"},{\"name\":\"_spender\",\"type\":\"address\"}],\"name\":\"allowance\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"target\",\"type\":\"address\"},{\"name\":\"freeze\",\"type\":\"bool\"}],\"name\":\"freezeAccount\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"fallback\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"_kycEnabled\",\"type\":\"bool\"}],\"name\":\"KYCMandateUpdate\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"_kycAddress\",\"type\":\"address\"}],\"name\":\"KYCContractAddressUpdate\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"_buyer\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"_status\",\"type\":\"bool\"}],\"name\":\"LockFunds\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"target\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"frozen\",\"type\":\"bool\"}],\"name\":\"FrozenFunds\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"caller\",\"type\":\"address\"}],\"name\":\"AuthorizedCaller\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"caller\",\"type\":\"address\"}],\"name\":\"DeAuthorizedCaller\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"burner\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Burn\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"spender\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"}]","ContractName":"UTRAToken","CompilerVersion":"v0.4.24+commit.e67f0147","OptimizationUsed":"0","Runs":"200","ConstructorArguments":"","Library":"","LicenseType":"MIT","SwarmSource":"bzzr://a44f35fb4fc4af0fa68e4fb5ca19297275c4676caac92c9a30c6bf7fd9a59762"}]}