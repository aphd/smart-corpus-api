{"status":"1","message":"OK","result":[{"SourceCode":"// Copyright (C) 2020 Zerion Inc. <https://zerion.io>\r\n//\r\n// This program is free software: you can redistribute it and/or modify\r\n// it under the terms of the GNU General Public License as published by\r\n// the Free Software Foundation, either version 3 of the License, or\r\n// (at your option) any later version.\r\n//\r\n// This program is distributed in the hope that it will be useful,\r\n// but WITHOUT ANY WARRANTY; without even the implied warranty of\r\n// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the\r\n// GNU General Public License for more details.\r\n//\r\n// You should have received a copy of the GNU General Public License\r\n// along with this program. If not, see <https://www.gnu.org/licenses/>.\r\n\r\npragma solidity 0.6.5;\r\npragma experimental ABIEncoderV2;\r\n\r\n\r\ninterface ERC20 {\r\n    function symbol() external view returns (string memory);\r\n    function decimals() external view returns (uint8);\r\n    function totalSupply() external view returns (uint256);\r\n}\r\n\r\n\r\nstruct TokenMetadata {\r\n    address token;\r\n    string name;\r\n    string symbol;\r\n    uint8 decimals;\r\n}\r\n\r\n\r\nstruct Component {\r\n    address token;\r\n    string tokenType;\r\n    uint256 rate;\r\n}\r\n\r\n\r\n/**\r\n * @title Token adapter interface.\r\n * @dev getMetadata() and getComponents() functions MUST be implemented.\r\n * @author Igor Sobolev <sobolev@zerion.io>\r\n */\r\ninterface TokenAdapter {\r\n\r\n    /**\r\n     * @dev MUST return TokenMetadata struct with ERC20-style token info.\r\n     * struct TokenMetadata {\r\n     *     address token;\r\n     *     string name;\r\n     *     string symbol;\r\n     *     uint8 decimals;\r\n     * }\r\n     */\r\n    function getMetadata(address token) external view returns (TokenMetadata memory);\r\n\r\n    /**\r\n    * @dev MUST return array of Component structs with underlying tokens rates for the given token.\r\n    * struct Component {\r\n    *     address token;    // Address of token contract\r\n    *     string tokenType; // Token type (\"ERC20\" by default)\r\n    *     uint256 rate;     // Price per share (1e18)\r\n    * }\r\n    */\r\n    function getComponents(address token) external view returns (Component[] memory);\r\n}\r\n\r\n\r\n/**\r\n * @dev BPool contract interface.\r\n * Only the functions required for UniswapAdapter contract are added.\r\n * The BPool contract is available here\r\n * github.com/balancer-labs/balancer-core/blob/master/contracts/BPool.sol.\r\n */\r\ninterface BPool {\r\n    function getFinalTokens() external view returns (address[] memory);\r\n    function getBalance(address) external view returns (uint256);\r\n    function getNormalizedWeight(address) external view returns (uint256);\r\n}\r\n\r\n\r\n/**\r\n * @title Token adapter for Balancer pool tokens.\r\n * @dev Implementation of TokenAdapter interface.\r\n * @author Igor Sobolev <sobolev@zerion.io>\r\n */\r\ncontract BalancerTokenAdapter is TokenAdapter {\r\n\r\n\r\n    /**\r\n     * @return TokenMetadata struct with ERC20-style token info.\r\n     * @dev Implementation of TokenAdapter interface function.\r\n     */\r\n    function getMetadata(address token) external view override returns (TokenMetadata memory) {\r\n        return TokenMetadata({\r\n            token: token,\r\n            name: getPoolName(token),\r\n            symbol: ERC20(token).symbol(),\r\n            decimals: ERC20(token).decimals()\r\n        });\r\n    }\r\n\r\n    /**\r\n     * @return Array of Component structs with underlying tokens rates for the given asset.\r\n     * @dev Implementation of TokenAdapter interface function.\r\n     */\r\n    function getComponents(address token) external view override returns (Component[] memory) {\r\n        address[] memory underlyingTokensAddresses;\r\n        try BPool(token).getFinalTokens() returns (address[] memory result) {\r\n            underlyingTokensAddresses = result;\r\n        } catch {\r\n            underlyingTokensAddresses = new address[](0);\r\n        }\r\n\r\n        uint256 totalSupply = ERC20(token).totalSupply();\r\n\r\n        Component[] memory underlyingTokens = new Component[](underlyingTokensAddresses.length);\r\n\r\n        for (uint256 i = 0; i < underlyingTokens.length; i++) {\r\n            address underlyingToken = underlyingTokensAddresses[i];\r\n            underlyingTokens[i] = Component({\r\n                token: underlyingToken,\r\n                tokenType: \"ERC20\",\r\n                rate: BPool(token).getBalance(underlyingToken) * 1e18 / totalSupply\r\n            });\r\n        }\r\n\r\n        return underlyingTokens;\r\n    }\r\n\r\n    function getPoolName(address token) internal view returns (string memory) {\r\n        address[] memory underlyingTokensAddresses;\r\n        try BPool(token).getFinalTokens() returns (address[] memory result) {\r\n            underlyingTokensAddresses = result;\r\n        } catch {\r\n            return \"Unknown pool\";\r\n        }\r\n\r\n        string memory poolName = \"\";\r\n        uint256 lastIndex = underlyingTokensAddresses.length - 1;\r\n        for (uint256 i = 0; i < underlyingTokensAddresses.length; i++) {\r\n            poolName = string(abi.encodePacked(\r\n                poolName,\r\n                getPoolElement(token, underlyingTokensAddresses[i]),\r\n                i == lastIndex ? \" pool\" : \" + \"\r\n            ));\r\n        }\r\n        return poolName;\r\n    }\r\n\r\n    function getPoolElement(address pool, address token) internal view returns (string memory) {\r\n        return string(abi.encodePacked(\r\n            convertToString(BPool(pool).getNormalizedWeight(token) / 1e16),\r\n            \"% \",\r\n            getSymbol(token)\r\n        ));\r\n    }\r\n\r\n    function getSymbol(address token) internal view returns (string memory) {\r\n        (, bytes memory returnData) = token.staticcall(\r\n            abi.encodeWithSelector(ERC20(token).symbol.selector)\r\n        );\r\n\r\n        if (returnData.length == 32) {\r\n            return convertToString(abi.decode(returnData, (bytes32)));\r\n        } else {\r\n            return abi.decode(returnData, (string));\r\n        }\r\n    }\r\n\r\n    /**\r\n     * @dev Internal function to convert bytes32 to string and trim zeroes.\r\n     */\r\n    function convertToString(bytes32 data) internal pure returns (string memory) {\r\n        uint256 length = 0;\r\n        bytes memory result;\r\n\r\n        for (uint256 i = 0; i < 32; i++) {\r\n            if (data[i] != bytes1(0)) {\r\n                length++;\r\n            }\r\n        }\r\n\r\n        result = new bytes(length);\r\n\r\n        for (uint256 i = 0; i < length; i++) {\r\n            result[i] = data[i];\r\n        }\r\n\r\n        return string(result);\r\n    }\r\n\r\n    /**\r\n     * @dev Internal function to convert uint256 to string and trim zeroes.\r\n     */\r\n    function convertToString(uint256 data) internal pure returns (string memory) {\r\n        uint256 length = 0;\r\n\r\n        uint256 dataCopy = data;\r\n        while (dataCopy != 0){\r\n            length++;\r\n            dataCopy /= 10;\r\n        }\r\n\r\n        bytes memory result = new bytes(length);\r\n        dataCopy = data;\r\n        for (uint256 i = length - 1; i < length; i--) {\r\n            result[i] = bytes1(uint8(48 + dataCopy % 10));\r\n            dataCopy /= 10;\r\n        }\r\n\r\n        return string(result);\r\n    }\r\n}","ABI":"[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"}],\"name\":\"getComponents\",\"outputs\":[{\"components\":[{\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"},{\"internalType\":\"string\",\"name\":\"tokenType\",\"type\":\"string\"},{\"internalType\":\"uint256\",\"name\":\"rate\",\"type\":\"uint256\"}],\"internalType\":\"struct Component[]\",\"name\":\"\",\"type\":\"tuple[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"}],\"name\":\"getMetadata\",\"outputs\":[{\"components\":[{\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"},{\"internalType\":\"string\",\"name\":\"name\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"symbol\",\"type\":\"string\"},{\"internalType\":\"uint8\",\"name\":\"decimals\",\"type\":\"uint8\"}],\"internalType\":\"struct TokenMetadata\",\"name\":\"\",\"type\":\"tuple\"}],\"stateMutability\":\"view\",\"type\":\"function\"}]","ContractName":"BalancerTokenAdapter","CompilerVersion":"v0.6.5+commit.f956cc89","OptimizationUsed":"1","Runs":"200","ConstructorArguments":"","Library":"","LicenseType":"GNU LGPLv3","SwarmSource":"ipfs://f26ba7b726054eb78ca44e789af21bbc17ab83db500f1daa425dfd85c5398db6"}]}