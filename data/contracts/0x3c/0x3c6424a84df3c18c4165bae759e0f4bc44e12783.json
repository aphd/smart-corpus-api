{"status":"1","message":"OK","result":[{"SourceCode":"pragma solidity >= 0.5.0;\r\n\r\n\r\n// Token contract - ALLBEBET Token\r\n// https://allbebet.bet\r\n// SPORTS BETTING PLATFORM \r\n\r\n// ___¶¶¶____________¶¶¶¶¶¶¶\r\n//__¶¶¶¶__________¶¶¶¶¶¶¶¶¶¶¶\r\n//_¶¶¶¶¶_________¶¶¶¶¶¶¶¶¶¶¶¶¶\r\n//__¶¶¶¶_________¶¶¶¶¶¶¶¶¶¶¶¶¶\r\n//_¶¶¶¶¶_________¶¶¶¶¶¶¶¶¶¶¶¶¶\r\n//¶¶¶¶¶¶¶_________¶¶¶¶¶¶¶¶¶¶¶\r\n//¶¶¶¶¶¶¶¶_________¶¶¶¶¶¶¶¶¶\r\n//¶¶¶¶¶¶¶¶¶\r\n//____¶¶¶¶¶¶¶\r\n//______¶¶¶¶¶¶¶\r\n//_______¶¶¶¶¶¶¶\r\n//________¶¶¶¶¶¶¶______¶¶¶¶\r\n//_________¶¶¶¶¶¶¶¶_____¶¶¶¶_____¶¶¶¶¶\r\n//__________¶¶¶¶¶¶¶¶¶_____¶¶¶___¶¶¶¶¶¶¶\r\n//___________¶¶¶¶¶¶¶¶¶_____¶¶¶___¶¶¶¶¶¶¶\r\n//_____________¶¶¶¶¶¶¶¶¶____¶¶¶¶_¶¶¶¶¶¶¶\r\n//_______________¶¶¶¶¶¶¶¶_____¶¶¶¶¶¶¶¶¶¶\r\n//________________¶¶¶¶¶¶¶¶¶¶___¶¶¶¶¶¶¶¶¶¶¶¶¶\r\n//________________¶¶¶¶¶¶¶¶¶¶¶¶¶¶¶¶¶¶¶¶¶¶¶¶¶¶¶\r\n//_________________¶¶¶¶¶¶¶¶¶¶¶¶¶¶¶¶¶¶¶¶¶¶¶¶¶¶\r\n//_______________¶¶¶¶¶¶¶¶¶¶¶¶¶¶¶¶¶¶¶¶¶¶¶¶¶¶¶¶\r\n//___________¶¶¶¶¶¶¶¶¶¶¶¶¶¶¶¶¶¶¶¶¶¶¶¶¶¶¶¶¶¶¶\r\n//_____¶¶¶¶¶¶¶¶¶¶¶__¶¶¶¶¶¶¶¶¶¶¶¶¶¶¶¶¶¶¶¶¶¶¶\r\n//___¶¶¶¶¶¶¶________¶¶¶¶¶¶¶¶¶¶¶¶¶¶¶¶¶¶¶¶¶¶\r\n//___¶¶¶¶____________¶¶¶¶¶¶¶¶¶¶¶¶¶¶¶¶¶¶\r\n//____________________¶¶¶¶¶¶¶¶¶¶¶¶¶¶¶\r\n//_____________________¶¶¶¶¶¶¶¶¶¶¶¶¶\r\n//_____________________¶¶¶¶¶¶¶¶¶¶¶¶¶\r\n//_____________________¶¶¶¶¶¶¶¶¶¶¶¶\r\n//_____________________¶¶¶¶¶¶¶¶¶¶¶¶\r\n//______________________¶¶¶¶¶¶¶¶¶¶¶\r\n//_______________________¶¶¶¶¶¶¶¶¶\r\n//________________________¶¶¶¶¶¶¶\r\n//_______________________¶¶¶¶¶¶¶\r\n//______________________¶¶¶¶¶¶¶\r\n//_____________________¶¶¶¶¶¶¶\r\n//____________________¶¶¶¶¶¶¶\r\n//___________________¶¶¶¶¶¶¶\r\n//___________________¶¶¶¶¶¶¶\r\n//__________________¶¶¶¶¶¶\r\n//_________________¶¶¶¶¶¶\r\n//________________¶¶¶¶¶¶\r\n//_______________¶¶¶¶¶\r\n//______________¶¶¶¶¶\r\n//___________¶¶¶¶¶¶\r\n//__________¶¶¶¶¶¶¶\r\n//___________¶¶¶¶¶¶\r\n//___________¶¶¶¶¶¶\r\n//___________¶¶¶¶¶\r\n//_____________¶¶¶\r\n/**\r\n * @title SafeMath\r\n * @dev Unsigned math operations with safety checks that revert on error\r\n */\r\nlibrary SafeMath {\r\n    /**\r\n    * @dev Multiplies two unsigned integers, reverts on overflow.\r\n    */\r\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        // Gas optimization: this is cheaper than requiring 'a' not being zero, but the\r\n        // benefit is lost if 'b' is also tested.\r\n        // See: https://github.com/OpenZeppelin/openzeppelin-solidity/pull/522\r\n        if (a == 0) {\r\n            return 0;\r\n        }\r\n\r\n        uint256 c = a * b;\r\n        require(c / a == b, \"Safe mul error\");\r\n\r\n        return c;\r\n    }\r\n\r\n    /**\r\n    * @dev Integer division of two unsigned integers truncating the quotient, reverts on division by zero.\r\n    */\r\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        // Solidity only automatically asserts when dividing by 0\r\n        require(b > 0, \"Safe div error\");\r\n        uint256 c = a / b;\r\n        // assert(a == b * c + a % b); // There is no case in which this doesn't hold\r\n\r\n        return c;\r\n    }\r\n\r\n    /**\r\n    * @dev Subtracts two unsigned integers, reverts on overflow (i.e. if subtrahend is greater than minuend).\r\n    */\r\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        require(b <= a, \"Safe sub error\");\r\n        uint256 c = a - b;\r\n\r\n        return c;\r\n    }\r\n\r\n    /**\r\n    * @dev Adds two unsigned integers, reverts on overflow.\r\n    */\r\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        uint256 c = a + b;\r\n        require(c >= a, \"Safe add error\");\r\n\r\n        return c;\r\n    }\r\n\r\n    /**\r\n    * @dev Divides two unsigned integers and returns the remainder (unsigned integer modulo),\r\n    * reverts when dividing by zero.\r\n    */\r\n    function mod(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        require(b != 0, \"Safe mod error\");\r\n        return a % b;\r\n    }\r\n}\r\n\r\n/**\r\n * @title Elliptic curve signature operations\r\n * @dev Based on https://gist.github.com/axic/5b33912c6f61ae6fd96d6c4a47afde6d\r\n * TODO Remove this library once solidity supports passing a signature to ecrecover.\r\n * See https://github.com/ethereum/solidity/issues/864\r\n */\r\n\r\nlibrary ECDSA {\r\n    /**\r\n     * @dev Recover signer address from a message by using their signature\r\n     * @param hash bytes32 message, the hash is the signed message. What is recovered is the signer address.\r\n     * @param signature bytes signature, the signature is generated using web3.eth.sign()\r\n     */\r\n    function recover(bytes32 hash, bytes memory signature) internal pure returns (address) {\r\n        bytes32 r;\r\n        bytes32 s;\r\n        uint8 v;\r\n\r\n        // Check the signature length\r\n        if (signature.length != 65) {\r\n            return (address(0));\r\n        }\r\n\r\n        // Divide the signature in r, s and v variables\r\n        // ecrecover takes the signature parameters, and the only way to get them\r\n        // currently is to use assembly.\r\n        // solhint-disable-next-line no-inline-assembly\r\n        assembly {\r\n            r := mload(add(signature, 0x20))\r\n            s := mload(add(signature, 0x40))\r\n            v := byte(0, mload(add(signature, 0x60)))\r\n        }\r\n\r\n        // Version of signature should be 27 or 28, but 0 and 1 are also possible versions\r\n        if (v < 27) {\r\n            v += 27;\r\n        }\r\n\r\n        // If the version is correct return the signer address\r\n        if (v != 27 && v != 28) {\r\n            return (address(0));\r\n        } else {\r\n            return ecrecover(hash, v, r, s);\r\n        }\r\n    }\r\n\r\n    /**\r\n     * toEthSignedMessageHash\r\n     * @dev prefix a bytes32 value with \"\\x19Ethereum Signed Message:\"\r\n     * and hash the result\r\n     */\r\n    function toEthSignedMessageHash(bytes32 hash) internal pure returns (bytes32) {\r\n        // 32 is the length in bytes of hash,\r\n        // enforced by the type signature above\r\n        return keccak256(abi.encodePacked(\"\\x19Ethereum Signed Message:\\n32\", hash));\r\n    }\r\n}\r\n\r\n/**\r\n * @title ERC20 interface\r\n * @dev see https://github.com/ethereum/EIPs/issues/20\r\n */\r\ninterface IERC20 {\r\n    function transfer(address to, uint256 value) external returns (bool);\r\n\r\n    function approve(address spender, uint256 value) external returns (bool);\r\n\r\n    function transferFrom(address from, address to, uint256 value) external returns (bool);\r\n\r\n    function totalSupply() external view returns (uint256);\r\n\r\n    function balanceOf(address who) external view returns (uint256);\r\n\r\n    function allowance(address owner, address spender) external view returns (uint256);\r\n\r\n    event Transfer(address indexed from, address indexed to, uint256 value);\r\n\r\n    event Approval(address indexed owner, address indexed spender, uint256 value);\r\n} \r\n\r\n/**\r\n * @title SafeERC20\r\n * @dev Wrappers around ERC20 operations that throw on failure.\r\n * To use this library you can add a `using SafeERC20 for ERC20;` statement to your contract,\r\n * which allows you to call the safe operations as `token.safeTransfer(...)`, etc.\r\n */\r\nlibrary SafeERC20 {\r\n    using SafeMath for uint256;\r\n\r\n    function safeTransfer(IERC20 token, address to, uint256 value) internal {\r\n        require(token.transfer(to, value));\r\n    }\r\n\r\n    function safeTransferFrom(IERC20 token, address from, address to, uint256 value) internal {\r\n        require(token.transferFrom(from, to, value));\r\n    }\r\n\r\n    function safeApprove(IERC20 token, address spender, uint256 value) internal {\r\n        // safeApprove should only be called when setting an initial allowance,\r\n        // or when resetting it to zero. To increase and decrease it, use\r\n        // 'safeIncreaseAllowance' and 'safeDecreaseAllowance'\r\n        require((value == 0) || (token.allowance(address(this), spender) == 0));\r\n        require(token.approve(spender, value));\r\n    }\r\n\r\n    function safeIncreaseAllowance(IERC20 token, address spender, uint256 value) internal {\r\n        uint256 newAllowance = token.allowance(address(this), spender).add(value);\r\n        require(token.approve(spender, newAllowance));\r\n    }\r\n\r\n    function safeDecreaseAllowance(IERC20 token, address spender, uint256 value) internal {\r\n        uint256 newAllowance = token.allowance(address(this), spender).sub(value);\r\n        require(token.approve(spender, newAllowance));\r\n    }\r\n}\r\n\r\n/**\r\n * @title ERC20Detailed token\r\n * @dev The decimals are only for visualization purposes.\r\n * All the operations are done using the smallest and indivisible token unit,\r\n * just as on Ethereum all the operations are done in wei.\r\n */\r\ncontract ERC20Detailed is IERC20 {\r\n    string private _name;\r\n    string private _symbol;\r\n    uint8 private _decimals;\r\n\r\n    constructor (string memory name, string memory symbol, uint8 decimals) public {\r\n        _name = name;\r\n        _symbol = symbol;\r\n        _decimals = decimals;\r\n    }\r\n\r\n    /**\r\n     * @return the name of the token.\r\n     */\r\n    function name() public view returns (string memory) {\r\n        return _name;\r\n    }\r\n\r\n    /**\r\n     * @return the symbol of the token.\r\n     */\r\n    function symbol() public view returns (string memory) {\r\n        return _symbol;\r\n    }\r\n\r\n    /**\r\n     * @return the number of decimals of the token.\r\n     */\r\n    function decimals() public view returns (uint8) {\r\n        return _decimals;\r\n    }\r\n}\r\n\r\n/**\r\n * @title Ownable\r\n * @dev The Ownable contract has an owner address, and provides basic authorization control\r\n * functions, this simplifies the implementation of \"user permissions\".\r\n */\r\ncontract Ownable {\r\n    address private _owner;\r\n\r\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\r\n\r\n    /**\r\n     * @dev The Ownable constructor sets the original `owner` of the contract to the sender\r\n     * account.\r\n     */\r\n    constructor () internal {\r\n        _owner = msg.sender;\r\n        emit OwnershipTransferred(address(0), _owner);\r\n    }\r\n\r\n    /**\r\n     * @return the address of the owner.\r\n     */\r\n    function owner() public view returns (address) {\r\n        return _owner;\r\n    }\r\n\r\n    /**\r\n     * @dev Throws if called by any account other than the owner.\r\n     */\r\n    modifier onlyOwner() {\r\n        require(isOwner());\r\n        _;\r\n    }\r\n\r\n    /**\r\n     * @return true if `msg.sender` is the owner of the contract.\r\n     */\r\n    function isOwner() public view returns (bool) {\r\n        return msg.sender == _owner;\r\n    }\r\n\r\n    /**\r\n     * @dev Allows the current owner to relinquish control of the contract.\r\n     * @notice Renouncing to ownership will leave the contract without an owner.\r\n     * It will not be possible to call the functions with the `onlyOwner`\r\n     * modifier anymore.\r\n     */\r\n    function renounceOwnership() public onlyOwner {\r\n        emit OwnershipTransferred(_owner, address(0));\r\n        _owner = address(0);\r\n    }\r\n\r\n    /**\r\n     * @dev Allows the current owner to transfer control of the contract to a newOwner.\r\n     * @param newOwner The address to transfer ownership to.\r\n     */\r\n    function transferOwnership(address newOwner) public onlyOwner {\r\n        _transferOwnership(newOwner);\r\n    }\r\n\r\n    /**\r\n     * @dev Transfers control of the contract to a newOwner.\r\n     * @param newOwner The address to transfer ownership to.\r\n     */\r\n    function _transferOwnership(address newOwner) internal {\r\n        require(newOwner != address(0));\r\n        emit OwnershipTransferred(_owner, newOwner);\r\n        _owner = newOwner;\r\n    }\r\n}\r\n\r\ncontract ECRecover {\r\n\r\n    mapping (address => uint) public nonces;\r\n\r\n    function recoverSigner(bytes32 _hash, bytes memory _signature) public pure returns (address) {\r\n        bytes32 ethSignedMessageHash = ECDSA.toEthSignedMessageHash(_hash);\r\n        return ECDSA.recover(ethSignedMessageHash, _signature);\r\n    }\r\n\r\n    function validateNonceForSigner(address _signer, uint _nonce) internal {\r\n        require(_signer != address(0), \"Invalid signer\");\r\n        require(_nonce == nonces[_signer], \"Invalid nonce\");\r\n        nonces[_signer]++;\r\n    }\r\n\r\n}\r\n\r\n/**\r\n * @title Standard ERC20 token\r\n *\r\n * @dev Implementation of the basic standard token.\r\n * https://github.com/ethereum/EIPs/blob/master/EIPS/eip-20.md\r\n * Originally based on code by FirstBlood:\r\n * https://github.com/Firstbloodio/token/blob/master/smart_contract/FirstBloodToken.sol\r\n *\r\n * This implementation emits additional Approval events, allowing applications to reconstruct the allowance status for\r\n * all accounts just by listening to said events. Note that this isn't required by the specification, and other\r\n * compliant implementations may not do it.\r\n */\r\ncontract ERC20 is IERC20 {\r\n    using SafeMath for uint256;\r\n\r\n    mapping (address => uint256) internal _balances;\r\n\r\n    mapping (address => mapping (address => uint256)) internal _allowed;\r\n\r\n    uint256 internal _totalSupply;\r\n\r\n    /**\r\n    * @dev Total number of tokens in existence\r\n    */\r\n    function totalSupply() public view returns (uint256) {\r\n        return _totalSupply;\r\n    }\r\n\r\n    /**\r\n    * @dev Gets the balance of the specified address.\r\n    * @param owner The address to query the balance of.\r\n    * @return An uint256 representing the amount owned by the passed address.\r\n    */\r\n    function balanceOf(address owner) public view returns (uint256) {\r\n        return _balances[owner];\r\n    }\r\n\r\n    /**\r\n     * @dev Function to check the amount of tokens that an owner allowed to a spender.\r\n     * @param owner address The address which owns the funds.\r\n     * @param spender address The address which will spend the funds.\r\n     * @return A uint256 specifying the amount of tokens still available for the spender.\r\n     */\r\n    function allowance(address owner, address spender) public view returns (uint256) {\r\n        return _allowed[owner][spender];\r\n    }\r\n\r\n    /**\r\n    * @dev Transfer token for a specified address\r\n    * @param to The address to transfer to.\r\n    * @param value The amount to be transferred.\r\n    */\r\n    function transfer(address to, uint256 value) public returns (bool) {\r\n        _transfer(msg.sender, to, value);\r\n        return true;\r\n    }\r\n\r\n    /**\r\n     * @dev Approve the passed address to spend the specified amount of tokens on behalf of msg.sender.\r\n     * Beware that changing an allowance with this method brings the risk that someone may use both the old\r\n     * and the new allowance by unfortunate transaction ordering. One possible solution to mitigate this\r\n     * race condition is to first reduce the spender's allowance to 0 and set the desired value afterwards:\r\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\r\n     * @param spender The address which will spend the funds.\r\n     * @param value The amount of tokens to be spent.\r\n     */\r\n    function approve(address spender, uint256 value) public returns (bool) {\r\n        require(spender != address(0));\r\n\r\n        _allowed[msg.sender][spender] = value;\r\n        emit Approval(msg.sender, spender, value);\r\n        return true;\r\n    }\r\n\r\n    /**\r\n     * @dev Transfer tokens from one address to another.\r\n     * Note that while this function emits an Approval event, this is not required as per the specification,\r\n     * and other compliant implementations may not emit the event.\r\n     * @param from address The address which you want to send tokens from\r\n     * @param to address The address which you want to transfer to\r\n     * @param value uint256 the amount of tokens to be transferred\r\n     */\r\n    function transferFrom(address from, address to, uint256 value) public returns (bool) {\r\n        _allowed[from][msg.sender] = _allowed[from][msg.sender].sub(value);\r\n        _transfer(from, to, value);\r\n        emit Approval(from, msg.sender, _allowed[from][msg.sender]);\r\n        return true;\r\n    }\r\n\r\n    /**\r\n     * @dev Increase the amount of tokens that an owner allowed to a spender.\r\n     * approve should be called when allowed_[_spender] == 0. To increment\r\n     * allowed value is better to use this function to avoid 2 calls (and wait until\r\n     * the first transaction is mined)\r\n     * From MonolithDAO Token.sol\r\n     * Emits an Approval event.\r\n     * @param spender The address which will spend the funds.\r\n     * @param addedValue The amount of tokens to increase the allowance by.\r\n     */\r\n    function increaseAllowance(address spender, uint256 addedValue) public returns (bool) {\r\n        require(spender != address(0));\r\n\r\n        _allowed[msg.sender][spender] = _allowed[msg.sender][spender].add(addedValue);\r\n        emit Approval(msg.sender, spender, _allowed[msg.sender][spender]);\r\n        return true;\r\n    }\r\n\r\n    /**\r\n     * @dev Decrease the amount of tokens that an owner allowed to a spender.\r\n     * approve should be called when allowed_[_spender] == 0. To decrement\r\n     * allowed value is better to use this function to avoid 2 calls (and wait until\r\n     * the first transaction is mined)\r\n     * From MonolithDAO Token.sol\r\n     * Emits an Approval event.\r\n     * @param spender The address which will spend the funds.\r\n     * @param subtractedValue The amount of tokens to decrease the allowance by.\r\n     */\r\n    function decreaseAllowance(address spender, uint256 subtractedValue) public returns (bool) {\r\n        require(spender != address(0));\r\n\r\n        _allowed[msg.sender][spender] = _allowed[msg.sender][spender].sub(subtractedValue);\r\n        emit Approval(msg.sender, spender, _allowed[msg.sender][spender]);\r\n        return true;\r\n    }\r\n\r\n    /**\r\n    * @dev Transfer token for a specified addresses\r\n    * @param from The address to transfer from.\r\n    * @param to The address to transfer to.\r\n    * @param value The amount to be transferred.\r\n    */\r\n    function _transfer(address from, address to, uint256 value) internal {\r\n        require(to != address(0));\r\n\r\n        _balances[from] = _balances[from].sub(value);\r\n        _balances[to] = _balances[to].add(value);\r\n        emit Transfer(from, to, value);\r\n    }\r\n\r\n    /**\r\n     * @dev Internal function that mints an amount of the token and assigns it to\r\n     * an account. This encapsulates the modification of balances such that the\r\n     * proper events are emitted.\r\n     * @param account The account that will receive the created tokens.\r\n     * @param value The amount that will be created.\r\n     */\r\n    function _mint(address account, uint256 value) internal {\r\n        require(account != address(0));\r\n\r\n        _totalSupply = _totalSupply.add(value);\r\n        _balances[account] = _balances[account].add(value);\r\n        emit Transfer(address(0), account, value);\r\n    }\r\n\r\n    /**\r\n     * @dev Internal function that burns an amount of the token of a given\r\n     * account.\r\n     * @param account The account whose tokens will be burnt.\r\n     * @param value The amount that will be burnt.\r\n     */\r\n    function _burn(address account, uint256 value) internal {\r\n        require(account != address(0));\r\n\r\n        _totalSupply = _totalSupply.sub(value);\r\n        _balances[account] = _balances[account].sub(value);\r\n        emit Transfer(account, address(0), value);\r\n    }\r\n\r\n    /**\r\n     * @dev Internal function that burns an amount of the token of a given\r\n     * account, deducting from the sender's allowance for said account. Uses the\r\n     * internal burn function.\r\n     * Emits an Approval event (reflecting the reduced allowance).\r\n     * @param account The account whose tokens will be burnt.\r\n     * @param value The amount that will be burnt.\r\n     */\r\n    function _burnFrom(address account, uint256 value) internal {\r\n        _allowed[account][msg.sender] = _allowed[account][msg.sender].sub(value);\r\n        _burn(account, value);\r\n        emit Approval(account, msg.sender, _allowed[account][msg.sender]);\r\n    }\r\n} \r\n\r\n/**\r\n * @title ERC20 Extended interface\r\n */\r\ninterface IERC20X {\r\n\r\n    function approveAndCall(address _spender, uint _value, bytes calldata _data) external returns (bool);\r\n    event ApprovalAndCall(address indexed owner, address indexed spender, uint value, bytes data);\r\n    \r\n}\r\n\r\n/**\r\n * @title Token Receiver Interface\r\n */\r\ninterface ITokenReceiver {\r\n\r\n    function receiveApproval(address _from, uint256 _value, address _token, bytes calldata data) external;\r\n    \r\n}\r\n\r\n/**\r\n * @title ERC20 Extended\r\n * Adds support for approveAndCall function\r\n */\r\ncontract ERC20X is IERC20X, ERC20 {\r\n\r\n    function approveAndCall(address _spender, uint _value, bytes memory _data) public returns (bool) {\r\n        _approveAndCall(msg.sender, _spender, _value, _data);\r\n        return true;\r\n    }\r\n\r\n    function _approveAndCall(address _owner, address _spender, uint _value, bytes memory _data) internal {\r\n        require(_spender != address(0), \"Spender cannot be address(0)\");\r\n\r\n        _allowed[_owner][_spender] = _value;\r\n        emit Approval(_owner, _spender, _value);\r\n\r\n        ITokenReceiver(_spender).receiveApproval(_owner, _value, address(this), _data);\r\n        emit ApprovalAndCall(_owner, _spender, _value, _data);\r\n    }\r\n    \r\n}\r\n \r\n/**\r\n * @title Meta transactions wrapper around ERC20X\r\n *  Rewards relayer with native tokens\r\n */\r\ncontract ERC20Meta is ERC20X, ECRecover {\r\n\r\n    function metaApproveAndCall(bytes memory _signature, uint _nonce, address _spender, uint _value, bytes memory _data, uint _reward)\r\n    public returns (bool) \r\n    {   \r\n        require(_spender != address(0), \"Invalid spender address\");\r\n\r\n        bytes32 messageHash = metaApproveAndCallHash(_nonce, _spender, _value, _data, _reward);\r\n        address signer = recoverSigner(messageHash, _signature);\r\n        validateNonceForSigner(signer, _nonce);\r\n\r\n        _approveAndCall(signer, _spender, _value, _data);\r\n\r\n        if (_reward > 0) \r\n            _transfer(signer, msg.sender, _reward);\r\n            \r\n        return true;\r\n    }\r\n\r\n    function metaTransfer(bytes memory _signature, uint _nonce, address _to, uint _value, uint _reward) \r\n    public returns (bool) \r\n    {\r\n        bytes32 messageHash = metaTransferHash(_nonce, _to, _value, _reward);\r\n        address signer = recoverSigner(messageHash, _signature);\r\n        validateNonceForSigner(signer, _nonce);\r\n        _transfer(signer, _to, _value);\r\n\r\n        if (_reward > 0) \r\n            _transfer(signer, msg.sender, _reward);\r\n        \r\n        return true;\r\n    }\r\n\r\n    function metaTransferFrom(bytes memory _signature, uint _nonce, address _from, address _to, uint _value, uint _reward) \r\n    public returns (bool) \r\n    {\r\n        bytes32 messageHash = metaTransferFromHash(_nonce, _from, _to, _value, _reward);\r\n        address signer = recoverSigner(messageHash, _signature);\r\n        validateNonceForSigner(signer, _nonce);\r\n\r\n        _allowed[_from][signer] = _allowed[_from][signer].sub(_value); //error\r\n        _transfer(_from, _to, _value);\r\n        emit Approval(_from, signer, _allowed[_from][signer]);\r\n\r\n        if (_reward > 0) \r\n            _transfer(signer, msg.sender, _reward);\r\n        \r\n        return true;\r\n    }\r\n\r\n    function metaApprove(bytes memory _signature, uint _nonce, address _spender, uint _value, uint _reward) \r\n    public returns (bool) \r\n    {\r\n        require(_spender != address(0), \"Invalid spender address\");\r\n\r\n        bytes32 messageHash = metaApproveHash(_nonce, _spender, _value, _reward);\r\n        address signer = recoverSigner(messageHash, _signature);\r\n        validateNonceForSigner(signer, _nonce);\r\n    \r\n        _allowed[signer][_spender] = _value;\r\n       \r\n        if (_reward > 0) \r\n            _transfer(signer, msg.sender, _reward);\r\n\r\n        emit Approval(signer, _spender, _value);\r\n        return true;\r\n    }\r\n\r\n    function metaIncreaseAllowance(bytes memory _signature, uint _nonce, address _spender, uint256 _addedValue, uint _reward) \r\n    public returns (bool) \r\n    {\r\n        require(_spender != address(0), \"Invalid spender address\");\r\n\r\n        bytes32 messageHash = metaIncreaseAllowanceHash(_nonce, _spender, _addedValue, _reward);\r\n        address signer = recoverSigner(messageHash, _signature);\r\n        validateNonceForSigner(signer, _nonce);\r\n\r\n        _allowed[signer][_spender] = _allowed[signer][_spender].add(_addedValue);\r\n\r\n        if (_reward > 0) \r\n            _transfer(signer, msg.sender, _reward);\r\n\r\n        emit Approval(signer, _spender, _allowed[signer][_spender]);\r\n        return true;\r\n    }\r\n\r\n    function metaDecreaseAllowance(bytes memory _signature, uint _nonce, address _spender, uint256 _subtractedValue, uint _reward) \r\n    public returns (bool) \r\n    {\r\n        require(_spender != address(0), \"Invalid spender address\");\r\n\r\n        bytes32 messageHash = metaDecreaseAllowanceHash(_nonce, _spender, _subtractedValue, _reward);\r\n        address signer = recoverSigner(messageHash, _signature);\r\n        validateNonceForSigner(signer, _nonce);\r\n\r\n        _allowed[signer][_spender] = _allowed[signer][_spender].sub(_subtractedValue);\r\n\r\n        if (_reward > 0) \r\n            _transfer(signer, msg.sender, _reward);\r\n        \r\n        emit Approval(signer, _spender, _allowed[signer][_spender]);\r\n        return true;\r\n    }\r\n\r\n    function metaTransferHash(uint _nonce, address _to, uint _value, uint _reward) public view returns (bytes32) {\r\n        return keccak256(abi.encodePacked(address(this), \"metaTransfer\", _nonce, _to, _value, _reward)); \r\n    }\r\n\r\n    function metaApproveAndCallHash(uint _nonce, address _spender, uint _value, bytes memory _data, uint _reward) \r\n    public view returns (bytes32) {\r\n        return keccak256(abi.encodePacked(address(this), \"metaApproveAndCall\", _nonce, _spender, _value, _data, _reward)); \r\n    }\r\n\r\n    function metaTransferFromHash(uint _nonce, address _from, address _to, uint _value, uint _reward) public view returns (bytes32) {\r\n        return keccak256(abi.encodePacked(address(this), \"metaTransferFrom\", _nonce, _from, _to, _value, _reward)); \r\n    }\r\n\r\n    function metaApproveHash(uint _nonce, address _spender, uint _value, uint _reward) public view returns (bytes32) {\r\n        return keccak256(abi.encodePacked(address(this), \"metaApprove\", _nonce, _spender, _value, _reward)); \r\n    }\r\n\r\n    function metaIncreaseAllowanceHash(uint _nonce, address _spender, uint256 _addedValue, uint _reward) public view returns (bytes32) {\r\n        return keccak256(abi.encodePacked(address(this), \"metaIncreaseAllowance\", _nonce, _spender, _addedValue, _reward));\r\n    }\r\n\r\n    function metaDecreaseAllowanceHash(uint _nonce, address _spender, uint256 _subtractedValue, uint _reward) public view returns (bytes32) {\r\n        return keccak256(abi.encodePacked(address(this), \"metaDecreaseAllowance\", _nonce, _spender, _subtractedValue, _reward));\r\n    }\r\n    \r\n}\r\n\r\ncontract Token is ERC20Meta, Ownable {\r\n    // freezing chains\r\n    mapping (bytes32 => uint64) internal chains;\r\n    // freezing amounts for each chain\r\n    mapping (bytes32 => uint) internal freezings;\r\n    // total freezing balance per address\r\n    mapping (address => uint) internal freezingBalance;\r\n\r\n    event Freezed(address indexed to, uint64 release, uint amount);\r\n    event Released(address indexed owner, uint amount);\r\n\r\n    /**\r\n     * @dev Gets the balance of the specified address include freezing tokens.\r\n     * @param _owner The address to query the the balance of.\r\n     * @return An uint256 representing the amount owned by the passed address.\r\n     */\r\n    function balanceOf(address _owner) public view returns (uint256 balance) {\r\n        return super.balanceOf(_owner) + freezingBalance[_owner];\r\n    }\r\n\r\n    /**\r\n     * @dev Gets the balance of the specified address without freezing tokens.\r\n     * @param _owner The address to query the the balance of.\r\n     * @return An uint256 representing the amount owned by the passed address.\r\n     */\r\n    function actualBalanceOf(address _owner) public view returns (uint256 balance) {\r\n        return super.balanceOf(_owner);\r\n    }\r\n\r\n    function freezingBalanceOf(address _owner) public view returns (uint256 balance) {\r\n        return freezingBalance[_owner];\r\n    }\r\n\r\n    /**\r\n     * @dev gets freezing count\r\n     * @param _addr Address of freeze tokens owner.\r\n     */\r\n    function freezingCount(address _addr) public view returns (uint count) {\r\n        uint64 release = chains[toKey(_addr, 0)];\r\n        while (release != 0) {\r\n            count++;\r\n            release = chains[toKey(_addr, release)];\r\n        }\r\n    }\r\n\r\n    /**\r\n     * @dev gets freezing end date and freezing balance for the freezing portion specified by index.\r\n     * @param _addr Address of freeze tokens owner.\r\n     * @param _index Freezing portion index. It ordered by release date descending.\r\n     */\r\n    function getFreezing(address _addr, uint _index) public view returns (uint64 _release, uint _balance) {\r\n        for (uint i = 0; i < _index + 1; i++) {\r\n            _release = chains[toKey(_addr, _release)];\r\n            if (_release == 0) {\r\n                return(0, 0);\r\n            }\r\n        }\r\n        _balance = freezings[toKey(_addr, _release)];\r\n    }\r\n\r\n    /**\r\n     * @dev freeze your tokens to the specified address.\r\n     *      Be careful, gas usage is not deterministic,\r\n     *      and depends on how many freezes _to address already has.\r\n     * @param _to Address to which token will be freeze.\r\n     * @param _amount Amount of token to freeze.\r\n     * @param _until Release date, must be in future.\r\n     */\r\n    function freezeTo(address _to, uint _amount, uint64 _until) public {\r\n        _freezeTo(msg.sender, _to, _amount, _until);\r\n    }\r\n\r\n    function _freezeTo(address _from, address _to, uint _amount, uint64 _until) internal {\r\n        require(_to != address(0));\r\n        require(_amount <= _balances[_from]);\r\n\r\n        _balances[_from] = _balances[_from].sub(_amount);\r\n\r\n        bytes32 currentKey = toKey(_to, _until);\r\n        freezings[currentKey] = freezings[currentKey].add(_amount);\r\n        freezingBalance[_to] = freezingBalance[_to].add(_amount);\r\n\r\n        freeze(_to, _until);\r\n        emit Transfer(_from, _to, _amount);\r\n        emit Freezed(_to, _until, _amount);\r\n    }\r\n\r\n    /**\r\n     * @dev release first available freezing tokens.\r\n     */\r\n    function releaseOnce() public {\r\n        bytes32 headKey = toKey(msg.sender, 0);\r\n        uint64 head = chains[headKey];\r\n        require(head != 0);\r\n        require(uint64(block.timestamp) > head);\r\n        bytes32 currentKey = toKey(msg.sender, head);\r\n\r\n        uint64 next = chains[currentKey];\r\n\r\n        uint amount = freezings[currentKey];\r\n        delete freezings[currentKey];\r\n\r\n        _balances[msg.sender] = _balances[msg.sender].add(amount);\r\n        freezingBalance[msg.sender] = freezingBalance[msg.sender].sub(amount);\r\n\r\n        if (next == 0) {\r\n            delete chains[headKey];\r\n        } else {\r\n            chains[headKey] = next;\r\n            delete chains[currentKey];\r\n        }\r\n        emit Released(msg.sender, amount);\r\n    }\r\n\r\n    /**\r\n     * @dev release all available for release freezing tokens. Gas usage is not deterministic!\r\n     * @return how many tokens was released\r\n     */\r\n    function releaseAll() public returns (uint tokens) {\r\n        uint release;\r\n        uint balance;\r\n        (release, balance) = getFreezing(msg.sender, 0);\r\n        while (release != 0 && block.timestamp > release) {\r\n            releaseOnce();\r\n            tokens += balance;\r\n            (release, balance) = getFreezing(msg.sender, 0);\r\n        }\r\n    }\r\n\r\n    function toKey(address _addr, uint _release) internal pure returns (bytes32 result) {\r\n        // WISH masc to increase entropy\r\n        result = 0x5749534800000000000000000000000000000000000000000000000000000000;\r\n        assembly {\r\n            result := or(result, mul(_addr, 0x10000000000000000))\r\n            result := or(result, _release)\r\n        }\r\n    }\r\n\r\n    function freeze(address _to, uint64 _until) internal {\r\n        require(_until > block.timestamp);\r\n        bytes32 key = toKey(_to, _until);\r\n        bytes32 parentKey = toKey(_to, uint64(0));\r\n        uint64 next = chains[parentKey];\r\n\r\n        if (next == 0) {\r\n            chains[parentKey] = _until;\r\n            return;\r\n        }\r\n\r\n        bytes32 nextKey = toKey(_to, next);\r\n        uint parent;\r\n\r\n        while (next != 0 && _until > next) {\r\n            parent = next;\r\n            parentKey = nextKey;\r\n\r\n            next = chains[nextKey];\r\n            nextKey = toKey(_to, next);\r\n        }\r\n\r\n        if (_until == next) {\r\n            return;\r\n        }\r\n\r\n        if (next != 0) {\r\n            chains[key] = next;\r\n        }\r\n\r\n        chains[parentKey] = _until;\r\n    }\r\n\r\n    // ------------------------------------------------------------------------\r\n    // Owner can transfer out any accidentally sent ERC20 tokens\r\n    // ------------------------------------------------------------------------\r\n    function transferAnyERC20Token(address _token, address _to, uint _value) public onlyOwner returns (bool) {\r\n        return IERC20(_token).transfer(_to, _value);\r\n    }\r\n}\r\n\r\n/**\r\n * @title Allbebet Token Contract \r\n *  Fully compatible with ERC20 standard\r\n *  Supports native meta transactions\r\n */\r\ncontract ALBToken is Token, ERC20Detailed {\r\n    using SafeERC20 for ERC20;\r\n\t\r\n    uint256 startdate;\r\n\t\r\n    address beneficiary1;\r\n    address beneficiary2;\r\n    address beneficiary3;\r\n    address beneficiary4;\r\n    address beneficiary5;\r\n\r\n    constructor() public ERC20Detailed(\"AllBeBet\", \"ALB\", 0) {\r\n        uint256 amount = 1000000000 * (10 ** uint256(decimals()));\r\n        _mint(address(this), amount);\r\n\t\t\r\n\t\tstartdate = 1566766800;\r\n\r\n        beneficiary1 = 0x11308512672859E403C570996dA51EEb6F5d1cD3;\r\n        beneficiary2 = 0x3c35a288d9EA25E8F727C7d45383c04E633B5bdC;\r\n        beneficiary3 = 0xc643E129c49CAb15dfC964643f2deCC9Dbfc7091;\r\n        beneficiary4 = 0x188f445c13F702cBB3734Df63fb4Cb96c474866d;\r\n        beneficiary5 = 0xFd05e00091b947AaA3ebA36beC62C2CA6003BCE7;\r\n\r\n        _freezeTo(address(this), beneficiary1, totalSupply().mul(375).div(1000), uint64(startdate + 183 days));\r\n        _freezeTo(address(this), beneficiary1, totalSupply().mul(375).div(1000),uint64(startdate + 365 days));\r\n        _freezeTo(address(this), beneficiary2, totalSupply().mul(15).div(1000), uint64(startdate + 183 days));\r\n        _freezeTo(address(this), beneficiary2, totalSupply().mul(15).div(1000), uint64(startdate + 365 days));\r\n        _freezeTo(address(this), beneficiary3, totalSupply().mul(5).div(100), uint64(startdate + 183 days));\r\n        _freezeTo(address(this), beneficiary3, totalSupply().mul(5).div(100), uint64(startdate + 365 days));\r\n\r\n        _transfer(address(this), beneficiary4, totalSupply().mul(9).div(100));\r\n        _transfer(address(this), beneficiary5, totalSupply().mul(3).div(100));\r\n    }\r\n}","ABI":"[{\"constant\":true,\"inputs\":[{\"name\":\"_addr\",\"type\":\"address\"},{\"name\":\"_index\",\"type\":\"uint256\"}],\"name\":\"getFreezing\",\"outputs\":[{\"name\":\"_release\",\"type\":\"uint64\"},{\"name\":\"_balance\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"spender\",\"type\":\"address\"},{\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_nonce\",\"type\":\"uint256\"},{\"name\":\"_spender\",\"type\":\"address\"},{\"name\":\"_subtractedValue\",\"type\":\"uint256\"},{\"name\":\"_reward\",\"type\":\"uint256\"}],\"name\":\"metaDecreaseAllowanceHash\",\"outputs\":[{\"name\":\"\",\"type\":\"bytes32\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_owner\",\"type\":\"address\"}],\"name\":\"actualBalanceOf\",\"outputs\":[{\"name\":\"balance\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"from\",\"type\":\"address\"},{\"name\":\"to\",\"type\":\"address\"},{\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_signature\",\"type\":\"bytes\"},{\"name\":\"_nonce\",\"type\":\"uint256\"},{\"name\":\"_spender\",\"type\":\"address\"},{\"name\":\"_addedValue\",\"type\":\"uint256\"},{\"name\":\"_reward\",\"type\":\"uint256\"}],\"name\":\"metaIncreaseAllowance\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"decimals\",\"outputs\":[{\"name\":\"\",\"type\":\"uint8\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"spender\",\"type\":\"address\"},{\"name\":\"addedValue\",\"type\":\"uint256\"}],\"name\":\"increaseAllowance\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_to\",\"type\":\"address\"},{\"name\":\"_amount\",\"type\":\"uint256\"},{\"name\":\"_until\",\"type\":\"uint64\"}],\"name\":\"freezeTo\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_nonce\",\"type\":\"uint256\"},{\"name\":\"_spender\",\"type\":\"address\"},{\"name\":\"_value\",\"type\":\"uint256\"},{\"name\":\"_reward\",\"type\":\"uint256\"}],\"name\":\"metaApproveHash\",\"outputs\":[{\"name\":\"\",\"type\":\"bytes32\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_nonce\",\"type\":\"uint256\"},{\"name\":\"_to\",\"type\":\"address\"},{\"name\":\"_value\",\"type\":\"uint256\"},{\"name\":\"_reward\",\"type\":\"uint256\"}],\"name\":\"metaTransferHash\",\"outputs\":[{\"name\":\"\",\"type\":\"bytes32\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"releaseAll\",\"outputs\":[{\"name\":\"tokens\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_nonce\",\"type\":\"uint256\"},{\"name\":\"_spender\",\"type\":\"address\"},{\"name\":\"_addedValue\",\"type\":\"uint256\"},{\"name\":\"_reward\",\"type\":\"uint256\"}],\"name\":\"metaIncreaseAllowanceHash\",\"outputs\":[{\"name\":\"\",\"type\":\"bytes32\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"releaseOnce\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_owner\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"name\":\"balance\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"address\"}],\"name\":\"nonces\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_nonce\",\"type\":\"uint256\"},{\"name\":\"_spender\",\"type\":\"address\"},{\"name\":\"_value\",\"type\":\"uint256\"},{\"name\":\"_data\",\"type\":\"bytes\"},{\"name\":\"_reward\",\"type\":\"uint256\"}],\"name\":\"metaApproveAndCallHash\",\"outputs\":[{\"name\":\"\",\"type\":\"bytes32\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_signature\",\"type\":\"bytes\"},{\"name\":\"_nonce\",\"type\":\"uint256\"},{\"name\":\"_spender\",\"type\":\"address\"},{\"name\":\"_value\",\"type\":\"uint256\"},{\"name\":\"_reward\",\"type\":\"uint256\"}],\"name\":\"metaApprove\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"isOwner\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_signature\",\"type\":\"bytes\"},{\"name\":\"_nonce\",\"type\":\"uint256\"},{\"name\":\"_to\",\"type\":\"address\"},{\"name\":\"_value\",\"type\":\"uint256\"},{\"name\":\"_reward\",\"type\":\"uint256\"}],\"name\":\"metaTransfer\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_hash\",\"type\":\"bytes32\"},{\"name\":\"_signature\",\"type\":\"bytes\"}],\"name\":\"recoverSigner\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"pure\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"spender\",\"type\":\"address\"},{\"name\":\"subtractedValue\",\"type\":\"uint256\"}],\"name\":\"decreaseAllowance\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"to\",\"type\":\"address\"},{\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_signature\",\"type\":\"bytes\"},{\"name\":\"_nonce\",\"type\":\"uint256\"},{\"name\":\"_from\",\"type\":\"address\"},{\"name\":\"_to\",\"type\":\"address\"},{\"name\":\"_value\",\"type\":\"uint256\"},{\"name\":\"_reward\",\"type\":\"uint256\"}],\"name\":\"metaTransferFrom\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_addr\",\"type\":\"address\"}],\"name\":\"freezingCount\",\"outputs\":[{\"name\":\"count\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_spender\",\"type\":\"address\"},{\"name\":\"_value\",\"type\":\"uint256\"},{\"name\":\"_data\",\"type\":\"bytes\"}],\"name\":\"approveAndCall\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_token\",\"type\":\"address\"},{\"name\":\"_to\",\"type\":\"address\"},{\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"transferAnyERC20Token\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_owner\",\"type\":\"address\"}],\"name\":\"freezingBalanceOf\",\"outputs\":[{\"name\":\"balance\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"owner\",\"type\":\"address\"},{\"name\":\"spender\",\"type\":\"address\"}],\"name\":\"allowance\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_signature\",\"type\":\"bytes\"},{\"name\":\"_nonce\",\"type\":\"uint256\"},{\"name\":\"_spender\",\"type\":\"address\"},{\"name\":\"_value\",\"type\":\"uint256\"},{\"name\":\"_data\",\"type\":\"bytes\"},{\"name\":\"_reward\",\"type\":\"uint256\"}],\"name\":\"metaApproveAndCall\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_nonce\",\"type\":\"uint256\"},{\"name\":\"_from\",\"type\":\"address\"},{\"name\":\"_to\",\"type\":\"address\"},{\"name\":\"_value\",\"type\":\"uint256\"},{\"name\":\"_reward\",\"type\":\"uint256\"}],\"name\":\"metaTransferFromHash\",\"outputs\":[{\"name\":\"\",\"type\":\"bytes32\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_signature\",\"type\":\"bytes\"},{\"name\":\"_nonce\",\"type\":\"uint256\"},{\"name\":\"_spender\",\"type\":\"address\"},{\"name\":\"_subtractedValue\",\"type\":\"uint256\"},{\"name\":\"_reward\",\"type\":\"uint256\"}],\"name\":\"metaDecreaseAllowance\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"release\",\"type\":\"uint64\"},{\"indexed\":false,\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"Freezed\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"Released\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"spender\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"spender\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"value\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"data\",\"type\":\"bytes\"}],\"name\":\"ApprovalAndCall\",\"type\":\"event\"}]","ContractName":"ALBToken","CompilerVersion":"v0.5.2+commit.1df8f40c","OptimizationUsed":"0","Runs":"200","ConstructorArguments":"","Library":"","LicenseType":"MIT","SwarmSource":"bzzr://e24c31edf6e7daed30e492df436daa2125a31f849b544949a701427838c0ef36"}]}