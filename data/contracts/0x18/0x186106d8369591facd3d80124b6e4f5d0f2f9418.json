{"status":"1","message":"OK","result":[{"SourceCode":"// Copyright (C) 2020 Zerion Inc. <https://zerion.io>\r\n//\r\n// This program is free software: you can redistribute it and/or modify\r\n// it under the terms of the GNU General Public License as published by\r\n// the Free Software Foundation, either version 3 of the License, or\r\n// (at your option) any later version.\r\n//\r\n// This program is distributed in the hope that it will be useful,\r\n// but WITHOUT ANY WARRANTY; without even the implied warranty of\r\n// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the\r\n// GNU General Public License for more details.\r\n//\r\n// You should have received a copy of the GNU General Public License\r\n// along with this program. If not, see <https://www.gnu.org/licenses/>.\r\n\r\npragma solidity 0.6.5;\r\npragma experimental ABIEncoderV2;\r\n\r\n\r\ninterface ERC20 {\r\n    function name() external view returns (string memory);\r\n    function symbol() external view returns (string memory);\r\n    function decimals() external view returns (uint8);\r\n}\r\n\r\n\r\nstruct TokenMetadata {\r\n    address token;\r\n    string name;\r\n    string symbol;\r\n    uint8 decimals;\r\n}\r\n\r\n\r\nstruct Component {\r\n    address token;\r\n    string tokenType;\r\n    uint256 rate;\r\n}\r\n\r\n\r\n/**\r\n * @title Token adapter interface.\r\n * @dev getMetadata() and getComponents() functions MUST be implemented.\r\n * @author Igor Sobolev <sobolev@zerion.io>\r\n */\r\ninterface TokenAdapter {\r\n\r\n    /**\r\n     * @dev MUST return TokenMetadata struct with ERC20-style token info.\r\n     * struct TokenMetadata {\r\n     *     address token;\r\n     *     string name;\r\n     *     string symbol;\r\n     *     uint8 decimals;\r\n     * }\r\n     */\r\n    function getMetadata(address token) external view returns (TokenMetadata memory);\r\n\r\n    /**\r\n    * @dev MUST return array of Component structs with underlying tokens rates for the given token.\r\n    * struct Component {\r\n    *     address token;    // Address of token contract\r\n    *     string tokenType; // Token type (\"ERC20\" by default)\r\n    *     uint256 rate;     // Price per share (1e18)\r\n    * }\r\n    */\r\n    function getComponents(address token) external view returns (Component[] memory);\r\n}\r\n\r\n\r\n/**\r\n * @dev Pot contract interface.\r\n * Only the functions required for ChaiTokenAdapter contract are added.\r\n * The Pot contract is available here\r\n * github.com/makerdao/dss/blob/master/src/pot.sol.\r\n */\r\ninterface Pot {\r\n    function pie(address) external view returns (uint256);\r\n    function dsr() external view returns (uint256);\r\n    function rho() external view returns (uint256);\r\n    function chi() external view returns (uint256);\r\n}\r\n\r\n\r\n/**\r\n * @title Maker adapter abstract contract.\r\n * @dev Base contract for MCD, DSR, and Chai adapters.\r\n * Math function are taken from the Pot contract available here\r\n * github.com/makerdao/dss/blob/master/src/pot.sol.\r\n * @author Igor Sobolev <sobolev@zerion.io>\r\n */\r\nabstract contract MKRAdapter {\r\n    address internal constant VAT = 0x35D1b3F3D7966A1DFe207aa4514C12a259A0492B;\r\n    address internal constant POT = 0x197E90f9FAD81970bA7976f33CbD77088E5D7cf7;\r\n    address internal constant JUG = 0x19c0976f590D67707E62397C87829d896Dc0f1F1;\r\n    address internal constant MANAGER = 0x5ef30b9986345249bc32d8928B7ee64DE9435E39;\r\n\r\n    address internal constant DAI = 0x6B175474E89094C44Da98b954EedeAC495271d0F;\r\n    address internal constant BAT = 0x0D8775F648430679A709E98d2b0Cb6250d2887EF;\r\n    address internal constant WETH = 0xC02aaA39b223FE8D0A0e5C4F27eAD9083C756Cc2;\r\n\r\n    uint256 internal constant ONE = 10 ** 27;\r\n\r\n    function mkrRpow(uint x, uint n, uint base) internal pure returns (uint z) {\r\n        assembly {\r\n            switch x case 0 {switch n case 0 {z := base} default {z := 0}}\r\n            default {\r\n                switch mod(n, 2) case 0 { z := base } default { z := x }\r\n                let half := div(base, 2)  // for rounding.\r\n                for { n := div(n, 2) } n { n := div(n,2) } {\r\n                let xx := mul(x, x)\r\n                if iszero(eq(div(xx, x), x)) { revert(0,0) }\r\n                let xxRound := add(xx, half)\r\n                if lt(xxRound, xx) { revert(0,0) }\r\n                x := div(xxRound, base)\r\n                if mod(n,2) {\r\n                    let zx := mul(z, x)\r\n                    if and(iszero(iszero(x)), iszero(eq(div(zx, x), z))) { revert(0,0) }\r\n                    let zxRound := add(zx, half)\r\n                    if lt(zxRound, zx) { revert(0,0) }\r\n                    z := div(zxRound, base)\r\n                }\r\n            }\r\n            }\r\n        }\r\n    }\r\n\r\n    function mkrRmul(uint x, uint y) internal pure returns (uint z) {\r\n        z = mkrMul(x, y) / ONE;\r\n    }\r\n\r\n    function mkrMul(uint x, uint y) internal pure returns (uint z) {\r\n        require(y == 0 || (z = x * y) / y == x);\r\n    }\r\n\r\n    function mkrAdd(uint x, uint y) internal pure returns (uint z) {\r\n        require((z = x + y) >= x);\r\n    }\r\n}\r\n\r\n\r\n/**\r\n * @title Token adapter for Chai tokens.\r\n * @dev Implementation of TokenAdapter interface.\r\n * @author Igor Sobolev <sobolev@zerion.io>\r\n */\r\ncontract ChaiTokenAdapter is TokenAdapter, MKRAdapter {\r\n\r\n    /**\r\n     * @return TokenMetadata struct with ERC20-style token metadata.\r\n     * @dev Implementation of TokenAdapter interface function.\r\n     */\r\n    function getMetadata(address token) external view override returns (TokenMetadata memory) {\r\n        return TokenMetadata({\r\n            token: token,\r\n            name: ERC20(token).name(),\r\n            symbol: ERC20(token).symbol(),\r\n            decimals: ERC20(token).decimals()\r\n        });\r\n    }\r\n\r\n    /**\r\n     * @return Array of Component structs with underlying tokens rates for the given asset.\r\n     * @dev Implementation of TokenAdapter interface function.\r\n     */\r\n    function getComponents(address) external view override returns (Component[] memory) {\r\n        Pot pot = Pot(POT);\r\n        Component[] memory underlyingTokens = new Component[](1);\r\n\r\n        underlyingTokens[0] = Component({\r\n            token: DAI,\r\n            tokenType: \"ERC20\",\r\n            // solhint-disable-next-line not-rely-on-time\r\n            rate: mkrRmul(mkrRmul(mkrRpow(pot.dsr(), now - pot.rho(), ONE), pot.chi()), 1e18)\r\n        });\r\n\r\n        return underlyingTokens;\r\n    }\r\n}","ABI":"[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"getComponents\",\"outputs\":[{\"components\":[{\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"},{\"internalType\":\"string\",\"name\":\"tokenType\",\"type\":\"string\"},{\"internalType\":\"uint256\",\"name\":\"rate\",\"type\":\"uint256\"}],\"internalType\":\"struct Component[]\",\"name\":\"\",\"type\":\"tuple[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"}],\"name\":\"getMetadata\",\"outputs\":[{\"components\":[{\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"},{\"internalType\":\"string\",\"name\":\"name\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"symbol\",\"type\":\"string\"},{\"internalType\":\"uint8\",\"name\":\"decimals\",\"type\":\"uint8\"}],\"internalType\":\"struct TokenMetadata\",\"name\":\"\",\"type\":\"tuple\"}],\"stateMutability\":\"view\",\"type\":\"function\"}]","ContractName":"ChaiTokenAdapter","CompilerVersion":"v0.6.5+commit.f956cc89","OptimizationUsed":"1","Runs":"200","ConstructorArguments":"","Library":"","LicenseType":"GNU LGPLv3","SwarmSource":"ipfs://fb9fd906bda3c101c2ffebfd6c4cc6521bc4e2e7fe88fe485286f64c6f03e22f"}]}