{"status":"1","message":"OK","result":[{"SourceCode":"/*\r\n\r\n***The Shuffle Raffle v2***\r\n\r\nhttps://shuffle-raffle.com/\r\n\r\nThe shuffle raffle is a game built on top of the Shuffle Monster token (https://shuffle.monster/).\r\nPlayers can buy tickets with SHUF tokens. Each week a winner is randomly picked. \r\n\r\n*/\r\n\r\npragma solidity ^0.5.17;\r\n\r\ncontract ERC20Token {\r\n  function totalSupply() public view returns(uint);\r\n  function balanceOf(address tokenOwner) public view returns(uint balance);\r\n  function allowance(address tokenOwner, address spender) public view returns(uint remaining);\r\n  function transfer(address to, uint tokens) public returns(bool success);\r\n  function approve(address spender, uint tokens) public returns(bool success);\r\n  function transferFrom(address from, address to, uint tokens) public returns(bool success);\r\n}\r\n\r\ncontract Ownable {\r\n    address public owner;\r\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\r\n\r\n    constructor() public {\r\n      owner = msg.sender;\r\n    }\r\n    \r\n    modifier onlyOwner() {\r\n      require(msg.sender == owner);\r\n      _;\r\n    }\r\n    \r\n    function transferOwnership(address newOwner) public onlyOwner {\r\n      require(newOwner != address(0));\r\n      emit OwnershipTransferred(owner, newOwner);\r\n      owner = newOwner;\r\n    }\r\n}\r\n\r\ncontract ShuffleRaffle_v2 is Ownable {\r\n    using SafeMath for uint256;\r\n    \r\n    struct Order {\r\n        uint48 position;\r\n        uint48 size;\r\n        address owner;\r\n    }\r\n    \r\n    mapping(uint256 => Order[]) TicketBook;\r\n    address private constant ZERO_ADDRESS = 0x0000000000000000000000000000000000000000;\r\n    address public constant shufAddress = 0x3A9FfF453d50D4Ac52A6890647b823379ba36B9E;\r\n    ERC20Token public constant shuf = ERC20Token(shufAddress);\r\n    UniswapExchangeInterface private constant UniShuf = UniswapExchangeInterface(0x536956Fab86774fb55CfaAcF496BC25E4d2B435C);\r\n    UniswapFactoryInterface private constant UniFactory = UniswapFactoryInterface(0xc0a47dFe034B400B47bDaD5FecDa2621de6c4d95);\r\n    Gastoken private constant gastoken = Gastoken(0x0000000000b3F879cb30FE243b4Dfee438691c04);\r\n    uint256 public RaffleNo = 1;\r\n    uint256 public NextRaffle = 1586112779;\r\n\r\n    uint256 public TicketPrice = 5*10**18;\r\n    uint256 public PickerReward = 10*10**18;\r\n    uint256 public minTickets = 50;\r\n    uint256 public RafflePerc = 15;\r\n    uint256 public dappDivsPerc = 0;\r\n    address public dappAddress;\r\n\r\n    uint256 public nextTicketPrice = 5*10**18;\r\n    uint256 public nextPickerReward = 10*10**18;\r\n    uint256 public nextminTickets = 50;\r\n    uint256 public nextRafflePerc = 15;\r\n    uint256 public nextdappDivsPerc = 0;\r\n    address public nextdappAddress;\r\n\r\n    uint256 public random_seed = 0;\r\n    bool    public raffle_closed = false;\r\n\r\n    event Ticket(uint256 raffle, address indexed addr, uint256 amount);\r\n    event Winner(uint256 raffle, address indexed addr, uint256 amount, uint256 win_ticket);\r\n    event RaffleClosed(uint256 raffle, uint256 block_number);\r\n    event TicketPriceChanged(uint256 previousticketprice, uint256 newticketprice);\r\n    event PickerRewardChanged(uint256 previouspickerReward, uint256 newpickerreward);\r\n    event minTicketsChanged(uint256 previousminTickets,uint256 newmintickets);\r\n    event RafflePercChanged(uint256 previousRafflePerc, uint256 newRafflePerc);\r\n    event dappDivsPercChanged(uint256 previousdappDivs,uint256 newdappDivs);\r\n    event dappAddressChanged(address previousdappAddress, address newdappAddress);\r\n\r\n\r\n    function TicketsOfAddress(address addr) public view returns (uint256 total_tickets) {\r\n        uint256 _tt=0;\r\n        for(uint256 i = 0; i<TicketBook[RaffleNo].length; i++){\r\n            if (TicketBook[RaffleNo][i].owner == addr)\r\n                _tt=_tt.add(TicketBook[RaffleNo][i].size);\r\n        }\r\n        return _tt;\r\n    }\r\n\r\n    function Stats() public view returns (uint256 raffle_number, uint48 total_tickets, uint256 balance, uint256 next_raffle, uint256 ticket_price, bool must_pick_winner, uint256 picker_reward, uint256 min_tickets,uint256 next_ticket_price,uint256 next_picker_reward,uint256 next_min_tickets, bool is_raffle_closed,uint256 raffle_perc,uint256 dapp_divs_perf ){\r\n        bool mustPickWinner;\r\n        uint48 TotalTickets= _find_curr_position();\r\n        if (now>NextRaffle && TotalTickets>minTickets)\r\n            mustPickWinner = true;\r\n        else\r\n            mustPickWinner = false;\r\n        return (RaffleNo, TotalTickets, shuf.balanceOf(address(this)), NextRaffle, TicketPrice, mustPickWinner, PickerReward, minTickets, nextTicketPrice, nextPickerReward, nextminTickets, raffle_closed,RafflePerc,dappDivsPerc );\r\n    }\r\n    \r\n    function BuyTicket(uint48 tickets) external returns(bool success){\r\n        require(msg.sender == tx.origin, \"Only hoomans\");\r\n        require(tickets > 0);\r\n        uint256 bill = uint256(tickets).mul(TicketPrice);\r\n        require(shuf.allowance(msg.sender, address(this))>=bill, \"Contract not approved\");\r\n        require(shuf.balanceOf(msg.sender)>=bill, \"Not enough SHUF balance.\");\r\n        uint48 TotalTickets = _find_curr_position();\r\n        if (now>NextRaffle){\r\n            //requires to pick a winner or extends duration if not enough participants\r\n            require(TotalTickets<=minTickets,\"A winner has to be picked first\");\r\n            NextRaffle = NextRaffle.add((((now.sub(NextRaffle)).div(5 days + 12 hours)).add(1)).mul(5 days + 12 hours));\r\n        }\r\n        \r\n        require(shuf.transferFrom(msg.sender, address(this), bill));\r\n        pushTickets(tickets, TotalTickets);\r\n        return true;\r\n    }\r\n    \r\n    \r\n    function BuyTicketEth(uint48 tickets) external payable returns(bool success){\r\n        require(msg.sender == tx.origin, \"Only hoomans\");\r\n        require(tickets>0);\r\n        uint256 bill = uint256(tickets).mul(TicketPrice).mul(100).div(98);\r\n        uint256 ethBill = UniShuf.getEthToTokenOutputPrice(bill);\r\n        require(msg.value>=ethBill, \"Not enough eth.\");\r\n        uint48 TotalTickets = _find_curr_position();\r\n        if (now>NextRaffle){\r\n            //requires to pick a winner or extends duration if not enough participants\r\n            require(TotalTickets<=minTickets,\"A winner has to be picked first\");\r\n            NextRaffle = NextRaffle.add((((now.sub(NextRaffle)).div(5 days + 12 hours)).add(1)).mul(5 days + 12 hours));\r\n        }\r\n        require(UniShuf.ethToTokenTransferOutput.value(ethBill)(bill, now, address(this))==ethBill);\r\n        if (msg.value>ethBill){\r\n            msg.sender.transfer(msg.value-ethBill);\r\n        }\r\n        pushTickets(tickets, TotalTickets);\r\n        return true;\r\n    }\r\n    \r\n    function BuyTicketUniswap(uint48 tickets, address tokenAddress, uint256 maxtokens) external returns(bool success){\r\n        require(msg.sender == tx.origin, \"Only hoomans\");\r\n        require(tickets>0);\r\n        ERC20Token token = ERC20Token(tokenAddress);\r\n        address tokenExchange = UniFactory.getExchange(tokenAddress);\r\n        require(tokenAddress != ZERO_ADDRESS, \"Token not found\");\r\n        UniswapExchangeInterface UniToken = UniswapExchangeInterface(tokenExchange);\r\n        uint256 bill = uint256(tickets).mul(TicketPrice).mul(100).div(98);\r\n\r\n        uint256 ethBill = UniShuf.getEthToTokenOutputPrice(bill);\r\n        uint256 tokenBill = UniToken.getTokenToEthOutputPrice(ethBill);\r\n        require(tokenBill<=maxtokens);\r\n        require(token.allowance(msg.sender,address(this))>=tokenBill, \"Contract not approved\");\r\n        uint48 TotalTickets = _find_curr_position();\r\n        if (now>NextRaffle){\r\n            //requires to pick a winner or extends duration if not enough participants\r\n            require(TotalTickets<=minTickets,\"A winner has to be picked first\");\r\n            NextRaffle = NextRaffle.add((((now.sub(NextRaffle)).div(5 days + 12 hours)).add(1)).mul(5 days + 12 hours));\r\n        }\r\n        uint256 contract_shuf_balance = shuf.balanceOf(address(this));\r\n        require(token.transferFrom(msg.sender, address(this), tokenBill));\r\n        if (token.allowance(address(this), tokenExchange) < tokenBill) {\r\n\t\t\ttoken.approve(tokenExchange, uint256(-1));\r\n\t\t}\r\n        require(UniToken.tokenToTokenTransferOutput(bill, tokenBill, ethBill, now, address(this), shufAddress) == tokenBill);\r\n        require(shuf.balanceOf(address(this))>=contract_shuf_balance.add(bill.sub(divRound(bill,100).mul(2))));\r\n        pushTickets(tickets, TotalTickets);\r\n        return true;\r\n    }\r\n    \r\n    function pushTickets(uint48 tickets,uint48 TotalTickets) internal returns(bool success){\r\n        Order memory t;\r\n        t.size=tickets;\r\n        t.owner=msg.sender;\r\n        t.position=TotalTickets+tickets;\r\n        require(t.position>=TotalTickets);\r\n        TicketBook[RaffleNo].push(t);\r\n        emit Ticket(RaffleNo, msg.sender, tickets);\r\n        return true;\r\n    }\r\n   \r\n    function pickWinner() external returns(bool success) {\r\n        uint256 gaslimit = gasleft();\r\n        require(msg.sender == tx.origin, \"Only hoomans\");\r\n        require(now>NextRaffle, \"It's not time to pick a winner yet\");\r\n        uint256 Totaltickets =_find_curr_position();\r\n        require(Totaltickets>minTickets,  \"Not enough tickets to pick a winner\");\r\n        \r\n        //Close the Raffle\r\n        if (raffle_closed == false){\r\n            raffle_closed = true;\r\n            random_seed = block.number;\r\n            emit RaffleClosed(RaffleNo, random_seed);\r\n            shuf.transfer(msg.sender, PickerReward);\r\n            gastoken.freeUpTo((gaslimit - gasleft() + 14154) / 41130);\r\n            return true;\r\n        }\r\n        \r\n        require(random_seed<block.number);\r\n        uint256 winningticket = _random(Totaltickets);\r\n        address winner = _find_winner(winningticket);\r\n        \r\n        //reset Raffle\r\n        RaffleNo=RaffleNo.add(1);\r\n        NextRaffle = NextRaffle.add((((now.sub(NextRaffle)).div(5 days + 12 hours)).add(1)).mul(5 days + 12 hours));\r\n        raffle_closed = false;\r\n        \r\n        //reward caller\r\n        shuf.transfer(msg.sender, PickerReward);\r\n\r\n        //calculate reward\r\n        uint256 reward = shuf.balanceOf(address(this));\r\n\r\n        //send dapp divs\r\n        if(dappDivsPerc>0){\r\n            uint256 divs = reward.mul(dappDivsPerc).div(100);\r\n            shuf.transfer(dappAddress, divs);\r\n            reward = reward.sub(divs);\r\n        }\r\n\r\n        //reward winner\r\n        reward = reward.sub(reward.mul(RafflePerc).div(100));\r\n        shuf.transfer(winner,reward);\r\n        emit Winner(RaffleNo, winner, reward, winningticket);\r\n\r\n        \r\n        //check for changes\r\n        if(nextTicketPrice!=TicketPrice){\r\n            uint256 oldticketPrice=TicketPrice;\r\n            TicketPrice = nextTicketPrice;\r\n            emit TicketPriceChanged(oldticketPrice, TicketPrice);\r\n        }\r\n        if(nextPickerReward!=PickerReward){\r\n            uint256 oldpickerReward=PickerReward;\r\n            PickerReward = nextPickerReward;\r\n            emit PickerRewardChanged(oldpickerReward, PickerReward);\r\n        }\r\n        if(nextminTickets!=minTickets){\r\n            uint256 oldminTickets=minTickets;\r\n            minTickets = nextminTickets;\r\n            emit minTicketsChanged(oldminTickets, minTickets);\r\n        }\r\n        if(nextRafflePerc!=RafflePerc){\r\n            uint256 oldRafflePerc = RafflePerc;\r\n            RafflePerc = nextRafflePerc;\r\n            emit RafflePercChanged(oldRafflePerc, RafflePerc);\r\n        }\r\n        if(nextdappDivsPerc!=dappDivsPerc){\r\n            uint256 olddappDivsPerc = dappDivsPerc;\r\n            dappDivsPerc = nextdappDivsPerc;\r\n            emit dappDivsPercChanged(olddappDivsPerc, dappDivsPerc);\r\n        }\r\n         if(dappAddress!=dappAddress){\r\n            address olddappAddress = dappAddress;\r\n            dappAddress = nextdappAddress;\r\n            emit dappAddressChanged(olddappAddress, dappAddress);\r\n        }\r\n        gastoken.freeUpTo((gaslimit - gasleft() + 14154) / 41130);\r\n        return true;\r\n    }\r\n    \r\n    function _find_curr_position() internal view returns(uint48 curr_position){\r\n        uint256 TotalOrders = TicketBook[RaffleNo].length;\r\n        uint48 Totaltickets=(TotalOrders>0)?TicketBook[RaffleNo][TotalOrders.sub(1)].position:0;\r\n        return Totaltickets;\r\n    }\r\n    \r\n     function _find_winner(uint256 winning_ticket)  internal view returns(address winner){\r\n    //search for the winner using binary search\r\n        uint256 L=0;\r\n        uint256 R=TicketBook[RaffleNo].length.sub(1);\r\n        uint256 raffleno=RaffleNo;\r\n        \r\n        while(L <= R){\r\n            uint256 m = (L.add(R)).div(2);\r\n            Order memory Am = TicketBook[raffleno][m];\r\n            if(Am.position<winning_ticket)\r\n                L=m.add(1);\r\n            else if(Am.position-Am.size>=winning_ticket)\r\n                R=m.sub(1);\r\n            else\r\n                return Am.owner;\r\n        }\r\n        return address(this);\r\n    }\r\n    \r\n    function setTicketPrice(uint256 newticketprice) external onlyOwner {\r\n        nextTicketPrice= newticketprice;\r\n    }\r\n    \r\n    function setPickerReward(uint256 newpickerreward) external onlyOwner {\r\n        nextPickerReward = newpickerreward;\r\n    }\r\n    \r\n    function setminTickets(uint256 newmintickets) external onlyOwner {\r\n        nextminTickets = newmintickets;\r\n    }\r\n\r\n    function setRafflePerc(uint256 newRafflePerc) external onlyOwner {\r\n        nextRafflePerc= newRafflePerc;\r\n    }\r\n\r\n    function setdappDivsPerc(uint256 newdappDivsPerc) external onlyOwner {\r\n        nextdappDivsPerc= newdappDivsPerc;\r\n    }\r\n\r\n    function setdappAddress(address newdappAddress) external onlyOwner {\r\n        nextdappAddress= newdappAddress;\r\n    }\r\n  \r\n    function _random(uint256 Totaltickets) internal view returns (uint256) {\r\n        return uint256(uint256(keccak256(abi.encodePacked(blockhash(random_seed), RaffleNo)))%Totaltickets).add(1);\r\n    }\r\n\r\n    function divRound(uint256 x, uint256 y) internal pure returns (uint256) {\r\n        require(y != 0, \"Div by zero\");\r\n        uint256 r = x / y;\r\n        if (x % y != 0) {\r\n            r = r + 1;\r\n        }\r\n        return r;\r\n    }    \r\n}\r\n\r\nlibrary SafeMath {\r\n\r\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        uint256 c = a + b;\r\n        require(c >= a, \"SafeMath: addition overflow\");\r\n\r\n        return c;\r\n    }\r\n    \r\n     function sub(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        return sub(a, b, \"SafeMath: subtraction overflow\");\r\n    }\r\n\r\n    function sub(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\r\n        require(b <= a, errorMessage);\r\n        uint256 c = a - b;\r\n\r\n        return c;\r\n    }\r\n\r\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        if (a == 0) {\r\n            return 0;\r\n        }\r\n\r\n        uint256 c = a * b;\r\n        require(c / a == b, \"SafeMath: multiplication overflow\");\r\n\r\n        return c;\r\n    }\r\n\r\n     function div(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        return div(a, b, \"SafeMath: division by zero\");\r\n    }\r\n\r\n    function div(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\r\n        require(b > 0, errorMessage);\r\n        uint256 c = a / b;\r\n \r\n        return c;\r\n    }\r\n}\r\n\r\ninterface UniswapExchangeInterface {\r\n    function getEthToTokenOutputPrice(uint256 tokens_bought) external view returns (uint256 eth_sold);\r\n    function getTokenToEthOutputPrice(uint256 eth_bought) external view returns (uint256 tokens_sold);\r\n    function ethToTokenTransferOutput(uint256 tokens_bought, uint256 deadline, address recipient) external payable returns (uint256  eth_sold);\r\n    function tokenToTokenTransferOutput(uint256 tokens_bought, uint256 max_tokens_sold, uint256 max_eth_sold, uint256 deadline,\r\n    address recipient, address token_addr) external returns (uint256  tokens_sold);\r\n}\r\n\r\ncontract UniswapFactoryInterface {\r\n    function getExchange(address token) external view returns (address exchange);\r\n}\r\n\r\ninterface Gastoken {\r\n    function freeUpTo(uint256 value) external returns (uint256 freed);\r\n}","ABI":"[{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"previouspickerReward\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"newpickerreward\",\"type\":\"uint256\"}],\"name\":\"PickerRewardChanged\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"raffle\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"block_number\",\"type\":\"uint256\"}],\"name\":\"RaffleClosed\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"previousRafflePerc\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"newRafflePerc\",\"type\":\"uint256\"}],\"name\":\"RafflePercChanged\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"raffle\",\"type\":\"uint256\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"addr\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"Ticket\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"previousticketprice\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"newticketprice\",\"type\":\"uint256\"}],\"name\":\"TicketPriceChanged\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"raffle\",\"type\":\"uint256\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"addr\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"win_ticket\",\"type\":\"uint256\"}],\"name\":\"Winner\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"previousdappAddress\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"newdappAddress\",\"type\":\"address\"}],\"name\":\"dappAddressChanged\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"previousdappDivs\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"newdappDivs\",\"type\":\"uint256\"}],\"name\":\"dappDivsPercChanged\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"previousminTickets\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"newmintickets\",\"type\":\"uint256\"}],\"name\":\"minTicketsChanged\",\"type\":\"event\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"uint48\",\"name\":\"tickets\",\"type\":\"uint48\"}],\"name\":\"BuyTicket\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"success\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"uint48\",\"name\":\"tickets\",\"type\":\"uint48\"}],\"name\":\"BuyTicketEth\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"success\",\"type\":\"bool\"}],\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"uint48\",\"name\":\"tickets\",\"type\":\"uint48\"},{\"internalType\":\"address\",\"name\":\"tokenAddress\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"maxtokens\",\"type\":\"uint256\"}],\"name\":\"BuyTicketUniswap\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"success\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"NextRaffle\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"PickerReward\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"RaffleNo\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"RafflePerc\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"Stats\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"raffle_number\",\"type\":\"uint256\"},{\"internalType\":\"uint48\",\"name\":\"total_tickets\",\"type\":\"uint48\"},{\"internalType\":\"uint256\",\"name\":\"balance\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"next_raffle\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"ticket_price\",\"type\":\"uint256\"},{\"internalType\":\"bool\",\"name\":\"must_pick_winner\",\"type\":\"bool\"},{\"internalType\":\"uint256\",\"name\":\"picker_reward\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"min_tickets\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"next_ticket_price\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"next_picker_reward\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"next_min_tickets\",\"type\":\"uint256\"},{\"internalType\":\"bool\",\"name\":\"is_raffle_closed\",\"type\":\"bool\"},{\"internalType\":\"uint256\",\"name\":\"raffle_perc\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"dapp_divs_perf\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"TicketPrice\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"internalType\":\"address\",\"name\":\"addr\",\"type\":\"address\"}],\"name\":\"TicketsOfAddress\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"total_tickets\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"dappAddress\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"dappDivsPerc\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"minTickets\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"nextPickerReward\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"nextRafflePerc\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"nextTicketPrice\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"nextdappAddress\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"nextdappDivsPerc\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"nextminTickets\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"pickWinner\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"success\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"raffle_closed\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"random_seed\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"newpickerreward\",\"type\":\"uint256\"}],\"name\":\"setPickerReward\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"newRafflePerc\",\"type\":\"uint256\"}],\"name\":\"setRafflePerc\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"newticketprice\",\"type\":\"uint256\"}],\"name\":\"setTicketPrice\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"address\",\"name\":\"newdappAddress\",\"type\":\"address\"}],\"name\":\"setdappAddress\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"newdappDivsPerc\",\"type\":\"uint256\"}],\"name\":\"setdappDivsPerc\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"newmintickets\",\"type\":\"uint256\"}],\"name\":\"setminTickets\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"shuf\",\"outputs\":[{\"internalType\":\"contract ERC20Token\",\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"shufAddress\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"}]","ContractName":"ShuffleRaffle_v2","CompilerVersion":"v0.5.17+commit.d19bba13","OptimizationUsed":"0","Runs":"200","ConstructorArguments":"","Library":"","LicenseType":"GNU GPLv3","SwarmSource":"bzzr://bc7f9da97ca9fdbbb58112cc2b93953ce33fb4de2a954f11b971be5ab13ca46f"}]}