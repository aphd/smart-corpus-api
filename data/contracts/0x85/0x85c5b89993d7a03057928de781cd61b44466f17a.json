{"status":"1","message":"OK","result":[{"SourceCode":"pragma solidity 0.5.2;\r\n\r\n/***************\r\n**            **\r\n** INTERFACES **\r\n**            **\r\n***************/\r\n\r\n/**\r\n * @dev Interface of OpenZeppelin's ERC20; For definitions / documentation, see below.\r\n */\r\ninterface IERC20 {\r\n\r\n    function allowance(address owner, address spender) external view returns (uint256);\r\n    function approve(address spender, uint256 amount) external returns (bool);\r\n    function balanceOf(address account) external view returns (uint256);\r\n    function totalSupply() external view returns (uint256);\r\n    function transfer(address recipient, uint256 amount) external returns (bool);\r\n    function transferFrom(address sender, address recipient, uint256 amount) external returns (bool);\r\n\r\n    event Approval(address indexed owner, address indexed spender, uint256 value);\r\n    event Transfer(address indexed from, address indexed to, uint256 value);\r\n\r\n}\r\n\r\n/**\r\n * @dev Wrappers over Solidity's arithmetic operations with added overflow\r\n * checks.\r\n *\r\n * Arithmetic operations in Solidity wrap on overflow. This can easily result\r\n * in bugs, because programmers usually assume that an overflow raises an\r\n * error, which is the standard behavior in high level programming languages.\r\n * `SafeMath` restores this intuition by reverting the transaction when an\r\n * operation overflows.\r\n *\r\n * Using this library instead of the unchecked operations eliminates an entire\r\n * class of bugs, so it's recommended to use it always.\r\n */\r\nlibrary SafeMath {\r\n    /**\r\n     * @dev Returns the addition of two unsigned integers, reverting on\r\n     * overflow.\r\n     *\r\n     * Counterpart to Solidity's `+` operator.\r\n     *\r\n     * Requirements:\r\n     * - Addition cannot overflow.\r\n     */\r\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        uint256 c = a + b;\r\n        require(c >= a, \"SafeMath: addition overflow\");\r\n\r\n        return c;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the subtraction of two unsigned integers, reverting on\r\n     * overflow (when the result is negative).\r\n     *\r\n     * Counterpart to Solidity's `-` operator.\r\n     *\r\n     * Requirements:\r\n     * - Subtraction cannot overflow.\r\n     */\r\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        return sub(a, b, \"SafeMath: subtraction overflow\");\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the subtraction of two unsigned integers, reverting with custom message on\r\n     * overflow (when the result is negative).\r\n     *\r\n     * Counterpart to Solidity's `-` operator.\r\n     *\r\n     * Requirements:\r\n     * - Subtraction cannot overflow.\r\n     */\r\n    function sub(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\r\n        require(b <= a, errorMessage);\r\n        uint256 c = a - b;\r\n\r\n        return c;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the multiplication of two unsigned integers, reverting on\r\n     * overflow.\r\n     *\r\n     * Counterpart to Solidity's `*` operator.\r\n     *\r\n     * Requirements:\r\n     * - Multiplication cannot overflow.\r\n     */\r\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        // Gas optimization: this is cheaper than requiring 'a' not being zero, but the\r\n        // benefit is lost if 'b' is also tested.\r\n        // See: https://github.com/OpenZeppelin/openzeppelin-contracts/pull/522\r\n        if (a == 0) {\r\n            return 0;\r\n        }\r\n\r\n        uint256 c = a * b;\r\n        require(c / a == b, \"SafeMath: multiplication overflow\");\r\n\r\n        return c;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the integer division of two unsigned integers. Reverts on\r\n     * division by zero. The result is rounded towards zero.\r\n     *\r\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\r\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\r\n     * uses an invalid opcode to revert (consuming all remaining gas).\r\n     *\r\n     * Requirements:\r\n     * - The divisor cannot be zero.\r\n     */\r\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        return div(a, b, \"SafeMath: division by zero\");\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the integer division of two unsigned integers. Reverts with custom message on\r\n     * division by zero. The result is rounded towards zero.\r\n     *\r\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\r\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\r\n     * uses an invalid opcode to revert (consuming all remaining gas).\r\n     *\r\n     * Requirements:\r\n     * - The divisor cannot be zero.\r\n     */\r\n    function div(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\r\n        // Solidity only automatically asserts when dividing by 0\r\n        require(b > 0, errorMessage);\r\n        uint256 c = a / b;\r\n        // assert(a == b * c + a % b); // There is no case in which this doesn't hold\r\n\r\n        return c;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\r\n     * Reverts when dividing by zero.\r\n     *\r\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\r\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\r\n     * invalid opcode to revert (consuming all remaining gas).\r\n     *\r\n     * Requirements:\r\n     * - The divisor cannot be zero.\r\n     */\r\n    function mod(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        return mod(a, b, \"SafeMath: modulo by zero\");\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\r\n     * Reverts with custom message when dividing by zero.\r\n     *\r\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\r\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\r\n     * invalid opcode to revert (consuming all remaining gas).\r\n     *\r\n     * Requirements:\r\n     * - The divisor cannot be zero.\r\n     */\r\n    function mod(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\r\n        require(b != 0, errorMessage);\r\n        return a % b;\r\n    }\r\n}\r\n\r\n/**\r\n * @title   Lock Drop Contract\r\n *\r\n * @dev     This contract implements a Kong Lock Drop.\r\n *\r\n *          Notes (check online sources for further details):\r\n *\r\n *          - `stakeETH()` can be called to participate in the lock drop by staking ETH. Individual\r\n *          stakes are immediately sent to separate instances of `LockETH` contracts that only the\r\n *          staker has access to.\r\n *\r\n *          - `claimKong()` can be called to claim Kong once the staking period is over.\r\n *\r\n *          - The contract is open for contributions for 30 days after its deployment.\r\n */\r\ncontract LockDrop {\r\n    using SafeMath for uint256;\r\n\r\n    // Timestamp for the end of staking.\r\n    uint256 public _stakingEnd;\r\n\r\n    // Sum of all contribution weights.\r\n    uint256 public _weightsSum;\r\n\r\n    // Address of the KONG ERC20 contract.\r\n    address public _kongERC20Address;\r\n\r\n    // Mapping from contributors to contribution weights.\r\n    mapping(address => uint256) public _weights;\r\n\r\n    // Mapping from contributors to locking period ends.\r\n    mapping(address => uint256) public _lockingEnds;\r\n\r\n    // Events for staking and claiming.\r\n    event Staked(\r\n        address indexed contributor,\r\n        address lockETHAddress,\r\n        uint256 ethStaked,\r\n        uint256 endDate\r\n    );\r\n    event Claimed(\r\n        address indexed claimant,\r\n        uint256 ethStaked,\r\n        uint256 kongClaim\r\n    );\r\n\r\n    constructor (address kongERC20Address) public {\r\n\r\n        // Set the address of the ERC20 token.\r\n        _kongERC20Address = kongERC20Address;\r\n\r\n        // Set the end of the staking period to 30 days after deployment.\r\n        _stakingEnd = block.timestamp + 30 days;\r\n\r\n    }\r\n\r\n    /**\r\n     * @dev Function to stake ETH in this lock drop.\r\n     *\r\n     *      When called with positive `msg.value` and valid `stakingPeriod`, deploys instance of\r\n     *      `LockETH` contract and transfers `msg.value` to it. Each `LockETH` contract is only\r\n     *      accessible to the address that called `stakeETH()` to deploy the respective instance.\r\n     *\r\n     *      For valid stakes, calculates the variable `weight` as the product of total lockup time\r\n     *      and `msg.value`. Stores `weight` in `_weights[msg.sender]` and adds it to `_weightsSum`.\r\n     *\r\n     *      Expects `block.timestamp` to be smaller than `_stakingEnd`. Does not allow for topping\r\n     *      up of existing stakes. Restricts staking period to be between 90 and 365.\r\n     *\r\n     *      Emits `Staked` event.\r\n     */\r\n    function stakeETH(uint256 stakingPeriod) public payable {\r\n\r\n        // Require positive msg.value.\r\n        require(msg.value > 0, 'Msg value = 0.');\r\n\r\n        // No topping up.\r\n        require(_weights[msg.sender] == 0, 'No topping up.');\r\n\r\n        // No contributions after _stakingEnd.\r\n        require(block.timestamp <= _stakingEnd, 'Closed for contributions.');\r\n\r\n        // Ensure the staking period is valid.\r\n        require(stakingPeriod >= 30 && stakingPeriod <= 365, 'Staking period outside of allowed range.');\r\n\r\n        // Calculate contribution weight as product of msg.value and total time the ETH is locked.\r\n        uint256 totalTime = _stakingEnd + stakingPeriod * 1 days - block.timestamp;\r\n        uint256 weight = totalTime.mul(msg.value);\r\n\r\n        // Adjust contribution weights.\r\n        _weightsSum = _weightsSum.add(weight);\r\n        _weights[msg.sender] = weight;\r\n\r\n        // Set end date for lock.\r\n        _lockingEnds[msg.sender] = _stakingEnd + stakingPeriod * 1 days;\r\n\r\n        // Deploy new lock contract.\r\n        LockETH lockETH = (new LockETH).value(msg.value)(_lockingEnds[msg.sender], msg.sender);\r\n\r\n        // Abort if the new contract's balance is lower than expected.\r\n        require(address(lockETH).balance >= msg.value);\r\n\r\n        // Emit event.\r\n        emit Staked(msg.sender, address(lockETH), msg.value, _lockingEnds[msg.sender]);\r\n\r\n    }\r\n\r\n    /**\r\n     * @dev Function to claim Kong.\r\n     *\r\n     *      Determines the ratio of the contribution by `msg.sender` to all contributions. Sends\r\n     *      the product of this ratio and the contract's Kong balance to `msg.sender`. Sets the\r\n     *      contribution of `msg.sender` to zero afterwards and subtracts it from the sum of all\r\n     *      contributions.\r\n     *\r\n     *      Expects `block.timestamp` to be larger than `_lockingEnds[msg.sender]`. Throws if\r\n     *      `_weights[msg.sender]` is zero. Emits `Claimed` event.\r\n     *\r\n     *      NOTE: Overflow protection in calculation of `kongClaim` prevents anyone staking massive\r\n     *      amounts from ever claiming. Fine as long as product of weight and the contract's Kong\r\n     *      balance is at most (2^256)-1.\r\n     */\r\n    function claimKong() external {\r\n\r\n        // Verify that this `msg.sender` has contributed.\r\n        require(_weights[msg.sender] > 0, 'Zero contribution.');\r\n\r\n        // Verify that this `msg.sender` can claim.\r\n        require(block.timestamp > _lockingEnds[msg.sender], 'Cannot claim yet.');\r\n\r\n        // Calculate amount to return.\r\n        uint256 weight = _weights[msg.sender];\r\n        uint256 kongClaim = IERC20(_kongERC20Address).balanceOf(address(this)).mul(weight).div(_weightsSum);\r\n\r\n        // Adjust stake and sum of stakes.\r\n        _weights[msg.sender] = 0;\r\n        _weightsSum = _weightsSum.sub(weight);\r\n\r\n        // Send kong to `msg.sender`.\r\n        IERC20(_kongERC20Address).transfer(msg.sender, kongClaim);\r\n\r\n        // Emit event.\r\n        emit Claimed(msg.sender, weight, kongClaim);\r\n\r\n    }\r\n\r\n}\r\n\r\n/**\r\n * @title   LockETH contract.\r\n *\r\n * @dev     Escrows ETH until `_endOfLockUp`. Calling `unlockETH()` after `_endOfLockUp` sends ETH\r\n *          to `_contractOwner`.\r\n */\r\ncontract LockETH {\r\n\r\n    uint256 public _endOfLockUp;\r\n    address payable public _contractOwner;\r\n\r\n    constructor (uint256 endOfLockUp, address payable contractOwner) public payable {\r\n\r\n        _endOfLockUp = endOfLockUp;\r\n        _contractOwner = contractOwner;\r\n\r\n    }\r\n\r\n    /**\r\n     * @dev Send ETH owned by this contract to `_contractOwner`. Can be called by anyone but\r\n     *      requires `block.timestamp` > `endOfLockUp`.\r\n     */\r\n    function unlockETH() external {\r\n\r\n        // Verify end of lock-up period.\r\n        require(block.timestamp > _endOfLockUp, 'Cannot claim yet.');\r\n\r\n        // Send ETH balance to `_contractOwner`.\r\n        _contractOwner.transfer(address(this).balance);\r\n\r\n    }\r\n\r\n}","ABI":"[{\"constant\":true,\"inputs\":[],\"name\":\"_kongERC20Address\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"address\"}],\"name\":\"_lockingEnds\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"address\"}],\"name\":\"_weights\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"stakingPeriod\",\"type\":\"uint256\"}],\"name\":\"stakeETH\",\"outputs\":[],\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"claimKong\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"_weightsSum\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"_stakingEnd\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"name\":\"kongERC20Address\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"contributor\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"lockETHAddress\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"ethStaked\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"endDate\",\"type\":\"uint256\"}],\"name\":\"Staked\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"claimant\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"ethStaked\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"kongClaim\",\"type\":\"uint256\"}],\"name\":\"Claimed\",\"type\":\"event\"}]","ContractName":"LockDrop","CompilerVersion":"v0.5.2+commit.1df8f40c","OptimizationUsed":"0","Runs":"200","ConstructorArguments":"000000000000000000000000177f2ace25f81fc50f9f6e9193adf5ac758e8098","Library":"","LicenseType":"MIT","SwarmSource":"bzzr://065c0e37c8ebcbc3978169570a35fd9ba94dd863f36a5b0c68261870c12022bc"}]}