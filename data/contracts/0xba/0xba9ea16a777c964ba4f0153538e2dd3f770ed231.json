{"status":"1","message":"OK","result":[{"SourceCode":"// File: openzeppelin-solidity/contracts/token/ERC20/ERC20Basic.sol\r\n\r\npragma solidity ^0.4.25;\r\n\r\n\r\n/**\r\n * @title ERC20Basic\r\n * @dev Simpler version of ERC20 interface\r\n * @dev see https://github.com/ethereum/EIPs/issues/179\r\n */\r\ncontract ERC20Basic {\r\n  function totalSupply() public view returns (uint256);\r\n  function balanceOf(address who) public view returns (uint256);\r\n  function transfer(address to, uint256 value) public returns (bool);\r\n  event Transfer(address indexed from, address indexed to, uint256 value);\r\n}\r\n\r\n// File: openzeppelin-solidity/contracts/math/SafeMath.sol\r\n\r\npragma solidity ^0.4.25;\r\n\r\n\r\n/**\r\n * @title SafeMath\r\n * @dev Math operations with safety checks that throw on error\r\n */\r\nlibrary SafeMath {\r\n\r\n  /**\r\n  * @dev Multiplies two numbers, throws on overflow.\r\n  */\r\n  function mul(uint256 a, uint256 b) internal pure returns (uint256 c) {\r\n    if (a == 0) {\r\n      return 0;\r\n    }\r\n    c = a * b;\r\n    assert(c / a == b);\r\n    return c;\r\n  }\r\n\r\n  /**\r\n  * @dev Integer division of two numbers, truncating the quotient.\r\n  */\r\n  function div(uint256 a, uint256 b) internal pure returns (uint256) {\r\n    // assert(b > 0); // Solidity automatically throws when dividing by 0\r\n    // uint256 c = a / b;\r\n    // assert(a == b * c + a % b); // There is no case in which this doesn't hold\r\n    return a / b;\r\n  }\r\n\r\n  /**\r\n  * @dev Subtracts two numbers, throws on overflow (i.e. if subtrahend is greater than minuend).\r\n  */\r\n  function sub(uint256 a, uint256 b) internal pure returns (uint256) {\r\n    assert(b <= a);\r\n    return a - b;\r\n  }\r\n\r\n  /**\r\n  * @dev Adds two numbers, throws on overflow.\r\n  */\r\n  function add(uint256 a, uint256 b) internal pure returns (uint256 c) {\r\n    c = a + b;\r\n    assert(c >= a);\r\n    return c;\r\n  }\r\n}\r\n\r\n// File: openzeppelin-solidity/contracts/token/ERC20/BasicToken.sol\r\n\r\npragma solidity ^0.4.25;\r\n\r\n\r\n\r\n\r\n/**\r\n * @title Basic token\r\n * @dev Basic version of StandardToken, with no allowances.\r\n */\r\ncontract BasicToken is ERC20Basic {\r\n  using SafeMath for uint256;\r\n\r\n  mapping(address => uint256) balances;\r\n\r\n  uint256 totalSupply_;\r\n\r\n  /**\r\n  * @dev total number of tokens in existence\r\n  */\r\n  function totalSupply() public view returns (uint256) {\r\n    return totalSupply_;\r\n  }\r\n\r\n  /**\r\n  * @dev transfer token for a specified address\r\n  * @param _to The address to transfer to.\r\n  * @param _value The amount to be transferred.\r\n  */\r\n  function transfer(address _to, uint256 _value) public returns (bool) {\r\n    require(_to != address(0));\r\n    require(_value <= balances[msg.sender]);\r\n\r\n    balances[msg.sender] = balances[msg.sender].sub(_value);\r\n    balances[_to] = balances[_to].add(_value);\r\n    emit Transfer(msg.sender, _to, _value);\r\n    return true;\r\n  }\r\n\r\n  /**\r\n  * @dev Gets the balance of the specified address.\r\n  * @param _owner The address to query the the balance of.\r\n  * @return An uint256 representing the amount owned by the passed address.\r\n  */\r\n  function balanceOf(address _owner) public view returns (uint256) {\r\n    return balances[_owner];\r\n  }\r\n\r\n}\r\n\r\n// File: openzeppelin-solidity/contracts/token/ERC20/ERC20.sol\r\n\r\npragma solidity ^0.4.25;\r\n\r\n\r\n\r\n/**\r\n * @title ERC20 interface\r\n * @dev see https://github.com/ethereum/EIPs/issues/20\r\n */\r\ncontract ERC20 is ERC20Basic {\r\n  function allowance(address owner, address spender) public view returns (uint256);\r\n  function transferFrom(address from, address to, uint256 value) public returns (bool);\r\n  function approve(address spender, uint256 value) public returns (bool);\r\n  event Approval(address indexed owner, address indexed spender, uint256 value);\r\n}\r\n\r\n// File: openzeppelin-solidity/contracts/token/ERC20/StandardToken.sol\r\n\r\npragma solidity ^0.4.25;\r\n\r\n\r\n\r\n\r\n/**\r\n * @title Standard ERC20 token\r\n *\r\n * @dev Implementation of the basic standard token.\r\n * @dev https://github.com/ethereum/EIPs/issues/20\r\n * @dev Based on code by FirstBlood: https://github.com/Firstbloodio/token/blob/master/smart_contract/FirstBloodToken.sol\r\n */\r\ncontract StandardToken is ERC20, BasicToken {\r\n\r\n  mapping (address => mapping (address => uint256)) internal allowed;\r\n\r\n\r\n  /**\r\n   * @dev Transfer tokens from one address to another\r\n   * @param _from address The address which you want to send tokens from\r\n   * @param _to address The address which you want to transfer to\r\n   * @param _value uint256 the amount of tokens to be transferred\r\n   */\r\n  function transferFrom(address _from, address _to, uint256 _value) public returns (bool) {\r\n    require(_to != address(0));\r\n    require(_value <= balances[_from]);\r\n    require(_value <= allowed[_from][msg.sender]);\r\n\r\n    balances[_from] = balances[_from].sub(_value);\r\n    balances[_to] = balances[_to].add(_value);\r\n    allowed[_from][msg.sender] = allowed[_from][msg.sender].sub(_value);\r\n    emit Transfer(_from, _to, _value);\r\n    return true;\r\n  }\r\n\r\n  /**\r\n   * @dev Approve the passed address to spend the specified amount of tokens on behalf of msg.sender.\r\n   *\r\n   * Beware that changing an allowance with this method brings the risk that someone may use both the old\r\n   * and the new allowance by unfortunate transaction ordering. One possible solution to mitigate this\r\n   * race condition is to first reduce the spender's allowance to 0 and set the desired value afterwards:\r\n   * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\r\n   * @param _spender The address which will spend the funds.\r\n   * @param _value The amount of tokens to be spent.\r\n   */\r\n  function approve(address _spender, uint256 _value) public returns (bool) {\r\n    allowed[msg.sender][_spender] = _value;\r\n    emit Approval(msg.sender, _spender, _value);\r\n    return true;\r\n  }\r\n\r\n  /**\r\n   * @dev Function to check the amount of tokens that an owner allowed to a spender.\r\n   * @param _owner address The address which owns the funds.\r\n   * @param _spender address The address which will spend the funds.\r\n   * @return A uint256 specifying the amount of tokens still available for the spender.\r\n   */\r\n  function allowance(address _owner, address _spender) public view returns (uint256) {\r\n    return allowed[_owner][_spender];\r\n  }\r\n\r\n  /**\r\n   * @dev Increase the amount of tokens that an owner allowed to a spender.\r\n   *\r\n   * approve should be called when allowed[_spender] == 0. To increment\r\n   * allowed value is better to use this function to avoid 2 calls (and wait until\r\n   * the first transaction is mined)\r\n   * From MonolithDAO Token.sol\r\n   * @param _spender The address which will spend the funds.\r\n   * @param _addedValue The amount of tokens to increase the allowance by.\r\n   */\r\n  function increaseApproval(address _spender, uint _addedValue) public returns (bool) {\r\n    allowed[msg.sender][_spender] = allowed[msg.sender][_spender].add(_addedValue);\r\n    emit Approval(msg.sender, _spender, allowed[msg.sender][_spender]);\r\n    return true;\r\n  }\r\n\r\n  /**\r\n   * @dev Decrease the amount of tokens that an owner allowed to a spender.\r\n   *\r\n   * approve should be called when allowed[_spender] == 0. To decrement\r\n   * allowed value is better to use this function to avoid 2 calls (and wait until\r\n   * the first transaction is mined)\r\n   * From MonolithDAO Token.sol\r\n   * @param _spender The address which will spend the funds.\r\n   * @param _subtractedValue The amount of tokens to decrease the allowance by.\r\n   */\r\n  function decreaseApproval(address _spender, uint _subtractedValue) public returns (bool) {\r\n    uint oldValue = allowed[msg.sender][_spender];\r\n    if (_subtractedValue > oldValue) {\r\n      allowed[msg.sender][_spender] = 0;\r\n    } else {\r\n      allowed[msg.sender][_spender] = oldValue.sub(_subtractedValue);\r\n    }\r\n    emit Approval(msg.sender, _spender, allowed[msg.sender][_spender]);\r\n    return true;\r\n  }\r\n\r\n}\r\n\r\n// File: openzeppelin-solidity/contracts/ownership/Ownable.sol\r\n\r\npragma solidity ^0.4.25;\r\n\r\n\r\n/**\r\n * @title Ownable\r\n * @dev The Ownable contract has an owner address, and provides basic authorization control\r\n * functions, this simplifies the implementation of \"user permissions\".\r\n */\r\ncontract Ownable {\r\n  address public owner;\r\n\r\n\r\n  event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\r\n\r\n\r\n  /**\r\n   * @dev The Ownable constructor sets the original `owner` of the contract to the sender\r\n   * account.\r\n   */\r\n  function Ownable() public {\r\n    owner = msg.sender;\r\n  }\r\n\r\n  /**\r\n   * @dev Throws if called by any account other than the owner.\r\n   */\r\n  modifier onlyOwner() {\r\n    require(msg.sender == owner);\r\n    _;\r\n  }\r\n\r\n  /**\r\n   * @dev Allows the current owner to transfer control of the contract to a newOwner.\r\n   * @param newOwner The address to transfer ownership to.\r\n   */\r\n  function transferOwnership(address newOwner) public onlyOwner {\r\n    require(newOwner != address(0));\r\n    emit OwnershipTransferred(owner, newOwner);\r\n    owner = newOwner;\r\n  }\r\n\r\n}\r\n\r\n// File: openzeppelin-solidity/contracts/token/ERC20/MintableToken.sol\r\n\r\npragma solidity ^0.4.25;\r\n\r\n\r\n\r\n\r\n/**\r\n * @title Mintable token\r\n * @dev Simple ERC20 Token example, with mintable token creation\r\n * @dev Issue: * https://github.com/OpenZeppelin/openzeppelin-solidity/issues/120\r\n * Based on code by TokenMarketNet: https://github.com/TokenMarketNet/ico/blob/master/contracts/MintableToken.sol\r\n */\r\ncontract MintableToken is StandardToken, Ownable {\r\n  event Mint(address indexed to, uint256 amount);\r\n  event MintFinished();\r\n\r\n  bool public mintingFinished = false;\r\n\r\n\r\n  modifier canMint() {\r\n    require(!mintingFinished);\r\n    _;\r\n  }\r\n\r\n  /**\r\n   * @dev Function to mint tokens\r\n   * @param _to The address that will receive the minted tokens.\r\n   * @param _amount The amount of tokens to mint.\r\n   * @return A boolean that indicates if the operation was successful.\r\n   */\r\n  function mint(address _to, uint256 _amount) onlyOwner canMint public returns (bool) {\r\n    totalSupply_ = totalSupply_.add(_amount);\r\n    balances[_to] = balances[_to].add(_amount);\r\n    emit Mint(_to, _amount);\r\n    emit Transfer(address(0), _to, _amount);\r\n    return true;\r\n  }\r\n\r\n  /**\r\n   * @dev Function to stop minting new tokens.\r\n   * @return True if the operation was successful.\r\n   */\r\n  function finishMinting() onlyOwner canMint public returns (bool) {\r\n    mintingFinished = true;\r\n    emit MintFinished();\r\n    return true;\r\n  }\r\n}\r\n\r\n// File: contracts/token/ERC884/ERC884.sol\r\n\r\npragma solidity 0.4.25;\r\n\r\n\r\n\r\n/**\r\n *  An `ERC20` compatible token that conforms to Delaware State Senate,\r\n *  149th General Assembly, Senate Bill No. 69: An act to Amend Title 8\r\n *  of the Delaware Code Relating to the General Corporation Law.\r\n *\r\n *  Implementation Details.\r\n *\r\n *  An implementation of this token standard SHOULD provide the following:\r\n *\r\n *  `name` - for use by wallets and exchanges.\r\n *  `symbol` - for use by wallets and exchanges.\r\n *\r\n *  The implementation MUST take care not to allow unauthorised access to share\r\n *  transfer functions.\r\n *\r\n *  In addition to the above the following optional `ERC20` function MUST be defined.\r\n *\r\n *  `decimals` — MUST return `0` as each token represents a single Share and Shares are non-divisible.\r\n *\r\n *  @dev Ref https://github.com/ethereum/EIPs/pull/884\r\n */\r\ncontract ERC884 is ERC20 {\r\n\r\n    /**\r\n     *  This event is emitted when a verified address and associated identity hash are\r\n     *  added to the contract.\r\n     *  @param addr The address that was added.\r\n     *  @param hash The identity hash associated with the address.\r\n     *  @param sender The address that caused the address to be added.\r\n     */\r\n    event VerifiedAddressAdded(\r\n        address indexed addr,\r\n        bytes32 hash,\r\n        address indexed sender\r\n    );\r\n\r\n    /**\r\n     *  This event is emitted when a verified address its associated identity hash are\r\n     *  removed from the contract.\r\n     *  @param addr The address that was removed.\r\n     *  @param sender The address that caused the address to be removed.\r\n     */\r\n    event VerifiedAddressRemoved(address indexed addr, address indexed sender);\r\n\r\n    /**\r\n     *  This event is emitted when the identity hash associated with a verified address is updated.\r\n     *  @param addr The address whose hash was updated.\r\n     *  @param oldHash The identity hash that was associated with the address.\r\n     *  @param hash The hash now associated with the address.\r\n     *  @param sender The address that caused the hash to be updated.\r\n     */\r\n    event VerifiedAddressUpdated(\r\n        address indexed addr,\r\n        bytes32 oldHash,\r\n        bytes32 hash,\r\n        address indexed sender\r\n    );\r\n\r\n    /**\r\n     *  This event is emitted when an address is cancelled and replaced with\r\n     *  a new address.  This happens in the case where a shareholder has\r\n     *  lost access to their original address and needs to have their share\r\n     *  reissued to a new address.  This is the equivalent of issuing replacement\r\n     *  share certificates.\r\n     *  @param original The address being superseded.\r\n     *  @param replacement The new address.\r\n     *  @param sender The address that caused the address to be superseded.\r\n     */\r\n    event VerifiedAddressSuperseded(\r\n        address indexed original,\r\n        address indexed replacement,\r\n        address indexed sender\r\n    );\r\n\r\n    /**\r\n     *  Add a verified address, along with an associated verification hash to the contract.\r\n     *  Upon successful addition of a verified address, the contract must emit\r\n     *  `VerifiedAddressAdded(addr, hash, msg.sender)`.\r\n     *  It MUST throw if the supplied address or hash are zero, or if the address has already been supplied.\r\n     *  @param addr The address of the person represented by the supplied hash.\r\n     *  @param hash A cryptographic hash of the address holder's verified information.\r\n     */\r\n    function addVerified(address addr, bytes32 hash) public;\r\n\r\n    /**\r\n     *  Remove a verified address, and the associated verification hash. If the address is\r\n     *  unknown to the contract then this does nothing. If the address is successfully removed, this\r\n     *  function must emit `VerifiedAddressRemoved(addr, msg.sender)`.\r\n     *  It MUST throw if an attempt is made to remove a verifiedAddress that owns Tokens.\r\n     *  @param addr The verified address to be removed.\r\n     */\r\n    function removeVerified(address addr) public;\r\n\r\n    /**\r\n     *  Update the hash for a verified address known to the contract.\r\n     *  Upon successful update of a verified address the contract must emit\r\n     *  `VerifiedAddressUpdated(addr, oldHash, hash, msg.sender)`.\r\n     *  If the hash is the same as the value already stored then\r\n     *  no `VerifiedAddressUpdated` event is to be emitted.\r\n     *  It MUST throw if the hash is zero, or if the address is unverified.\r\n     *  @param addr The verified address of the person represented by the supplied hash.\r\n     *  @param hash A new cryptographic hash of the address holder's updated verified information.\r\n     */\r\n    function updateVerified(address addr, bytes32 hash) public;\r\n\r\n    /**\r\n     *  Cancel the original address and reissue the Tokens to the replacement address.\r\n     *  Access to this function MUST be strictly controlled.\r\n     *  The `original` address MUST be removed from the set of verified addresses.\r\n     *  Throw if the `original` address supplied is not a shareholder.\r\n     *  Throw if the `replacement` address is not a verified address.\r\n     *  Throw if the `replacement` address already holds Tokens.\r\n     *  This function MUST emit the `VerifiedAddressSuperseded` event.\r\n     *  @param original The address to be superseded. This address MUST NOT be reused.\r\n     */\r\n    function cancelAndReissue(address original, address replacement) public;\r\n\r\n    /**\r\n     *  The `transfer` function MUST NOT allow transfers to addresses that\r\n     *  have not been verified and added to the contract.\r\n     *  If the `to` address is not currently a shareholder then it MUST become one.\r\n     *  If the transfer will reduce `msg.sender`'s balance to 0 then that address\r\n     *  MUST be removed from the list of shareholders.\r\n     */\r\n    function transfer(address to, uint256 value) public returns (bool);\r\n\r\n    /**\r\n     *  The `transferFrom` function MUST NOT allow transfers to addresses that\r\n     *  have not been verified and added to the contract.\r\n     *  If the `to` address is not currently a shareholder then it MUST become one.\r\n     *  If the transfer will reduce `from`'s balance to 0 then that address\r\n     *  MUST be removed from the list of shareholders.\r\n     */\r\n    function transferFrom(address from, address to, uint256 value) public returns (bool);\r\n\r\n    /**\r\n     *  Tests that the supplied address is known to the contract.\r\n     *  @param addr The address to test.\r\n     *  @return true if the address is known to the contract.\r\n     */\r\n    function isVerified(address addr) public view returns (bool);\r\n\r\n    /**\r\n     *  Checks to see if the supplied address is a share holder.\r\n     *  @param addr The address to check.\r\n     *  @return true if the supplied address owns a token.\r\n     */\r\n    function isHolder(address addr) public view returns (bool);\r\n\r\n    /**\r\n     *  Checks that the supplied hash is associated with the given address.\r\n     *  @param addr The address to test.\r\n     *  @param hash The hash to test.\r\n     *  @return true if the hash matches the one supplied with the address in `addVerified`, or `updateVerified`.\r\n     */\r\n    function hasHash(address addr, bytes32 hash) public view returns (bool);\r\n\r\n    /**\r\n     *  The number of addresses that hold tokens.\r\n     *  @return the number of unique addresses that hold tokens.\r\n     */\r\n    function holderCount() public view returns (uint);\r\n\r\n    /**\r\n     *  By counting the number of token holders using `holderCount`\r\n     *  you can retrieve the complete list of token holders, one at a time.\r\n     *  It MUST throw if `index >= holderCount()`.\r\n     *  @param index The zero-based index of the holder.\r\n     *  @return the address of the token holder with the given index.\r\n     */\r\n    function holderAt(uint256 index) public view returns (address);\r\n\r\n    /**\r\n     *  Checks to see if the supplied address was superseded.\r\n     *  @param addr The address to check.\r\n     *  @return true if the supplied address was superseded by another address.\r\n     */\r\n    function isSuperseded(address addr) public view returns (bool);\r\n\r\n    /**\r\n     *  Gets the most recent address, given a superseded one.\r\n     *  Addresses may be superseded multiple times, so this function needs to\r\n     *  follow the chain of addresses until it reaches the final, verified address.\r\n     *  @param addr The superseded address.\r\n     *  @return the verified address that ultimately holds the share.\r\n     */\r\n    function getCurrentFor(address addr) public view returns (address);\r\n}\r\n\r\n// File: contracts/token/ERC884/DwarfGem.sol\r\n\r\npragma solidity 0.4.25;\r\n\r\n\r\n\r\n\r\n/**\r\n *  An `ERC20` compatible token that conforms to Delaware State Senate,\r\n *  149th General Assembly, Senate Bill No. 69: An act to Amend Title 8\r\n *  of the Delaware Code Relating to the General Corporation Law.\r\n *\r\n *  Implementation Details.\r\n *\r\n *  An implementation of this token standard SHOULD provide the following:\r\n *\r\n *  `name` - for use by wallets and exchanges.\r\n *  `symbol` - for use by wallets and exchanges.\r\n *\r\n *  In addition to the above the following optional `ERC20` function MUST be defined.\r\n *\r\n *  `decimals` — MUST return `0` as each token represents a single Share and Shares are non-divisible.\r\n *\r\n *  @dev Ref https://github.com/ethereum/EIPs/blob/master/EIPS/eip-884.md\r\n */\r\ncontract DwarfGem is ERC884, MintableToken {\r\n\r\n    bytes32 constant private ZERO_BYTES = bytes32(0);\r\n    address constant private ZERO_ADDRESS = address(0);\r\n\r\n    string public name;\r\n    string public symbol;\r\n    uint public decimals = 0;\r\n\r\n    mapping(address => bytes32) private verified;\r\n    mapping(address => address) private cancellations;\r\n    mapping(address => uint256) private holderIndices;\r\n    mapping(address => uint256) private restrictedStock;\r\n    mapping(address => uint256) private restrictedStockSendTime;\r\n \r\n    address[] private shareholders;\r\n\r\n    constructor(string _name, string _symbol) public {\r\n        name = _name;\r\n        symbol = _symbol;\r\n    }\r\n\r\n    /**\r\n     *  This event is emitted when an transferRestrictedStock \r\n     *  is called by the owner (only owner can run this command)\r\n     *  @param owner The address of owner.\r\n     *  @param receiver The receiver.\r\n     *  @param amount the amount of transfer.\r\n     */\r\n    event TransferRestrictedStock(\r\n        address  owner,\r\n        address indexed receiver,\r\n        uint256 indexed amount,\r\n        uint256 indexed restrictedSendTime\r\n    );\r\n\r\n    /**\r\n     *  This event is emitted when an updateRestrictedStockSendTime \r\n     *  is called by the owner (only owner can run this command)\r\n     *  @param addr The address will be update restrictedStockSendTime.\r\n     *  @param newRestrictedSendTime the amount of transfer.\r\n     */\r\n    event UpdateRestrictedStockSendTime(\r\n        address indexed addr,\r\n        uint256 indexed newRestrictedSendTime\r\n    );\r\n\r\n    modifier isVerifiedAddress(address addr) {\r\n        require(verified[addr] != ZERO_BYTES);\r\n        _;\r\n    }\r\n\r\n    modifier isShareholder(address addr) {\r\n        require(holderIndices[addr] != 0);\r\n        _;\r\n    }\r\n\r\n    modifier isNotShareholder(address addr) {\r\n        require(holderIndices[addr] == 0);\r\n        _;\r\n    }\r\n\r\n    modifier isNotCancelled(address addr) {\r\n        require(cancellations[addr] == ZERO_ADDRESS);\r\n        _;\r\n    }\r\n\r\n    /**\r\n     * As each token is minted it is added to the shareholders array.\r\n     * @param _to The address that will receive the minted tokens.\r\n     * @param _amount The amount of tokens to mint.\r\n     * @return A boolean that indicates if the operation was successful.\r\n     */\r\n    function mint(address _to, uint256 _amount)\r\n        public\r\n        onlyOwner\r\n        canMint\r\n        isVerifiedAddress(_to)\r\n        returns (bool)\r\n    {\r\n        // if the address does not already own share then\r\n        // add the address to the shareholders array and record the index.\r\n        updateShareholders(_to);\r\n        return super.mint(_to, _amount);\r\n    }\r\n\r\n    /**\r\n     *  The number of addresses that own tokens.\r\n     *  @return the number of unique addresses that own tokens.\r\n     */\r\n    function holderCount()\r\n        public\r\n        onlyOwner\r\n        view\r\n        returns (uint)\r\n    {\r\n        return shareholders.length;\r\n    }\r\n\r\n    /**\r\n     *  By counting the number of token holders using `holderCount`\r\n     *  you can retrieve the complete list of token holders, one at a time.\r\n     *  It MUST throw if `index >= holderCount()`.\r\n     *  @param index The zero-based index of the holder.\r\n     *  @return the address of the token holder with the given index.\r\n     */\r\n    function holderAt(uint256 index)\r\n        public\r\n        onlyOwner\r\n        view\r\n        returns (address)\r\n    {\r\n        require(index < shareholders.length);\r\n        return shareholders[index];\r\n    }\r\n\r\n    /**\r\n     *  Add a verified address, along with an associated verification hash to the contract.\r\n     *  Upon successful addition of a verified address, the contract must emit\r\n     *  `VerifiedAddressAdded(addr, hash, msg.sender)`.\r\n     *  It MUST throw if the supplied address or hash are zero, or if the address has already been supplied.\r\n     *  @param addr The address of the person represented by the supplied hash.\r\n     *  @param hash A cryptographic hash of the address holder's verified information.\r\n     */\r\n    function addVerified(address addr, bytes32 hash)\r\n        public\r\n        onlyOwner\r\n        isNotCancelled(addr)\r\n    {\r\n        require(addr != ZERO_ADDRESS);\r\n        require(hash != ZERO_BYTES);\r\n        require(verified[addr] == ZERO_BYTES);\r\n        verified[addr] = hash;\r\n        emit VerifiedAddressAdded(addr, hash, msg.sender);\r\n    }\r\n\r\n    /**\r\n     *  Remove a verified address, and the associated verification hash. If the address is\r\n     *  unknown to the contract then this does nothing. If the address is successfully removed, this\r\n     *  function must emit `VerifiedAddressRemoved(addr, msg.sender)`.\r\n     *  It MUST throw if an attempt is made to remove a verifiedAddress that owns Tokens.\r\n     *  @param addr The verified address to be removed.\r\n     */\r\n    function removeVerified(address addr)\r\n        public\r\n        onlyOwner\r\n    {\r\n        require(balances[addr] == 0);\r\n        if (verified[addr] != ZERO_BYTES) {\r\n            verified[addr] = ZERO_BYTES;\r\n            emit VerifiedAddressRemoved(addr, msg.sender);\r\n        }\r\n    }\r\n\r\n    /**\r\n     *  Update the hash for a verified address known to the contract.\r\n     *  Upon successful update of a verified address the contract must emit\r\n     *  `VerifiedAddressUpdated(addr, oldHash, hash, msg.sender)`.\r\n     *  If the hash is the same as the value already stored then\r\n     *  no `VerifiedAddressUpdated` event is to be emitted.\r\n     *  It MUST throw if the hash is zero, or if the address is unverified.\r\n     *  @param addr The verified address of the person represented by the supplied hash.\r\n     *  @param hash A new cryptographic hash of the address holder's updated verified information.\r\n     */\r\n    function updateVerified(address addr, bytes32 hash)\r\n        public\r\n        onlyOwner\r\n        isVerifiedAddress(addr)\r\n    {\r\n        require(hash != ZERO_BYTES);\r\n        bytes32 oldHash = verified[addr];\r\n        if (oldHash != hash) {\r\n            verified[addr] = hash;\r\n            emit VerifiedAddressUpdated(addr, oldHash, hash, msg.sender);\r\n        }\r\n    }\r\n\r\n    /**\r\n     *  Cancel the original address and reissue the Tokens to the replacement address.\r\n     *  Access to this function MUST be strictly controlled.\r\n     *  The `original` address MUST be removed from the set of verified addresses.\r\n     *  Throw if the `original` address supplied is not a shareholder.\r\n     *  Throw if the replacement address is not a verified address.\r\n     *  This function MUST emit the `VerifiedAddressSuperseded` event.\r\n     *  @param original The address to be superseded. This address MUST NOT be reused.\r\n     *  @param replacement The address  that supersedes the original. This address MUST be verified.\r\n     */\r\n    function cancelAndReissue(address original, address replacement)\r\n        public\r\n        onlyOwner\r\n        isShareholder(original)\r\n        isNotShareholder(replacement)\r\n        isVerifiedAddress(replacement)\r\n    {\r\n        // replace the original address in the shareholders array\r\n        // and update all the associated mappings\r\n        verified[original] = ZERO_BYTES;\r\n        cancellations[original] = replacement;\r\n        uint256 holderIndex = holderIndices[original] - 1;\r\n        shareholders[holderIndex] = replacement;\r\n        holderIndices[replacement] = holderIndices[original];\r\n        holderIndices[original] = 0;\r\n        balances[replacement] = balances[original];\r\n        balances[original] = 0;\r\n        uint256 restrict = restrictedStock[original];\r\n        uint256 restrictTime = restrictedStockSendTime[original];\r\n        restrictedStock[replacement] = restrict;\r\n        restrictedStockSendTime[replacement] = restrictTime;\r\n        restrictedStock[original] = 0;\r\n        restrictedStockSendTime[original] = 0;\r\n        emit VerifiedAddressSuperseded(original, replacement, msg.sender);\r\n    }\r\n\r\n    /**\r\n     *  The `transfer` function MUST NOT allow transfers to addresses that\r\n     *  have not been verified and added to the contract.\r\n     *  If the `to` address is not currently a shareholder then it MUST become one.\r\n     *  If the transfer will reduce `msg.sender`'s balance to 0 then that address\r\n     *  MUST be removed from the list of shareholders.\r\n     */\r\n    function transfer(address to, uint256 value)\r\n        public\r\n        isVerifiedAddress(to)\r\n        returns (bool)\r\n    {\r\n        require(availableBalanceOf(msg.sender) >= value);\r\n        updateShareholders(to);\r\n        pruneRestrictStock(msg.sender, value);\r\n        pruneShareholders(msg.sender, value);\r\n        return super.transfer(to, value);\r\n    }\r\n\r\n    /**\r\n     *  The `transferRestrictedStock` function MUST NOT allow transfers to addresses that\r\n     *  have not been verified and added to the contract.\r\n     *  If the `to` address is not currently a shareholder then it MUST become one.\r\n     *  If the transfer will reduce `msg.sender`'s balance to 0 then that address\r\n     *  MUST be removed from the list of shareholders.\r\n     *  Also add restrict stock number to restrictedStock and add restrictedStockSendTime \r\n     *  if restrictedStockSendTime[to] is not exist\r\n     */\r\n     function transferRestrictedStock(address to, uint256 value, uint256 time)\r\n        public\r\n        onlyOwner\r\n        isVerifiedAddress(to)\r\n        returns (bool)\r\n     {\r\n        restrictedStock[to] += value;\r\n        if (restrictedStockSendTime[to] == 0) {\r\n            restrictedStockSendTime[to] = time;\r\n        }\r\n        emit TransferRestrictedStock(msg.sender, to, value, time);\r\n        return transfer(to, value);\r\n     }\r\n\r\n    /**\r\n     * The `updateRestrictedStockSendTime` update restrict stock send time\r\n     * of a verified address\r\n     */\r\n    function updateRestrictedStockSendTime(address to, uint256 time)\r\n        public\r\n        onlyOwner\r\n        isVerifiedAddress(to)\r\n        returns (bool)\r\n    {\r\n        restrictedStockSendTime[to] = time;\r\n        emit UpdateRestrictedStockSendTime(to, time);\r\n        return true;\r\n    }\r\n\r\n    /**\r\n     * The `availableBalanceOf` function show current available amount to spend\r\n     * of a verified address (to)\r\n     */\r\n     function availableBalanceOf(address to) \r\n        public\r\n        view\r\n        isVerifiedAddress(to)\r\n        returns (uint256)\r\n     {\r\n         uint256 all = balances[to];\r\n         uint256 restrict = 0;\r\n         if (now < restrictedStockSendTime[to]) {\r\n             restrict = restrictedStock[to];\r\n         }\r\n\r\n         return all - restrict;\r\n     }\r\n\r\n    /**\r\n     *  The `restrictedStockOf` function show current restricted stock owned by (_owner)\r\n     */\r\n     function restrictedStockOf(address _owner)\r\n        public\r\n        view\r\n        returns (uint256)\r\n     {\r\n        return restrictedStock[_owner];\r\n     }\r\n\r\n    /**\r\n     *  The `restrictedStockSendTimeOf` function show current restrictedStockSendTime owned by (_owner)\r\n     */\r\n     function restrictedStockSendTimeOf(address _owner)\r\n        public\r\n        view\r\n        returns (uint256)\r\n     {\r\n        return restrictedStockSendTime[_owner];\r\n     }\r\n\r\n    /**\r\n     *  The `transferFrom` function MUST NOT allow transfers to addresses that\r\n     *  have not been verified and added to the contract.\r\n     *  If the `to` address is not currently a shareholder then it MUST become one.\r\n     *  If the transfer will reduce `from`'s balance to 0 then that address\r\n     *  MUST be removed from the list of shareholders.\r\n     */\r\n    function transferFrom(address from, address to, uint256 value)\r\n        public\r\n        isVerifiedAddress(to)\r\n        returns (bool)\r\n    {\r\n        require(availableBalanceOf(from) >= value);\r\n        updateShareholders(to);\r\n        pruneRestrictStock(msg.sender, value);\r\n        pruneShareholders(from, value);\r\n        return super.transferFrom(from, to, value);\r\n    }\r\n\r\n    /**\r\n     *  Tests that the supplied address is known to the contract.\r\n     *  @param addr The address to test.\r\n     *  @return true if the address is known to the contract.\r\n     */\r\n    function isVerified(address addr)\r\n        public\r\n        view\r\n        returns (bool)\r\n    {\r\n        return verified[addr] != ZERO_BYTES;\r\n    }\r\n\r\n    /**\r\n     *  Checks to see if the supplied address is a share holder.\r\n     *  @param addr The address to check.\r\n     *  @return true if the supplied address owns a token.\r\n     */\r\n    function isHolder(address addr)\r\n        public\r\n        view\r\n        returns (bool)\r\n    {\r\n        return holderIndices[addr] != 0;\r\n    }\r\n\r\n    /**\r\n     *  Checks that the supplied hash is associated with the given address.\r\n     *  @param addr The address to test.\r\n     *  @param hash The hash to test.\r\n     *  @return true if the hash matches the one supplied with the address in `addVerified`, or `updateVerified`.\r\n     */\r\n    function hasHash(address addr, bytes32 hash)\r\n        public\r\n        view\r\n        returns (bool)\r\n    {\r\n        if (addr == ZERO_ADDRESS) {\r\n            return false;\r\n        }\r\n        return verified[addr] == hash;\r\n    }\r\n\r\n    /**\r\n     *  Checks to see if the supplied address was superseded.\r\n     *  @param addr The address to check.\r\n     *  @return true if the supplied address was superseded by another address.\r\n     */\r\n    function isSuperseded(address addr)\r\n        public\r\n        view\r\n        onlyOwner\r\n        returns (bool)\r\n    {\r\n        return cancellations[addr] != ZERO_ADDRESS;\r\n    }\r\n\r\n    /**\r\n     *  Gets the most recent address, given a superseded one.\r\n     *  Addresses may be superseded multiple times, so this function needs to\r\n     *  follow the chain of addresses until it reaches the final, verified address.\r\n     *  @param addr The superseded address.\r\n     *  @return the verified address that ultimately holds the share.\r\n     */\r\n    function getCurrentFor(address addr)\r\n        public\r\n        view\r\n        onlyOwner\r\n        returns (address)\r\n    {\r\n        return findCurrentFor(addr);\r\n    }\r\n\r\n    /**\r\n     *  Recursively find the most recent address given a superseded one.\r\n     *  @param addr The superseded address.\r\n     *  @return the verified address that ultimately holds the share.\r\n     */\r\n    function findCurrentFor(address addr)\r\n        internal\r\n        view\r\n        returns (address)\r\n    {\r\n        address candidate = cancellations[addr];\r\n        if (candidate == ZERO_ADDRESS) {\r\n            return addr;\r\n        }\r\n        return findCurrentFor(candidate);\r\n    }\r\n\r\n    /**\r\n     *  If the address is not in the `shareholders` array then push it\r\n     *  and update the `holderIndices` mapping.\r\n     *  @param addr The address to add as a shareholder if it's not already.\r\n     */\r\n    function updateShareholders(address addr)\r\n        internal\r\n    {\r\n        if (holderIndices[addr] == 0) {\r\n            holderIndices[addr] = shareholders.push(addr);\r\n        }\r\n    }\r\n\r\n    /**\r\n     *  Prune restricted stock if restrictedStockSendTime was ending\r\n     *  @param addr The address to add as a shareholder if it's not already.\r\n     *  @param value The value store amount of sender\r\n     */\r\n    function pruneRestrictStock(address addr, uint256 value)\r\n        internal \r\n    {\r\n        uint256 restrict = restrictedStock[addr];\r\n        if (restrict != 0) {\r\n            if (now > restrictedStockSendTime[addr]) {\r\n                if (value > restrict) {\r\n                    // remove restrictedStock and restrictedStockSendTime\r\n                    restrictedStock[addr] = 0;\r\n                    restrictedStockSendTime[addr] = 0;\r\n                } else {\r\n                    restrictedStock[addr] = restrict - value;\r\n                }\r\n            }\r\n        }\r\n    }\r\n\r\n    /**\r\n     *  If the address is in the `shareholders` array and the forthcoming\r\n     *  transfer or transferFrom will reduce their balance to 0, then\r\n     *  we need to remove them from the shareholders array.\r\n     *  @param addr The address to prune if their balance will be reduced to 0.\r\n     @  @dev see https://ethereum.stackexchange.com/a/39311\r\n     */\r\n    function pruneShareholders(address addr, uint256 value)\r\n        internal\r\n    {\r\n        uint256 balance = balances[addr] - value;\r\n        if (balance > 0) {\r\n            return;\r\n        }\r\n        uint256 holderIndex = holderIndices[addr] - 1;\r\n        uint256 lastIndex = shareholders.length - 1;\r\n        address lastHolder = shareholders[lastIndex];\r\n        // overwrite the addr's slot with the last shareholder\r\n        shareholders[holderIndex] = lastHolder;\r\n        // also copy over the index (thanks @mohoff for spotting this)\r\n        // ref https://github.com/davesag/ERC884-reference-implementation/issues/20\r\n        holderIndices[lastHolder] = holderIndices[addr];\r\n        // trim the shareholders array (which drops the last entry)\r\n        shareholders.length--;\r\n        // and zero out the index for addr\r\n        holderIndices[addr] = 0;\r\n        // zero out restricted sendTime\r\n        restrictedStockSendTime[addr] = 0;\r\n    }\r\n}","ABI":"[{\"constant\":true,\"inputs\":[],\"name\":\"mintingFinished\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_spender\",\"type\":\"address\"},{\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"to\",\"type\":\"address\"},{\"name\":\"value\",\"type\":\"uint256\"},{\"name\":\"time\",\"type\":\"uint256\"}],\"name\":\"transferRestrictedStock\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"index\",\"type\":\"uint256\"}],\"name\":\"holderAt\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"holderCount\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"from\",\"type\":\"address\"},{\"name\":\"to\",\"type\":\"address\"},{\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"to\",\"type\":\"address\"}],\"name\":\"availableBalanceOf\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"addr\",\"type\":\"address\"}],\"name\":\"isSuperseded\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"decimals\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"addr\",\"type\":\"address\"},{\"name\":\"hash\",\"type\":\"bytes32\"}],\"name\":\"updateVerified\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_to\",\"type\":\"address\"},{\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"mint\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"addr\",\"type\":\"address\"}],\"name\":\"removeVerified\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"addr\",\"type\":\"address\"},{\"name\":\"hash\",\"type\":\"bytes32\"}],\"name\":\"addVerified\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_spender\",\"type\":\"address\"},{\"name\":\"_subtractedValue\",\"type\":\"uint256\"}],\"name\":\"decreaseApproval\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_owner\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"original\",\"type\":\"address\"},{\"name\":\"replacement\",\"type\":\"address\"}],\"name\":\"cancelAndReissue\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"finishMinting\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"to\",\"type\":\"address\"},{\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_owner\",\"type\":\"address\"}],\"name\":\"restrictedStockSendTimeOf\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"addr\",\"type\":\"address\"}],\"name\":\"isVerified\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"addr\",\"type\":\"address\"}],\"name\":\"getCurrentFor\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"addr\",\"type\":\"address\"}],\"name\":\"isHolder\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_spender\",\"type\":\"address\"},{\"name\":\"_addedValue\",\"type\":\"uint256\"}],\"name\":\"increaseApproval\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"to\",\"type\":\"address\"},{\"name\":\"time\",\"type\":\"uint256\"}],\"name\":\"updateRestrictedStockSendTime\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_owner\",\"type\":\"address\"}],\"name\":\"restrictedStockOf\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_owner\",\"type\":\"address\"},{\"name\":\"_spender\",\"type\":\"address\"}],\"name\":\"allowance\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"addr\",\"type\":\"address\"},{\"name\":\"hash\",\"type\":\"bytes32\"}],\"name\":\"hasHash\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"name\":\"_name\",\"type\":\"string\"},{\"name\":\"_symbol\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"receiver\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"amount\",\"type\":\"uint256\"},{\"indexed\":true,\"name\":\"restrictedSendTime\",\"type\":\"uint256\"}],\"name\":\"TransferRestrictedStock\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"addr\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"newRestrictedSendTime\",\"type\":\"uint256\"}],\"name\":\"UpdateRestrictedStockSendTime\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"Mint\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[],\"name\":\"MintFinished\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"addr\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"hash\",\"type\":\"bytes32\"},{\"indexed\":true,\"name\":\"sender\",\"type\":\"address\"}],\"name\":\"VerifiedAddressAdded\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"addr\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"sender\",\"type\":\"address\"}],\"name\":\"VerifiedAddressRemoved\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"addr\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"oldHash\",\"type\":\"bytes32\"},{\"indexed\":false,\"name\":\"hash\",\"type\":\"bytes32\"},{\"indexed\":true,\"name\":\"sender\",\"type\":\"address\"}],\"name\":\"VerifiedAddressUpdated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"original\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"replacement\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"sender\",\"type\":\"address\"}],\"name\":\"VerifiedAddressSuperseded\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"spender\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"}]","ContractName":"DwarfGem","CompilerVersion":"v0.4.25+commit.59dbf8f1","OptimizationUsed":"0","Runs":"200","ConstructorArguments":"0000000000000000000000000000000000000000000000000000000000000040000000000000000000000000000000000000000000000000000000000000008000000000000000000000000000000000000000000000000000000000000000164477617276657320466f756e646174696f6e2047656d0000000000000000000000000000000000000000000000000000000000000000000000000000000000034446470000000000000000000000000000000000000000000000000000000000","Library":"","LicenseType":"MIT","SwarmSource":"bzzr://ff77d32793e2d9ff0b3c0876cf14f71fcbf25ff11f0a9c30ae4a063e8bd09a90"}]}