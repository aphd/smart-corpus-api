{"status":"1","message":"OK","result":[{"SourceCode":"pragma solidity 0.5.2;\r\n\r\n/***************\r\n**            **\r\n** INTERFACES **\r\n**            **\r\n***************/\r\n\r\n/**\r\n * @dev Interface of OpenZeppelin's ERC20; For definitions / documentation, see below.\r\n */\r\ninterface IERC20 {\r\n\r\n    function allowance(address owner, address spender) external view returns (uint256);\r\n    function approve(address spender, uint256 amount) external returns (bool);\r\n    function balanceOf(address account) external view returns (uint256);\r\n    function totalSupply() external view returns (uint256);\r\n    function transfer(address recipient, uint256 amount) external returns (bool);\r\n    function transferFrom(address sender, address recipient, uint256 amount) external returns (bool);\r\n\r\n    event Approval(address indexed owner, address indexed spender, uint256 value);\r\n    event Transfer(address indexed from, address indexed to, uint256 value);\r\n\r\n}\r\n\r\n/****************************\r\n**                         **\r\n** OPEN ZEPPELIN CONTRACTS **\r\n**                         **\r\n****************************/\r\n\r\n/**\r\n * @dev Implementation of the {IERC20} interface.\r\n *\r\n * This implementation is agnostic to the way tokens are created. This means\r\n * that a supply mechanism has to be added in a derived contract using {_mint}.\r\n * For a generic mechanism see {ERC20Mintable}.\r\n *\r\n * TIP: For a detailed writeup see our guide\r\n * https://forum.zeppelin.solutions/t/how-to-implement-erc20-supply-mechanisms/226[How\r\n * to implement supply mechanisms].\r\n *\r\n * We have followed general OpenZeppelin guidelines: functions revert instead\r\n * of returning `false` on failure. This behavior is nonetheless conventional\r\n * and does not conflict with the expectations of ERC20 applications.\r\n *\r\n * Additionally, an {Approval} event is emitted on calls to {transferFrom}.\r\n * This allows applications to reconstruct the allowance for all accounts just\r\n * by listening to said events. Other implementations of the EIP may not emit\r\n * these events, as it isn't required by the specification.\r\n *\r\n * Finally, the non-standard {decreaseAllowance} and {increaseAllowance}\r\n * functions have been added to mitigate the well-known issues around setting\r\n * allowances. See {IERC20-approve}.\r\n */\r\ncontract ERC20 is IERC20 {\r\n    using SafeMath for uint256;\r\n\r\n    mapping (address => uint256) private _balances;\r\n\r\n    mapping (address => mapping (address => uint256)) private _allowances;\r\n\r\n    uint256 private _totalSupply;\r\n\r\n    /**\r\n     * @dev See {IERC20-totalSupply}.\r\n     */\r\n    function totalSupply() public view returns (uint256) {\r\n        return _totalSupply;\r\n    }\r\n\r\n    /**\r\n     * @dev See {IERC20-balanceOf}.\r\n     */\r\n    function balanceOf(address account) public view returns (uint256) {\r\n        return _balances[account];\r\n    }\r\n\r\n    /**\r\n     * @dev See {IERC20-transfer}.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - `recipient` cannot be the zero address.\r\n     * - the caller must have a balance of at least `amount`.\r\n     */\r\n    function transfer(address recipient, uint256 amount) public returns (bool) {\r\n        _transfer(msg.sender, recipient, amount);\r\n        return true;\r\n    }\r\n\r\n    /**\r\n     * @dev See {IERC20-allowance}.\r\n     */\r\n    function allowance(address owner, address spender) public view returns (uint256) {\r\n        return _allowances[owner][spender];\r\n    }\r\n\r\n    /**\r\n     * @dev See {IERC20-approve}.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - `spender` cannot be the zero address.\r\n     */\r\n    function approve(address spender, uint256 value) public returns (bool) {\r\n        _approve(msg.sender, spender, value);\r\n        return true;\r\n    }\r\n\r\n    /**\r\n     * @dev See {IERC20-transferFrom}.\r\n     *\r\n     * Emits an {Approval} event indicating the updated allowance. This is not\r\n     * required by the EIP. See the note at the beginning of {ERC20};\r\n     *\r\n     * Requirements:\r\n     * - `sender` and `recipient` cannot be the zero address.\r\n     * - `sender` must have a balance of at least `value`.\r\n     * - the caller must have allowance for `sender`'s tokens of at least\r\n     * `amount`.\r\n     */\r\n    function transferFrom(address sender, address recipient, uint256 amount) public returns (bool) {\r\n        _transfer(sender, recipient, amount);\r\n        _approve(sender, msg.sender, _allowances[sender][msg.sender].sub(amount, \"ERC20: transfer amount exceeds allowance\"));\r\n        return true;\r\n    }\r\n\r\n    /**\r\n     * @dev Atomically increases the allowance granted to `spender` by the caller.\r\n     *\r\n     * This is an alternative to {approve} that can be used as a mitigation for\r\n     * problems described in {IERC20-approve}.\r\n     *\r\n     * Emits an {Approval} event indicating the updated allowance.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - `spender` cannot be the zero address.\r\n     */\r\n    function increaseAllowance(address spender, uint256 addedValue) public returns (bool) {\r\n        _approve(msg.sender, spender, _allowances[msg.sender][spender].add(addedValue));\r\n        return true;\r\n    }\r\n\r\n    /**\r\n     * @dev Atomically decreases the allowance granted to `spender` by the caller.\r\n     *\r\n     * This is an alternative to {approve} that can be used as a mitigation for\r\n     * problems described in {IERC20-approve}.\r\n     *\r\n     * Emits an {Approval} event indicating the updated allowance.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - `spender` cannot be the zero address.\r\n     * - `spender` must have allowance for the caller of at least\r\n     * `subtractedValue`.\r\n     */\r\n    function decreaseAllowance(address spender, uint256 subtractedValue) public returns (bool) {\r\n        _approve(msg.sender, spender, _allowances[msg.sender][spender].sub(subtractedValue, \"ERC20: decreased allowance below zero\"));\r\n        return true;\r\n    }\r\n\r\n    /**\r\n     * @dev Moves tokens `amount` from `sender` to `recipient`.\r\n     *\r\n     * This is internal function is equivalent to {transfer}, and can be used to\r\n     * e.g. implement automatic token fees, slashing mechanisms, etc.\r\n     *\r\n     * Emits a {Transfer} event.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - `sender` cannot be the zero address.\r\n     * - `recipient` cannot be the zero address.\r\n     * - `sender` must have a balance of at least `amount`.\r\n     */\r\n    function _transfer(address sender, address recipient, uint256 amount) internal {\r\n        require(sender != address(0), \"ERC20: transfer from the zero address\");\r\n        require(recipient != address(0), \"ERC20: transfer to the zero address\");\r\n\r\n        _balances[sender] = _balances[sender].sub(amount, \"ERC20: transfer amount exceeds balance\");\r\n        _balances[recipient] = _balances[recipient].add(amount);\r\n        emit Transfer(sender, recipient, amount);\r\n    }\r\n\r\n    /** @dev Creates `amount` tokens and assigns them to `account`, increasing\r\n     * the total supply.\r\n     *\r\n     * Emits a {Transfer} event with `from` set to the zero address.\r\n     *\r\n     * Requirements\r\n     *\r\n     * - `to` cannot be the zero address.\r\n     */\r\n    function _mint(address account, uint256 amount) internal {\r\n        require(account != address(0), \"ERC20: mint to the zero address\");\r\n\r\n        _totalSupply = _totalSupply.add(amount);\r\n        _balances[account] = _balances[account].add(amount);\r\n        emit Transfer(address(0), account, amount);\r\n    }\r\n\r\n     /**\r\n     * @dev Destroys `amount` tokens from `account`, reducing the\r\n     * total supply.\r\n     *\r\n     * Emits a {Transfer} event with `to` set to the zero address.\r\n     *\r\n     * Requirements\r\n     *\r\n     * - `account` cannot be the zero address.\r\n     * - `account` must have at least `amount` tokens.\r\n     */\r\n    function _burn(address account, uint256 value) internal {\r\n        require(account != address(0), \"ERC20: burn from the zero address\");\r\n\r\n        _balances[account] = _balances[account].sub(value, \"ERC20: burn amount exceeds balance\");\r\n        _totalSupply = _totalSupply.sub(value);\r\n        emit Transfer(account, address(0), value);\r\n    }\r\n\r\n    /**\r\n     * @dev Sets `amount` as the allowance of `spender` over the `owner`s tokens.\r\n     *\r\n     * This is internal function is equivalent to `approve`, and can be used to\r\n     * e.g. set automatic allowances for certain subsystems, etc.\r\n     *\r\n     * Emits an {Approval} event.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - `owner` cannot be the zero address.\r\n     * - `spender` cannot be the zero address.\r\n     */\r\n    function _approve(address owner, address spender, uint256 value) internal {\r\n        require(owner != address(0), \"ERC20: approve from the zero address\");\r\n        require(spender != address(0), \"ERC20: approve to the zero address\");\r\n\r\n        _allowances[owner][spender] = value;\r\n        emit Approval(owner, spender, value);\r\n    }\r\n\r\n    /**\r\n     * @dev Destoys `amount` tokens from `account`.`amount` is then deducted\r\n     * from the caller's allowance.\r\n     *\r\n     * See {_burn} and {_approve}.\r\n     */\r\n    function _burnFrom(address account, uint256 amount) internal {\r\n        _burn(account, amount);\r\n        _approve(account, msg.sender, _allowances[account][msg.sender].sub(amount, \"ERC20: burn amount exceeds allowance\"));\r\n    }\r\n}\r\n\r\n/**\r\n * @dev Extension of {ERC20} that allows token holders to destroy both their own\r\n * tokens and those that they have an allowance for, in a way that can be\r\n * recognized off-chain (via event analysis).\r\n */\r\ncontract ERC20Burnable is ERC20 {\r\n    /**\r\n     * @dev Destroys `amount` tokens from the caller.\r\n     *\r\n     * See {ERC20-_burn}.\r\n     */\r\n    function burn(uint256 amount) public {\r\n        _burn(msg.sender, amount);\r\n    }\r\n\r\n    /**\r\n     * @dev See {ERC20-_burnFrom}.\r\n     */\r\n    function burnFrom(address account, uint256 amount) public {\r\n        _burnFrom(account, amount);\r\n    }\r\n}\r\n\r\n/**\r\n * @dev Optional functions from the ERC20 standard.\r\n */\r\ncontract ERC20Detailed is IERC20 {\r\n    string private _name;\r\n    string private _symbol;\r\n    uint8 private _decimals;\r\n\r\n    /**\r\n     * @dev Sets the values for `name`, `symbol`, and `decimals`. All three of\r\n     * these values are immutable: they can only be set once during\r\n     * construction.\r\n     */\r\n    constructor (string memory name, string memory symbol, uint8 decimals) public {\r\n        _name = name;\r\n        _symbol = symbol;\r\n        _decimals = decimals;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the name of the token.\r\n     */\r\n    function name() public view returns (string memory) {\r\n        return _name;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the symbol of the token, usually a shorter version of the\r\n     * name.\r\n     */\r\n    function symbol() public view returns (string memory) {\r\n        return _symbol;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the number of decimals used to get its user representation.\r\n     * For example, if `decimals` equals `2`, a balance of `505` tokens should\r\n     * be displayed to a user as `5,05` (`505 / 10 ** 2`).\r\n     *\r\n     * Tokens usually opt for a value of 18, imitating the relationship between\r\n     * Ether and Wei.\r\n     *\r\n     * NOTE: This information is only used for _display_ purposes: it in\r\n     * no way affects any of the arithmetic of the contract, including\r\n     * {IERC20-balanceOf} and {IERC20-transfer}.\r\n     */\r\n    function decimals() public view returns (uint8) {\r\n        return _decimals;\r\n    }\r\n}\r\n\r\n/**\r\n * @dev Wrappers over Solidity's arithmetic operations with added overflow\r\n * checks.\r\n *\r\n * Arithmetic operations in Solidity wrap on overflow. This can easily result\r\n * in bugs, because programmers usually assume that an overflow raises an\r\n * error, which is the standard behavior in high level programming languages.\r\n * `SafeMath` restores this intuition by reverting the transaction when an\r\n * operation overflows.\r\n *\r\n * Using this library instead of the unchecked operations eliminates an entire\r\n * class of bugs, so it's recommended to use it always.\r\n */\r\nlibrary SafeMath {\r\n    /**\r\n     * @dev Returns the addition of two unsigned integers, reverting on\r\n     * overflow.\r\n     *\r\n     * Counterpart to Solidity's `+` operator.\r\n     *\r\n     * Requirements:\r\n     * - Addition cannot overflow.\r\n     */\r\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        uint256 c = a + b;\r\n        require(c >= a, \"SafeMath: addition overflow\");\r\n\r\n        return c;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the subtraction of two unsigned integers, reverting on\r\n     * overflow (when the result is negative).\r\n     *\r\n     * Counterpart to Solidity's `-` operator.\r\n     *\r\n     * Requirements:\r\n     * - Subtraction cannot overflow.\r\n     */\r\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        return sub(a, b, \"SafeMath: subtraction overflow\");\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the subtraction of two unsigned integers, reverting with custom message on\r\n     * overflow (when the result is negative).\r\n     *\r\n     * Counterpart to Solidity's `-` operator.\r\n     *\r\n     * Requirements:\r\n     * - Subtraction cannot overflow.\r\n     */\r\n    function sub(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\r\n        require(b <= a, errorMessage);\r\n        uint256 c = a - b;\r\n\r\n        return c;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the multiplication of two unsigned integers, reverting on\r\n     * overflow.\r\n     *\r\n     * Counterpart to Solidity's `*` operator.\r\n     *\r\n     * Requirements:\r\n     * - Multiplication cannot overflow.\r\n     */\r\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        // Gas optimization: this is cheaper than requiring 'a' not being zero, but the\r\n        // benefit is lost if 'b' is also tested.\r\n        // See: https://github.com/OpenZeppelin/openzeppelin-contracts/pull/522\r\n        if (a == 0) {\r\n            return 0;\r\n        }\r\n\r\n        uint256 c = a * b;\r\n        require(c / a == b, \"SafeMath: multiplication overflow\");\r\n\r\n        return c;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the integer division of two unsigned integers. Reverts on\r\n     * division by zero. The result is rounded towards zero.\r\n     *\r\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\r\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\r\n     * uses an invalid opcode to revert (consuming all remaining gas).\r\n     *\r\n     * Requirements:\r\n     * - The divisor cannot be zero.\r\n     */\r\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        return div(a, b, \"SafeMath: division by zero\");\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the integer division of two unsigned integers. Reverts with custom message on\r\n     * division by zero. The result is rounded towards zero.\r\n     *\r\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\r\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\r\n     * uses an invalid opcode to revert (consuming all remaining gas).\r\n     *\r\n     * Requirements:\r\n     * - The divisor cannot be zero.\r\n     */\r\n    function div(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\r\n        // Solidity only automatically asserts when dividing by 0\r\n        require(b > 0, errorMessage);\r\n        uint256 c = a / b;\r\n        // assert(a == b * c + a % b); // There is no case in which this doesn't hold\r\n\r\n        return c;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\r\n     * Reverts when dividing by zero.\r\n     *\r\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\r\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\r\n     * invalid opcode to revert (consuming all remaining gas).\r\n     *\r\n     * Requirements:\r\n     * - The divisor cannot be zero.\r\n     */\r\n    function mod(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        return mod(a, b, \"SafeMath: modulo by zero\");\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\r\n     * Reverts with custom message when dividing by zero.\r\n     *\r\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\r\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\r\n     * invalid opcode to revert (consuming all remaining gas).\r\n     *\r\n     * Requirements:\r\n     * - The divisor cannot be zero.\r\n     */\r\n    function mod(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\r\n        require(b != 0, errorMessage);\r\n        return a % b;\r\n    }\r\n}\r\n\r\n/*******************\r\n**                **\r\n** KONG CONTRACTS **\r\n**                **\r\n*******************/\r\n\r\n/**\r\n * @title  Kong ERC20 Token Contract.\r\n *\r\n * @dev    Extends OpenZeppelin contracts `ERC20`, `ERC20Detailed`, and `ERC20Burnable`.\r\n *\r\n *         Main additions:\r\n *\r\n *         - `beginLockDrop()`: Function to deploy instances of `LockDrop` contracts. This function\r\n *         can be called periodically. The amount of new tokens minted is proportional to the\r\n *         existing supply of tokens.\r\n *\r\n *         - `mint()`: Function to mint new Kong token. Can only be called by addresses that have\r\n *         been added to `_minters` through `addMinter()` which is only accessible to `owner`.\r\n *         `mint()` is subject to restrictions concerning the mintable amount (see below).\r\n */\r\ncontract KongERC20 is ERC20, ERC20Burnable, ERC20Detailed {\r\n    // Constants.\r\n    uint256 constant ONE_YEAR = 365 * 24 * 60 * 60;\r\n    uint256 constant ONE_MONTH = 30 * 24 * 60 * 60;\r\n    uint256 constant MINTING_REWARD = 2 ** 8 * 10 ** 18;\r\n\r\n    // Account with right to add to `minters`.\r\n    address public _owner;\r\n\r\n    // Total amount minted through `minters`; does not include Genesis Kong.\r\n    uint256 public _totalMinted;\r\n\r\n    // Timestamp of contract deployment; used to calculate number of years since launch.\r\n    uint256 public _launchTimestamp;\r\n\r\n    // Address and timestamp of last `LockDrop` deployment.\r\n    address public _lastLockDropAddress;\r\n    uint256 public _lastLockDropTimestamp;\r\n\r\n    // Addresses allowed to mint new Kong.\r\n    mapping (address => bool) public _minters;\r\n\r\n    // Emits when new `LockDrop` is deployed.\r\n    event LockDropCreation(\r\n        address deployedBy,\r\n        uint256 deployedTimestamp,\r\n        uint256 deployedSize,\r\n        address deployedAddress\r\n    );\r\n\r\n    // Emits when a new address is added to `minters`.\r\n    event MinterAddition(\r\n        address minter\r\n    );\r\n\r\n    /**\r\n     * @dev The constructor sets the following variables:\r\n     *\r\n     *      - `_name`,\r\n     *      - `_symbol`,\r\n     *      - `_decimals`,\r\n     *      - `_owner`, and\r\n     *      - `_launchTimeStamp`.\r\n     *\r\n     *      It also mints Genesis tokens.\r\n     */\r\n    constructor() public ERC20Detailed('KONG', 'KONG', 18) {\r\n\r\n        // Set _owner.\r\n        _owner = 0xAB35D3476251C6b614dC2eb36380D7AF1232D822;\r\n\r\n        // Store launch time.\r\n        _launchTimestamp = block.timestamp;\r\n\r\n        // Mint Genesis Kong.\r\n        _mint(0xAB35D3476251C6b614dC2eb36380D7AF1232D822, 3 * 2 ** 20 * 10 ** 18);\r\n        _mint(0x9699b500fD907636f10965d005813F0CE0986176, 2 ** 20 * 10 ** 18);\r\n        _mint(0xdBa9A507aa0838370399FDE048752E91B5a27F06, 2 ** 20 * 10 ** 18);\r\n        _mint(0xb2E0F4dee26CcCf1f3A267Ad185f212Dd3e7a6b1, 2 ** 20 * 10 ** 18);\r\n        _mint(0xdB6e9FaAcE283e230939769A2DFa80BdcD7E1E43, 2 ** 20 * 10 ** 18);\r\n\r\n    }\r\n\r\n    /**\r\n     * @dev Function to add a minter.\r\n     */\r\n    function addMinter(address minter) public {\r\n\r\n      require(msg.sender == _owner, 'Can only be called by owner.');\r\n\r\n      _minters[minter] = true;\r\n      emit MinterAddition(minter);\r\n\r\n    }\r\n\r\n    /**\r\n     * @dev Function to deploy a new `LockDrop` contract. The function can be called every 30 days,\r\n     *      i.e., whenever 30 days have passed since the function was last called successfully.\r\n     *      Mints approximately (1.01^(1/12) - 1) percent of the current total supply\r\n     *      and transfers the new tokens to the deployed contract. Mints `MINTING_REWARD` tokens\r\n     *      to whoever calls it successfully.\r\n     */\r\n    function beginLockDrop() public {\r\n\r\n        // Verify that time to last `LockDrop` deployment exceeds 30 days.\r\n        require(_lastLockDropTimestamp + ONE_MONTH <= block.timestamp, '30 day cooling period.');\r\n\r\n        // Update timestamp of last `LockDrop` deployment.\r\n        _lastLockDropTimestamp = block.timestamp;\r\n\r\n        // Calculate size of lockdrop as 0.0008295381 (≈ 1.01 ^ (1/12) - 1) times the total supply.\r\n        uint256 lockDropSize = totalSupply().mul(8295381).div(10 ** 10);\r\n\r\n        // Deploy a new `LockDrop` contract.\r\n        LockDrop lockDrop = new LockDrop(address(this));\r\n\r\n        // Update address of last lock drop.\r\n        _lastLockDropAddress = address(lockDrop);\r\n\r\n        // Mint `lockDropSize` to deployed `LockDrop` contract.\r\n        _mint(_lastLockDropAddress, lockDropSize);\r\n\r\n        // Mint `MINTING_REWARD` to msg.sender.\r\n        _mint(msg.sender, MINTING_REWARD);\r\n\r\n        // Emit event.\r\n        emit LockDropCreation(\r\n            msg.sender,\r\n            block.timestamp,\r\n            lockDropSize,\r\n            address(lockDrop)\r\n        );\r\n\r\n    }\r\n\r\n    /**\r\n     * @dev Helper function to calculate the maximal amount `minters` are capable of minting.\r\n     */\r\n    function getMintingLimit() public view returns(uint256) {\r\n\r\n        // Calculate number of years since launch.\r\n        uint256 y = (block.timestamp - _launchTimestamp) / uint(ONE_YEAR);\r\n\r\n        // Determine maximally mintable amount.\r\n        uint256 mintingLimit = 2 ** 25 * 10 ** 18;\r\n        if (y > 0) {mintingLimit += 2 ** 24 * 10 ** 18;}\r\n        if (y > 1) {mintingLimit += 2 ** 23 * 10 ** 18;}\r\n        if (y > 2) {mintingLimit += 2 ** 22 * 10 ** 18;}\r\n\r\n        // Return.\r\n        return mintingLimit;\r\n\r\n    }\r\n\r\n    /**\r\n     * @dev Mints new tokens conditional on not exceeding minting limits. Can only be called by\r\n     *      valid `minters`.\r\n     */\r\n    function mint(uint256 mintedAmount, address recipient) public {\r\n\r\n        require(_minters[msg.sender] == true, 'Can only be called by registered minter.');\r\n\r\n        // Enforce global cap.\r\n        require(_totalMinted.add(mintedAmount) <= getMintingLimit(), 'Exceeds global cap.');\r\n\r\n        // Increase minted amount.\r\n        _totalMinted += mintedAmount;\r\n\r\n        // Mint.\r\n        _mint(recipient, mintedAmount);\r\n\r\n    }\r\n\r\n}\r\n\r\n/**\r\n * @title   Lock Drop Contract\r\n *\r\n * @dev     This contract implements a Kong Lock Drop.\r\n *\r\n *          Notes (check online sources for further details):\r\n *\r\n *          - `stakeETH()` can be called to participate in the lock drop by staking ETH. Individual\r\n *          stakes are immediately sent to separate instances of `LockETH` contracts that only the\r\n *          staker has access to.\r\n *\r\n *          - `claimKong()` can be called to claim Kong once the staking period is over.\r\n *\r\n *          - The contract is open for contributions for 30 days after its deployment.\r\n */\r\ncontract LockDrop {\r\n    using SafeMath for uint256;\r\n\r\n    // Timestamp for the end of staking.\r\n    uint256 public _stakingEnd;\r\n\r\n    // Sum of all contribution weights.\r\n    uint256 public _weightsSum;\r\n\r\n    // Address of the KONG ERC20 contract.\r\n    address public _kongERC20Address;\r\n\r\n    // Mapping from contributors to contribution weights.\r\n    mapping(address => uint256) public _weights;\r\n\r\n    // Mapping from contributors to locking period ends.\r\n    mapping(address => uint256) public _lockingEnds;\r\n\r\n    // Events for staking and claiming.\r\n    event Staked(\r\n        address indexed contributor,\r\n        address lockETHAddress,\r\n        uint256 ethStaked,\r\n        uint256 endDate\r\n    );\r\n    event Claimed(\r\n        address indexed claimant,\r\n        uint256 ethStaked,\r\n        uint256 kongClaim\r\n    );\r\n\r\n    constructor (address kongERC20Address) public {\r\n\r\n        // Set the address of the ERC20 token.\r\n        _kongERC20Address = kongERC20Address;\r\n\r\n        // Set the end of the staking period to 30 days after deployment.\r\n        _stakingEnd = block.timestamp + 30 days;\r\n\r\n    }\r\n\r\n    /**\r\n     * @dev Function to stake ETH in this lock drop.\r\n     *\r\n     *      When called with positive `msg.value` and valid `stakingPeriod`, deploys instance of\r\n     *      `LockETH` contract and transfers `msg.value` to it. Each `LockETH` contract is only\r\n     *      accessible to the address that called `stakeETH()` to deploy the respective instance.\r\n     *\r\n     *      For valid stakes, calculates the variable `weight` as the product of total lockup time\r\n     *      and `msg.value`. Stores `weight` in `_weights[msg.sender]` and adds it to `_weightsSum`.\r\n     *\r\n     *      Expects `block.timestamp` to be smaller than `_stakingEnd`. Does not allow for topping\r\n     *      up of existing stakes. Restricts staking period to be between 90 and 365.\r\n     *\r\n     *      Emits `Staked` event.\r\n     */\r\n    function stakeETH(uint256 stakingPeriod) public payable {\r\n\r\n        // Require positive msg.value.\r\n        require(msg.value > 0, 'Msg value = 0.');\r\n\r\n        // No topping up.\r\n        require(_weights[msg.sender] == 0, 'No topping up.');\r\n\r\n        // No contributions after _stakingEnd.\r\n        require(block.timestamp <= _stakingEnd, 'Closed for contributions.');\r\n\r\n        // Ensure the staking period is valid.\r\n        require(stakingPeriod >= 30 && stakingPeriod <= 365, 'Staking period outside of allowed range.');\r\n\r\n        // Calculate contribution weight as product of msg.value and total time the ETH is locked.\r\n        uint256 totalTime = _stakingEnd + stakingPeriod * 1 days - block.timestamp;\r\n        uint256 weight = totalTime.mul(msg.value);\r\n\r\n        // Adjust contribution weights.\r\n        _weightsSum = _weightsSum.add(weight);\r\n        _weights[msg.sender] = weight;\r\n\r\n        // Set end date for lock.\r\n        _lockingEnds[msg.sender] = _stakingEnd + stakingPeriod * 1 days;\r\n\r\n        // Deploy new lock contract.\r\n        LockETH lockETH = (new LockETH).value(msg.value)(_lockingEnds[msg.sender], msg.sender);\r\n\r\n        // Abort if the new contract's balance is lower than expected.\r\n        require(address(lockETH).balance >= msg.value);\r\n\r\n        // Emit event.\r\n        emit Staked(msg.sender, address(lockETH), msg.value, _lockingEnds[msg.sender]);\r\n\r\n    }\r\n\r\n    /**\r\n     * @dev Function to claim Kong.\r\n     *\r\n     *      Determines the ratio of the contribution by `msg.sender` to all contributions. Sends\r\n     *      the product of this ratio and the contract's Kong balance to `msg.sender`. Sets the\r\n     *      contribution of `msg.sender` to zero afterwards and subtracts it from the sum of all\r\n     *      contributions.\r\n     *\r\n     *      Expects `block.timestamp` to be larger than `_lockingEnds[msg.sender]`. Throws if\r\n     *      `_weights[msg.sender]` is zero. Emits `Claimed` event.\r\n     *\r\n     *      NOTE: Overflow protection in calculation of `kongClaim` prevents anyone staking massive\r\n     *      amounts from ever claiming. Fine as long as product of weight and the contract's Kong\r\n     *      balance is at most (2^256)-1.\r\n     */\r\n    function claimKong() external {\r\n\r\n        // Verify that this `msg.sender` has contributed.\r\n        require(_weights[msg.sender] > 0, 'Zero contribution.');\r\n\r\n        // Verify that this `msg.sender` can claim.\r\n        require(block.timestamp > _lockingEnds[msg.sender], 'Cannot claim yet.');\r\n\r\n        // Calculate amount to return.\r\n        uint256 weight = _weights[msg.sender];\r\n        uint256 kongClaim = IERC20(_kongERC20Address).balanceOf(address(this)).mul(weight).div(_weightsSum);\r\n\r\n        // Adjust stake and sum of stakes.\r\n        _weights[msg.sender] = 0;\r\n        _weightsSum = _weightsSum.sub(weight);\r\n\r\n        // Send kong to `msg.sender`.\r\n        IERC20(_kongERC20Address).transfer(msg.sender, kongClaim);\r\n\r\n        // Emit event.\r\n        emit Claimed(msg.sender, weight, kongClaim);\r\n\r\n    }\r\n\r\n}\r\n\r\n/**\r\n * @title   LockETH contract.\r\n *\r\n * @dev     Escrows ETH until `_endOfLockUp`. Calling `unlockETH()` after `_endOfLockUp` sends ETH\r\n *          to `_contractOwner`.\r\n */\r\ncontract LockETH {\r\n\r\n    uint256 public _endOfLockUp;\r\n    address payable public _contractOwner;\r\n\r\n    constructor (uint256 endOfLockUp, address payable contractOwner) public payable {\r\n\r\n        _endOfLockUp = endOfLockUp;\r\n        _contractOwner = contractOwner;\r\n\r\n    }\r\n\r\n    /**\r\n     * @dev Send ETH owned by this contract to `_contractOwner`. Can be called by anyone but\r\n     *      requires `block.timestamp` > `endOfLockUp`.\r\n     */\r\n    function unlockETH() external {\r\n\r\n        // Verify end of lock-up period.\r\n        require(block.timestamp > _endOfLockUp, 'Cannot claim yet.');\r\n\r\n        // Send ETH balance to `_contractOwner`.\r\n        _contractOwner.transfer(address(this).balance);\r\n\r\n    }\r\n\r\n}","ABI":"[{\"constant\":true,\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"spender\",\"type\":\"address\"},{\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"sender\",\"type\":\"address\"},{\"name\":\"recipient\",\"type\":\"address\"},{\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"decimals\",\"outputs\":[{\"name\":\"\",\"type\":\"uint8\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"address\"}],\"name\":\"_minters\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"spender\",\"type\":\"address\"},{\"name\":\"addedValue\",\"type\":\"uint256\"}],\"name\":\"increaseAllowance\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"burn\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"beginLockDrop\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"account\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"_totalMinted\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"account\",\"type\":\"address\"},{\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"burnFrom\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"_launchTimestamp\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"mintedAmount\",\"type\":\"uint256\"},{\"name\":\"recipient\",\"type\":\"address\"}],\"name\":\"mint\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"minter\",\"type\":\"address\"}],\"name\":\"addMinter\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"_lastLockDropAddress\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"spender\",\"type\":\"address\"},{\"name\":\"subtractedValue\",\"type\":\"uint256\"}],\"name\":\"decreaseAllowance\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"recipient\",\"type\":\"address\"},{\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"_owner\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"getMintingLimit\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"owner\",\"type\":\"address\"},{\"name\":\"spender\",\"type\":\"address\"}],\"name\":\"allowance\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"_lastLockDropTimestamp\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"deployedBy\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"deployedTimestamp\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"deployedSize\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"deployedAddress\",\"type\":\"address\"}],\"name\":\"LockDropCreation\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"minter\",\"type\":\"address\"}],\"name\":\"MinterAddition\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"spender\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"}]","ContractName":"KongERC20","CompilerVersion":"v0.5.2+commit.1df8f40c","OptimizationUsed":"0","Runs":"200","ConstructorArguments":"","Library":"","LicenseType":"MIT","SwarmSource":"bzzr://87ad1ee8610421e693c718d2fac652c5339df46fed08c65b2b80aad6f056450c"}]}