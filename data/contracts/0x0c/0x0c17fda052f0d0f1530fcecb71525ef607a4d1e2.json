{"status":"1","message":"OK","result":[{"SourceCode":"pragma solidity ^0.5.0;\r\n\r\n\r\n/*\r\n * @dev Provides information about the current execution context, including the\r\n * sender of the transaction and its data. While these are generally available\r\n * via msg.sender and msg.data, they should not be accessed in such a direct\r\n * manner, since when dealing with GSN meta-transactions the account sending and\r\n * paying for execution may not be the actual sender (as far as an application\r\n * is concerned).\r\n *\r\n * This contract is only required for intermediate, library-like contracts.\r\n */\r\ncontract Context {\r\n\t// Empty internal constructor, to prevent people from mistakenly deploying\r\n\t// an instance of this contract, which should be used via inheritance.\r\n\tconstructor() internal {}\r\n\r\n\t// solhint-disable-previous-line no-empty-blocks\r\n\r\n\tfunction _msgSender() internal view returns (address payable) {\r\n\t\treturn msg.sender;\r\n\t}\r\n\r\n\tfunction _msgData() internal view returns (bytes memory) {\r\n\t\tthis; // silence state mutability warning without generating bytecode - see https://github.com/ethereum/solidity/issues/2691\r\n\t\treturn msg.data;\r\n\t}\r\n}\r\n\r\n\r\n/**\r\n * @title Roles\r\n * @dev Library for managing addresses assigned to a Role.\r\n */\r\nlibrary Roles {\r\n\tstruct Role {\r\n\t\tmapping(address => bool) bearer;\r\n\t}\r\n\r\n\t/**\r\n\t * @dev Give an account access to this role.\r\n\t */\r\n\tfunction add(Role storage role, address account) internal {\r\n\t\trequire(!has(role, account), \"Roles: account already has role\");\r\n\t\trole.bearer[account] = true;\r\n\t}\r\n\r\n\t/**\r\n\t * @dev Remove an account's access to this role.\r\n\t */\r\n\tfunction remove(Role storage role, address account) internal {\r\n\t\trequire(has(role, account), \"Roles: account does not have role\");\r\n\t\trole.bearer[account] = false;\r\n\t}\r\n\r\n\t/**\r\n\t * @dev Check if an account has this role.\r\n\t * @return bool\r\n\t */\r\n\tfunction has(Role storage role, address account)\r\n\t\tinternal\r\n\t\tview\r\n\t\treturns (bool)\r\n\t{\r\n\t\trequire(account != address(0), \"Roles: account is the zero address\");\r\n\t\treturn role.bearer[account];\r\n\t}\r\n}\r\n\r\n\r\ncontract PauserRole is Context {\r\n\tusing Roles for Roles.Role;\r\n\r\n\tevent PauserAdded(address indexed account);\r\n\tevent PauserRemoved(address indexed account);\r\n\r\n\tRoles.Role private _pausers;\r\n\r\n\tconstructor() internal {\r\n\t\t_addPauser(_msgSender());\r\n\t}\r\n\r\n\tmodifier onlyPauser() {\r\n\t\trequire(\r\n\t\t\tisPauser(_msgSender()),\r\n\t\t\t\"PauserRole: caller does not have the Pauser role\"\r\n\t\t);\r\n\t\t_;\r\n\t}\r\n\r\n\tfunction isPauser(address account) public view returns (bool) {\r\n\t\treturn _pausers.has(account);\r\n\t}\r\n\r\n\tfunction addPauser(address account) public onlyPauser {\r\n\t\t_addPauser(account);\r\n\t}\r\n\r\n\tfunction renouncePauser() public {\r\n\t\t_removePauser(_msgSender());\r\n\t}\r\n\r\n\tfunction _addPauser(address account) internal {\r\n\t\t_pausers.add(account);\r\n\t\temit PauserAdded(account);\r\n\t}\r\n\r\n\tfunction _removePauser(address account) internal {\r\n\t\t_pausers.remove(account);\r\n\t\temit PauserRemoved(account);\r\n\t}\r\n}\r\n\r\n\r\n/**\r\n * @dev Contract module which allows children to implement an emergency stop\r\n * mechanism that can be triggered by an authorized account.\r\n *\r\n * This module is used through inheritance. It will make available the\r\n * modifiers `whenNotPaused` and `whenPaused`, which can be applied to\r\n * the functions of your contract. Note that they will not be pausable by\r\n * simply including this module, only once the modifiers are put in place.\r\n */\r\ncontract Pausable is Context, PauserRole {\r\n\t/**\r\n\t * @dev Emitted when the pause is triggered by a pauser (`account`).\r\n\t */\r\n\tevent Paused(address account);\r\n\r\n\t/**\r\n\t * @dev Emitted when the pause is lifted by a pauser (`account`).\r\n\t */\r\n\tevent Unpaused(address account);\r\n\r\n\tbool private _paused;\r\n\r\n\t/**\r\n\t * @dev Initializes the contract in unpaused state. Assigns the Pauser role\r\n\t * to the deployer.\r\n\t */\r\n\tconstructor() internal {\r\n\t\t_paused = false;\r\n\t}\r\n\r\n\t/**\r\n\t * @dev Returns true if the contract is paused, and false otherwise.\r\n\t */\r\n\tfunction paused() public view returns (bool) {\r\n\t\treturn _paused;\r\n\t}\r\n\r\n\t/**\r\n\t * @dev Modifier to make a function callable only when the contract is not paused.\r\n\t */\r\n\tmodifier whenNotPaused() {\r\n\t\trequire(!_paused, \"Pausable: paused\");\r\n\t\t_;\r\n\t}\r\n\r\n\t/**\r\n\t * @dev Modifier to make a function callable only when the contract is paused.\r\n\t */\r\n\tmodifier whenPaused() {\r\n\t\trequire(_paused, \"Pausable: not paused\");\r\n\t\t_;\r\n\t}\r\n\r\n\t/**\r\n\t * @dev Called by a pauser to pause, triggers stopped state.\r\n\t */\r\n\tfunction pause() public onlyPauser whenNotPaused {\r\n\t\t_paused = true;\r\n\t\temit Paused(_msgSender());\r\n\t}\r\n\r\n\t/**\r\n\t * @dev Called by a pauser to unpause, returns to normal state.\r\n\t */\r\n\tfunction unpause() public onlyPauser whenPaused {\r\n\t\t_paused = false;\r\n\t\temit Unpaused(_msgSender());\r\n\t}\r\n}\r\n\r\n\r\ncontract Killable {\r\n\taddress payable public _owner;\r\n\r\n\tconstructor() internal {\r\n\t\t_owner = msg.sender;\r\n\t}\r\n\r\n\tfunction kill() public {\r\n\t\trequire(msg.sender == _owner, \"only owner method\");\r\n\t\tselfdestruct(_owner);\r\n\t}\r\n}\r\n\r\n\r\n/**\r\n * @dev Contract module which provides a basic access control mechanism, where\r\n * there is an account (an owner) that can be granted exclusive access to\r\n * specific functions.\r\n *\r\n * This module is used through inheritance. It will make available the modifier\r\n * `onlyOwner`, which can be applied to your functions to restrict their use to\r\n * the owner.\r\n */\r\ncontract Ownable is Context {\r\n\taddress private _owner;\r\n\r\n\tevent OwnershipTransferred(\r\n\t\taddress indexed previousOwner,\r\n\t\taddress indexed newOwner\r\n\t);\r\n\r\n\t/**\r\n\t * @dev Initializes the contract setting the deployer as the initial owner.\r\n\t */\r\n\tconstructor() internal {\r\n\t\taddress msgSender = _msgSender();\r\n\t\t_owner = msgSender;\r\n\t\temit OwnershipTransferred(address(0), msgSender);\r\n\t}\r\n\r\n\t/**\r\n\t * @dev Returns the address of the current owner.\r\n\t */\r\n\tfunction owner() public view returns (address) {\r\n\t\treturn _owner;\r\n\t}\r\n\r\n\t/**\r\n\t * @dev Throws if called by any account other than the owner.\r\n\t */\r\n\tmodifier onlyOwner() {\r\n\t\trequire(isOwner(), \"Ownable: caller is not the owner\");\r\n\t\t_;\r\n\t}\r\n\r\n\t/**\r\n\t * @dev Returns true if the caller is the current owner.\r\n\t */\r\n\tfunction isOwner() public view returns (bool) {\r\n\t\treturn _msgSender() == _owner;\r\n\t}\r\n\r\n\t/**\r\n\t * @dev Leaves the contract without owner. It will not be possible to call\r\n\t * `onlyOwner` functions anymore. Can only be called by the current owner.\r\n\t *\r\n\t * NOTE: Renouncing ownership will leave the contract without an owner,\r\n\t * thereby removing any functionality that is only available to the owner.\r\n\t */\r\n\tfunction renounceOwnership() public onlyOwner {\r\n\t\temit OwnershipTransferred(_owner, address(0));\r\n\t\t_owner = address(0);\r\n\t}\r\n\r\n\t/**\r\n\t * @dev Transfers ownership of the contract to a new account (`newOwner`).\r\n\t * Can only be called by the current owner.\r\n\t */\r\n\tfunction transferOwnership(address newOwner) public onlyOwner {\r\n\t\t_transferOwnership(newOwner);\r\n\t}\r\n\r\n\t/**\r\n\t * @dev Transfers ownership of the contract to a new account (`newOwner`).\r\n\t */\r\n\tfunction _transferOwnership(address newOwner) internal {\r\n\t\trequire(\r\n\t\t\tnewOwner != address(0),\r\n\t\t\t\"Ownable: new owner is the zero address\"\r\n\t\t);\r\n\t\temit OwnershipTransferred(_owner, newOwner);\r\n\t\t_owner = newOwner;\r\n\t}\r\n}\r\n\r\n\r\n// prettier-ignore\r\n\r\ncontract IGroup {\r\n\tfunction isGroup(address _addr) public view returns (bool);\r\n\r\n\tfunction addGroup(address _addr) external;\r\n\r\n\tfunction getGroupKey(address _addr) internal pure returns (bytes32) {\r\n\t\treturn keccak256(abi.encodePacked(\"_group\", _addr));\r\n\t}\r\n}\r\n\r\n\r\ncontract AddressValidator {\r\n\tstring constant errorMessage = \"this is illegal address\";\r\n\r\n\tfunction validateIllegalAddress(address _addr) external pure {\r\n\t\trequire(_addr != address(0), errorMessage);\r\n\t}\r\n\r\n\tfunction validateGroup(address _addr, address _groupAddr) external view {\r\n\t\trequire(IGroup(_groupAddr).isGroup(_addr), errorMessage);\r\n\t}\r\n\r\n\tfunction validateGroups(\r\n\t\taddress _addr,\r\n\t\taddress _groupAddr1,\r\n\t\taddress _groupAddr2\r\n\t) external view {\r\n\t\tif (IGroup(_groupAddr1).isGroup(_addr)) {\r\n\t\t\treturn;\r\n\t\t}\r\n\t\trequire(IGroup(_groupAddr2).isGroup(_addr), errorMessage);\r\n\t}\r\n\r\n\tfunction validateAddress(address _addr, address _target) external pure {\r\n\t\trequire(_addr == _target, errorMessage);\r\n\t}\r\n\r\n\tfunction validateAddresses(\r\n\t\taddress _addr,\r\n\t\taddress _target1,\r\n\t\taddress _target2\r\n\t) external pure {\r\n\t\tif (_addr == _target1) {\r\n\t\t\treturn;\r\n\t\t}\r\n\t\trequire(_addr == _target2, errorMessage);\r\n\t}\r\n}\r\n\r\n\r\ncontract UsingValidator {\r\n\tAddressValidator private _validator;\r\n\r\n\tconstructor() public {\r\n\t\t_validator = new AddressValidator();\r\n\t}\r\n\r\n\tfunction addressValidator() internal view returns (AddressValidator) {\r\n\t\treturn _validator;\r\n\t}\r\n}\r\n\r\n\r\ncontract AddressConfig is Ownable, UsingValidator, Killable {\r\n\taddress public token = 0x98626E2C9231f03504273d55f397409deFD4a093;\r\n\taddress public allocator;\r\n\taddress public allocatorStorage;\r\n\taddress public withdraw;\r\n\taddress public withdrawStorage;\r\n\taddress public marketFactory;\r\n\taddress public marketGroup;\r\n\taddress public propertyFactory;\r\n\taddress public propertyGroup;\r\n\taddress public metricsGroup;\r\n\taddress public metricsFactory;\r\n\taddress public policy;\r\n\taddress public policyFactory;\r\n\taddress public policySet;\r\n\taddress public policyGroup;\r\n\taddress public lockup;\r\n\taddress public lockupStorage;\r\n\taddress public voteTimes;\r\n\taddress public voteTimesStorage;\r\n\taddress public voteCounter;\r\n\taddress public voteCounterStorage;\r\n\r\n\tfunction setAllocator(address _addr) external onlyOwner {\r\n\t\tallocator = _addr;\r\n\t}\r\n\r\n\tfunction setAllocatorStorage(address _addr) external onlyOwner {\r\n\t\tallocatorStorage = _addr;\r\n\t}\r\n\r\n\tfunction setWithdraw(address _addr) external onlyOwner {\r\n\t\twithdraw = _addr;\r\n\t}\r\n\r\n\tfunction setWithdrawStorage(address _addr) external onlyOwner {\r\n\t\twithdrawStorage = _addr;\r\n\t}\r\n\r\n\tfunction setMarketFactory(address _addr) external onlyOwner {\r\n\t\tmarketFactory = _addr;\r\n\t}\r\n\r\n\tfunction setMarketGroup(address _addr) external onlyOwner {\r\n\t\tmarketGroup = _addr;\r\n\t}\r\n\r\n\tfunction setPropertyFactory(address _addr) external onlyOwner {\r\n\t\tpropertyFactory = _addr;\r\n\t}\r\n\r\n\tfunction setPropertyGroup(address _addr) external onlyOwner {\r\n\t\tpropertyGroup = _addr;\r\n\t}\r\n\r\n\tfunction setMetricsFactory(address _addr) external onlyOwner {\r\n\t\tmetricsFactory = _addr;\r\n\t}\r\n\r\n\tfunction setMetricsGroup(address _addr) external onlyOwner {\r\n\t\tmetricsGroup = _addr;\r\n\t}\r\n\r\n\tfunction setPolicyFactory(address _addr) external onlyOwner {\r\n\t\tpolicyFactory = _addr;\r\n\t}\r\n\r\n\tfunction setPolicyGroup(address _addr) external onlyOwner {\r\n\t\tpolicyGroup = _addr;\r\n\t}\r\n\r\n\tfunction setPolicySet(address _addr) external onlyOwner {\r\n\t\tpolicySet = _addr;\r\n\t}\r\n\r\n\tfunction setPolicy(address _addr) external {\r\n\t\taddressValidator().validateAddress(msg.sender, policyFactory);\r\n\t\tpolicy = _addr;\r\n\t}\r\n\r\n\tfunction setToken(address _addr) external onlyOwner {\r\n\t\ttoken = _addr;\r\n\t}\r\n\r\n\tfunction setLockup(address _addr) external onlyOwner {\r\n\t\tlockup = _addr;\r\n\t}\r\n\r\n\tfunction setLockupStorage(address _addr) external onlyOwner {\r\n\t\tlockupStorage = _addr;\r\n\t}\r\n\r\n\tfunction setVoteTimes(address _addr) external onlyOwner {\r\n\t\tvoteTimes = _addr;\r\n\t}\r\n\r\n\tfunction setVoteTimesStorage(address _addr) external onlyOwner {\r\n\t\tvoteTimesStorage = _addr;\r\n\t}\r\n\r\n\tfunction setVoteCounter(address _addr) external onlyOwner {\r\n\t\tvoteCounter = _addr;\r\n\t}\r\n\r\n\tfunction setVoteCounterStorage(address _addr) external onlyOwner {\r\n\t\tvoteCounterStorage = _addr;\r\n\t}\r\n}\r\n\r\n\r\ncontract UsingConfig {\r\n\tAddressConfig private _config;\r\n\r\n\tconstructor(address _addressConfig) public {\r\n\t\t_config = AddressConfig(_addressConfig);\r\n\t}\r\n\r\n\tfunction config() internal view returns (AddressConfig) {\r\n\t\treturn _config;\r\n\t}\r\n\r\n\tfunction configAddress() external view returns (address) {\r\n\t\treturn address(_config);\r\n\t}\r\n}\r\n\r\n\r\n/**\r\n * @dev Wrappers over Solidity's arithmetic operations with added overflow\r\n * checks.\r\n *\r\n * Arithmetic operations in Solidity wrap on overflow. This can easily result\r\n * in bugs, because programmers usually assume that an overflow raises an\r\n * error, which is the standard behavior in high level programming languages.\r\n * `SafeMath` restores this intuition by reverting the transaction when an\r\n * operation overflows.\r\n *\r\n * Using this library instead of the unchecked operations eliminates an entire\r\n * class of bugs, so it's recommended to use it always.\r\n */\r\nlibrary SafeMath {\r\n\t/**\r\n\t * @dev Returns the addition of two unsigned integers, reverting on\r\n\t * overflow.\r\n\t *\r\n\t * Counterpart to Solidity's `+` operator.\r\n\t *\r\n\t * Requirements:\r\n\t * - Addition cannot overflow.\r\n\t */\r\n\tfunction add(uint256 a, uint256 b) internal pure returns (uint256) {\r\n\t\tuint256 c = a + b;\r\n\t\trequire(c >= a, \"SafeMath: addition overflow\");\r\n\r\n\t\treturn c;\r\n\t}\r\n\r\n\t/**\r\n\t * @dev Returns the subtraction of two unsigned integers, reverting on\r\n\t * overflow (when the result is negative).\r\n\t *\r\n\t * Counterpart to Solidity's `-` operator.\r\n\t *\r\n\t * Requirements:\r\n\t * - Subtraction cannot overflow.\r\n\t */\r\n\tfunction sub(uint256 a, uint256 b) internal pure returns (uint256) {\r\n\t\treturn sub(a, b, \"SafeMath: subtraction overflow\");\r\n\t}\r\n\r\n\t/**\r\n\t * @dev Returns the subtraction of two unsigned integers, reverting with custom message on\r\n\t * overflow (when the result is negative).\r\n\t *\r\n\t * Counterpart to Solidity's `-` operator.\r\n\t *\r\n\t * Requirements:\r\n\t * - Subtraction cannot overflow.\r\n\t *\r\n\t * _Available since v2.4.0._\r\n\t */\r\n\tfunction sub(uint256 a, uint256 b, string memory errorMessage)\r\n\t\tinternal\r\n\t\tpure\r\n\t\treturns (uint256)\r\n\t{\r\n\t\trequire(b <= a, errorMessage);\r\n\t\tuint256 c = a - b;\r\n\r\n\t\treturn c;\r\n\t}\r\n\r\n\t/**\r\n\t * @dev Returns the multiplication of two unsigned integers, reverting on\r\n\t * overflow.\r\n\t *\r\n\t * Counterpart to Solidity's `*` operator.\r\n\t *\r\n\t * Requirements:\r\n\t * - Multiplication cannot overflow.\r\n\t */\r\n\tfunction mul(uint256 a, uint256 b) internal pure returns (uint256) {\r\n\t\t// Gas optimization: this is cheaper than requiring 'a' not being zero, but the\r\n\t\t// benefit is lost if 'b' is also tested.\r\n\t\t// See: https://github.com/OpenZeppelin/openzeppelin-contracts/pull/522\r\n\t\tif (a == 0) {\r\n\t\t\treturn 0;\r\n\t\t}\r\n\r\n\t\tuint256 c = a * b;\r\n\t\trequire(c / a == b, \"SafeMath: multiplication overflow\");\r\n\r\n\t\treturn c;\r\n\t}\r\n\r\n\t/**\r\n\t * @dev Returns the integer division of two unsigned integers. Reverts on\r\n\t * division by zero. The result is rounded towards zero.\r\n\t *\r\n\t * Counterpart to Solidity's `/` operator. Note: this function uses a\r\n\t * `revert` opcode (which leaves remaining gas untouched) while Solidity\r\n\t * uses an invalid opcode to revert (consuming all remaining gas).\r\n\t *\r\n\t * Requirements:\r\n\t * - The divisor cannot be zero.\r\n\t */\r\n\tfunction div(uint256 a, uint256 b) internal pure returns (uint256) {\r\n\t\treturn div(a, b, \"SafeMath: division by zero\");\r\n\t}\r\n\r\n\t/**\r\n\t * @dev Returns the integer division of two unsigned integers. Reverts with custom message on\r\n\t * division by zero. The result is rounded towards zero.\r\n\t *\r\n\t * Counterpart to Solidity's `/` operator. Note: this function uses a\r\n\t * `revert` opcode (which leaves remaining gas untouched) while Solidity\r\n\t * uses an invalid opcode to revert (consuming all remaining gas).\r\n\t *\r\n\t * Requirements:\r\n\t * - The divisor cannot be zero.\r\n\t *\r\n\t * _Available since v2.4.0._\r\n\t */\r\n\tfunction div(uint256 a, uint256 b, string memory errorMessage)\r\n\t\tinternal\r\n\t\tpure\r\n\t\treturns (uint256)\r\n\t{\r\n\t\t// Solidity only automatically asserts when dividing by 0\r\n\t\trequire(b > 0, errorMessage);\r\n\t\tuint256 c = a / b;\r\n\t\t// assert(a == b * c + a % b); // There is no case in which this doesn't hold\r\n\r\n\t\treturn c;\r\n\t}\r\n\r\n\t/**\r\n\t * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\r\n\t * Reverts when dividing by zero.\r\n\t *\r\n\t * Counterpart to Solidity's `%` operator. This function uses a `revert`\r\n\t * opcode (which leaves remaining gas untouched) while Solidity uses an\r\n\t * invalid opcode to revert (consuming all remaining gas).\r\n\t *\r\n\t * Requirements:\r\n\t * - The divisor cannot be zero.\r\n\t */\r\n\tfunction mod(uint256 a, uint256 b) internal pure returns (uint256) {\r\n\t\treturn mod(a, b, \"SafeMath: modulo by zero\");\r\n\t}\r\n\r\n\t/**\r\n\t * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\r\n\t * Reverts with custom message when dividing by zero.\r\n\t *\r\n\t * Counterpart to Solidity's `%` operator. This function uses a `revert`\r\n\t * opcode (which leaves remaining gas untouched) while Solidity uses an\r\n\t * invalid opcode to revert (consuming all remaining gas).\r\n\t *\r\n\t * Requirements:\r\n\t * - The divisor cannot be zero.\r\n\t *\r\n\t * _Available since v2.4.0._\r\n\t */\r\n\tfunction mod(uint256 a, uint256 b, string memory errorMessage)\r\n\t\tinternal\r\n\t\tpure\r\n\t\treturns (uint256)\r\n\t{\r\n\t\trequire(b != 0, errorMessage);\r\n\t\treturn a % b;\r\n\t}\r\n}\r\n\r\n\r\ncontract EternalStorage {\r\n\taddress private currentOwner = msg.sender;\r\n\r\n\tmapping(bytes32 => uint256) private uIntStorage;\r\n\tmapping(bytes32 => string) private stringStorage;\r\n\tmapping(bytes32 => address) private addressStorage;\r\n\tmapping(bytes32 => bytes32) private bytesStorage;\r\n\tmapping(bytes32 => bool) private boolStorage;\r\n\tmapping(bytes32 => int256) private intStorage;\r\n\r\n\tmodifier onlyCurrentOwner() {\r\n\t\trequire(msg.sender == currentOwner, \"not current owner\");\r\n\t\t_;\r\n\t}\r\n\r\n\tfunction changeOwner(address _newOwner) external {\r\n\t\trequire(msg.sender == currentOwner, \"not current owner\");\r\n\t\tcurrentOwner = _newOwner;\r\n\t}\r\n\r\n\t// *** Getter Methods ***\r\n\tfunction getUint(bytes32 _key) external view returns (uint256) {\r\n\t\treturn uIntStorage[_key];\r\n\t}\r\n\r\n\tfunction getString(bytes32 _key) external view returns (string memory) {\r\n\t\treturn stringStorage[_key];\r\n\t}\r\n\r\n\tfunction getAddress(bytes32 _key) external view returns (address) {\r\n\t\treturn addressStorage[_key];\r\n\t}\r\n\r\n\tfunction getBytes(bytes32 _key) external view returns (bytes32) {\r\n\t\treturn bytesStorage[_key];\r\n\t}\r\n\r\n\tfunction getBool(bytes32 _key) external view returns (bool) {\r\n\t\treturn boolStorage[_key];\r\n\t}\r\n\r\n\tfunction getInt(bytes32 _key) external view returns (int256) {\r\n\t\treturn intStorage[_key];\r\n\t}\r\n\r\n\t// *** Setter Methods ***\r\n\tfunction setUint(bytes32 _key, uint256 _value) external onlyCurrentOwner {\r\n\t\tuIntStorage[_key] = _value;\r\n\t}\r\n\r\n\tfunction setString(bytes32 _key, string calldata _value)\r\n\t\texternal\r\n\t\tonlyCurrentOwner\r\n\t{\r\n\t\tstringStorage[_key] = _value;\r\n\t}\r\n\r\n\tfunction setAddress(bytes32 _key, address _value)\r\n\t\texternal\r\n\t\tonlyCurrentOwner\r\n\t{\r\n\t\taddressStorage[_key] = _value;\r\n\t}\r\n\r\n\tfunction setBytes(bytes32 _key, bytes32 _value) external onlyCurrentOwner {\r\n\t\tbytesStorage[_key] = _value;\r\n\t}\r\n\r\n\tfunction setBool(bytes32 _key, bool _value) external onlyCurrentOwner {\r\n\t\tboolStorage[_key] = _value;\r\n\t}\r\n\r\n\tfunction setInt(bytes32 _key, int256 _value) external onlyCurrentOwner {\r\n\t\tintStorage[_key] = _value;\r\n\t}\r\n\r\n\t// *** Delete Methods ***\r\n\tfunction deleteUint(bytes32 _key) external onlyCurrentOwner {\r\n\t\tdelete uIntStorage[_key];\r\n\t}\r\n\r\n\tfunction deleteString(bytes32 _key) external onlyCurrentOwner {\r\n\t\tdelete stringStorage[_key];\r\n\t}\r\n\r\n\tfunction deleteAddress(bytes32 _key) external onlyCurrentOwner {\r\n\t\tdelete addressStorage[_key];\r\n\t}\r\n\r\n\tfunction deleteBytes(bytes32 _key) external onlyCurrentOwner {\r\n\t\tdelete bytesStorage[_key];\r\n\t}\r\n\r\n\tfunction deleteBool(bytes32 _key) external onlyCurrentOwner {\r\n\t\tdelete boolStorage[_key];\r\n\t}\r\n\r\n\tfunction deleteInt(bytes32 _key) external onlyCurrentOwner {\r\n\t\tdelete intStorage[_key];\r\n\t}\r\n}\r\n\r\n\r\ncontract UsingStorage is Ownable, Pausable {\r\n\taddress private _storage;\r\n\r\n\tmodifier hasStorage() {\r\n\t\trequire(_storage != address(0), \"storage is not setted\");\r\n\t\t_;\r\n\t}\r\n\r\n\tfunction eternalStorage()\r\n\t\tinternal\r\n\t\tview\r\n\t\thasStorage\r\n\t\treturns (EternalStorage)\r\n\t{\r\n\t\trequire(paused() == false, \"You cannot use that\");\r\n\t\treturn EternalStorage(_storage);\r\n\t}\r\n\r\n\tfunction getStorageAddress() external view hasStorage returns (address) {\r\n\t\treturn _storage;\r\n\t}\r\n\r\n\tfunction createStorage() external onlyOwner {\r\n\t\trequire(_storage == address(0), \"storage is setted\");\r\n\t\tEternalStorage tmp = new EternalStorage();\r\n\t\t_storage = address(tmp);\r\n\t}\r\n\r\n\tfunction setStorage(address _storageAddress) external onlyOwner {\r\n\t\t_storage = _storageAddress;\r\n\t}\r\n\r\n\tfunction changeOwner(address newOwner) external onlyOwner {\r\n\t\tEternalStorage(_storage).changeOwner(newOwner);\r\n\t}\r\n}\r\n\r\n\r\ncontract VoteTimesStorage is\r\n\tUsingStorage,\r\n\tUsingConfig,\r\n\tUsingValidator,\r\n\tKillable\r\n{\r\n\t// solium-disable-next-line no-empty-blocks\r\n\tconstructor(address _config) public UsingConfig(_config) {}\r\n\r\n\t// Vote Times\r\n\tfunction getVoteTimes() external view returns (uint256) {\r\n\t\treturn eternalStorage().getUint(getVoteTimesKey());\r\n\t}\r\n\r\n\tfunction setVoteTimes(uint256 times) external {\r\n\t\taddressValidator().validateAddress(msg.sender, config().voteTimes());\r\n\r\n\t\treturn eternalStorage().setUint(getVoteTimesKey(), times);\r\n\t}\r\n\r\n\tfunction getVoteTimesKey() private pure returns (bytes32) {\r\n\t\treturn keccak256(abi.encodePacked(\"_voteTimes\"));\r\n\t}\r\n\r\n\t//Vote Times By Property\r\n\tfunction getVoteTimesByProperty(address _property)\r\n\t\texternal\r\n\t\tview\r\n\t\treturns (uint256)\r\n\t{\r\n\t\treturn eternalStorage().getUint(getVoteTimesByPropertyKey(_property));\r\n\t}\r\n\r\n\tfunction setVoteTimesByProperty(address _property, uint256 times) external {\r\n\t\taddressValidator().validateAddress(msg.sender, config().voteTimes());\r\n\r\n\t\treturn\r\n\t\t\teternalStorage().setUint(\r\n\t\t\t\tgetVoteTimesByPropertyKey(_property),\r\n\t\t\t\ttimes\r\n\t\t\t);\r\n\t}\r\n\r\n\tfunction getVoteTimesByPropertyKey(address _property)\r\n\t\tprivate\r\n\t\tpure\r\n\t\treturns (bytes32)\r\n\t{\r\n\t\treturn keccak256(abi.encodePacked(\"_voteTimesByProperty\", _property));\r\n\t}\r\n}\r\n\r\n\r\ncontract VoteTimes is UsingConfig, UsingValidator, Killable {\r\n\tusing SafeMath for uint256;\r\n\r\n\t// solium-disable-next-line no-empty-blocks\r\n\tconstructor(address _config) public UsingConfig(_config) {}\r\n\r\n\tfunction addVoteTime() external {\r\n\t\taddressValidator().validateAddresses(\r\n\t\t\tmsg.sender,\r\n\t\t\tconfig().marketFactory(),\r\n\t\t\tconfig().policyFactory()\r\n\t\t);\r\n\r\n\t\tuint256 voteTimes = getStorage().getVoteTimes();\r\n\t\tvoteTimes = voteTimes.add(1);\r\n\t\tgetStorage().setVoteTimes(voteTimes);\r\n\t}\r\n\r\n\tfunction addVoteTimesByProperty(address _property) external {\r\n\t\taddressValidator().validateAddress(msg.sender, config().voteCounter());\r\n\r\n\t\tuint256 voteTimesByProperty = getStorage().getVoteTimesByProperty(\r\n\t\t\t_property\r\n\t\t);\r\n\t\tvoteTimesByProperty = voteTimesByProperty.add(1);\r\n\t\tgetStorage().setVoteTimesByProperty(_property, voteTimesByProperty);\r\n\t}\r\n\r\n\tfunction resetVoteTimesByProperty(address _property) external {\r\n\t\taddressValidator().validateAddresses(\r\n\t\t\tmsg.sender,\r\n\t\t\tconfig().allocator(),\r\n\t\t\tconfig().propertyFactory()\r\n\t\t);\r\n\r\n\t\tuint256 voteTimes = getStorage().getVoteTimes();\r\n\t\tgetStorage().setVoteTimesByProperty(_property, voteTimes);\r\n\t}\r\n\r\n\tfunction getAbstentionTimes(address _property)\r\n\t\texternal\r\n\t\tview\r\n\t\treturns (uint256)\r\n\t{\r\n\t\tuint256 voteTimes = getStorage().getVoteTimes();\r\n\t\tuint256 voteTimesByProperty = getStorage().getVoteTimesByProperty(\r\n\t\t\t_property\r\n\t\t);\r\n\t\treturn voteTimes.sub(voteTimesByProperty);\r\n\t}\r\n\r\n\tfunction getStorage() private view returns (VoteTimesStorage) {\r\n\t\treturn VoteTimesStorage(config().voteTimesStorage());\r\n\t}\r\n}\r\n\r\n\r\ncontract Metrics {\r\n\taddress public market;\r\n\taddress public property;\r\n\r\n\tconstructor(address _market, address _property) public {\r\n\t\t//Do not validate because there is no AddressConfig\r\n\t\tmarket = _market;\r\n\t\tproperty = _property;\r\n\t}\r\n}\r\n\r\n\r\ncontract MetricsGroup is UsingConfig, UsingStorage, UsingValidator, IGroup {\r\n\tusing SafeMath for uint256;\r\n\r\n\t// solium-disable-next-line no-empty-blocks\r\n\tconstructor(address _config) public UsingConfig(_config) {}\r\n\r\n\tfunction addGroup(address _addr) external {\r\n\t\trequire(paused() == false, \"You cannot use that\");\r\n\t\taddressValidator().validateAddress(\r\n\t\t\tmsg.sender,\r\n\t\t\tconfig().metricsFactory()\r\n\t\t);\r\n\r\n\t\trequire(isGroup(_addr) == false, \"already enabled\");\r\n\t\teternalStorage().setBool(getGroupKey(_addr), true);\r\n\t\tuint256 totalCount = eternalStorage().getUint(getTotalCountKey());\r\n\t\ttotalCount = totalCount.add(1);\r\n\t\teternalStorage().setUint(getTotalCountKey(), totalCount);\r\n\t}\r\n\r\n\tfunction removeGroup(address _addr) external {\r\n\t\trequire(paused() == false, \"You cannot use that\");\r\n\t\taddressValidator().validateAddress(\r\n\t\t\tmsg.sender,\r\n\t\t\tconfig().metricsFactory()\r\n\t\t);\r\n\r\n\t\trequire(isGroup(_addr), \"address is not group\");\r\n\t\teternalStorage().setBool(getGroupKey(_addr), false);\r\n\t\tuint256 totalCount = eternalStorage().getUint(getTotalCountKey());\r\n\t\ttotalCount = totalCount.sub(1);\r\n\t\teternalStorage().setUint(getTotalCountKey(), totalCount);\r\n\t}\r\n\r\n\tfunction isGroup(address _addr) public view returns (bool) {\r\n\t\treturn eternalStorage().getBool(getGroupKey(_addr));\r\n\t}\r\n\r\n\tfunction totalIssuedMetrics() external view returns (uint256) {\r\n\t\treturn eternalStorage().getUint(getTotalCountKey());\r\n\t}\r\n\r\n\tfunction getTotalCountKey() private pure returns (bytes32) {\r\n\t\treturn keccak256(abi.encodePacked(\"_totalCount\"));\r\n\t}\r\n}\r\n\r\n\r\ncontract MetricsFactory is Pausable, UsingConfig, UsingValidator {\r\n\tevent Create(address indexed _from, address _metrics);\r\n\tevent Destroy(address indexed _from, address _metrics);\r\n\r\n\t// solium-disable-next-line no-empty-blocks\r\n\tconstructor(address _config) public UsingConfig(_config) {}\r\n\r\n\tfunction create(address _property) external returns (address) {\r\n\t\trequire(paused() == false, \"You cannot use that\");\r\n\t\taddressValidator().validateGroup(msg.sender, config().marketGroup());\r\n\r\n\t\tMetrics metrics = new Metrics(msg.sender, _property);\r\n\t\tMetricsGroup metricsGroup = MetricsGroup(config().metricsGroup());\r\n\t\taddress metricsAddress = address(metrics);\r\n\t\tmetricsGroup.addGroup(metricsAddress);\r\n\t\temit Create(msg.sender, metricsAddress);\r\n\t\treturn metricsAddress;\r\n\t}\r\n\r\n\tfunction destroy(address _metrics) external {\r\n\t\trequire(paused() == false, \"You cannot use that\");\r\n\r\n\t\tMetricsGroup metricsGroup = MetricsGroup(config().metricsGroup());\r\n\t\trequire(metricsGroup.isGroup(_metrics), \"address is not metrics\");\r\n\t\taddressValidator().validateGroup(msg.sender, config().marketGroup());\r\n\t\tMetrics metrics = Metrics(_metrics);\r\n\t\taddressValidator().validateAddress(msg.sender, metrics.market());\r\n\t\tmetricsGroup.removeGroup(_metrics);\r\n\t\temit Destroy(msg.sender, _metrics);\r\n\t}\r\n}","ABI":"[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_config\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"_from\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"_metrics\",\"type\":\"address\"}],\"name\":\"Create\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"_from\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"_metrics\",\"type\":\"address\"}],\"name\":\"Destroy\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"Paused\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"PauserAdded\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"PauserRemoved\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"Unpaused\",\"type\":\"event\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"addPauser\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"configAddress\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"address\",\"name\":\"_property\",\"type\":\"address\"}],\"name\":\"create\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"address\",\"name\":\"_metrics\",\"type\":\"address\"}],\"name\":\"destroy\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"isPauser\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"pause\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"paused\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"renouncePauser\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"unpause\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"}]","ContractName":"MetricsFactory","CompilerVersion":"v0.5.17+commit.d19bba13","OptimizationUsed":"1","Runs":"200","ConstructorArguments":"0000000000000000000000001d415aa39d647834786eb9b5a333a50e9935b796","Library":"","LicenseType":"MPL-2.0","SwarmSource":"bzzr://c4537ccb2bacf78e5662244c17a311ca1079b4266f7f6e67660d79b2da444865"}]}