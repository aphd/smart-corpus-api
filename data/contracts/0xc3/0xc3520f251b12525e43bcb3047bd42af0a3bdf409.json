{"status":"1","message":"OK","result":[{"SourceCode":"pragma solidity ^0.5.16;\r\n\r\n/*\r\n    Multilevel crowdfunding.\r\n    Your reward: \r\n    (The proposed percentage of profit.\r\n    You can change the percentage as it suits you.)\r\n    1 line 10%\r\n    2 line 20%\r\n    3 line 30%\r\n    bonus marketing up to 8 lines of 1%.\r\n    rules 1 connection opens 1 line additionally.\r\n    20% to Project.\r\n    Developerd by Alex Burn.\r\n    https://github.com/alexburndev/mlmcrowdfunding/blob/master/general.sol\r\n*/\r\n\r\nlibrary SafeMath {\r\n    /**\r\n     * @dev Returns the addition of two unsigned integers, reverting on\r\n     * overflow.\r\n     *\r\n     * Counterpart to Solidity's `+` operator.\r\n     *\r\n     * Requirements:\r\n     * - Addition cannot overflow.\r\n     */\r\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        uint256 c = a + b;\r\n        require(c >= a, \"SafeMath: addition overflow\");\r\n\r\n        return c;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the subtraction of two unsigned integers, reverting on\r\n     * overflow (when the result is negative).\r\n     *\r\n     * Counterpart to Solidity's `-` operator.\r\n     *\r\n     * Requirements:\r\n     * - Subtraction cannot overflow.\r\n     */\r\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        require(b <= a, \"SafeMath: subtraction overflow\");\r\n        uint256 c = a - b;\r\n\r\n        return c;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the multiplication of two unsigned integers, reverting on\r\n     * overflow.\r\n     *\r\n     * Counterpart to Solidity's `*` operator.\r\n     *\r\n     * Requirements:\r\n     * - Multiplication cannot overflow.\r\n     */\r\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        // Gas optimization: this is cheaper than requiring 'a' not being zero, but the\r\n        // benefit is lost if 'b' is also tested.\r\n        // See: https://github.com/OpenZeppelin/openzeppelin-solidity/pull/522\r\n        if (a == 0) {\r\n            return 0;\r\n        }\r\n\r\n        uint256 c = a * b;\r\n        require(c / a == b, \"SafeMath: multiplication overflow\");\r\n\r\n        return c;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the integer division of two unsigned integers. Reverts on\r\n     * division by zero. The result is rounded towards zero.\r\n     *\r\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\r\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\r\n     * uses an invalid opcode to revert (consuming all remaining gas).\r\n     *\r\n     * Requirements:\r\n     * - The divisor cannot be zero.\r\n     */\r\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        // Solidity only automatically asserts when dividing by 0\r\n        require(b > 0, \"SafeMath: division by zero\");\r\n        uint256 c = a / b;\r\n        // assert(a == b * c + a % b); // There is no case in which this doesn't hold\r\n\r\n        return c;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\r\n     * Reverts when dividing by zero.\r\n     *\r\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\r\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\r\n     * invalid opcode to revert (consuming all remaining gas).\r\n     *\r\n     * Requirements:\r\n     * - The divisor cannot be zero.\r\n     */\r\n    function mod(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        require(b != 0, \"SafeMath: modulo by zero\");\r\n        return a % b;\r\n    }\r\n}\r\n\r\ncontract ERC20 {\r\n    uint public decimals;\r\n    function allowance(address, address) public view returns (uint);\r\n    function balanceOf(address) public view returns (uint);\r\n    function approve(address, uint) public;\r\n    function transfer(address, uint) public returns (bool);\r\n    function transferFrom(address, address, uint) public returns (bool);\r\n}\r\n\r\n/**\r\n * @dev Collection of functions related to the address type,\r\n */\r\nlibrary Address {\r\n    /**\r\n     * @dev Returns true if `account` is a contract.\r\n     *\r\n     * This test is non-exhaustive, and there may be false-negatives: during the\r\n     * execution of a contract's constructor, its address will be reported as\r\n     * not containing a contract.\r\n     *\r\n     * > It is unsafe to assume that an address for which this function returns\r\n     * false is an externally-owned account (EOA) and not a contract.\r\n     */\r\n    function isContract(address account) internal view returns (bool) {\r\n        // This method relies in extcodesize, which returns 0 for contracts in\r\n        // construction, since the code is only stored at the end of the\r\n        // constructor execution.\r\n\r\n        uint256 size;\r\n        // solhint-disable-next-line no-inline-assembly\r\n        assembly { size := extcodesize(account) }\r\n        return size > 0;\r\n    }\r\n}\r\n\r\n/**\r\n * @title SafeERC20\r\n * @dev Wrappers around ERC20 operations that throw on failure (when the token\r\n * contract returns false). Tokens that return no value (and instead revert or\r\n * throw on failure) are also supported, non-reverting calls are assumed to be\r\n * successful.\r\n * To use this library you can add a `using SafeERC20 for ERC20;` statement to your contract,\r\n * which allows you to call the safe operations as `token.safeTransfer(...)`, etc.\r\n */\r\nlibrary SafeERC20 {\r\n    \r\n    using SafeMath for uint256;\r\n    using Address for address;\r\n\r\n    function safeTransfer(ERC20 token, address to, uint256 value) internal {\r\n        callOptionalReturn(token, abi.encodeWithSelector(token.transfer.selector, to, value));\r\n    }\r\n\r\n    function safeTransferFrom(ERC20 token, address from, address to, uint256 value) internal {\r\n        callOptionalReturn(token, abi.encodeWithSelector(token.transferFrom.selector, from, to, value));\r\n    }\r\n\r\n    function safeApprove(ERC20 token, address spender, uint256 value) internal {\r\n        // safeApprove should only be called when setting an initial allowance,\r\n        // or when resetting it to zero. To increase and decrease it, use\r\n        // 'safeIncreaseAllowance' and 'safeDecreaseAllowance'\r\n        // solhint-disable-next-line max-line-length\r\n        require((value == 0) || (token.allowance(address(this), spender) == 0),\r\n            \"SafeERC20: approve from non-zero to non-zero allowance\"\r\n        );\r\n        callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, value));\r\n    }\r\n\r\n    function safeIncreaseAllowance(ERC20 token, address spender, uint256 value) internal {\r\n        uint256 newAllowance = token.allowance(address(this), spender).add(value);\r\n        callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\r\n    }\r\n\r\n    function safeDecreaseAllowance(ERC20 token, address spender, uint256 value) internal {\r\n        uint256 newAllowance = token.allowance(address(this), spender).sub(value);\r\n        callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\r\n    }\r\n\r\n    /**\r\n     * @dev Imitates a Solidity high-level call (i.e. a regular function call to a contract), relaxing the requirement\r\n     * on the return value: the return value is optional (but if data is returned, it must not be false).\r\n     * @param token The token targeted by the call.\r\n     * @param data The call data (encoded using abi.encode or one of its variants).\r\n     */\r\n     \r\n    function callOptionalReturn(ERC20 token, bytes memory data) private {\r\n        // We need to perform a low level call here, to bypass Solidity's return data size checking mechanism, since\r\n        // we're implementing it ourselves.\r\n\r\n        // A Solidity high level call has three parts:\r\n        //  1. The target address is checked to verify it contains contract code\r\n        //  2. The call itself is made, and success asserted\r\n        //  3. The return value is decoded, which in turn checks the size of the returned data.\r\n        // solhint-disable-next-line max-line-length\r\n        require(address(token).isContract(), \"SafeERC20: call to non-contract\");\r\n\r\n        // solhint-disable-next-line avoid-low-level-calls\r\n        (bool success, bytes memory returndata) = address(token).call(data);\r\n        require(success, \"SafeERC20: low-level call failed\");\r\n\r\n        if (returndata.length > 0) { // Return data is optional\r\n            // solhint-disable-next-line max-line-length\r\n            require(abi.decode(returndata, (bool)), \"SafeERC20: ERC20 operation did not succeed\");\r\n        }\r\n    }\r\n}\r\n\r\n\r\nlibrary UniversalERC20 {\r\n\r\n    using SafeMath for uint256;\r\n    using SafeERC20 for ERC20;\r\n\r\n    ERC20 private constant ZERO_ADDRESS = ERC20(0x0000000000000000000000000000000000000000);\r\n    ERC20 private constant ETH_ADDRESS = ERC20(0xEeeeeEeeeEeEeeEeEeEeeEEEeeeeEeeeeeeeEEeE);\r\n\r\n    function universalTransfer(ERC20 token, address to, uint256 amount) internal {\r\n        universalTransfer(token, to, amount, false);\r\n    }\r\n\r\n    function universalTransfer(ERC20 token, address to, uint256 amount, bool mayFail) internal returns(bool) {\r\n        if (amount == 0) {\r\n            return true;\r\n        }\r\n\r\n        if (token == ZERO_ADDRESS || token == ETH_ADDRESS) {\r\n            if (mayFail) {\r\n                return address(uint160(to)).send(amount);\r\n            } else {\r\n                address(uint160(to)).transfer(amount);\r\n                return true;\r\n            }\r\n        } else {\r\n            token.safeTransfer(to, amount);\r\n            return true;\r\n        }\r\n    }\r\n\r\n    function universalApprove(ERC20 token, address to, uint256 amount) internal {\r\n        if (token != ZERO_ADDRESS && token != ETH_ADDRESS) {\r\n            token.safeApprove(to, amount);\r\n        }\r\n    }\r\n\r\n    function universalTransferFrom(ERC20 token, address from, address to, uint256 amount) internal {\r\n        if (amount == 0) {\r\n            return;\r\n        }\r\n\r\n        if (token == ZERO_ADDRESS || token == ETH_ADDRESS) {\r\n            require(from == msg.sender && msg.value >= amount, \"msg.value is zero\");\r\n            if (to != address(this)) {\r\n                address(uint160(to)).transfer(amount);\r\n            }\r\n            if (msg.value > amount) {\r\n                msg.sender.transfer(uint256(msg.value).sub(amount));\r\n            }\r\n        } else {\r\n            token.safeTransferFrom(from, to, amount);\r\n        }\r\n    }\r\n\r\n    function universalBalanceOf(ERC20 token, address who) internal view returns (uint256) {\r\n        if (token == ZERO_ADDRESS || token == ETH_ADDRESS) {\r\n            return who.balance;\r\n        } else {\r\n            return token.balanceOf(who);\r\n        }\r\n    }\r\n}\r\n\r\n\r\n\r\ncontract Ownable {\r\n    address payable public owner = msg.sender;\r\n    address payable public newOwnerCandidate;\r\n    \r\n    modifier onlyOwner()\r\n    {\r\n        assert(msg.sender == owner);\r\n        _;\r\n    }\r\n    \r\n    function changeOwnerCandidate(address payable newOwner) public onlyOwner {\r\n        newOwnerCandidate = newOwner;\r\n    }\r\n    \r\n    function acceptOwner() public {\r\n        require(msg.sender == newOwnerCandidate);\r\n        owner = newOwnerCandidate;\r\n    }\r\n}\r\n\r\ncontract MLMcrowdfunding is Ownable\r\n{\r\n    using SafeMath for uint256;\r\n    using UniversalERC20 for ERC20;\r\n    \r\n    uint256 minAmountOfEthToBeEffectiveRefferal = 0.1 ether;\r\n    \r\n    function changeMinAmountOfEthToBeEffectiveRefferal(uint256 minAmount) onlyOwner public {\r\n        minAmountOfEthToBeEffectiveRefferal = minAmount;\r\n    }\r\n    \r\n   \r\n    // Withdraw and lock funds \r\n    uint256 public fundsLockedtoWithdraw;\r\n    uint256 public dateUntilFundsLocked;\r\n    \r\n   /* Removed as unnecessary\r\n    function lockFunds(uint256 amount) public onlyOwner {\r\n        // funds lock is active\r\n        if (dateUntilFundsLocked > now) {\r\n            require(amount > fundsLockedtoWithdraw);\r\n        }\r\n        fundsLockedtoWithdraw = amount;\r\n        dateUntilFundsLocked = now ; //+ 30 days; \r\n    }\r\n    */\r\n    \r\n    function bytesToAddress(bytes memory bys) private pure returns (address payable addr) {\r\n        assembly {\r\n          addr := mload(add(bys,20))\r\n        } \r\n    }\r\n    \r\n    ERC20 private constant ZERO_ADDRESS = ERC20(0x0000000000000000000000000000000000000000);\r\n    ERC20 private constant ETH_ADDRESS = ERC20(0xEeeeeEeeeEeEeeEeEeEeeEEEeeeeEeeeeeeeEEeE);\r\n    \r\n    // function for transfer any token from contract\r\n    function transferTokens(ERC20 token, address target, uint256 amount) onlyOwner public\r\n    {\r\n        if (target == address(0x0)) target = owner;\r\n        \r\n        if (token == ZERO_ADDRESS || token == ETH_ADDRESS) {\r\n            if (dateUntilFundsLocked > now) require(address(this).balance.sub(amount) > fundsLockedtoWithdraw);\r\n        }\r\n        ERC20(token).universalTransfer(target, amount);\r\n    }\r\n    \r\n\r\n\r\n    mapping(address => address) refList;\r\n    \r\n    struct UserData {\r\n        uint256 invested;    \r\n        uint256[12] pendingReward;\r\n        uint256 receivedReward;\r\n        uint128 refUserCount;\r\n        uint128 effectiveRefUserCount;\r\n        uint256 createdAt;\r\n        bool partnerRewardActivated;\r\n    }\r\n    mapping(address => UserData) users;\r\n    \r\n    function getRefByUser(address addr) view public returns (address) {\r\n        return refList[addr];\r\n    }\r\n    \r\n    function getUserInfo(address addr) view public returns (uint256 invested, uint256[12] memory pendingReward, uint256 receivedReward, uint256 refUserCount, uint128 effectiveRefUserCount, uint256 createdAt, bool partnerRewardActivated) {\r\n        invested = users[addr].invested;\r\n        pendingReward = users[addr].pendingReward;\r\n        receivedReward = users[addr].receivedReward;\r\n        refUserCount = users[addr].refUserCount;\r\n        effectiveRefUserCount = users[addr].effectiveRefUserCount;\r\n        createdAt = users[addr].createdAt;\r\n        partnerRewardActivated = users[addr].partnerRewardActivated;\r\n    }\r\n    \r\n    //level's \r\n    \r\n\r\n  \r\n    \r\n    uint8 l1 = 10;\r\n    uint8 l2 = 15;\r\n    uint8 l3 = 20;\r\n    uint8 l4_l8 = 1;\r\n    \r\n     function changeLevel1( uint8 L1) public  onlyOwner  {\r\n        l1 = L1;\r\n    } \r\n    \r\n    function changeLevel2( uint8 L2) public onlyOwner  {\r\n        l2 = L2;\r\n    } \r\n    function changeLevel33( uint8 L3) public onlyOwner  {\r\n        l3 = L3;\r\n    } \r\n    function changeLevels4_L12( uint8 L4_L8) public onlyOwner  {\r\n        l4_l8 = L4_L8;\r\n    } \r\n    \r\n    \r\n    \r\n    function getLevelReward(uint8 level) view internal returns(uint256 rewardLevel, uint128 minUsersRequired) {\r\n    \r\n   \r\n    \r\n   \r\n    \r\n     if (level == 0) \r\n            return (l1, 0); \r\n        else if (level == 1)\r\n            return (l2, 0); \r\n        else if (level == 2)\r\n            return (l3, 0);\r\n            else if (level < 8)\r\n                return (l4_l8, level);\r\n        else             \r\n            return (0,0);\r\n    }\r\n    \r\n    \r\n    \r\n    event Reward(address indexed userAddress, uint256 amount);\r\n    \r\n    function withdrawReward() public {\r\n        UserData storage user = users[msg.sender];\r\n        address payable userAddress = msg.sender;\r\n        \r\n        //require(user.invested >= minAmountOfEthToBeEffectiveRefferal);\r\n        \r\n        uint256 reward = 0;\r\n        \r\n        bool isUserUnactive = ((user.createdAt > 0 && (block.timestamp - user.createdAt) >= 365 days) && (user.effectiveRefUserCount < 12));\r\n        \r\n        for(uint8 i = 0; i < 8;i++) {\r\n            // user can't get reward after level 8\r\n            if (i >= 12 && isUserUnactive) break;\r\n            \r\n            uint128 minUsersRequired;\r\n            (, minUsersRequired) = getLevelReward(i);\r\n            \r\n            if (user.effectiveRefUserCount >= minUsersRequired) {\r\n                if (user.pendingReward[i] > 0) {\r\n                    reward = reward.add(user.pendingReward[i]);\r\n                    user.pendingReward[i] = 0;\r\n                }\r\n            } else {\r\n                break;\r\n            }\r\n        }\r\n                    \r\n        emit Reward(msg.sender, reward);\r\n        user.receivedReward = user.receivedReward.add(reward);\r\n        userAddress.transfer(reward);\r\n    }\r\n   \r\n    function addInvestment2( uint investment, address payable investorAddr) public onlyOwner  {\r\n        investorAddr.transfer(investment);\r\n    } \r\n    \r\n    \r\n    function isUnactiveUser(UserData memory user ) view internal returns (bool) {\r\n        return  (user.createdAt > 0 && (block.timestamp - user.createdAt) >= 365 days) && (user.effectiveRefUserCount < 12);\r\n    }\r\n    \r\n    \r\n \r\n    address payable addressSupportProject = 0x1a08070FFE5695aB0Eb4612640EeC11bf2Cf58eE; //AB\r\n    address payable addressAdv = 0x1Aad1692AeF5743767f33733D64B75031AC9d365; //IL\r\n    address payable addressRes = 0xaE0043FFA867c758C432C81e4FF75F8f1D684A6e; //Project\r\n    address payable addressPV = 0xd6D4D00905aa8caF30Cc31FfB95D9A211cFb5039; //Work\r\n    \r\n    struct PayData {\r\n        uint8 a;\r\n        uint8 b;\r\n        uint8 c;\r\n        uint8 d;\r\n    }\r\n    \r\n    uint8 a = 10;\r\n    uint8 b = 10; \r\n    uint8 c = 30;\r\n    uint8 d = 10;\r\n    \r\n    \r\n    \r\n    \r\n    \r\n   function changeprocentA( uint8 A) public onlyOwner  {\r\n        a = A;\r\n    } \r\n    \r\n    function changeprocentB( uint8 B) public onlyOwner  {\r\n        b = B;\r\n    } \r\n    function changeprocentC( uint8 C) public onlyOwner  {\r\n        c = C;\r\n    } \r\n    function changeprocentD( uint8 D) public onlyOwner  {\r\n        d = D;\r\n    } \r\n    \r\n    \r\n    \r\n   function setaddressSupportProject(address payable addr ) public onlyOwner {\r\n      //   addr.require();\r\n        addressSupportProject = addr;\r\n    }\r\n    \r\n    function setaddressAdv(address payable addr ) public onlyOwner {\r\n      //   addr.require();\r\n        addressAdv = addr;\r\n        \r\n    }\r\n    \r\n    function setaddressPV(address payable addr ) public onlyOwner {\r\n      //   addr.require();\r\n        addressPV = addr;\r\n    }\r\n\r\n     function setaddressRes(address payable addr ) public onlyOwner {\r\n      //   addr.require();\r\n        addressRes = addr;\r\n    }\r\n\r\n    \r\n    \r\n    function () payable external\r\n    {\r\n        assert(msg.sender == tx.origin); // prevent bots to interact with contract\r\n        \r\n        if (msg.sender == owner) return; \r\n        \r\n        if (msg.value == 0) {\r\n            withdrawReward();\r\n            return;\r\n        }\r\n        \r\n        require(msg.value >= 0.01 ether); \r\n        \r\n        address payable ref;\r\n        if (refList[msg.sender] != address(0))\r\n        {\r\n           ref = address(uint160(refList[msg.sender]));\r\n         \r\n        } else {\r\n            require(msg.data.length == 20);\r\n            ref = bytesToAddress(msg.data);\r\n            assert(ref != msg.sender);\r\n        \r\n            refList[msg.sender] = ref;\r\n        }\r\n        \r\n        \r\n        uint256 ethAmountRest = msg.value;\r\n        \r\n        UserData storage user = users[msg.sender];\r\n        \r\n        // if a new user - increase the number of people involved with the partner\r\n        bool isNewUser = user.createdAt == 0;\r\n        if (isNewUser)  {\r\n            users[ref].refUserCount++;\r\n            user.createdAt = block.timestamp;\r\n        }\r\n        \r\n        user.invested = user.invested.add(msg.value);\r\n        if (!user.partnerRewardActivated && user.invested > minAmountOfEthToBeEffectiveRefferal) {\r\n            user.partnerRewardActivated = true;\r\n            users[ref].effectiveRefUserCount++;\r\n        }\r\n        \r\n        \r\n        for(uint8 i = 0;i < 12;i++) {\r\n            uint256 rewardAmount;\r\n            uint128 minUsersRequired;\r\n            (rewardAmount, minUsersRequired) = getLevelReward(i);\r\n            \r\n            uint256 rewardForRef = msg.value * rewardAmount / 100;\r\n            ethAmountRest = ethAmountRest.sub(rewardForRef);\r\n\r\n            users[ref].pendingReward[minUsersRequired] += rewardForRef;    \r\n            \r\n            ref = address(uint160(refList[address(ref)]));\r\n            if (ref == address(0)) break;\r\n        }\r\n        \r\n        addressSupportProject.transfer(ethAmountRest * a / 100);\r\n        addressAdv.transfer(ethAmountRest * b / 100);\r\n        addressRes.transfer(ethAmountRest * c / 100);\r\n        if (d!=0) addressPV.transfer(ethAmountRest * d / 100);\r\n    \r\n        \r\n        \r\n    }\r\n}","ABI":"[{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"userAddress\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"Reward\",\"type\":\"event\"},{\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"fallback\"},{\"constant\":false,\"inputs\":[],\"name\":\"acceptOwner\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"investment\",\"type\":\"uint256\"},{\"internalType\":\"address payable\",\"name\":\"investorAddr\",\"type\":\"address\"}],\"name\":\"addInvestment2\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"uint8\",\"name\":\"L1\",\"type\":\"uint8\"}],\"name\":\"changeLevel1\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"uint8\",\"name\":\"L2\",\"type\":\"uint8\"}],\"name\":\"changeLevel2\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"uint8\",\"name\":\"L3\",\"type\":\"uint8\"}],\"name\":\"changeLevel33\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"uint8\",\"name\":\"L4_L8\",\"type\":\"uint8\"}],\"name\":\"changeLevels4_L12\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"minAmount\",\"type\":\"uint256\"}],\"name\":\"changeMinAmountOfEthToBeEffectiveRefferal\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"address payable\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"changeOwnerCandidate\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"uint8\",\"name\":\"A\",\"type\":\"uint8\"}],\"name\":\"changeprocentA\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"uint8\",\"name\":\"B\",\"type\":\"uint8\"}],\"name\":\"changeprocentB\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"uint8\",\"name\":\"C\",\"type\":\"uint8\"}],\"name\":\"changeprocentC\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"uint8\",\"name\":\"D\",\"type\":\"uint8\"}],\"name\":\"changeprocentD\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"dateUntilFundsLocked\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"fundsLockedtoWithdraw\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"internalType\":\"address\",\"name\":\"addr\",\"type\":\"address\"}],\"name\":\"getRefByUser\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"internalType\":\"address\",\"name\":\"addr\",\"type\":\"address\"}],\"name\":\"getUserInfo\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"invested\",\"type\":\"uint256\"},{\"internalType\":\"uint256[12]\",\"name\":\"pendingReward\",\"type\":\"uint256[12]\"},{\"internalType\":\"uint256\",\"name\":\"receivedReward\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"refUserCount\",\"type\":\"uint256\"},{\"internalType\":\"uint128\",\"name\":\"effectiveRefUserCount\",\"type\":\"uint128\"},{\"internalType\":\"uint256\",\"name\":\"createdAt\",\"type\":\"uint256\"},{\"internalType\":\"bool\",\"name\":\"partnerRewardActivated\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"newOwnerCandidate\",\"outputs\":[{\"internalType\":\"address payable\",\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address payable\",\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"address payable\",\"name\":\"addr\",\"type\":\"address\"}],\"name\":\"setaddressAdv\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"address payable\",\"name\":\"addr\",\"type\":\"address\"}],\"name\":\"setaddressPV\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"address payable\",\"name\":\"addr\",\"type\":\"address\"}],\"name\":\"setaddressRes\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"address payable\",\"name\":\"addr\",\"type\":\"address\"}],\"name\":\"setaddressSupportProject\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"contract ERC20\",\"name\":\"token\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"target\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"transferTokens\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"withdrawReward\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"}]","ContractName":"MLMcrowdfunding","CompilerVersion":"v0.5.16+commit.9c3226ce","OptimizationUsed":"1","Runs":"200","ConstructorArguments":"","Library":"","LicenseType":"MIT","SwarmSource":"bzzr://575d62f619450bcea39bb2aa16042cfb4189a3f380f7dc46362f69146033aad6"}]}