{"status":"1","message":"OK","result":[{"SourceCode":"pragma solidity ^0.5.8;\r\n\r\n/**\r\n * @title SafeMath\r\n * @dev Unsigned math operations with safety checks that revert on error\r\n */\r\nlibrary SafeMath {\r\n    /**\r\n    * @dev Multiplies two unsigned integers, reverts on overflow.\r\n    */\r\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        // Gas optimization: this is cheaper than requiring 'a' not being zero, but the\r\n        // benefit is lost if 'b' is also tested.\r\n        // See: https://github.com/OpenZeppelin/openzeppelin-solidity/pull/522\r\n        if (a == 0) {\r\n            return 0;\r\n        }\r\n\r\n        uint256 c = a * b;\r\n        require(c / a == b);\r\n\r\n        return c;\r\n    }\r\n\r\n    /**\r\n    * @dev Integer division of two unsigned integers truncating the quotient, reverts on division by zero.\r\n    */\r\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        // Solidity only automatically asserts when dividing by 0\r\n        require(b > 0);\r\n        uint256 c = a / b;\r\n        // assert(a == b * c + a % b); // There is no case in which this doesn't hold\r\n\r\n        return c;\r\n    }\r\n\r\n    /**\r\n    * @dev Subtracts two unsigned integers, reverts on overflow (i.e. if subtrahend is greater than minuend).\r\n    */\r\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        require(b <= a);\r\n        uint256 c = a - b;\r\n\r\n        return c;\r\n    }\r\n\r\n    /**\r\n    * @dev Adds two unsigned integers, reverts on overflow.\r\n    */\r\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        uint256 c = a + b;\r\n        require(c >= a);\r\n\r\n        return c;\r\n    }\r\n\r\n    /**\r\n    * @dev Divides two unsigned integers and returns the remainder (unsigned integer modulo),\r\n    * reverts when dividing by zero.\r\n    */\r\n    function mod(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        require(b != 0);\r\n        return a % b;\r\n    }\r\n}\r\n\r\n/**\r\n * @title Helps contracts guard against reentrancy attacks.\r\n * @author Remco Bloemen <remco@2Ï€.com>, Eenae <alexey@mixbytes.io>\r\n * @dev If you mark a function `nonReentrant`, you should also\r\n * mark it `external`.\r\n */\r\ncontract ReentrancyGuard {\r\n    /// @dev counter to allow mutex lock with only one SSTORE operation\r\n    uint256 private _guardCounter;\r\n\r\n    constructor() public {\r\n        // The counter starts at one to prevent changing it from zero to a non-zero\r\n        // value, which is a more expensive operation.\r\n        _guardCounter = 1;\r\n    }\r\n\r\n    /**\r\n     * @dev Prevents a contract from calling itself, directly or indirectly.\r\n     * Calling a `nonReentrant` function from another `nonReentrant`\r\n     * function is not supported. It is possible to prevent this from happening\r\n     * by making the `nonReentrant` function external, and make it call a\r\n     * `private` function that does the actual work.\r\n     */\r\n    modifier nonReentrant() {\r\n        _guardCounter += 1;\r\n        uint256 localCounter = _guardCounter;\r\n        _;\r\n        require(localCounter == _guardCounter);\r\n    }\r\n}\r\n\r\n/**\r\n * @title Ownable\r\n * @dev The Ownable contract has an owner address, and provides basic authorization control\r\n * functions, this simplifies the implementation of \"user permissions\".\r\n */\r\ncontract Ownable {\r\n    address private _owner;\r\n\r\n    event OwnershipTransferred(address previousOwner, address newOwner);\r\n\r\n    /**\r\n     * @dev The Ownable constructor sets the original `owner` of the contract to the sender\r\n     * account.\r\n     */\r\n    constructor () internal {\r\n        _owner = msg.sender;\r\n        emit OwnershipTransferred(address(0), _owner);\r\n    }\r\n\r\n    /**\r\n     * @return the address of the owner.\r\n     */\r\n    function owner() public view returns (address) {\r\n        return _owner;\r\n    }\r\n\r\n    /**\r\n     * @dev Throws if called by any account other than the owner.\r\n     */\r\n    modifier onlyOwner() {\r\n        require(isOwner());\r\n        _;\r\n    }\r\n\r\n    /**\r\n     * @return true if `msg.sender` is the owner of the contract.\r\n     */\r\n    function isOwner() public view returns (bool) {\r\n        return msg.sender == _owner;\r\n    }\r\n\r\n    /**\r\n     * @dev Allows the current owner to relinquish control of the contract.\r\n     * @notice Renouncing to ownership will leave the contract without an owner.\r\n     * It will not be possible to call the functions with the `onlyOwner`\r\n     * modifier anymore.\r\n     */\r\n    function renounceOwnership() public onlyOwner {\r\n        emit OwnershipTransferred(_owner, address(0));\r\n        _owner = address(0);\r\n    }\r\n\r\n    /**\r\n     * @dev Allows the current owner to transfer control of the contract to a newOwner.\r\n     * @param newOwner The address to transfer ownership to.\r\n     */\r\n    function transferOwnership(address newOwner) public onlyOwner {\r\n        _transferOwnership(newOwner);\r\n    }\r\n\r\n    /**\r\n     * @dev Transfers control of the contract to a newOwner.\r\n     * @param newOwner The address to transfer ownership to.\r\n     */\r\n    function _transferOwnership(address newOwner) internal {\r\n        require(newOwner != address(0));\r\n        emit OwnershipTransferred(_owner, newOwner);\r\n        _owner = newOwner;\r\n    }\r\n}\r\n\r\n/**\r\n * @title Roles\r\n * @dev Library for managing addresses assigned to a Role.\r\n */\r\nlibrary Roles {\r\n    struct Role {\r\n        mapping (address => bool) bearer;\r\n    }\r\n\r\n    /**\r\n     * @dev give an account access to this role\r\n     */\r\n    function add(Role storage role, address account) internal {\r\n        require(account != address(0));\r\n        require(!has(role, account));\r\n\r\n        role.bearer[account] = true;\r\n    }\r\n\r\n    /**\r\n     * @dev remove an account's access to this role\r\n     */\r\n    function remove(Role storage role, address account) internal {\r\n        require(account != address(0));\r\n        require(has(role, account));\r\n\r\n        role.bearer[account] = false;\r\n    }\r\n\r\n    /**\r\n     * @dev check if an account has this role\r\n     * @return bool\r\n     */\r\n    function has(Role storage role, address account) internal view returns (bool) {\r\n        require(account != address(0));\r\n        return role.bearer[account];\r\n    }\r\n}\r\n\r\ncontract PauserRole {\r\n    using Roles for Roles.Role;\r\n\r\n    event PauserAdded(address indexed account);\r\n    event PauserRemoved(address indexed account);\r\n\r\n    Roles.Role private _pausers;\r\n\r\n    constructor () internal {\r\n        _addPauser(msg.sender);\r\n    }\r\n\r\n    modifier onlyPauser() {\r\n        require(isPauser(msg.sender));\r\n        _;\r\n    }\r\n\r\n    function isPauser(address account) public view returns (bool) {\r\n        return _pausers.has(account);\r\n    }\r\n\r\n    function addPauser(address account) public onlyPauser {\r\n        _addPauser(account);\r\n    }\r\n\r\n    function renouncePauser() public {\r\n        _removePauser(msg.sender);\r\n    }\r\n\r\n    function _addPauser(address account) internal {\r\n        _pausers.add(account);\r\n        emit PauserAdded(account);\r\n    }\r\n\r\n    function _removePauser(address account) internal {\r\n        _pausers.remove(account);\r\n        emit PauserRemoved(account);\r\n    }\r\n}\r\n\r\n/**\r\n * @title Pausable\r\n * @dev Base contract which allows children to implement an emergency stop mechanism.\r\n */\r\ncontract Pausable is PauserRole {\r\n    event Paused(address account);\r\n    event Unpaused(address account);\r\n\r\n    bool private _paused;\r\n\r\n    constructor () internal {\r\n        _paused = false;\r\n    }\r\n\r\n    /**\r\n     * @return true if the contract is paused, false otherwise.\r\n     */\r\n    function paused() public view returns (bool) {\r\n        return _paused;\r\n    }\r\n\r\n    /**\r\n     * @dev Modifier to make a function callable only when the contract is not paused.\r\n     */\r\n    modifier whenNotPaused() {\r\n        require(!_paused);\r\n        _;\r\n    }\r\n\r\n    /**\r\n     * @dev Modifier to make a function callable only when the contract is paused.\r\n     */\r\n    modifier whenPaused() {\r\n        require(_paused);\r\n        _;\r\n    }\r\n\r\n    /**\r\n     * @dev called by the owner to pause, triggers stopped state\r\n     */\r\n    function pause() public onlyPauser whenNotPaused {\r\n        _paused = true;\r\n        emit Paused(msg.sender);\r\n    }\r\n\r\n    /**\r\n     * @dev called by the owner to unpause, returns to normal state\r\n     */\r\n    function unpause() public onlyPauser whenPaused {\r\n        _paused = false;\r\n        emit Unpaused(msg.sender);\r\n    }\r\n}\r\n\r\n\r\ncontract WCKAds is ReentrancyGuard, Ownable, Pausable {\r\n\r\n    // OpenZeppelin's SafeMath library is used for all arithmetic operations to avoid overflows/underflows.\r\n    using SafeMath for uint256;\r\n\r\n    /* ********** */\r\n    /* DATA TYPES */\r\n    /* ********** */\r\n\r\n    struct AdvertisingSlot {\r\n        uint256 kittyIdBeingAdvertised;\r\n        uint256 blockThatPriceWillResetAt;\r\n        uint256 valuationPrice;\r\n        address slotOwner;\r\n    }\r\n\r\n    /* ****** */\r\n    /* EVENTS */\r\n    /* ****** */\r\n\r\n    event AdvertisingSlotRented(\r\n        uint256 slotId,\r\n        uint256 kittyIdBeingAdvertised,\r\n        uint256 blockThatPriceWillResetAt,\r\n        uint256 valuationPrice,\r\n        address slotOwner\r\n    );\r\n\r\n    event AdvertisingSlotContentsChanged(\r\n        uint256 slotId,\r\n        uint256 newKittyIdBeingAdvertised\r\n    );\r\n\r\n    /* ******* */\r\n    /* STORAGE */\r\n    /* ******* */\r\n\r\n    mapping (uint256 => AdvertisingSlot) public advertisingSlots;\r\n\r\n    /* ********* */\r\n    /* CONSTANTS */\r\n    /* ********* */\r\n\r\n    address public kittyCoreContractAddress = 0x06012c8cf97BEaD5deAe237070F9587f8E7A266d;\r\n    address public kittySalesContractAddress = 0xb1690C08E213a35Ed9bAb7B318DE14420FB57d8C;\r\n    address public kittySiresContractAddress = 0xC7af99Fe5513eB6710e6D5f44F9989dA40F27F26;\r\n    address public wckContractAddress = 0x09fE5f0236F0Ea5D930197DCE254d77B04128075;\r\n    uint256 public minimumPriceIncrementInBasisPoints = 500;\r\n    uint256 public maxRentalPeriodInBlocks = 40320;\r\n    uint256 public minimumRentalPrice = (10**18);\r\n\r\n    /* ********* */\r\n    /* FUNCTIONS */\r\n    /* ********* */\r\n\r\n    function getCurrentPriceToRentAdvertisingSlot(uint256 _slotId) external view returns (uint256) {\r\n        AdvertisingSlot memory currentSlot = advertisingSlots[_slotId];\r\n        if(block.number < currentSlot.blockThatPriceWillResetAt){\r\n            return _computeNextPrice(currentSlot.valuationPrice);\r\n        } else {\r\n            return minimumRentalPrice;\r\n        }\r\n    }\r\n\r\n    function ownsKitty(address _address, uint256 _kittyId) view public returns (bool) {\r\n        if(KittyCore(kittyCoreContractAddress).ownerOf(_kittyId) == _address){\r\n            return true;\r\n        } else {\r\n            address seller;\r\n            (seller, , , , ) = KittyAuction(kittySalesContractAddress).getAuction(_kittyId);\r\n            if(seller == _address){\r\n                return true;\r\n            } else {\r\n                (seller, , , , ) = KittyAuction(kittySiresContractAddress).getAuction(_kittyId);\r\n                if(seller == _address){\r\n                    return true;\r\n                } else {\r\n                    return false;\r\n                }\r\n            }\r\n        }\r\n    }\r\n\r\n    function rentAdvertisingSlot(uint256 _slotId, uint256 _newKittyIdToAdvertise, uint256 _newValuationPrice) external nonReentrant whenNotPaused {\r\n        require(ownsKitty(msg.sender, _newKittyIdToAdvertise), 'the CryptoKitties Nifty License requires you to own any kitties whose image you want to use');\r\n        AdvertisingSlot storage currentSlot = advertisingSlots[_slotId];\r\n        if(block.number < currentSlot.blockThatPriceWillResetAt){\r\n            require(_newValuationPrice >= _computeNextPrice(currentSlot.valuationPrice), 'you must submit a higher valuation price if the rental term has not elapsed');\r\n            ERC20(wckContractAddress).transferFrom(msg.sender, address(this), _newValuationPrice);\r\n        } else {\r\n            ERC20(wckContractAddress).transferFrom(msg.sender, address(this), minimumRentalPrice);\r\n        }\r\n        uint256 newBlockThatPriceWillResetAt = (block.number).add(maxRentalPeriodInBlocks);\r\n        AdvertisingSlot memory newAdvertisingSlot = AdvertisingSlot({\r\n            kittyIdBeingAdvertised: _newKittyIdToAdvertise,\r\n            blockThatPriceWillResetAt: newBlockThatPriceWillResetAt,\r\n            valuationPrice: _newValuationPrice,\r\n            slotOwner: msg.sender\r\n        });\r\n        advertisingSlots[_slotId] = newAdvertisingSlot;\r\n        emit AdvertisingSlotRented(\r\n            _slotId,\r\n            _newKittyIdToAdvertise,\r\n            newBlockThatPriceWillResetAt,\r\n            _newValuationPrice,\r\n            msg.sender\r\n        );\r\n    }\r\n\r\n    function changeKittyIdBeingAdvertised(uint256 _slotId, uint256 _kittyId) external nonReentrant whenNotPaused {\r\n        require(ownsKitty(msg.sender, _kittyId), 'the CryptoKitties Nifty License requires you to own any kitties whose image you want to use');\r\n        AdvertisingSlot storage currentSlot = advertisingSlots[_slotId];\r\n        require(msg.sender == currentSlot.slotOwner, 'only the current owner of this slot can change the advertisements subject matter');\r\n        currentSlot.kittyIdBeingAdvertised = _kittyId;\r\n        emit AdvertisingSlotContentsChanged(\r\n            _slotId,\r\n            _kittyId\r\n        );\r\n    }\r\n\r\n    function ownerUpdateMinimumRentalPrice(uint256 _newMinimumRentalPrice) external onlyOwner {\r\n        minimumRentalPrice = _newMinimumRentalPrice;\r\n    }\r\n\r\n    function ownerUpdateMinimumPriceIncrement(uint256 _newMinimumPriceIncrementInBasisPoints) external onlyOwner {\r\n        minimumPriceIncrementInBasisPoints = _newMinimumPriceIncrementInBasisPoints;\r\n    }\r\n\r\n    function ownerUpdateMaxRentalPeriod(uint256 _newMaxRentalPeriodInBlocks) external onlyOwner {\r\n        maxRentalPeriodInBlocks = _newMaxRentalPeriodInBlocks;\r\n    }\r\n\r\n    function ownerWithdrawERC20(address _erc20Address, uint256 _value) external onlyOwner {\r\n        ERC20(_erc20Address).transfer(msg.sender, _value);\r\n    }\r\n\r\n    function ownerWithdrawEther() external onlyOwner {\r\n        msg.sender.transfer(address(this).balance);\r\n    }\r\n\r\n    constructor() public {}\r\n\r\n    function() external payable {}\r\n\r\n    function _computeNextPrice(uint256 _currentPrice) view internal returns (uint256) {\r\n        return _currentPrice.add((_currentPrice.mul(minimumPriceIncrementInBasisPoints)).div(uint256(10000)));\r\n    }\r\n}\r\n\r\n/// @title Interface for interacting with the previous version of the WCK contract\r\ncontract ERC20 {\r\n    function transfer(address to, uint256 value) public returns (bool);\r\n    function transferFrom(address from, address to, uint256 value) public returns (bool);\r\n}\r\n\r\ncontract KittyCore {\r\n    function ownerOf(uint256 _tokenId) external view returns (address owner);\r\n}\r\n\r\ncontract KittyAuction {\r\n    function getAuction(uint256 _tokenId) external view returns (\r\n        address seller,\r\n        uint256 startingPrice,\r\n        uint256 endingPrice,\r\n        uint256 duration,\r\n        uint256 startedAt\r\n    );\r\n}","ABI":"[{\"constant\":false,\"inputs\":[{\"name\":\"_newMinimumRentalPrice\",\"type\":\"uint256\"}],\"name\":\"ownerUpdateMinimumRentalPrice\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"minimumPriceIncrementInBasisPoints\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"kittyCoreContractAddress\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_slotId\",\"type\":\"uint256\"},{\"name\":\"_newKittyIdToAdvertise\",\"type\":\"uint256\"},{\"name\":\"_newValuationPrice\",\"type\":\"uint256\"}],\"name\":\"rentAdvertisingSlot\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_slotId\",\"type\":\"uint256\"}],\"name\":\"getCurrentPriceToRentAdvertisingSlot\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"unpause\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_erc20Address\",\"type\":\"address\"},{\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"ownerWithdrawERC20\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"account\",\"type\":\"address\"}],\"name\":\"isPauser\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"minimumRentalPrice\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"ownerWithdrawEther\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"paused\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"renouncePauser\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"kittySalesContractAddress\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_address\",\"type\":\"address\"},{\"name\":\"_kittyId\",\"type\":\"uint256\"}],\"name\":\"ownsKitty\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"account\",\"type\":\"address\"}],\"name\":\"addPauser\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"pause\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"kittySiresContractAddress\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"isOwner\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_newMinimumPriceIncrementInBasisPoints\",\"type\":\"uint256\"}],\"name\":\"ownerUpdateMinimumPriceIncrement\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_newMaxRentalPeriodInBlocks\",\"type\":\"uint256\"}],\"name\":\"ownerUpdateMaxRentalPeriod\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"wckContractAddress\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"advertisingSlots\",\"outputs\":[{\"name\":\"kittyIdBeingAdvertised\",\"type\":\"uint256\"},{\"name\":\"blockThatPriceWillResetAt\",\"type\":\"uint256\"},{\"name\":\"valuationPrice\",\"type\":\"uint256\"},{\"name\":\"slotOwner\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_slotId\",\"type\":\"uint256\"},{\"name\":\"_kittyId\",\"type\":\"uint256\"}],\"name\":\"changeKittyIdBeingAdvertised\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"maxRentalPeriodInBlocks\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"fallback\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"slotId\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"kittyIdBeingAdvertised\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"blockThatPriceWillResetAt\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"valuationPrice\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"slotOwner\",\"type\":\"address\"}],\"name\":\"AdvertisingSlotRented\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"slotId\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"newKittyIdBeingAdvertised\",\"type\":\"uint256\"}],\"name\":\"AdvertisingSlotContentsChanged\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"account\",\"type\":\"address\"}],\"name\":\"Paused\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"account\",\"type\":\"address\"}],\"name\":\"Unpaused\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"account\",\"type\":\"address\"}],\"name\":\"PauserAdded\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"account\",\"type\":\"address\"}],\"name\":\"PauserRemoved\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"}]","ContractName":"WCKAds","CompilerVersion":"v0.5.10+commit.5a6ea5b1","OptimizationUsed":"0","Runs":"200","ConstructorArguments":"","Library":"","LicenseType":"GNU GPLv3","SwarmSource":"bzzr://87f01207215ad21768c0225e2256eb883ae975fd8417d34f7985975f8d9ac7ac"}]}