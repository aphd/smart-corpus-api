{"status":"1","message":"OK","result":[{"SourceCode":"{\"Address.sol\":{\"content\":\"pragma solidity ^0.5.0;\\n\\n/**\\n * @dev Collection of functions related to the address type,\\n */\\nlibrary Address {\\n    /**\\n     * @dev Returns true if `account` is a contract.\\n     *\\n     * This test is non-exhaustive, and there may be false-negatives: during the\\n     * execution of a contract\\u0027s constructor, its address will be reported as\\n     * not containing a contract.\\n     *\\n     * \\u003e It is unsafe to assume that an address for which this function returns\\n     * false is an externally-owned account (EOA) and not a contract.\\n     */\\n    function isContract(address account) internal view returns (bool) {\\n        // This method relies in extcodesize, which returns 0 for contracts in\\n        // construction, since the code is only stored at the end of the\\n        // constructor execution.\\n\\n        uint256 size;\\n        // solhint-disable-next-line no-inline-assembly\\n        assembly { size := extcodesize(account) }\\n        return size \\u003e 0;\\n    }\\n}\\n\"},\"controller.sol\":{\"content\":\"/**\\n *  Controller - The Consumer Contract Wallet\\n *  Copyright (C) 2019 The Contract Wallet Company Limited\\n *\\n *  This program is free software: you can redistribute it and/or modify\\n *  it under the terms of the GNU General Public License as published by\\n *  the Free Software Foundation, either version 3 of the License, or\\n *  (at your option) any later version.\\n\\n *  This program is distributed in the hope that it will be useful,\\n *  but WITHOUT ANY WARRANTY; without even the implied warranty of\\n *  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\\n *  GNU General Public License for more details.\\n\\n *  You should have received a copy of the GNU General Public License\\n *  along with this program.  If not, see \\u003chttps://www.gnu.org/licenses/\\u003e.\\n */\\n\\npragma solidity ^0.5.10;\\n\\nimport \\\"./ownable.sol\\\";\\nimport \\\"./transferrable.sol\\\";\\n\\n/// @title The IController interface provides access to the isController and isAdmin checks.\\ninterface IController {\\n    function isController(address) external view returns (bool);\\n    function isAdmin(address) external view returns (bool);\\n}\\n\\n\\n/// @title Controller stores a list of controller addresses that can be used for authentication in other contracts.\\n/// @notice The Controller implements a hierarchy of concepts, Owner, Admin, and the Controllers.\\n/// @dev Owner can change the Admins\\n/// @dev Admins and can the Controllers\\n/// @dev Controllers are used by the application.\\ncontract Controller is IController, Ownable, Transferrable {\\n\\n    event AddedController(address _sender, address _controller);\\n    event RemovedController(address _sender, address _controller);\\n\\n    event AddedAdmin(address _sender, address _admin);\\n    event RemovedAdmin(address _sender, address _admin);\\n\\n    event Claimed(address _to, address _asset, uint _amount);\\n\\n    event Stopped(address _sender);\\n    event Started(address _sender);\\n\\n    mapping (address =\\u003e bool) private _isAdmin;\\n    uint private _adminCount;\\n\\n    mapping (address =\\u003e bool) private _isController;\\n    uint private _controllerCount;\\n\\n    bool private _stopped;\\n\\n    /// @notice Constructor initializes the owner with the provided address.\\n    /// @param _ownerAddress_ address of the owner.\\n    constructor(address payable _ownerAddress_) Ownable(_ownerAddress_, false) public {}\\n\\n    /// @notice Checks if message sender is an admin.\\n    modifier onlyAdmin() {\\n        require(isAdmin(msg.sender), \\\"sender is not an admin\\\");\\n        _;\\n    }\\n\\n    /// @notice Check if Owner or Admin\\n    modifier onlyAdminOrOwner() {\\n        require(_isOwner(msg.sender) || isAdmin(msg.sender), \\\"sender is not an admin\\\");\\n        _;\\n    }\\n\\n    /// @notice Check if controller is stopped\\n    modifier notStopped() {\\n        require(!isStopped(), \\\"controller is stopped\\\");\\n        _;\\n    }\\n\\n    /// @notice Add a new admin to the list of admins.\\n    /// @param _account address to add to the list of admins.\\n    function addAdmin(address _account) external onlyOwner notStopped {\\n        _addAdmin(_account);\\n    }\\n\\n    /// @notice Remove a admin from the list of admins.\\n    /// @param _account address to remove from the list of admins.\\n    function removeAdmin(address _account) external onlyOwner {\\n        _removeAdmin(_account);\\n    }\\n\\n    /// @return the current number of admins.\\n    function adminCount() external view returns (uint) {\\n        return _adminCount;\\n    }\\n\\n    /// @notice Add a new controller to the list of controllers.\\n    /// @param _account address to add to the list of controllers.\\n    function addController(address _account) external onlyAdminOrOwner notStopped {\\n        _addController(_account);\\n    }\\n\\n    /// @notice Remove a controller from the list of controllers.\\n    /// @param _account address to remove from the list of controllers.\\n    function removeController(address _account) external onlyAdminOrOwner {\\n        _removeController(_account);\\n    }\\n\\n    /// @notice count the Controllers\\n    /// @return the current number of controllers.\\n    function controllerCount() external view returns (uint) {\\n        return _controllerCount;\\n    }\\n\\n    /// @notice is an address an Admin?\\n    /// @return true if the provided account is an admin.\\n    function isAdmin(address _account) public view notStopped returns (bool) {\\n        return _isAdmin[_account];\\n    }\\n\\n    /// @notice is an address a Controller?\\n    /// @return true if the provided account is a controller.\\n    function isController(address _account) public view notStopped returns (bool) {\\n        return _isController[_account];\\n    }\\n\\n    /// @notice this function can be used to see if the controller has been stopped\\n    /// @return true is the Controller has been stopped\\n    function isStopped() public view returns (bool) {\\n        return _stopped;\\n    }\\n\\n    /// @notice Internal-only function that adds a new admin.\\n    function _addAdmin(address _account) private {\\n        require(!_isAdmin[_account], \\\"provided account is already an admin\\\");\\n        require(!_isController[_account], \\\"provided account is already a controller\\\");\\n        require(!_isOwner(_account), \\\"provided account is already the owner\\\");\\n        require(_account != address(0), \\\"provided account is the zero address\\\");\\n        _isAdmin[_account] = true;\\n        _adminCount++;\\n        emit AddedAdmin(msg.sender, _account);\\n    }\\n\\n    /// @notice Internal-only function that removes an existing admin.\\n    function _removeAdmin(address _account) private {\\n        require(_isAdmin[_account], \\\"provided account is not an admin\\\");\\n        _isAdmin[_account] = false;\\n        _adminCount--;\\n        emit RemovedAdmin(msg.sender, _account);\\n    }\\n\\n    /// @notice Internal-only function that adds a new controller.\\n    function _addController(address _account) private {\\n        require(!_isAdmin[_account], \\\"provided account is already an admin\\\");\\n        require(!_isController[_account], \\\"provided account is already a controller\\\");\\n        require(!_isOwner(_account), \\\"provided account is already the owner\\\");\\n        require(_account != address(0), \\\"provided account is the zero address\\\");\\n        _isController[_account] = true;\\n        _controllerCount++;\\n        emit AddedController(msg.sender, _account);\\n    }\\n\\n    /// @notice Internal-only function that removes an existing controller.\\n    function _removeController(address _account) private {\\n        require(_isController[_account], \\\"provided account is not a controller\\\");\\n        _isController[_account] = false;\\n        _controllerCount--;\\n        emit RemovedController(msg.sender, _account);\\n    }\\n\\n    /// @notice stop our controllers and admins from being useable\\n    function stop() external onlyAdminOrOwner {\\n        _stopped = true;\\n        emit Stopped(msg.sender);\\n    }\\n\\n    /// @notice start our controller again\\n    function start() external onlyOwner {\\n        _stopped = false;\\n        emit Started(msg.sender);\\n    }\\n\\n    //// @notice Withdraw tokens from the smart contract to the specified account.\\n    function claim(address payable _to, address _asset, uint _amount) external onlyAdmin notStopped {\\n        _safeTransfer(_to, _asset, _amount);\\n        emit Claimed(_to, _asset, _amount);\\n    }\\n}\\n\"},\"ERC20.sol\":{\"content\":\"pragma solidity ^0.5.10;\\n\\n/// @title ERC20 interface is a subset of the ERC20 specification.\\n/// @notice see https://github.com/ethereum/EIPs/issues/20\\ninterface ERC20 {\\n    function allowance(address _owner, address _spender) external view returns (uint256);\\n    function approve(address _spender, uint256 _value) external returns (bool);\\n    function balanceOf(address _who) external view returns (uint256);\\n    function totalSupply() external view returns (uint256);\\n    function transfer(address _to, uint256 _value) external returns (bool);\\n    function transferFrom(address _from, address _to, uint256 _value) external returns (bool);\\n}\\n\"},\"ownable.sol\":{\"content\":\"/**\\n *  Ownable - The Consumer Contract Wallet\\n *  Copyright (C) 2019 The Contract Wallet Company Limited\\n *\\n *  This program is free software: you can redistribute it and/or modify\\n *  it under the terms of the GNU General Public License as published by\\n *  the Free Software Foundation, either version 3 of the License, or\\n *  (at your option) any later version.\\n\\n *  This program is distributed in the hope that it will be useful,\\n *  but WITHOUT ANY WARRANTY; without even the implied warranty of\\n *  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\\n *  GNU General Public License for more details.\\n\\n *  You should have received a copy of the GNU General Public License\\n *  along with this program.  If not, see \\u003chttps://www.gnu.org/licenses/\\u003e.\\n */\\n\\npragma solidity ^0.5.10;\\n\\n\\n/// @title Ownable has an owner address and provides basic authorization control functions.\\n/// This contract is modified version of the MIT OpenZepplin Ownable contract\\n/// This contract allows for the transferOwnership operation to be made impossible\\n/// https://github.com/OpenZeppelin/openzeppelin-solidity/blob/master/contracts/ownership/Ownable.sol\\ncontract Ownable {\\n    event TransferredOwnership(address _from, address _to);\\n    event LockedOwnership(address _locked);\\n\\n    address payable private _owner;\\n    bool private _isTransferable;\\n\\n    /// @notice Constructor sets the original owner of the contract and whether or not it is one time transferable.\\n    constructor(address payable _account_, bool _transferable_) internal {\\n        _owner = _account_;\\n        _isTransferable = _transferable_;\\n        // Emit the LockedOwnership event if no longer transferable.\\n        if (!_isTransferable) {\\n            emit LockedOwnership(_account_);\\n        }\\n        emit TransferredOwnership(address(0), _account_);\\n    }\\n\\n    /// @notice Reverts if called by any account other than the owner.\\n    modifier onlyOwner() {\\n        require(_isOwner(msg.sender), \\\"sender is not an owner\\\");\\n        _;\\n    }\\n\\n    /// @notice Allows the current owner to transfer control of the contract to a new address.\\n    /// @param _account address to transfer ownership to.\\n    /// @param _transferable indicates whether to keep the ownership transferable.\\n    function transferOwnership(address payable _account, bool _transferable) external onlyOwner {\\n        // Require that the ownership is transferable.\\n        require(_isTransferable, \\\"ownership is not transferable\\\");\\n        // Require that the new owner is not the zero address.\\n        require(_account != address(0), \\\"owner cannot be set to zero address\\\");\\n        // Set the transferable flag to the value _transferable passed in.\\n        _isTransferable = _transferable;\\n        // Emit the LockedOwnership event if no longer transferable.\\n        if (!_transferable) {\\n            emit LockedOwnership(_account);\\n        }\\n        // Emit the ownership transfer event.\\n        emit TransferredOwnership(_owner, _account);\\n        // Set the owner to the provided address.\\n        _owner = _account;\\n    }\\n\\n    /// @notice check if the ownership is transferable.\\n    /// @return true if the ownership is transferable.\\n    function isTransferable() external view returns (bool) {\\n        return _isTransferable;\\n    }\\n\\n    /// @notice Allows the current owner to relinquish control of the contract.\\n    /// @dev Renouncing to ownership will leave the contract without an owner and unusable.\\n    /// @dev It will not be possible to call the functions with the `onlyOwner` modifier anymore.\\n    function renounceOwnership() external onlyOwner {\\n        // Require that the ownership is transferable.\\n        require(_isTransferable, \\\"ownership is not transferable\\\");\\n        // note that this could be terminal\\n        _owner = address(0);\\n\\n        emit TransferredOwnership(_owner, address(0));\\n    }\\n\\n    /// @notice Find out owner address\\n    /// @return address of the owner.\\n    function owner() public view returns (address payable) {\\n        return _owner;\\n    }\\n\\n    /// @notice Check if owner address\\n    /// @return true if sender is the owner of the contract.\\n    function _isOwner(address _address) internal view returns (bool) {\\n        return _address == _owner;\\n    }\\n}\\n\"},\"SafeERC20.sol\":{\"content\":\"/**\\n * The MIT License (MIT)\\n *\\n * Copyright (c) 2016-2019 zOS Global Limited\\n *\\n * Permission is hereby granted, free of charge, to any person obtaining\\n * a copy of this software and associated documentation files (the\\n * \\\"Software\\\"), to deal in the Software without restriction, including\\n * without limitation the rights to use, copy, modify, merge, publish,\\n * distribute, sublicense, and/or sell copies of the Software, and to\\n * permit persons to whom the Software is furnished to do so, subject to\\n * the following conditions:\\n *\\n * The above copyright notice and this permission notice shall be included\\n * in all copies or substantial portions of the Software.\\n *\\n * THE SOFTWARE IS PROVIDED \\\"AS IS\\\", WITHOUT WARRANTY OF ANY KIND, EXPRESS\\n * OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF\\n * MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT.\\n * IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY\\n * CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT,\\n * TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE\\n * SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.\\n */\\n\\npragma solidity ^0.5.0;\\n\\nimport \\\"./ERC20.sol\\\";\\nimport \\\"./SafeMath.sol\\\";\\nimport \\\"./Address.sol\\\";\\n\\n/**\\n * @title SafeERC20\\n * @dev Wrappers around ERC20 operations that throw on failure (when the token\\n * contract returns false). Tokens that return no value (and instead revert or\\n * throw on failure) are also supported, non-reverting calls are assumed to be\\n * successful.\\n * To use this library you can add a `using SafeERC20 for ERC20;` statement to your contract,\\n * which allows you to call the safe operations as `token.safeTransfer(...)`, etc.\\n */\\nlibrary SafeERC20 {\\n    using SafeMath for uint256;\\n    using Address for address;\\n\\n    function safeTransfer(ERC20 token, address to, uint256 value) internal {\\n        callOptionalReturn(token, abi.encodeWithSelector(token.transfer.selector, to, value));\\n    }\\n\\n    function safeTransferFrom(ERC20 token, address from, address to, uint256 value) internal {\\n        callOptionalReturn(token, abi.encodeWithSelector(token.transferFrom.selector, from, to, value));\\n    }\\n\\n    function safeApprove(ERC20 token, address spender, uint256 value) internal {\\n        // safeApprove should only be called when setting an initial allowance,\\n        // or when resetting it to zero. To increase and decrease it, use\\n        // \\u0027safeIncreaseAllowance\\u0027 and \\u0027safeDecreaseAllowance\\u0027\\n        // solhint-disable-next-line max-line-length\\n        require((value == 0) || (token.allowance(address(this), spender) == 0),\\n            \\\"SafeERC20: approve from non-zero to non-zero allowance\\\"\\n        );\\n        callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, value));\\n    }\\n\\n    function safeIncreaseAllowance(ERC20 token, address spender, uint256 value) internal {\\n        uint256 newAllowance = token.allowance(address(this), spender).add(value);\\n        callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\\n    }\\n\\n    function safeDecreaseAllowance(ERC20 token, address spender, uint256 value) internal {\\n        uint256 newAllowance = token.allowance(address(this), spender).sub(value);\\n        callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\\n    }\\n\\n    /**\\n     * @dev Imitates a Solidity high-level call (i.e. a regular function call to a contract), relaxing the requirement\\n     * on the return value: the return value is optional (but if data is returned, it must not be false).\\n     * @param token The token targeted by the call.\\n     * @param data The call data (encoded using abi.encode or one of its variants).\\n     */\\n    function callOptionalReturn(ERC20 token, bytes memory data) internal {\\n        // We need to perform a low level call here, to bypass Solidity\\u0027s return data size checking mechanism, since\\n        // we\\u0027re implementing it ourselves.\\n\\n        // A Solidity high level call has three parts:\\n        //  1. The target address is checked to verify it contains contract code\\n        //  2. The call itself is made, and success asserted\\n        //  3. The return value is decoded, which in turn checks the size of the returned data.\\n        // solhint-disable-next-line max-line-length\\n        require(address(token).isContract(), \\\"SafeERC20: call to non-contract\\\");\\n\\n        // solhint-disable-next-line avoid-low-level-calls\\n        (bool success, bytes memory returndata) = address(token).call(data);\\n        require(success, \\\"SafeERC20: low-level call failed\\\");\\n\\n        if (returndata.length \\u003e 0) { // Return data is optional\\n            // solhint-disable-next-line max-line-length\\n            require(abi.decode(returndata, (bool)), \\\"SafeERC20: ERC20 operation did not succeed\\\");\\n        }\\n    }\\n}\\n\"},\"SafeMath.sol\":{\"content\":\"pragma solidity ^0.5.0;\\n\\n/**\\n * @dev Wrappers over Solidity\\u0027s arithmetic operations with added overflow\\n * checks.\\n *\\n * Arithmetic operations in Solidity wrap on overflow. This can easily result\\n * in bugs, because programmers usually assume that an overflow raises an\\n * error, which is the standard behavior in high level programming languages.\\n * `SafeMath` restores this intuition by reverting the transaction when an\\n * operation overflows.\\n *\\n * Using this library instead of the unchecked operations eliminates an entire\\n * class of bugs, so it\\u0027s recommended to use it always.\\n */\\nlibrary SafeMath {\\n    /**\\n     * @dev Returns the addition of two unsigned integers, reverting on\\n     * overflow.\\n     *\\n     * Counterpart to Solidity\\u0027s `+` operator.\\n     *\\n     * Requirements:\\n     * - Addition cannot overflow.\\n     */\\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\\n        uint256 c = a + b;\\n        require(c \\u003e= a, \\\"SafeMath: addition overflow\\\");\\n\\n        return c;\\n    }\\n\\n    /**\\n     * @dev Returns the subtraction of two unsigned integers, reverting on\\n     * overflow (when the result is negative).\\n     *\\n     * Counterpart to Solidity\\u0027s `-` operator.\\n     *\\n     * Requirements:\\n     * - Subtraction cannot overflow.\\n     */\\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\\n        require(b \\u003c= a, \\\"SafeMath: subtraction overflow\\\");\\n        uint256 c = a - b;\\n\\n        return c;\\n    }\\n\\n    /**\\n     * @dev Returns the multiplication of two unsigned integers, reverting on\\n     * overflow.\\n     *\\n     * Counterpart to Solidity\\u0027s `*` operator.\\n     *\\n     * Requirements:\\n     * - Multiplication cannot overflow.\\n     */\\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\\n        // Gas optimization: this is cheaper than requiring \\u0027a\\u0027 not being zero, but the\\n        // benefit is lost if \\u0027b\\u0027 is also tested.\\n        // See: https://github.com/OpenZeppelin/openzeppelin-solidity/pull/522\\n        if (a == 0) {\\n            return 0;\\n        }\\n\\n        uint256 c = a * b;\\n        require(c / a == b, \\\"SafeMath: multiplication overflow\\\");\\n\\n        return c;\\n    }\\n\\n    /**\\n     * @dev Returns the integer division of two unsigned integers. Reverts on\\n     * division by zero. The result is rounded towards zero.\\n     *\\n     * Counterpart to Solidity\\u0027s `/` operator. Note: this function uses a\\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\\n     * uses an invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     * - The divisor cannot be zero.\\n     */\\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\\n        // Solidity only automatically asserts when dividing by 0\\n        require(b \\u003e 0, \\\"SafeMath: division by zero\\\");\\n        uint256 c = a / b;\\n        // assert(a == b * c + a % b); // There is no case in which this doesn\\u0027t hold\\n\\n        return c;\\n    }\\n\\n    /**\\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\\n     * Reverts when dividing by zero.\\n     *\\n     * Counterpart to Solidity\\u0027s `%` operator. This function uses a `revert`\\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\\n     * invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     * - The divisor cannot be zero.\\n     */\\n    function mod(uint256 a, uint256 b) internal pure returns (uint256) {\\n        require(b != 0, \\\"SafeMath: modulo by zero\\\");\\n        return a % b;\\n    }\\n}\\n\"},\"transferrable.sol\":{\"content\":\"/**\\n *  Transferrable - The Consumer Contract Wallet\\n *  Copyright (C) 2019 The Contract Wallet Company Limited\\n *\\n *  This program is free software: you can redistribute it and/or modify\\n *  it under the terms of the GNU General Public License as published by\\n *  the Free Software Foundation, either version 3 of the License, or\\n *  (at your option) any later version.\\n\\n *  This program is distributed in the hope that it will be useful,\\n *  but WITHOUT ANY WARRANTY; without even the implied warranty of\\n *  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\\n *  GNU General Public License for more details.\\n\\n *  You should have received a copy of the GNU General Public License\\n *  along with this program.  If not, see \\u003chttps://www.gnu.org/licenses/\\u003e.\\n */\\n\\npragma solidity ^0.5.10;\\n\\nimport \\\"./ERC20.sol\\\";\\nimport \\\"./SafeERC20.sol\\\";\\n\\n\\n/// @title SafeTransfer, allowing contract to withdraw tokens accidentally sent to itself\\ncontract Transferrable {\\n\\n    using SafeERC20 for ERC20;\\n\\n\\n    /// @dev This function is used to move tokens sent accidentally to this contract method.\\n    /// @dev The owner can chose the new destination address\\n    /// @param _to is the recipient\\u0027s address.\\n    /// @param _asset is the address of an ERC20 token or 0x0 for ether.\\n    /// @param _amount is the amount to be transferred in base units.\\n    function _safeTransfer(address payable _to, address _asset, uint _amount) internal {\\n        // address(0) is used to denote ETH\\n        if (_asset == address(0)) {\\n            _to.transfer(_amount);\\n        } else {\\n            ERC20(_asset).safeTransfer(_to, _amount);\\n        }\\n    }\\n}\\n\"}}","ABI":"[{\"constant\":false,\"inputs\":[],\"name\":\"stop\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"controllerCount\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_account\",\"type\":\"address\"}],\"name\":\"removeAdmin\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"isTransferable\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_account\",\"type\":\"address\"}],\"name\":\"isAdmin\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"adminCount\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"isStopped\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_account\",\"type\":\"address\"}],\"name\":\"addAdmin\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_to\",\"type\":\"address\"},{\"name\":\"_asset\",\"type\":\"address\"},{\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"claim\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_account\",\"type\":\"address\"}],\"name\":\"addController\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_account\",\"type\":\"address\"},{\"name\":\"_transferable\",\"type\":\"bool\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_account\",\"type\":\"address\"}],\"name\":\"isController\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"start\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_account\",\"type\":\"address\"}],\"name\":\"removeController\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"name\":\"_ownerAddress_\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"_sender\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"_controller\",\"type\":\"address\"}],\"name\":\"AddedController\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"_sender\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"_controller\",\"type\":\"address\"}],\"name\":\"RemovedController\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"_sender\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"_admin\",\"type\":\"address\"}],\"name\":\"AddedAdmin\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"_sender\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"_admin\",\"type\":\"address\"}],\"name\":\"RemovedAdmin\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"_to\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"_asset\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"Claimed\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"_sender\",\"type\":\"address\"}],\"name\":\"Stopped\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"_sender\",\"type\":\"address\"}],\"name\":\"Started\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"_from\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"_to\",\"type\":\"address\"}],\"name\":\"TransferredOwnership\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"_locked\",\"type\":\"address\"}],\"name\":\"LockedOwnership\",\"type\":\"event\"}]","ContractName":"Controller","CompilerVersion":"v0.5.10+commit.5a6ea5b1","OptimizationUsed":"0","Runs":"200","ConstructorArguments":"000000000000000000000000846979ff59f5615475c2d0c0d660b28d74dbd1c6","Library":"","LicenseType":"GNU GPLv3","SwarmSource":"bzzr://802c151d8c2b454c4d3c1efbf59dc79ad8876705297c9e6e7c913b418fc64d63"}]}