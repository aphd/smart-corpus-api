{"status":"1","message":"OK","result":[{"SourceCode":"pragma solidity ^0.4.24;\r\n\r\n// File: contracts/database/Database.sol\r\n\r\n// @title A shared storage contract for platform contracts to store and retrieve data\r\n// @notice This contract holds all long-term data for smart-contract systems\r\n// @dev The bytes32 hashes are derived from keccak256(variableName, uniqueID) => value\r\n// @dec Can enable upgradeable contracts by setting a contract manager\r\ncontract Database{\r\n\r\n    // Storage Variables\r\n    mapping(bytes32 => uint) public uintStorage;\r\n    mapping(bytes32 => string) public stringStorage;\r\n    mapping(bytes32 => address) public addressStorage;\r\n    mapping(bytes32 => bytes) public bytesStorage;\r\n    mapping(bytes32 => bytes32) public bytes32Storage;\r\n    mapping(bytes32 => bool) public boolStorage;\r\n    mapping(bytes32 => int) public intStorage;\r\n\r\n\r\n\r\n    // @notice Constructor: Sets the owners of the platform\r\n    // @dev Owners must set the contract manager to add more contracts\r\n    constructor(address[] _owners, bool _upgradeable)\r\n    public {\r\n      for(uint i=0; i<_owners.length; i++){\r\n        require(_owners[i] != address(0), \"Empty address\");\r\n        boolStorage[keccak256(abi.encodePacked(\"owner\", _owners[i]))] = true;\r\n        emit LogInitialized(_owners[i], _upgradeable);\r\n      }\r\n      if (_upgradeable){\r\n        boolStorage[keccak256(\"upgradeable\")] = true;\r\n      }\r\n    }\r\n\r\n    // @notice ContractManager will be the only contract that can add/remove contracts on the platform.\r\n    // @param (address) _contractManager is the contract which can upgrade/remove contracts to platform\r\n    function enableContractManagement(address _contractManager)\r\n    external\r\n    returns (bool){\r\n        require(_contractManager != address(0), \"Empty address\");\r\n        require(boolStorage[keccak256(abi.encodePacked(\"owner\", msg.sender))], \"Not owner\");\r\n        require(addressStorage[keccak256(abi.encodePacked(\"contract\", \"ContractManager\"))] == address(0), \"There is already a contract manager\");\r\n        addressStorage[keccak256(abi.encodePacked(\"contract\", \"ContractManager\"))] = _contractManager;\r\n        boolStorage[keccak256(abi.encodePacked(\"contract\", _contractManager))] = true;\r\n        return true;\r\n    }\r\n\r\n    // @notice Storage functions\r\n    function setAddress(bytes32 _key, address _value)\r\n    onlyApprovedContract\r\n    external {\r\n        addressStorage[_key] = _value;\r\n    }\r\n\r\n    function setUint(bytes32 _key, uint _value)\r\n    onlyApprovedContract\r\n    external {\r\n        uintStorage[_key] = _value;\r\n    }\r\n\r\n    function setString(bytes32 _key, string _value)\r\n    onlyApprovedContract\r\n    external {\r\n        stringStorage[_key] = _value;\r\n    }\r\n\r\n    function setBytes(bytes32 _key, bytes _value)\r\n    onlyApprovedContract\r\n    external {\r\n        bytesStorage[_key] = _value;\r\n    }\r\n\r\n    function setBytes32(bytes32 _key, bytes32 _value)\r\n    onlyApprovedContract\r\n    external {\r\n        bytes32Storage[_key] = _value;\r\n    }\r\n\r\n    function setBool(bytes32 _key, bool _value)\r\n    onlyApprovedContract\r\n    external {\r\n        boolStorage[_key] = _value;\r\n    }\r\n\r\n    function setInt(bytes32 _key, int _value)\r\n    onlyApprovedContract\r\n    external {\r\n        intStorage[_key] = _value;\r\n    }\r\n\r\n\r\n    // Deletion functions: Can alternatively use setter functions and set to null value (ie. uint = 0)\r\n    function deleteAddress(bytes32 _key)\r\n    onlyApprovedContract\r\n    external {\r\n        delete addressStorage[_key];\r\n    }\r\n\r\n    function deleteUint(bytes32 _key)\r\n    onlyApprovedContract\r\n    external {\r\n        delete uintStorage[_key];\r\n    }\r\n\r\n    function deleteString(bytes32 _key)\r\n    onlyApprovedContract\r\n    external {\r\n        delete stringStorage[_key];\r\n    }\r\n\r\n    function deleteBytes(bytes32 _key)\r\n    onlyApprovedContract\r\n    external {\r\n        delete bytesStorage[_key];\r\n    }\r\n\r\n    function deleteBytes32(bytes32 _key)\r\n    onlyApprovedContract\r\n    external {\r\n        delete bytes32Storage[_key];\r\n    }\r\n\r\n    function deleteBool(bytes32 _key)\r\n    onlyApprovedContract\r\n    external {\r\n        delete boolStorage[_key];\r\n    }\r\n\r\n    function deleteInt(bytes32 _key)\r\n    onlyApprovedContract\r\n    external {\r\n        delete intStorage[_key];\r\n    }\r\n\r\n\r\n    // --------------------------------------------------------------------------------------\r\n    //                                     Modifiers\r\n    // --------------------------------------------------------------------------------------\r\n\r\n    // Caller must be registered as a contract through ContractManager.sol\r\n    modifier onlyApprovedContract() {\r\n        require(boolStorage[keccak256(abi.encodePacked(\"contract\", msg.sender))]);\r\n        _;\r\n    }\r\n\r\n    // --------------------------------------------------------------------------------------\r\n    //                                     Events\r\n    // --------------------------------------------------------------------------------------\r\n    event LogInitialized(address _owner, bool _upgradeable);\r\n}","ABI":"[{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"bytes32\"}],\"name\":\"bytes32Storage\",\"outputs\":[{\"name\":\"\",\"type\":\"bytes32\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"bytes32\"}],\"name\":\"addressStorage\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_key\",\"type\":\"bytes32\"}],\"name\":\"deleteBytes32\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_key\",\"type\":\"bytes32\"}],\"name\":\"deleteAddress\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_contractManager\",\"type\":\"address\"}],\"name\":\"enableContractManagement\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_key\",\"type\":\"bytes32\"}],\"name\":\"deleteBool\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_key\",\"type\":\"bytes32\"},{\"name\":\"_value\",\"type\":\"bytes\"}],\"name\":\"setBytes\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"bytes32\"}],\"name\":\"stringStorage\",\"outputs\":[{\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"bytes32\"}],\"name\":\"boolStorage\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_key\",\"type\":\"bytes32\"},{\"name\":\"_value\",\"type\":\"int256\"}],\"name\":\"setInt\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"bytes32\"}],\"name\":\"bytesStorage\",\"outputs\":[{\"name\":\"\",\"type\":\"bytes\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_key\",\"type\":\"bytes32\"},{\"name\":\"_value\",\"type\":\"bytes32\"}],\"name\":\"setBytes32\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_key\",\"type\":\"bytes32\"}],\"name\":\"deleteBytes\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_key\",\"type\":\"bytes32\"},{\"name\":\"_value\",\"type\":\"string\"}],\"name\":\"setString\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"bytes32\"}],\"name\":\"intStorage\",\"outputs\":[{\"name\":\"\",\"type\":\"int256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_key\",\"type\":\"bytes32\"}],\"name\":\"deleteInt\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"bytes32\"}],\"name\":\"uintStorage\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_key\",\"type\":\"bytes32\"},{\"name\":\"_value\",\"type\":\"bool\"}],\"name\":\"setBool\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_key\",\"type\":\"bytes32\"},{\"name\":\"_value\",\"type\":\"address\"}],\"name\":\"setAddress\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_key\",\"type\":\"bytes32\"},{\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"setUint\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_key\",\"type\":\"bytes32\"}],\"name\":\"deleteUint\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_key\",\"type\":\"bytes32\"}],\"name\":\"deleteString\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"name\":\"_owners\",\"type\":\"address[]\"},{\"name\":\"_upgradeable\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"_owner\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"_upgradeable\",\"type\":\"bool\"}],\"name\":\"LogInitialized\",\"type\":\"event\"}]","ContractName":"Database","CompilerVersion":"v0.4.24+commit.e67f0147","OptimizationUsed":"1","Runs":"200","ConstructorArguments":"0000000000000000000000000000000000000000000000000000000000000040000000000000000000000000000000000000000000000000000000000000000100000000000000000000000000000000000000000000000000000000000000030000000000000000000000002abe2a10e6a4791b7d413de5088695dd46e4a36300000000000000000000000006134ad890b6edb42bc0487c4e8dbbc17e3e032600000000000000000000000062ecb8904191ff13637b458a6836dd31eb8070ad","Library":"","LicenseType":"GNU GPLv3","SwarmSource":"bzzr://0489009d1897ec6eb27821065149936fa8b083f783fb422c38a740375fb07663"}]}