{"status":"1","message":"OK","result":[{"SourceCode":"// File: localhost/loggers/CompoundLogger.sol\r\n\r\npragma solidity ^0.5.0;\r\n\r\ninterface ERC20 {\r\n    function totalSupply() external view returns (uint256 supply);\r\n\r\n    function balanceOf(address _owner) external view returns (uint256 balance);\r\n\r\n    function transfer(address _to, uint256 _value) external returns (bool success);\r\n\r\n    function transferFrom(address _from, address _to, uint256 _value)\r\n        external\r\n        returns (bool success);\r\n\r\n    function approve(address _spender, uint256 _value) external returns (bool success);\r\n\r\n    function allowance(address _owner, address _spender) external view returns (uint256 remaining);\r\n\r\n    function decimals() external view returns (uint256 digits);\r\n\r\n    event Approval(address indexed _owner, address indexed _spender, uint256 _value);\r\n}\r\n\r\ncontract CompoundLogger {\r\n    event Repay(\r\n        address indexed owner,\r\n        uint256 collateralAmount,\r\n        uint256 borrowAmount,\r\n        address collAddr,\r\n        address borrowAddr\r\n    );\r\n\r\n    event Boost(\r\n        address indexed owner,\r\n        uint256 borrowAmount,\r\n        uint256 collateralAmount,\r\n        address collAddr,\r\n        address borrowAddr\r\n    );\r\n\r\n    // solhint-disable-next-line func-name-mixedcase\r\n    function LogRepay(address _owner, uint256 _collateralAmount, uint256 _borrowAmount, address _collAddr, address _borrowAddr)\r\n        public\r\n    {\r\n        emit Repay(_owner, _collateralAmount, _borrowAmount, _collAddr, _borrowAddr);\r\n    }\r\n\r\n    // solhint-disable-next-line func-name-mixedcase\r\n    function LogBoost(address _owner, uint256 _borrowAmount, uint256 _collateralAmount, address _collAddr, address _borrowAddr)\r\n        public\r\n    {\r\n        emit Boost(_owner, _borrowAmount, _collateralAmount, _collAddr, _borrowAddr);\r\n    }\r\n}\r\n\r\n// File: localhost/DS/DSNote.sol\r\n\r\npragma solidity ^0.5.0;\r\n\r\n\r\ncontract DSNote {\r\n    event LogNote(\r\n        bytes4 indexed sig,\r\n        address indexed guy,\r\n        bytes32 indexed foo,\r\n        bytes32 indexed bar,\r\n        uint256 wad,\r\n        bytes fax\r\n    ) anonymous;\r\n\r\n    modifier note {\r\n        bytes32 foo;\r\n        bytes32 bar;\r\n\r\n        assembly {\r\n            foo := calldataload(4)\r\n            bar := calldataload(36)\r\n        }\r\n\r\n        emit LogNote(msg.sig, msg.sender, foo, bar, msg.value, msg.data);\r\n\r\n        _;\r\n    }\r\n}\r\n\r\n// File: localhost/DS/DSAuthority.sol\r\n\r\npragma solidity ^0.5.0;\r\n\r\n\r\ncontract DSAuthority {\r\n    function canCall(address src, address dst, bytes4 sig) public view returns (bool);\r\n}\r\n\r\n// File: localhost/DS/DSAuth.sol\r\n\r\npragma solidity ^0.5.0;\r\n\r\n\r\n\r\ncontract DSAuthEvents {\r\n    event LogSetAuthority(address indexed authority);\r\n    event LogSetOwner(address indexed owner);\r\n}\r\n\r\n\r\ncontract DSAuth is DSAuthEvents {\r\n    DSAuthority public authority;\r\n    address public owner;\r\n\r\n    constructor() public {\r\n        owner = msg.sender;\r\n        emit LogSetOwner(msg.sender);\r\n    }\r\n\r\n    function setOwner(address owner_) public auth {\r\n        owner = owner_;\r\n        emit LogSetOwner(owner);\r\n    }\r\n\r\n    function setAuthority(DSAuthority authority_) public auth {\r\n        authority = authority_;\r\n        emit LogSetAuthority(address(authority));\r\n    }\r\n\r\n    modifier auth {\r\n        require(isAuthorized(msg.sender, msg.sig));\r\n        _;\r\n    }\r\n\r\n    function isAuthorized(address src, bytes4 sig) internal view returns (bool) {\r\n        if (src == address(this)) {\r\n            return true;\r\n        } else if (src == owner) {\r\n            return true;\r\n        } else if (authority == DSAuthority(0)) {\r\n            return false;\r\n        } else {\r\n            return authority.canCall(src, address(this), sig);\r\n        }\r\n    }\r\n}\r\n\r\n// File: localhost/DS/DSProxy.sol\r\n\r\npragma solidity ^0.5.0;\r\n\r\n\r\n\r\n\r\ncontract DSProxy is DSAuth, DSNote {\r\n    DSProxyCache public cache; // global cache for contracts\r\n\r\n    constructor(address _cacheAddr) public {\r\n        require(setCache(_cacheAddr));\r\n    }\r\n\r\n    function() external payable {}\r\n\r\n    // use the proxy to execute calldata _data on contract _code\r\n    function execute(bytes memory _code, bytes memory _data)\r\n        public\r\n        payable\r\n        returns (address target, bytes32 response)\r\n    {\r\n        target = cache.read(_code);\r\n        if (target == address(0)) {\r\n            // deploy contract & store its address in cache\r\n            target = cache.write(_code);\r\n        }\r\n\r\n        response = execute(target, _data);\r\n    }\r\n\r\n    function execute(address _target, bytes memory _data)\r\n        public\r\n        payable\r\n        auth\r\n        note\r\n        returns (bytes32 response)\r\n    {\r\n        require(_target != address(0));\r\n\r\n        // call contract in current context\r\n        assembly {\r\n            let succeeded := delegatecall(\r\n                sub(gas, 5000),\r\n                _target,\r\n                add(_data, 0x20),\r\n                mload(_data),\r\n                0,\r\n                32\r\n            )\r\n            response := mload(0) // load delegatecall output\r\n            switch iszero(succeeded)\r\n                case 1 {\r\n                    // throw if delegatecall failed\r\n                    revert(0, 0)\r\n                }\r\n        }\r\n    }\r\n\r\n    //set new cache\r\n    function setCache(address _cacheAddr) public payable auth note returns (bool) {\r\n        require(_cacheAddr != address(0)); // invalid cache address\r\n        cache = DSProxyCache(_cacheAddr); // overwrite cache\r\n        return true;\r\n    }\r\n}\r\n\r\n\r\ncontract DSProxyCache {\r\n    mapping(bytes32 => address) cache;\r\n\r\n    function read(bytes memory _code) public view returns (address) {\r\n        bytes32 hash = keccak256(_code);\r\n        return cache[hash];\r\n    }\r\n\r\n    function write(bytes memory _code) public returns (address target) {\r\n        assembly {\r\n            target := create(0, add(_code, 0x20), mload(_code))\r\n            switch iszero(extcodesize(target))\r\n                case 1 {\r\n                    // throw if contract failed to deploy\r\n                    revert(0, 0)\r\n                }\r\n        }\r\n        bytes32 hash = keccak256(_code);\r\n        cache[hash] = target;\r\n    }\r\n}\r\n\r\n// File: localhost/DS/DSMath.sol\r\n\r\npragma solidity ^0.5.0;\r\n\r\n\r\ncontract DSMath {\r\n    function add(uint256 x, uint256 y) internal pure returns (uint256 z) {\r\n        require((z = x + y) >= x);\r\n    }\r\n\r\n    function sub(uint256 x, uint256 y) internal pure returns (uint256 z) {\r\n        require((z = x - y) <= x);\r\n    }\r\n\r\n    function mul(uint256 x, uint256 y) internal pure returns (uint256 z) {\r\n        require(y == 0 || (z = x * y) / y == x);\r\n    }\r\n\r\n    function div(uint256 x, uint256 y) internal pure returns (uint256 z) {\r\n        return x / y;\r\n    }\r\n\r\n    function min(uint256 x, uint256 y) internal pure returns (uint256 z) {\r\n        return x <= y ? x : y;\r\n    }\r\n\r\n    function max(uint256 x, uint256 y) internal pure returns (uint256 z) {\r\n        return x >= y ? x : y;\r\n    }\r\n\r\n    function imin(int256 x, int256 y) internal pure returns (int256 z) {\r\n        return x <= y ? x : y;\r\n    }\r\n\r\n    function imax(int256 x, int256 y) internal pure returns (int256 z) {\r\n        return x >= y ? x : y;\r\n    }\r\n\r\n    uint256 constant WAD = 10**18;\r\n    uint256 constant RAY = 10**27;\r\n\r\n    function wmul(uint256 x, uint256 y) internal pure returns (uint256 z) {\r\n        z = add(mul(x, y), WAD / 2) / WAD;\r\n    }\r\n\r\n    function rmul(uint256 x, uint256 y) internal pure returns (uint256 z) {\r\n        z = add(mul(x, y), RAY / 2) / RAY;\r\n    }\r\n\r\n    function wdiv(uint256 x, uint256 y) internal pure returns (uint256 z) {\r\n        z = add(mul(x, WAD), y / 2) / y;\r\n    }\r\n\r\n    function rdiv(uint256 x, uint256 y) internal pure returns (uint256 z) {\r\n        z = add(mul(x, RAY), y / 2) / y;\r\n    }\r\n\r\n    // This famous algorithm is called \"exponentiation by squaring\"\r\n    // and calculates x^n with x as fixed-point and n as regular unsigned.\r\n    //\r\n    // It's O(log n), instead of O(n) for naive repeated multiplication.\r\n    //\r\n    // These facts are why it works:\r\n    //\r\n    //  If n is even, then x^n = (x^2)^(n/2).\r\n    //  If n is odd,  then x^n = x * x^(n-1),\r\n    //   and applying the equation for even x gives\r\n    //    x^n = x * (x^2)^((n-1) / 2).\r\n    //\r\n    //  Also, EVM division is flooring and\r\n    //    floor[(n-1) / 2] = floor[n / 2].\r\n    //\r\n    function rpow(uint256 x, uint256 n) internal pure returns (uint256 z) {\r\n        z = n % 2 != 0 ? x : RAY;\r\n\r\n        for (n /= 2; n != 0; n /= 2) {\r\n            x = rmul(x, x);\r\n\r\n            if (n % 2 != 0) {\r\n                z = rmul(z, x);\r\n            }\r\n        }\r\n    }\r\n}\r\n\r\n// File: localhost/compound/helpers/ComptrollerInterface.sol\r\n\r\npragma solidity ^0.5.0;\r\n\r\n\r\ncontract ComptrollerInterface {\r\n    function enterMarkets(address[] calldata cTokens) external returns (uint256[] memory);\r\n\r\n    function exitMarket(address cToken) external returns (uint256);\r\n\r\n    function getAssetsIn(address account) external view returns (address[] memory);\r\n\r\n    function getAccountLiquidity(address account) external view returns (uint256, uint256, uint256);\r\n}\r\n\r\n// File: localhost/compound/helpers/CEtherInterface.sol\r\n\r\npragma solidity ^0.5.0;\r\n\r\ncontract CEtherInterface {\r\n    function mint() external payable;\r\n    function repayBorrow() external payable;\r\n}\r\n\r\n// File: localhost/compound/CompoundSaverHelper.sol\r\n\r\npragma solidity ^0.5.0;\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\ncontract CompoundOracle {\r\n    function getUnderlyingPrice(address cToken) external view returns (uint);\r\n}\r\n\r\ncontract CompoundSaverHelper is DSMath {\r\n\r\n    address payable public constant WALLET_ID = 0x322d58b9E75a6918f7e7849AEe0fF09369977e08;\r\n    address public constant DISCOUNT_ADDRESS = 0x1b14E8D511c9A4395425314f849bD737BAF8208F;\r\n\r\n    uint public constant SERVICE_FEE = 400; // 0.25% Fee\r\n    address public constant ETH_ADDRESS = 0xEeeeeEeeeEeEeeEeEeEeeEEEeeeeEeeeeeeeEEeE;\r\n    address public constant CETH_ADDRESS = 0x4Ddc2D193948926D02f9B1fE9e1daa0718270ED5;\r\n    address public constant COMPTROLLER = 0x3d9819210A31b4961b30EF54bE2aeD79B9c9Cd3B;\r\n\r\n    address public constant COMPOUND_LOGGER = 0x3DD0CDf5fFA28C6847B4B276e2fD256046a44bb7;\r\n    address public constant COMPOUND_ORACLE = 0x1D8aEdc9E924730DD3f9641CDb4D1B92B848b4bd;\r\n\r\n    /// @notice Helper method to payback the Compound debt\r\n    function paybackDebt(uint _amount, address _cBorrowToken, address _borrowToken, address _user) internal {\r\n        uint wholeDebt = CTokenInterface(_cBorrowToken).borrowBalanceCurrent(address(this));\r\n\r\n        if (_amount > wholeDebt) {\r\n            ERC20(_borrowToken).transfer(_user, (_amount - wholeDebt));\r\n            _amount = wholeDebt;\r\n        }\r\n\r\n        approveCToken(_borrowToken, _cBorrowToken);\r\n\r\n        if (_borrowToken == ETH_ADDRESS) {\r\n            CEtherInterface(_cBorrowToken).repayBorrow.value(_amount)();\r\n        } else {\r\n            require(CTokenInterface(_cBorrowToken).repayBorrow(_amount) == 0);\r\n        }\r\n    }\r\n\r\n    /// @notice Calculates the fee amount\r\n    /// @param _amount Amount that is converted\r\n    function getFee(uint _amount, address _user, address _tokenAddr) internal returns (uint feeAmount) {\r\n        uint fee = SERVICE_FEE;\r\n\r\n        if (Discount(DISCOUNT_ADDRESS).isCustomFeeSet(_user)) {\r\n            fee = Discount(DISCOUNT_ADDRESS).getCustomServiceFee(_user);\r\n        }\r\n\r\n        feeAmount = (fee == 0) ? 0 : (_amount / fee);\r\n\r\n        // fee can't go over 20% of the whole amount\r\n        if (feeAmount > (_amount / 5)) {\r\n            feeAmount = _amount / 5;\r\n        }\r\n\r\n        ERC20(_tokenAddr).transfer(WALLET_ID, feeAmount);\r\n    }\r\n\r\n    /// @notice Enters the market for the collatera and borrow tokens\r\n    function enterMarket(address _cTokenAddrColl, address _cTokenAddrBorrow) internal {\r\n        address[] memory markets = new address[](2);\r\n        markets[0] = _cTokenAddrColl;\r\n        markets[1] = _cTokenAddrBorrow;\r\n\r\n        ComptrollerInterface(COMPTROLLER).enterMarkets(markets);\r\n    }\r\n\r\n    /// @notice Approves CToken contract to pull underlying tokens from the DSProxy\r\n    function approveCToken(address _tokenAddr, address _cTokenAddr) internal {\r\n        if (_tokenAddr != ETH_ADDRESS) {\r\n            ERC20(_tokenAddr).approve(_cTokenAddr, uint(-1));\r\n        }\r\n    }\r\n\r\n    /// @notice Returns the underlying address of the cToken asset\r\n    function getUnderlyingAddr(address _cTokenAddress) internal returns (address) {\r\n        if (_cTokenAddress == CETH_ADDRESS) {\r\n            return ETH_ADDRESS;\r\n        } else {\r\n            return CTokenInterface(_cTokenAddress).underlying();\r\n        }\r\n    }\r\n\r\n    /// @notice Returns the owner of the DSProxy that called the contract\r\n    function getUserAddress() internal view returns (address) {\r\n        DSProxy proxy = DSProxy(uint160(address(this)));\r\n\r\n        return proxy.owner();\r\n    }\r\n\r\n    /// @notice Returns the maximum amount of collateral available to withdraw\r\n    /// @dev Due to rounding errors the result is - 100 wei from the exact amount\r\n    function getMaxCollateral(address _cCollAddress) public returns (uint) {\r\n        (, uint liquidityInEth, ) = ComptrollerInterface(COMPTROLLER).getAccountLiquidity(address(this));\r\n        uint usersBalance = CTokenInterface(_cCollAddress).balanceOfUnderlying(address(this));\r\n\r\n        if (liquidityInEth == 0) return usersBalance;\r\n\r\n        if (_cCollAddress == CETH_ADDRESS) {\r\n            if (liquidityInEth > usersBalance) return usersBalance;\r\n\r\n            return liquidityInEth;\r\n        }\r\n\r\n        uint ethPrice = CompoundOracle(COMPOUND_ORACLE).getUnderlyingPrice(_cCollAddress);\r\n        uint liquidityInToken = wdiv(liquidityInEth, ethPrice);\r\n\r\n        if (liquidityInToken > usersBalance) return usersBalance;\r\n\r\n        return sub(liquidityInToken, 100); // cut off 100 wei to handle rounding issues\r\n    }\r\n\r\n    /// @notice Returns the maximum amount of borrow amount available\r\n    /// @dev Due to rounding errors the result is - 100 wei from the exact amount\r\n    function getMaxBorrow(address _cBorrowAddress) public returns (uint) {\r\n        (, uint liquidityInEth, ) = ComptrollerInterface(COMPTROLLER).getAccountLiquidity(address(this));\r\n\r\n        if (_cBorrowAddress == CETH_ADDRESS) return liquidityInEth;\r\n\r\n        uint ethPrice = CompoundOracle(COMPOUND_ORACLE).getUnderlyingPrice(_cBorrowAddress);\r\n        uint liquidityInToken = wdiv(liquidityInEth, ethPrice);\r\n\r\n        return sub(liquidityInToken, 100); // cut off 100 wei to handle rounding issues\r\n    }\r\n}\r\n\r\n// File: localhost/mcd/Discount.sol\r\n\r\npragma solidity ^0.5.0;\r\n\r\n\r\ncontract Discount {\r\n    address public owner;\r\n    mapping(address => CustomServiceFee) public serviceFees;\r\n\r\n    uint256 constant MAX_SERVICE_FEE = 400;\r\n\r\n    struct CustomServiceFee {\r\n        bool active;\r\n        uint256 amount;\r\n    }\r\n\r\n    constructor() public {\r\n        owner = msg.sender;\r\n    }\r\n\r\n    function isCustomFeeSet(address _user) public view returns (bool) {\r\n        return serviceFees[_user].active;\r\n    }\r\n\r\n    function getCustomServiceFee(address _user) public view returns (uint256) {\r\n        return serviceFees[_user].amount;\r\n    }\r\n\r\n    function setServiceFee(address _user, uint256 _fee) public {\r\n        require(msg.sender == owner, \"Only owner\");\r\n        require(_fee >= MAX_SERVICE_FEE || _fee == 0);\r\n\r\n        serviceFees[_user] = CustomServiceFee({active: true, amount: _fee});\r\n    }\r\n\r\n    function disableServiceFee(address _user) public {\r\n        require(msg.sender == owner, \"Only owner\");\r\n\r\n        serviceFees[_user] = CustomServiceFee({active: false, amount: 0});\r\n    }\r\n}\r\n\r\n// File: localhost/interfaces/CTokenInterface.sol\r\n\r\npragma solidity ^0.5.0;\r\n\r\n\r\n\r\ncontract CTokenInterface is ERC20 {\r\n    function mint(uint256 mintAmount) external returns (uint256);\r\n\r\n    function mint() external payable;\r\n\r\n    function redeem(uint256 redeemTokens) external returns (uint256);\r\n\r\n    function redeemUnderlying(uint256 redeemAmount) external returns (uint256);\r\n\r\n    function borrow(uint256 borrowAmount) external returns (uint256);\r\n\r\n    function repayBorrow(uint256 repayAmount) external returns (uint256);\r\n\r\n    function repayBorrow() external payable;\r\n\r\n    function repayBorrowBehalf(address borrower, uint256 repayAmount) external returns (uint256);\r\n\r\n    function repayBorrowBehalf(address borrower) external payable;\r\n\r\n    function liquidateBorrow(address borrower, uint256 repayAmount, address cTokenCollateral)\r\n        external\r\n        returns (uint256);\r\n\r\n    function liquidateBorrow(address borrower, address cTokenCollateral) external payable;\r\n\r\n    function exchangeRateCurrent() external returns (uint256);\r\n\r\n    function supplyRatePerBlock() external returns (uint256);\r\n\r\n    function borrowRatePerBlock() external returns (uint256);\r\n\r\n    function totalReserves() external returns (uint256);\r\n\r\n    function reserveFactorMantissa() external returns (uint256);\r\n\r\n    function borrowBalanceCurrent(address account) external returns (uint256);\r\n\r\n    function totalBorrowsCurrent() external returns (uint256);\r\n\r\n    function getCash() external returns (uint256);\r\n\r\n    function balanceOfUnderlying(address owner) external returns (uint256);\r\n\r\n    function underlying() external returns (address);\r\n}\r\n\r\n// File: localhost/constants/ConstantAddressesExchangeKovan.sol\r\n\r\npragma solidity ^0.5.0;\r\n\r\n\r\ncontract ConstantAddressesExchangeKovan {\r\n    address public constant MAKER_DAI_ADDRESS = 0xC4375B7De8af5a38a93548eb8453a498222C4fF2;\r\n    address public constant KYBER_ETH_ADDRESS = 0xEeeeeEeeeEeEeeEeEeEeeEEEeeeeEeeeeeeeEEeE;\r\n    address public constant MKR_ADDRESS = 0xAaF64BFCC32d0F15873a02163e7E500671a4ffcD;\r\n    address public constant WETH_ADDRESS = 0xd0A1E359811322d97991E03f863a0C30C2cF029C;\r\n    address payable public constant WALLET_ID = 0x54b44C6B18fc0b4A1010B21d524c338D1f8065F6;\r\n    address public constant LOGGER_ADDRESS = 0x32d0e18f988F952Eb3524aCE762042381a2c39E5;\r\n    address public constant DISCOUNT_ADDRESS = 0x1297c1105FEDf45E0CF6C102934f32C4EB780929;\r\n\r\n    address public constant GAS_TOKEN_INTERFACE_ADDRESS = 0x0000000000170CcC93903185bE5A2094C870Df62;\r\n    address public constant SAVER_EXCHANGE_ADDRESS = 0xACA7d11e3f482418C324aAC8e90AaD0431f692A6;\r\n\r\n    // new MCD contracts\r\n    address public constant MANAGER_ADDRESS = 0x1476483dD8C35F25e568113C5f70249D3976ba21;\r\n    address public constant VAT_ADDRESS = 0xbA987bDB501d131f766fEe8180Da5d81b34b69d9;\r\n    address public constant SPOTTER_ADDRESS = 0x3a042de6413eDB15F2784f2f97cC68C7E9750b2D;\r\n    address public constant PROXY_ACTIONS = 0xd1D24637b9109B7f61459176EdcfF9Be56283a7B;\r\n\r\n    address public constant JUG_ADDRESS = 0xcbB7718c9F39d05aEEDE1c472ca8Bf804b2f1EaD;\r\n    address public constant DAI_JOIN_ADDRESS = 0x5AA71a3ae1C0bd6ac27A1f28e1415fFFB6F15B8c;\r\n    address public constant ETH_JOIN_ADDRESS = 0x775787933e92b709f2a3C70aa87999696e74A9F8;\r\n    address public constant MIGRATION_ACTIONS_PROXY = 0x433870076aBd08865f0e038dcC4Ac6450e313Bd8;\r\n\r\n    address public constant SAI_ADDRESS = 0xC4375B7De8af5a38a93548eb8453a498222C4fF2;\r\n    address public constant DAI_ADDRESS = 0x4F96Fe3b7A6Cf9725f59d353F723c1bDb64CA6Aa;\r\n\r\n    address payable public constant SCD_MCD_MIGRATION = 0x411B2Faa662C8e3E5cF8f01dFdae0aeE482ca7b0;\r\n\r\n    // Our contracts\r\n    address public constant ERC20_PROXY_0X = 0x95E6F48254609A6ee006F7D493c8e5fB97094ceF;\r\n    address public constant NEW_IDAI_ADDRESS = 0x6c1E2B0f67e00c06c8e2BE7Dc681Ab785163fF4D;\r\n}\r\n\r\n// File: localhost/constants/ConstantAddressesExchangeMainnet.sol\r\n\r\npragma solidity ^0.5.0;\r\n\r\n\r\ncontract ConstantAddressesExchangeMainnet {\r\n    address public constant MAKER_DAI_ADDRESS = 0x89d24A6b4CcB1B6fAA2625fE562bDD9a23260359;\r\n    address public constant KYBER_ETH_ADDRESS = 0xEeeeeEeeeEeEeeEeEeEeeEEEeeeeEeeeeeeeEEeE;\r\n    address public constant MKR_ADDRESS = 0x9f8F72aA9304c8B593d555F12eF6589cC3A579A2;\r\n    address public constant WETH_ADDRESS = 0xC02aaA39b223FE8D0A0e5C4F27eAD9083C756Cc2;\r\n    address payable public constant WALLET_ID = 0x322d58b9E75a6918f7e7849AEe0fF09369977e08;\r\n    address public constant LOGGER_ADDRESS = 0xeCf88e1ceC2D2894A0295DB3D86Fe7CE4991E6dF;\r\n    address public constant DISCOUNT_ADDRESS = 0x1b14E8D511c9A4395425314f849bD737BAF8208F;\r\n\r\n    address public constant GAS_TOKEN_INTERFACE_ADDRESS = 0x0000000000b3F879cb30FE243b4Dfee438691c04;\r\n    address public constant SAVER_EXCHANGE_ADDRESS = 0x862F3dcF1104b8a9468fBb8B843C37C31B41eF09;\r\n\r\n    // new MCD contracts\r\n    address public constant MANAGER_ADDRESS = 0x5ef30b9986345249bc32d8928B7ee64DE9435E39;\r\n    address public constant VAT_ADDRESS = 0x35D1b3F3D7966A1DFe207aa4514C12a259A0492B;\r\n    address public constant SPOTTER_ADDRESS = 0x65C79fcB50Ca1594B025960e539eD7A9a6D434A3;\r\n    address public constant PROXY_ACTIONS = 0x82ecD135Dce65Fbc6DbdD0e4237E0AF93FFD5038;\r\n\r\n    address public constant JUG_ADDRESS = 0x19c0976f590D67707E62397C87829d896Dc0f1F1;\r\n    address public constant DAI_JOIN_ADDRESS = 0x9759A6Ac90977b93B58547b4A71c78317f391A28;\r\n    address public constant ETH_JOIN_ADDRESS = 0x2F0b23f53734252Bda2277357e97e1517d6B042A;\r\n    address public constant MIGRATION_ACTIONS_PROXY = 0xe4B22D484958E582098A98229A24e8A43801b674;\r\n\r\n    address public constant SAI_ADDRESS = 0x89d24A6b4CcB1B6fAA2625fE562bDD9a23260359;\r\n    address public constant DAI_ADDRESS = 0x6B175474E89094C44Da98b954EedeAC495271d0F;\r\n\r\n    address payable public constant SCD_MCD_MIGRATION = 0xc73e0383F3Aff3215E6f04B0331D58CeCf0Ab849;\r\n\r\n    // Our contracts\r\n    address public constant ERC20_PROXY_0X = 0x95E6F48254609A6ee006F7D493c8e5fB97094ceF;\r\n    address public constant NEW_IDAI_ADDRESS = 0x6c1E2B0f67e00c06c8e2BE7Dc681Ab785163fF4D;\r\n}\r\n\r\n// File: localhost/constants/ConstantAddressesExchange.sol\r\n\r\npragma solidity ^0.5.0;\r\n\r\n\r\n\r\n// solhint-disable-next-line no-empty-blocks\r\ncontract ConstantAddressesExchange is ConstantAddressesExchangeMainnet {}\r\n\r\n// File: localhost/interfaces/SaverExchangeInterface.sol\r\n\r\npragma solidity ^0.5.0;\r\n\r\n\r\ncontract SaverExchangeInterface {\r\n    function getBestPrice(\r\n        uint256 _amount,\r\n        address _srcToken,\r\n        address _destToken,\r\n        uint256 _exchangeType\r\n    ) public view returns (address, uint256);\r\n}\r\n\r\n// File: localhost/interfaces/TokenInterface.sol\r\n\r\npragma solidity ^0.5.0;\r\n\r\n\r\ncontract TokenInterface {\r\n    function allowance(address, address) public returns (uint256);\r\n\r\n    function balanceOf(address) public returns (uint256);\r\n\r\n    function approve(address, uint256) public;\r\n\r\n    function transfer(address, uint256) public returns (bool);\r\n\r\n    function transferFrom(address, address, uint256) public returns (bool);\r\n\r\n    function deposit() public payable;\r\n\r\n    function withdraw(uint256) public;\r\n}\r\n\r\n// File: localhost/interfaces/ERC20.sol\r\n\r\npragma solidity ^0.5.0;\r\n\r\n\r\n// File: localhost/interfaces/ExchangeInterface.sol\r\n\r\npragma solidity ^0.5.0;\r\n\r\n\r\n\r\n//TODO: currenlty only adjusted to kyber, but should be genric interfaces for more dec. exchanges\r\ninterface ExchangeInterface {\r\n    function swapEtherToToken(uint256 _ethAmount, address _tokenAddress, uint256 _maxAmount)\r\n        external\r\n        payable\r\n        returns (uint256, uint256);\r\n\r\n    function swapTokenToEther(address _tokenAddress, uint256 _amount, uint256 _maxAmount)\r\n        external\r\n        returns (uint256);\r\n\r\n    function swapTokenToToken(address _src, address _dest, uint256 _amount)\r\n        external\r\n        payable\r\n        returns (uint256);\r\n\r\n    function getExpectedRate(address src, address dest, uint256 srcQty)\r\n        external\r\n        view\r\n        returns (uint256 expectedRate);\r\n}\r\n\r\n// File: localhost/mcd/saver_proxy/ExchangeHelper.sol\r\n\r\npragma solidity ^0.5.0;\r\n\r\n\r\n\r\n\r\n\r\n\r\n/// @title Helper methods for integration with SaverExchange\r\ncontract ExchangeHelper is ConstantAddressesExchange {\r\n\r\n    /// @notice Swaps 2 tokens on the Saver Exchange\r\n    /// @dev ETH is sent with Weth address\r\n    /// @param _data [amount, minPrice, exchangeType, 0xPrice]\r\n    /// @param _src Token address of the source token\r\n    /// @param _dest Token address of the destination token\r\n    /// @param _exchangeAddress Address of 0x exchange that should be called\r\n    /// @param _callData data to call 0x exchange with\r\n    function swap(uint[4] memory _data, address _src, address _dest, address _exchangeAddress, bytes memory _callData) internal returns (uint) {\r\n        address wrapper;\r\n        uint price;\r\n        // [tokensReturned, tokensLeft]\r\n        uint[2] memory tokens;\r\n        bool success;\r\n\r\n        // tokensLeft is equal to amount at the beginning\r\n        tokens[1] = _data[0];\r\n\r\n        _src = wethToKyberEth(_src);\r\n        _dest = wethToKyberEth(_dest);\r\n\r\n        // use this to avoid stack too deep error\r\n        address[3] memory orderAddresses = [_exchangeAddress, _src, _dest];\r\n\r\n        // if _data[2] == 4 use 0x if possible\r\n        if (_data[2] == 4) {\r\n            if (orderAddresses[1] != KYBER_ETH_ADDRESS) {\r\n                ERC20(orderAddresses[1]).approve(address(ERC20_PROXY_0X), _data[0]);\r\n            }\r\n\r\n            (success, tokens[0], ) = takeOrder(orderAddresses, _callData, address(this).balance, _data[0]);\r\n\r\n            // if specifically 4, then require it to be successfull\r\n            require(success && tokens[0] > 0, \"0x transaction failed\");\r\n        }\r\n\r\n        // no 0x\r\n        // if (_data[2] == 5) {\r\n        //     (wrapper, price) = SaverExchangeInterface(SAVER_EXCHANGE_ADDRESS).getBestPrice(tokens[1], orderAddresses[1], orderAddresses[2], _data[2]);\r\n\r\n        //     require(price > _data[1], \"Slippage hit onchain price\");\r\n\r\n        //     if (orderAddresses[1] == KYBER_ETH_ADDRESS) {\r\n        //         uint tRet;\r\n        //         (tRet,) = ExchangeInterface(wrapper).swapEtherToToken.value(tokens[1])(tokens[1], orderAddresses[2], uint(-1));\r\n        //         tokens[0] += tRet;\r\n        //     } else {\r\n        //         ERC20(orderAddresses[1]).transfer(wrapper, tokens[1]);\r\n\r\n        //         if (orderAddresses[2] == KYBER_ETH_ADDRESS) {\r\n        //             tokens[0] += ExchangeInterface(wrapper).swapTokenToEther(orderAddresses[1], tokens[1], uint(-1));\r\n        //         } else {\r\n        //             tokens[0] += ExchangeInterface(wrapper).swapTokenToToken(orderAddresses[1], orderAddresses[2], tokens[1]);\r\n        //         }\r\n        //     }\r\n\r\n        //     return tokens[0];\r\n        // }\r\n\r\n        if (tokens[0] == 0) {\r\n            (wrapper, price) = SaverExchangeInterface(SAVER_EXCHANGE_ADDRESS).getBestPrice(_data[0], orderAddresses[1], orderAddresses[2], _data[2]);\r\n\r\n            require(price > _data[1] || _data[3] > _data[1], \"Slippage hit\");\r\n\r\n            // handle 0x exchange, if equal price, try 0x to use less gas\r\n            if (_data[3] >= price) {\r\n                if (orderAddresses[1] != KYBER_ETH_ADDRESS) {\r\n                    ERC20(orderAddresses[1]).approve(address(ERC20_PROXY_0X), _data[0]);\r\n                }\r\n\r\n                // when selling eth its possible that some eth isn't sold and it is returned back\r\n                (success, tokens[0], tokens[1]) = takeOrder(orderAddresses, _callData, address(this).balance, _data[0]);\r\n            }\r\n\r\n            // if there are more tokens left, try to sell them on other exchanges\r\n            if (tokens[1] > 0) {\r\n                // as it stands today, this can happend only when selling ETH\r\n                if (tokens[1] != _data[0]) {\r\n                    (wrapper, price) = SaverExchangeInterface(SAVER_EXCHANGE_ADDRESS).getBestPrice(tokens[1], orderAddresses[1], orderAddresses[2], _data[2]);\r\n                }\r\n\r\n                require(price > _data[1], \"Slippage hit onchain price\");\r\n\r\n                if (orderAddresses[1] == KYBER_ETH_ADDRESS) {\r\n                    uint tRet;\r\n                    (tRet,) = ExchangeInterface(wrapper).swapEtherToToken.value(tokens[1])(tokens[1], orderAddresses[2], uint(-1));\r\n                    tokens[0] += tRet;\r\n                } else {\r\n                    ERC20(orderAddresses[1]).transfer(wrapper, tokens[1]);\r\n\r\n                    if (orderAddresses[2] == KYBER_ETH_ADDRESS) {\r\n                        tokens[0] += ExchangeInterface(wrapper).swapTokenToEther(orderAddresses[1], tokens[1], uint(-1));\r\n                    } else {\r\n                        tokens[0] += ExchangeInterface(wrapper).swapTokenToToken(orderAddresses[1], orderAddresses[2], tokens[1]);\r\n                    }\r\n                }\r\n            }\r\n        }\r\n\r\n        return tokens[0];\r\n    }\r\n\r\n    // @notice Takes order from 0x and returns bool indicating if it is successful\r\n    // @param _addresses [exchange, src, dst]\r\n    // @param _data Data to send with call\r\n    // @param _value Value to send with call\r\n    // @param _amount Amount to sell\r\n    function takeOrder(address[3] memory _addresses, bytes memory _data, uint _value, uint _amount) private returns(bool, uint, uint) {\r\n        bool success;\r\n\r\n        (success, ) = _addresses[0].call.value(_value)(_data);\r\n\r\n        uint tokensLeft = _amount;\r\n        uint tokensReturned = 0;\r\n        if (success){\r\n            // check how many tokens left from _src\r\n            if (_addresses[1] == KYBER_ETH_ADDRESS) {\r\n                tokensLeft = address(this).balance;\r\n            } else {\r\n                tokensLeft = ERC20(_addresses[1]).balanceOf(address(this));\r\n            }\r\n\r\n            // check how many tokens are returned\r\n            if (_addresses[2] == KYBER_ETH_ADDRESS) {\r\n                TokenInterface(WETH_ADDRESS).withdraw(TokenInterface(WETH_ADDRESS).balanceOf(address(this)));\r\n                tokensReturned = address(this).balance;\r\n            } else {\r\n                tokensReturned = ERC20(_addresses[2]).balanceOf(address(this));\r\n            }\r\n        }\r\n\r\n        return (success, tokensReturned, tokensLeft);\r\n    }\r\n\r\n    /// @notice Converts WETH -> Kybers Eth address\r\n    /// @param _src Input address\r\n    function wethToKyberEth(address _src) internal pure returns (address) {\r\n        return _src == WETH_ADDRESS ? KYBER_ETH_ADDRESS : _src;\r\n    }\r\n}\r\n\r\n// File: localhost/compound/flashloan/CompoundSaverFlashProxy.sol\r\n\r\npragma solidity ^0.5.0;\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\ncontract CompoundFlashSaverProxy is ExchangeHelper, CompoundSaverHelper  {\r\n\r\n    address payable public constant COMPOUND_SAVER_FLASH_LOAN = 0x0D5Ec207D7B29525Cc25963347903958C98a66d3;\r\n\r\n    function flashRepay(\r\n        uint[5] memory _data, // amount, minPrice, exchangeType, gasCost, 0xPrice\r\n        address[3] memory _addrData, // cCollAddress, cBorrowAddress, exchangeAddress\r\n        bytes memory _callData,\r\n        uint[2] memory _flashLoanData // amount, fee\r\n    ) public payable {\r\n        enterMarket(_addrData[0], _addrData[1]);\r\n\r\n        address payable user = address(uint160(getUserAddress()));\r\n        uint flashBorrowed = _flashLoanData[0] + _flashLoanData[1];\r\n\r\n        uint maxColl = getMaxCollateral(_addrData[0]);\r\n\r\n        // draw max coll\r\n        require(CTokenInterface(_addrData[0]).redeemUnderlying(maxColl) == 0);\r\n\r\n        address collToken = getUnderlyingAddr(_addrData[0]);\r\n        address borrowToken = getUnderlyingAddr(_addrData[1]);\r\n\r\n        // swap max coll + loanAmount\r\n        uint swapAmount = swap(\r\n            [(maxColl + _flashLoanData[0]), _data[1], _data[2], _data[4]], // collAmount, minPrice, exchangeType, 0xPrice\r\n            collToken,\r\n            borrowToken,\r\n            _addrData[2],\r\n            _callData\r\n        );\r\n\r\n        // get fee\r\n        swapAmount -= getFee(swapAmount, user, borrowToken);\r\n\r\n        // payback debt\r\n        paybackDebt(swapAmount, _addrData[1], borrowToken, user);\r\n\r\n        // draw collateral for loanAmount + loanFee\r\n        require(CTokenInterface(_addrData[0]).redeemUnderlying(flashBorrowed) == 0);\r\n\r\n        // repay flash loan\r\n        returnFlashLoan(collToken, flashBorrowed);\r\n\r\n        CompoundLogger(COMPOUND_LOGGER).LogRepay(user, _data[0], swapAmount, collToken, borrowToken);\r\n    }\r\n\r\n     function flashBoost(\r\n        uint[5] memory _data, // amount, minPrice, exchangeType, gasCost, 0xPrice\r\n        address[3] memory _addrData, // cCollAddress, cBorrowAddress, exchangeAddress\r\n        bytes memory _callData,\r\n        uint[2] memory _flashLoanData // amount, fee\r\n    ) public payable {\r\n        enterMarket(_addrData[0], _addrData[1]);\r\n\r\n        address payable user = address(uint160(getUserAddress()));\r\n        uint flashBorrowed = _flashLoanData[0] + _flashLoanData[1];\r\n\r\n        // borrow max amount\r\n        uint borrowAmount = getMaxBorrow(_addrData[1]);\r\n        require(CTokenInterface(_addrData[1]).borrow(borrowAmount) == 0);\r\n\r\n        address collToken = getUnderlyingAddr(_addrData[0]);\r\n        address borrowToken = getUnderlyingAddr(_addrData[1]);\r\n\r\n        // get dfs fee\r\n        borrowAmount -= getFee((borrowAmount + _flashLoanData[0]), user, borrowToken);\r\n\r\n        // swap borrowed amount and fl loan amount\r\n        uint swapAmount = swap(\r\n            [(borrowAmount + _flashLoanData[0]), _data[1], _data[2], _data[4]], // collAmount, minPrice, exchangeType, 0xPrice\r\n            borrowToken,\r\n            collToken,\r\n            _addrData[2],\r\n            _callData\r\n        );\r\n\r\n        // deposit swaped collateral\r\n        depositCollateral(collToken, _addrData[0], swapAmount);\r\n\r\n        // borrow token to repay flash loan\r\n        require(CTokenInterface(_addrData[1]).borrow(flashBorrowed) == 0);\r\n\r\n        // repay flash loan\r\n        returnFlashLoan(borrowToken, flashBorrowed);\r\n\r\n        CompoundLogger(COMPOUND_LOGGER).LogBoost(user, _data[0], swapAmount, collToken, borrowToken);\r\n    }\r\n\r\n    function depositCollateral(address _collToken, address _cCollToken, uint _swapAmount) internal {\r\n        approveCToken(_collToken, _cCollToken);\r\n\r\n        if (_collToken != ETH_ADDRESS) {\r\n            require(CTokenInterface(_cCollToken).mint(_swapAmount) == 0);\r\n        } else {\r\n            CEtherInterface(_cCollToken).mint.value(_swapAmount)(); // reverts on fail\r\n        }\r\n    }\r\n\r\n    function returnFlashLoan(address _tokenAddr, uint _amount) internal {\r\n        if (_tokenAddr != ETH_ADDRESS) {\r\n            ERC20(_tokenAddr).transfer(COMPOUND_SAVER_FLASH_LOAN, _amount);\r\n        }\r\n\r\n        COMPOUND_SAVER_FLASH_LOAN.transfer(address(this).balance);\r\n    }\r\n\r\n}","ABI":"[{\"constant\":true,\"inputs\":[],\"name\":\"CETH_ADDRESS\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"COMPOUND_LOGGER\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"COMPOUND_ORACLE\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"COMPOUND_SAVER_FLASH_LOAN\",\"outputs\":[{\"internalType\":\"address payable\",\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"COMPTROLLER\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"DAI_ADDRESS\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"DAI_JOIN_ADDRESS\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"DISCOUNT_ADDRESS\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"ERC20_PROXY_0X\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"ETH_ADDRESS\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"ETH_JOIN_ADDRESS\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"GAS_TOKEN_INTERFACE_ADDRESS\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"JUG_ADDRESS\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"KYBER_ETH_ADDRESS\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"LOGGER_ADDRESS\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"MAKER_DAI_ADDRESS\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"MANAGER_ADDRESS\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"MIGRATION_ACTIONS_PROXY\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"MKR_ADDRESS\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"NEW_IDAI_ADDRESS\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"PROXY_ACTIONS\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"SAI_ADDRESS\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"SAVER_EXCHANGE_ADDRESS\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"SCD_MCD_MIGRATION\",\"outputs\":[{\"internalType\":\"address payable\",\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"SERVICE_FEE\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"SPOTTER_ADDRESS\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"VAT_ADDRESS\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"WALLET_ID\",\"outputs\":[{\"internalType\":\"address payable\",\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"WETH_ADDRESS\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"uint256[5]\",\"name\":\"_data\",\"type\":\"uint256[5]\"},{\"internalType\":\"address[3]\",\"name\":\"_addrData\",\"type\":\"address[3]\"},{\"internalType\":\"bytes\",\"name\":\"_callData\",\"type\":\"bytes\"},{\"internalType\":\"uint256[2]\",\"name\":\"_flashLoanData\",\"type\":\"uint256[2]\"}],\"name\":\"flashBoost\",\"outputs\":[],\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"uint256[5]\",\"name\":\"_data\",\"type\":\"uint256[5]\"},{\"internalType\":\"address[3]\",\"name\":\"_addrData\",\"type\":\"address[3]\"},{\"internalType\":\"bytes\",\"name\":\"_callData\",\"type\":\"bytes\"},{\"internalType\":\"uint256[2]\",\"name\":\"_flashLoanData\",\"type\":\"uint256[2]\"}],\"name\":\"flashRepay\",\"outputs\":[],\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"address\",\"name\":\"_cBorrowAddress\",\"type\":\"address\"}],\"name\":\"getMaxBorrow\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"address\",\"name\":\"_cCollAddress\",\"type\":\"address\"}],\"name\":\"getMaxCollateral\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"}]","ContractName":"CompoundFlashSaverProxy","CompilerVersion":"v0.5.17+commit.d19bba13","OptimizationUsed":"1","Runs":"200","ConstructorArguments":"","Library":"","LicenseType":"MIT","SwarmSource":"bzzr://bacae0ce0261132ad83695b1495688aee49755d7cbda5d17c8d7ed3b6c02f2e0"}]}