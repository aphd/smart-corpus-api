{"status":"1","message":"OK","result":[{"SourceCode":"{\"burnable.sol\":{\"content\":\"pragma solidity ^0.5.8;\\r\\n\\r\\nimport \\\"./erc20.sol\\\";\\r\\n\\r\\n/**\\r\\n* @title Burnable Token\\r\\n* @dev Token that can be irreversibly burned (destroyed).\\r\\n*/\\r\\ncontract ERC20Burnable is ERC20 {\\r\\n\\t/**\\r\\n\\t* @dev Burns a specific amount of tokens.\\r\\n\\t* @param value The amount of token to be burned.\\r\\n\\t*/\\r\\n\\tfunction burn(uint256 value) external {\\r\\n\\t\\t_burn(msg.sender, value);\\r\\n\\t}\\r\\n\\r\\n\\t/**\\r\\n\\t* @dev Burns a specific amount of tokens from the target address and decrements allowance.\\r\\n\\t* @param from address The account whose tokens will be burned.\\r\\n\\t* @param value uint256 The amount of token to be burned.\\r\\n\\t*/\\r\\n\\tfunction burnFrom(address from, uint256 value) external {\\r\\n\\t\\t_burnFrom(from, value);\\r\\n\\t}\\r\\n}\\r\\n\"},\"erc20.sol\":{\"content\":\"pragma solidity ^0.5.8;\\r\\n\\r\\nimport \\\"./safemath.sol\\\";\\r\\nimport \\\"./ierc20.sol\\\";\\r\\n\\r\\n/**\\r\\n* @title Standard ERC20 token\\r\\n** @dev Implementation of the basic standard token.\\r\\n* https://eips.ethereum.org/EIPS/eip-20\\r\\n* Originally based on code by FirstBlood:\\r\\n* https://github.com/Firstbloodio/token/blob/master/smart_contract/FirstBloodToken.sol\\r\\n** This implementation emits additional Approval events, allowing applications to reconstruct the allowance status for\\r\\n* all accounts just by listening to said events. Note that this isn\\u0027t required by the specification, and other\\r\\n* compliant implementations may not do it.\\r\\n*/\\r\\ncontract ERC20 is IERC20 {\\r\\n\\tusing SafeMath for uint256;\\r\\n\\r\\n\\tmapping (address =\\u003e uint256) internal _balances;\\r\\n\\r\\n\\tmapping (address =\\u003e mapping (address =\\u003e uint256)) private _allowed;\\r\\n\\r\\n\\tuint256 private _totalSupply;\\r\\n\\r\\n\\t/**\\r\\n\\t* @dev Total number of tokens in existence.\\r\\n\\t*/\\r\\n\\tfunction totalSupply() external view returns (uint256) {\\r\\n\\t\\treturn _totalSupply;\\r\\n\\t}\\r\\n\\r\\n\\t/**\\r\\n\\t* @dev Gets the balance of the specified address.\\r\\n\\t* @param owner The address to query the balance of.\\r\\n\\t* @return A uint256 representing the amount owned by the passed address.\\r\\n\\t*/\\r\\n\\tfunction balanceOf(address owner) external view returns (uint256) {\\r\\n\\t\\treturn _balances[owner];\\r\\n\\t}\\r\\n\\r\\n\\t/**\\r\\n\\t* @dev Function to check the amount of tokens that an owner allowed to a spender.\\r\\n\\t* @param owner address The address which owns the funds.\\r\\n\\t* @param spender address The address which will spend the funds.\\r\\n\\t* @return A uint256 specifying the amount of tokens still available for the spender.\\r\\n\\t*/\\r\\n\\tfunction allowance(address owner, address spender) external view returns (uint256) {\\r\\n\\t\\treturn _allowed[owner][spender];\\r\\n\\t}\\r\\n\\r\\n\\t/**\\r\\n\\t* @dev Transfer token to a specified address.\\r\\n\\t* @param to The address to transfer to.\\r\\n\\t* @param value The amount to be transferred.\\r\\n\\t*/\\r\\n\\tfunction transfer(address to, uint256 value) external returns (bool) {\\r\\n\\t\\t_transfer(msg.sender, to, value);\\r\\n\\t\\treturn true;\\r\\n\\t}\\r\\n\\r\\n\\t/**\\r\\n\\t* @dev Approve the passed address to spend the specified amount of tokens on behalf of msg.sender.\\r\\n\\t* Beware that changing an allowance with this method brings the risk that someone may use both the old\\r\\n\\t* and the new allowance by unfortunate transaction ordering. One possible solution to mitigate this\\r\\n\\t* race condition is to first reduce the spender\\u0027s allowance to 0 and set the desired value afterwards:\\r\\n\\t* https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\r\\n\\t* @param spender The address which will spend the funds.\\r\\n\\t* @param value The amount of tokens to be spent.\\r\\n\\t*/\\r\\n\\tfunction approve(address spender, uint256 value) public returns (bool) {\\r\\n\\t\\t_approve(msg.sender, spender, value);\\r\\n\\t\\treturn true;\\r\\n\\t}\\r\\n\\r\\n\\t/**\\r\\n\\t* @dev Transfer tokens from one address to another.\\r\\n\\t* Note that while this function emits an Approval event, this is not required as per the specification,\\r\\n\\t* and other compliant implementations may not emit the event.\\r\\n\\t* @param from address The address which you want to send tokens from\\r\\n\\t* @param to address The address which you want to transfer to\\r\\n\\t* @param value uint256 the amount of tokens to be transferred\\r\\n\\t*/\\r\\n\\tfunction transferFrom(address from, address to, uint256 value) external returns (bool) {\\r\\n\\t\\t_transfer(from, to, value);\\r\\n\\t\\t_approve(from, msg.sender, _allowed[from][msg.sender].sub(value));\\r\\n\\t\\treturn true;\\r\\n\\t}\\r\\n\\r\\n\\t/**\\r\\n\\t* @dev Increase the amount of tokens that an owner allowed to a spender.\\r\\n\\t* approve should be called when _allowed[msg.sender][spender] == 0. To increment\\r\\n\\t* allowed value is better to use this function to avoid 2 calls (and wait until\\r\\n\\t* the first transaction is mined)\\r\\n\\t* From MonolithDAO Token.sol\\r\\n\\t* Emits an Approval event.\\r\\n\\t* @param spender The address which will spend the funds.\\r\\n\\t* @param addedValue The amount of tokens to increase the allowance by.\\r\\n\\t*/\\r\\n\\tfunction increaseAllowance(address spender, uint256 addedValue) external returns (bool) {\\r\\n\\t\\t_approve(msg.sender, spender, _allowed[msg.sender][spender].add(addedValue));\\r\\n\\t\\treturn true;\\r\\n\\t}\\r\\n\\r\\n\\t/**\\r\\n\\t* @dev Decrease the amount of tokens that an owner allowed to a spender.\\r\\n\\t* approve should be called when _allowed[msg.sender][spender] == 0. To decrement\\r\\n\\t* allowed value is better to use this function to avoid 2 calls (and wait until\\r\\n\\t* the first transaction is mined)\\r\\n\\t* From MonolithDAO Token.sol\\r\\n\\t* Emits an Approval event.\\r\\n\\t* @param spender The address which will spend the funds.\\r\\n\\t* @param subtractedValue The amount of tokens to decrease the allowance by.\\r\\n\\t*/\\r\\n\\tfunction decreaseAllowance(address spender, uint256 subtractedValue) external returns (bool) {\\r\\n\\t\\t_approve(msg.sender, spender, _allowed[msg.sender][spender].sub(subtractedValue));\\r\\n\\t\\treturn true;\\r\\n\\t}\\r\\n\\r\\n\\t/**\\r\\n\\t* @dev Transfer token for a specified addresses.\\r\\n\\t* @param from The address to transfer from.\\r\\n\\t* @param to The address to transfer to.\\r\\n\\t* @param value The amount to be transferred.\\r\\n\\t*/\\r\\n\\tfunction _transfer(address from, address to, uint256 value) internal {\\r\\n\\t\\trequire(to != address(0), \\\"ERC20: transfer to the zero address\\\");\\r\\n        require(_balances[from]\\u003e=value, \\\"ERC20 transfer: not enough tokens\\\");\\r\\n\\t\\t_balances[from] = _balances[from].sub(value);\\r\\n\\t\\t_balances[to] = _balances[to].add(value);\\r\\n\\t\\temit Transfer(from, to, value);\\r\\n\\t}\\r\\n\\r\\n\\t/**\\r\\n\\t* @dev Internal function that mints an amount of the token and assigns it to\\r\\n\\t* an account. This encapsulates the modification of balances such that the\\r\\n\\t* proper events are emitted.\\r\\n\\t* @param account The account that will receive the created tokens.\\r\\n\\t* @param value The amount that will be created.\\r\\n\\t*/\\r\\n\\tfunction _mint(address account, uint256 value) internal {\\r\\n\\t\\trequire(account != address(0), \\\"ERC20: mint to the zero address\\\");\\r\\n\\r\\n\\t\\t_totalSupply = _totalSupply.add(value);\\r\\n\\t\\t_balances[account] = _balances[account].add(value);\\r\\n\\t\\temit Transfer(address(0), account, value);\\r\\n\\t}\\r\\n\\r\\n\\t/**\\r\\n\\t* @dev Internal function that burns an amount of the token of a given\\r\\n\\t* account.\\r\\n\\t* @param account The account whose tokens will be burnt.\\r\\n\\t* @param value The amount that will be burnt.\\r\\n\\t*/\\r\\n\\tfunction _burn(address account, uint256 value) internal {\\r\\n\\t\\trequire(account != address(0), \\\"ERC20: burn from the zero address\\\");\\r\\n\\t\\trequire(_balances[account] \\u003e= value, \\\"Burn: not enough tokens\\\");\\r\\n\\t\\t_totalSupply = _totalSupply.sub(value);\\r\\n\\t\\t_balances[account] = _balances[account].sub(value);\\r\\n\\t\\temit Transfer(account, address(0), value);\\r\\n\\t}\\r\\n\\r\\n\\t/**\\r\\n\\t* @dev Approve an address to spend another addresses\\u0027 tokens.\\r\\n\\t* @param owner The address that owns the tokens.\\r\\n\\t* @param spender The address that will spend the tokens.\\r\\n\\t* @param value The number of tokens that can be spent.\\r\\n\\t*/\\r\\n\\tfunction _approve(address owner, address spender, uint256 value) internal {\\r\\n\\t\\trequire(owner != address(0), \\\"ERC20: approve from the zero address\\\");\\r\\n\\t\\trequire(spender != address(0), \\\"ERC20: approve to the zero address\\\");\\r\\n\\t\\t_allowed[owner][spender] = value;\\r\\n\\t\\temit Approval(owner, spender, value);\\r\\n\\t}\\r\\n\\r\\n\\t/**\\r\\n\\t* @dev Internal function that burns an amount of the token of a given\\r\\n\\t* account, deducting from the sender\\u0027s allowance for said account. Uses the\\r\\n\\t* internal burn function.\\r\\n\\t* Emits an Approval event (reflecting the reduced allowance).\\r\\n\\t* @param account The account whose tokens will be burnt.\\r\\n\\t* @param value The amount that will be burnt.\\r\\n\\t*/\\r\\n\\tfunction _burnFrom(address account, uint256 value) internal {\\r\\n\\t\\trequire(_allowed[account][msg.sender]\\u003e=value, \\\"Burn: allowance too low\\\");\\r\\n\\t\\t_burn(account, value);\\r\\n\\t\\t_approve(account, msg.sender, _allowed[account][msg.sender].sub(value));\\r\\n\\t}\\r\\n}\\r\\n\"},\"ierc20.sol\":{\"content\":\"pragma solidity ^0.5.8;\\r\\n\\r\\n/**\\r\\n* @title ERC20 interface\\r\\n* @dev see https://eips.ethereum.org/EIPS/eip-20\\r\\n*/\\r\\ninterface IERC20 {\\r\\n\\tfunction transfer(address to, uint256 value) external returns (bool);\\r\\n\\r\\n\\tfunction approve(address spender, uint256 value) external returns (bool);\\r\\n\\r\\n\\tfunction transferFrom(address from, address to, uint256 value) external returns (bool);\\r\\n\\r\\n\\tfunction totalSupply() external view returns (uint256);\\r\\n\\r\\n\\tfunction balanceOf(address who) external view returns (uint256);\\r\\n\\r\\n\\tfunction allowance(address owner, address spender) external view returns (uint256);\\r\\n\\r\\n\\tevent Transfer(address indexed from, address indexed to, uint256 value);\\r\\n\\r\\n\\tevent Approval(address indexed owner, address indexed spender, uint256 value);\\r\\n}\\r\\n\"},\"ownable.sol\":{\"content\":\"pragma solidity ^0.5.8;\\r\\n\\r\\n/**\\r\\n* @title Ownable\\r\\n* @dev The Ownable contract has an owner address, and provides basic authorization control\\r\\n* functions, this simplifies the implementation of \\\"user permissions\\\".\\r\\n*/\\r\\ncontract Ownable {\\r\\n\\taddress public owner;\\r\\n\\taddress public newOwner;\\r\\n\\r\\n\\tevent OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\\r\\n\\r\\n\\t/**\\r\\n\\t* @dev Throws if called by any account other than the owner.\\r\\n\\t*/\\r\\n\\tmodifier onlyOwner() {\\r\\n\\t\\trequire(isOwner(), \\\"Ownable: caller is not the owner\\\");\\r\\n\\t\\t_;\\r\\n\\t}\\r\\n\\r\\n\\t/**\\r\\n\\t* @return true if `msg.sender` is the owner of the contract.\\r\\n\\t*/\\r\\n\\tfunction isOwner() public view returns (bool) {\\r\\n\\t\\treturn msg.sender == owner;\\r\\n\\t}\\r\\n\\r\\n\\t/**\\r\\n\\t* @dev Allows the current owner to relinquish control of the contract.\\r\\n\\t* It will not be possible to call the functions with the `onlyOwner`\\r\\n\\t* modifier anymore.\\r\\n\\t* @notice Renouncing ownership will leave the contract without an owner,\\r\\n\\t* thereby removing any functionality that is only available to the owner.\\r\\n\\t*/\\r\\n\\tfunction renounceOwnership() external onlyOwner {\\r\\n\\t\\temit OwnershipTransferred(owner, address(0));\\r\\n\\t\\towner = address(0);\\r\\n\\t}\\r\\n\\r\\n\\t/**\\r\\n\\t* @dev Allows the current owner to transfer control of the contract to a newOwner.\\r\\n\\t* @param _newOwner The address to transfer ownership to.\\r\\n\\t*/\\r\\n\\tfunction transferOwnership(address _newOwner) external onlyOwner {\\r\\n\\t\\tnewOwner = _newOwner;\\r\\n\\t}\\r\\n\\r\\n\\tfunction acceptOwnership() public{\\r\\n\\t\\trequire (newOwner == msg.sender, \\\"Ownable: only new Owner can accept\\\");\\r\\n\\t\\temit OwnershipTransferred(owner, newOwner);\\r\\n\\t\\towner = newOwner;\\r\\n\\t\\tnewOwner = address(0);\\r\\n\\t}\\r\\n}\\r\\n\"},\"safemath.sol\":{\"content\":\"pragma solidity ^0.5.7;\\r\\n\\r\\n/**\\r\\n* @title SafeMath\\r\\n* @dev Unsigned math operations with safety checks that revert on error.\\r\\n*/\\r\\nlibrary SafeMath {\\r\\n\\t/**\\r\\n\\t* @dev Multiplies two unsigned integers, reverts on overflow.\\r\\n\\t*/\\r\\n\\tfunction mul(uint256 a, uint256 b) internal pure returns (uint256) {\\r\\n\\t\\t// Gas optimization: this is cheaper than requiring \\u0027a\\u0027 not being zero, but the\\r\\n\\t\\t// benefit is lost if \\u0027b\\u0027 is also tested.\\r\\n\\t\\t// See: https://github.com/OpenZeppelin/openzeppelin-solidity/pull/522\\r\\n\\t\\tif (a == 0) {\\r\\n\\t\\t\\treturn 0;\\r\\n\\t\\t}\\r\\n\\r\\n\\t\\tuint256 c = a * b;\\r\\n\\t\\trequire(c / a == b, \\\"SafeMath: multiplication overflow\\\");\\r\\n\\r\\n\\t\\treturn c;\\r\\n\\t}\\r\\n\\r\\n\\t/**\\r\\n\\t* @dev Integer division of two unsigned integers truncating the quotient, reverts on division by zero.\\r\\n\\t*/\\r\\n\\tfunction div(uint256 a, uint256 b) internal pure returns (uint256) {\\r\\n\\t\\t// Solidity only automatically asserts when dividing by 0\\r\\n\\t\\trequire(b \\u003e 0, \\\"SafeMath: division by zero\\\");\\r\\n\\t\\tuint256 c = a / b;\\r\\n\\t\\t// assert(a == b * c + a % b); // There is no case in which this doesn\\u0027t hold\\r\\n\\r\\n\\t\\treturn c;\\r\\n\\t}\\r\\n\\r\\n\\t/**\\r\\n\\t* @dev Subtracts two unsigned integers, reverts on overflow (i.e. if subtrahend is greater than minuend).\\r\\n\\t*/\\r\\n\\tfunction sub(uint256 a, uint256 b) internal pure returns (uint256) {\\r\\n\\t\\trequire(b \\u003c= a, \\\"SafeMath: subtraction overflow\\\");\\r\\n\\t\\tuint256 c = a - b;\\r\\n\\r\\n\\t\\treturn c;\\r\\n\\t}\\r\\n\\r\\n\\t/**\\r\\n\\t* @dev Adds two unsigned integers, reverts on overflow.\\r\\n\\t*/\\r\\n\\tfunction add(uint256 a, uint256 b) internal pure returns (uint256) {\\r\\n\\t\\tuint256 c = a + b;\\r\\n\\t\\trequire(c \\u003e= a, \\\"SafeMath: addition overflow\\\");\\r\\n\\r\\n\\t\\treturn c;\\r\\n\\t}\\r\\n\\r\\n\\t/**\\r\\n\\t* @dev Divides two unsigned integers and returns the remainder (unsigned integer modulo),\\r\\n\\t* reverts when dividing by zero.\\r\\n\\t*/\\r\\n\\tfunction mod(uint256 a, uint256 b) internal pure returns (uint256) {\\r\\n\\t\\trequire(b != 0, \\\"SafeMath: modulo by zero\\\");\\r\\n\\t\\treturn a % b;\\r\\n\\t}\\r\\n}\\r\\n\"},\"timelocks.sol\":{\"content\":\"pragma solidity ^0.5.8;\\r\\n\\r\\nimport \\\"./erc20.sol\\\";\\r\\nimport \\\"./ownable.sol\\\";\\r\\n\\r\\ncontract Timelocks is ERC20, Ownable{\\r\\n\\r\\n    uint public lockedBalance;\\r\\n\\r\\n    struct Locker {\\r\\n        uint amount;\\r\\n        uint locktime;\\r\\n    }\\r\\n\\r\\n    mapping(address =\\u003e Locker[]) timeLocks;\\r\\n\\r\\n    /**\\r\\n    * @dev function that lock tokens held by contract. Tokens can be unlocked and send to user after fime pass\\r\\n    * @param lockTimestamp timestamp after whih coins can be unlocked\\r\\n    * @param amount amount of tokens to lock\\r\\n    * @param user address of uset that cn unlock and posess tokens\\r\\n    */\\r\\n    function lock(uint lockTimestamp, uint amount, address user) external onlyOwner {\\r\\n        _lock(lockTimestamp, amount, user);\\r\\n    }\\r\\n\\r\\n\\tfunction _lock(uint lockTimestamp, uint amount, address user) internal{\\r\\n        uint current = _balances[address(this)];\\r\\n        require(amount \\u003c= current.sub(lockedBalance), \\\"Lock: Not enough tokens\\\");\\r\\n        lockedBalance = lockedBalance.add(amount);\\r\\n        timeLocks[user].push(Locker(amount, lockTimestamp));\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Function to unlock timelocked tokens\\r\\n     * If block.timestap passed tokens are sent to owner and lock is removed from database\\r\\n     */\\r\\n    function unlock() external\\r\\n    {\\r\\n        require(timeLocks[msg.sender].length \\u003e 0, \\\"Unlock: No locks!\\\");\\r\\n        Locker[] storage l = timeLocks[msg.sender];\\r\\n        for (uint i = 0; i \\u003c l.length; i++)\\r\\n        {\\r\\n            if (l[i].locktime \\u003c block.timestamp) {\\r\\n                uint amount = l[i].amount;\\r\\n                require(amount \\u003c= lockedBalance \\u0026\\u0026 amount \\u003c= _balances[address(this)], \\\"Unlock: Not enough coins on contract!\\\");\\r\\n                lockedBalance = lockedBalance.sub(amount);\\r\\n                _transfer(address(this), msg.sender, amount);\\r\\n                for (uint j = i; j \\u003c l.length - 1; j++)\\r\\n                {\\r\\n                    l[j] = l[j + 1];\\r\\n                }\\r\\n                l.length--;\\r\\n                i--;\\r\\n            }\\r\\n        }\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Function to check how many locks are on caller account\\r\\n     * We need it because (for now) contract can not retrurn array of structs\\r\\n     * @return number of timelocked locks\\r\\n     */\\r\\n    function locks() external view returns(uint)\\r\\n    {\\r\\n        return _locks(msg.sender);\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Function to check timelocks of any user\\r\\n     * @param user addres of user\\r\\n     * @return nuber of locks\\r\\n     */\\r\\n    function locksOf(address user) external view returns(uint) {\\r\\n        return _locks(user);\\r\\n    }\\r\\n\\r\\n    function _locks(address user) internal view returns(uint){\\r\\n        return timeLocks[user].length;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Function to check given timeLock\\r\\n     * @param num number of timeLock\\r\\n     * @return amount locked\\r\\n     * @return timestamp after whih coins can be unlocked\\r\\n     */\\r\\n    function showLock(uint num) external view returns(uint, uint)\\r\\n    {\\r\\n        return _showLock(msg.sender, num);\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Function to show timeLock of any user\\r\\n     * @param user address of user\\r\\n     * @param num number of lock\\r\\n     * @return amount locked\\r\\n     * @return timestamp after whih can be unlocked\\r\\n     */\\r\\n    function showLockOf(address user, uint num) external view returns(uint, uint) {\\r\\n        return _showLock(user, num);\\r\\n    }\\r\\n\\r\\n    function _showLock(address user, uint num) internal view returns(uint, uint) {\\r\\n        require(timeLocks[user].length \\u003e 0, \\\"ShowLock: No locks!\\\");\\r\\n        require(num \\u003c timeLocks[user].length, \\\"ShowLock: Index over number of locks.\\\");\\r\\n        Locker[] storage l = timeLocks[user];\\r\\n        return (l[num].amount, l[num].locktime);\\r\\n    }\\r\\n}\\r\\n\"},\"wolfs.sol\":{\"content\":\"pragma solidity ^0.5.8;\\r\\n\\r\\nimport \\\"./ierc20.sol\\\";\\r\\nimport \\\"./safemath.sol\\\";\\r\\nimport \\\"./erc20.sol\\\";\\r\\nimport \\\"./burnable.sol\\\";\\r\\nimport \\\"./ownable.sol\\\";\\r\\nimport \\\"./timelocks.sol\\\";\\r\\n\\r\\ncontract ContractFallbacks {\\r\\n    function receiveApproval(address from, uint256 _amount, address _token, bytes memory _data) public;\\r\\n\\tfunction onTokenTransfer(address from, uint256 amount, bytes memory data) public returns (bool success);\\r\\n}\\r\\n\\r\\ncontract Wolfs is IERC20, ERC20, ERC20Burnable, Ownable, Timelocks {\\r\\n\\tusing SafeMath for uint256;\\r\\n\\r\\n\\tstring public name;\\r\\n\\tstring public symbol;\\r\\n\\tuint8 public decimals;\\r\\n\\r\\n\\t/**\\r\\n\\t*\\t@dev Token constructor\\r\\n\\t*/\\r\\n\\tconstructor () public {\\r\\n\\t\\tname = \\\"Wolfs Group AG\\\";\\r\\n\\t\\tsymbol = \\\"WLF\\\";\\r\\n\\t\\tdecimals = 0;\\r\\n\\r\\n\\t\\towner = 0x7fd429DBb710674614A35e967788Fa3e23A5c1C9;\\r\\n\\t\\temit OwnershipTransferred(address(0), owner);\\r\\n\\r\\n\\t\\t_mint(0xc7eEef150818b5D3301cc93a965195F449603805, 15000000);\\r\\n\\t\\t_mint(0x7fd429DBb710674614A35e967788Fa3e23A5c1C9, 135000000);\\r\\n\\t}\\r\\n\\r\\n\\t/**\\r\\n\\t * @dev function that allow to approve for transfer and call contract in one transaction\\r\\n\\t * @param _spender contract address\\r\\n\\t * @param _amount amount of tokens\\r\\n\\t * @param _extraData optional encoded data to send to contract\\r\\n\\t * @return True if function call was succesfull\\r\\n\\t */\\r\\n    function approveAndCall(address _spender, uint256 _amount, bytes calldata _extraData) external returns (bool success)\\r\\n\\t{\\r\\n        require(approve(_spender, _amount), \\\"ERC20: Approve unsuccesfull\\\");\\r\\n        ContractFallbacks(_spender).receiveApproval(msg.sender, _amount, address(this), _extraData);\\r\\n        return true;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev function that transer tokens to diven address and call function on that address\\r\\n     * @param _to address to send tokens and call\\r\\n     * @param _value amount of tokens\\r\\n     * @param _data optional extra data to process in calling contract\\r\\n     * @return success True if all succedd\\r\\n     */\\r\\n\\tfunction transferAndCall(address _to, uint _value, bytes calldata _data) external returns (bool success)\\r\\n  \\t{\\r\\n  \\t    _transfer(msg.sender, _to, _value);\\r\\n\\t\\tContractFallbacks(_to).onTokenTransfer(msg.sender, _value, _data);\\r\\n\\t\\treturn true;\\r\\n  \\t}\\r\\n\\r\\n}\\r\\n\"}}","ABI":"[{\"constant\":true,\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"spender\",\"type\":\"address\"},{\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"num\",\"type\":\"uint256\"}],\"name\":\"showLock\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"},{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"from\",\"type\":\"address\"},{\"name\":\"to\",\"type\":\"address\"},{\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"decimals\",\"outputs\":[{\"name\":\"\",\"type\":\"uint8\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"spender\",\"type\":\"address\"},{\"name\":\"addedValue\",\"type\":\"uint256\"}],\"name\":\"increaseAllowance\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_to\",\"type\":\"address\"},{\"name\":\"_value\",\"type\":\"uint256\"},{\"name\":\"_data\",\"type\":\"bytes\"}],\"name\":\"transferAndCall\",\"outputs\":[{\"name\":\"success\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"burn\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"owner\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"acceptOwnership\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"from\",\"type\":\"address\"},{\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"burnFrom\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"lockedBalance\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"isOwner\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"spender\",\"type\":\"address\"},{\"name\":\"subtractedValue\",\"type\":\"uint256\"}],\"name\":\"decreaseAllowance\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"unlock\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"to\",\"type\":\"address\"},{\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"user\",\"type\":\"address\"}],\"name\":\"locksOf\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_spender\",\"type\":\"address\"},{\"name\":\"_amount\",\"type\":\"uint256\"},{\"name\":\"_extraData\",\"type\":\"bytes\"}],\"name\":\"approveAndCall\",\"outputs\":[{\"name\":\"success\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"lockTimestamp\",\"type\":\"uint256\"},{\"name\":\"amount\",\"type\":\"uint256\"},{\"name\":\"user\",\"type\":\"address\"}],\"name\":\"lock\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"newOwner\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"owner\",\"type\":\"address\"},{\"name\":\"spender\",\"type\":\"address\"}],\"name\":\"allowance\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"locks\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"user\",\"type\":\"address\"},{\"name\":\"num\",\"type\":\"uint256\"}],\"name\":\"showLockOf\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"},{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"spender\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"}]","ContractName":"Wolfs","CompilerVersion":"v0.5.8+commit.23d335f2","OptimizationUsed":"0","Runs":"200","ConstructorArguments":"","Library":"","LicenseType":"MIT","SwarmSource":"bzzr://de6e4dbb2f3d53693e4c4aa7917ff95e64aba8eeea466344150679a3ca51b75d"}]}