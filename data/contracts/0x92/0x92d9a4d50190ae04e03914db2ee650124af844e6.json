{"status":"1","message":"OK","result":[{"SourceCode":"pragma solidity ^0.5.5;\r\npragma experimental ABIEncoderV2;\r\n\r\ncontract SafeMath {\r\n\r\n    function safeMul(uint256 a, uint256 b)\r\n        internal\r\n        pure\r\n        returns (uint256)\r\n    {\r\n        if (a == 0) {\r\n            return 0;\r\n        }\r\n        uint256 c = a * b;\r\n        require(\r\n            c / a == b,\r\n            \"UINT256_OVERFLOW\"\r\n        );\r\n        return c;\r\n    }\r\n\r\n    function safeDiv(uint256 a, uint256 b)\r\n        internal\r\n        pure\r\n        returns (uint256)\r\n    {\r\n        uint256 c = a / b;\r\n        return c;\r\n    }\r\n\r\n    function safeSub(uint256 a, uint256 b)\r\n        internal\r\n        pure\r\n        returns (uint256)\r\n    {\r\n        require(\r\n            b <= a,\r\n            \"UINT256_UNDERFLOW\"\r\n        );\r\n        return a - b;\r\n    }\r\n\r\n    function safeAdd(uint256 a, uint256 b)\r\n        internal\r\n        pure\r\n        returns (uint256)\r\n    {\r\n        uint256 c = a + b;\r\n        require(\r\n            c >= a,\r\n            \"UINT256_OVERFLOW\"\r\n        );\r\n        return c;\r\n    }\r\n\r\n    function max64(uint64 a, uint64 b)\r\n        internal\r\n        pure\r\n        returns (uint256)\r\n    {\r\n        return a >= b ? a : b;\r\n    }\r\n\r\n    function min64(uint64 a, uint64 b)\r\n        internal\r\n        pure\r\n        returns (uint256)\r\n    {\r\n        return a < b ? a : b;\r\n    }\r\n\r\n    function max256(uint256 a, uint256 b)\r\n        internal\r\n        pure\r\n        returns (uint256)\r\n    {\r\n        return a >= b ? a : b;\r\n    }\r\n\r\n    function min256(uint256 a, uint256 b)\r\n        internal\r\n        pure\r\n        returns (uint256)\r\n    {\r\n        return a < b ? a : b;\r\n    }\r\n}\r\n\r\ncontract LibMath is\r\n    SafeMath\r\n{\r\n    /// @dev Calculates partial value given a numerator and denominator rounded down.\r\n    ///      Reverts if rounding error is >= 0.1%\r\n    /// @param numerator Numerator.\r\n    /// @param denominator Denominator.\r\n    /// @param target Value to calculate partial of.\r\n    /// @return Partial value of target rounded down.\r\n    function safeGetPartialAmountFloor(\r\n        uint256 numerator,\r\n        uint256 denominator,\r\n        uint256 target\r\n    )\r\n        internal\r\n        pure\r\n        returns (uint256 partialAmount)\r\n    {\r\n        require(\r\n            denominator > 0,\r\n            \"DIVISION_BY_ZERO\"\r\n        );\r\n\r\n        require(\r\n            !isRoundingErrorFloor(\r\n                numerator,\r\n                denominator,\r\n                target\r\n            ),\r\n            \"ROUNDING_ERROR\"\r\n        );\r\n        \r\n        partialAmount = safeDiv(\r\n            safeMul(numerator, target),\r\n            denominator\r\n        );\r\n        return partialAmount;\r\n    }\r\n\r\n    /// @dev Calculates partial value given a numerator and denominator rounded down.\r\n    ///      Reverts if rounding error is >= 0.1%\r\n    /// @param numerator Numerator.\r\n    /// @param denominator Denominator.\r\n    /// @param target Value to calculate partial of.\r\n    /// @return Partial value of target rounded up.\r\n    function safeGetPartialAmountCeil(\r\n        uint256 numerator,\r\n        uint256 denominator,\r\n        uint256 target\r\n    )\r\n        internal\r\n        pure\r\n        returns (uint256 partialAmount)\r\n    {\r\n        require(\r\n            denominator > 0,\r\n            \"DIVISION_BY_ZERO\"\r\n        );\r\n\r\n        require(\r\n            !isRoundingErrorCeil(\r\n                numerator,\r\n                denominator,\r\n                target\r\n            ),\r\n            \"ROUNDING_ERROR\"\r\n        );\r\n        \r\n        // safeDiv computes `floor(a / b)`. We use the identity (a, b integer):\r\n        //       ceil(a / b) = floor((a + b - 1) / b)\r\n        // To implement `ceil(a / b)` using safeDiv.\r\n        partialAmount = safeDiv(\r\n            safeAdd(\r\n                safeMul(numerator, target),\r\n                safeSub(denominator, 1)\r\n            ),\r\n            denominator\r\n        );\r\n        return partialAmount;\r\n    }\r\n\r\n    /// @dev Calculates partial value given a numerator and denominator rounded down.\r\n    /// @param numerator Numerator.\r\n    /// @param denominator Denominator.\r\n    /// @param target Value to calculate partial of.\r\n    /// @return Partial value of target rounded down.\r\n    function getPartialAmountFloor(\r\n        uint256 numerator,\r\n        uint256 denominator,\r\n        uint256 target\r\n    )\r\n        internal\r\n        pure\r\n        returns (uint256 partialAmount)\r\n    {\r\n        require(\r\n            denominator > 0,\r\n            \"DIVISION_BY_ZERO\"\r\n        );\r\n\r\n        partialAmount = safeDiv(\r\n            safeMul(numerator, target),\r\n            denominator\r\n        );\r\n        return partialAmount;\r\n    }\r\n    \r\n    /// @dev Calculates partial value given a numerator and denominator rounded down.\r\n    /// @param numerator Numerator.\r\n    /// @param denominator Denominator.\r\n    /// @param target Value to calculate partial of.\r\n    /// @return Partial value of target rounded up.\r\n    function getPartialAmountCeil(\r\n        uint256 numerator,\r\n        uint256 denominator,\r\n        uint256 target\r\n    )\r\n        internal\r\n        pure\r\n        returns (uint256 partialAmount)\r\n    {\r\n        require(\r\n            denominator > 0,\r\n            \"DIVISION_BY_ZERO\"\r\n        );\r\n\r\n        // safeDiv computes `floor(a / b)`. We use the identity (a, b integer):\r\n        //       ceil(a / b) = floor((a + b - 1) / b)\r\n        // To implement `ceil(a / b)` using safeDiv.\r\n        partialAmount = safeDiv(\r\n            safeAdd(\r\n                safeMul(numerator, target),\r\n                safeSub(denominator, 1)\r\n            ),\r\n            denominator\r\n        );\r\n        return partialAmount;\r\n    }\r\n    \r\n    /// @dev Checks if rounding error >= 0.1% when rounding down.\r\n    /// @param numerator Numerator.\r\n    /// @param denominator Denominator.\r\n    /// @param target Value to multiply with numerator/denominator.\r\n    /// @return Rounding error is present.\r\n    function isRoundingErrorFloor(\r\n        uint256 numerator,\r\n        uint256 denominator,\r\n        uint256 target\r\n    )\r\n        internal\r\n        pure\r\n        returns (bool isError)\r\n    {\r\n        require(\r\n            denominator > 0,\r\n            \"DIVISION_BY_ZERO\"\r\n        );\r\n        \r\n        // The absolute rounding error is the difference between the rounded\r\n        // value and the ideal value. The relative rounding error is the\r\n        // absolute rounding error divided by the absolute value of the\r\n        // ideal value. This is undefined when the ideal value is zero.\r\n        //\r\n        // The ideal value is `numerator * target / denominator`.\r\n        // Let's call `numerator * target % denominator` the remainder.\r\n        // The absolute error is `remainder / denominator`.\r\n        //\r\n        // When the ideal value is zero, we require the absolute error to\r\n        // be zero. Fortunately, this is always the case. The ideal value is\r\n        // zero iff `numerator == 0` and/or `target == 0`. In this case the\r\n        // remainder and absolute error are also zero. \r\n        if (target == 0 || numerator == 0) {\r\n            return false;\r\n        }\r\n        \r\n        // Otherwise, we want the relative rounding error to be strictly\r\n        // less than 0.1%.\r\n        // The relative error is `remainder / (numerator * target)`.\r\n        // We want the relative error less than 1 / 1000:\r\n        //        remainder / (numerator * denominator)  <  1 / 1000\r\n        // or equivalently:\r\n        //        1000 * remainder  <  numerator * target\r\n        // so we have a rounding error iff:\r\n        //        1000 * remainder  >=  numerator * target\r\n        uint256 remainder = mulmod(\r\n            target,\r\n            numerator,\r\n            denominator\r\n        );\r\n        isError = safeMul(1000, remainder) >= safeMul(numerator, target);\r\n        return isError;\r\n    }\r\n    \r\n    /// @dev Checks if rounding error >= 0.1% when rounding up.\r\n    /// @param numerator Numerator.\r\n    /// @param denominator Denominator.\r\n    /// @param target Value to multiply with numerator/denominator.\r\n    /// @return Rounding error is present.\r\n    function isRoundingErrorCeil(\r\n        uint256 numerator,\r\n        uint256 denominator,\r\n        uint256 target\r\n    )\r\n        internal\r\n        pure\r\n        returns (bool isError)\r\n    {\r\n        require(\r\n            denominator > 0,\r\n            \"DIVISION_BY_ZERO\"\r\n        );\r\n        \r\n        // See the comments in `isRoundingError`.\r\n        if (target == 0 || numerator == 0) {\r\n            // When either is zero, the ideal value and rounded value are zero\r\n            // and there is no rounding error. (Although the relative error\r\n            // is undefined.)\r\n            return false;\r\n        }\r\n        // Compute remainder as before\r\n        uint256 remainder = mulmod(\r\n            target,\r\n            numerator,\r\n            denominator\r\n        );\r\n        remainder = safeSub(denominator, remainder) % denominator;\r\n        isError = safeMul(1000, remainder) >= safeMul(numerator, target);\r\n        return isError;\r\n    }\r\n}\r\n\r\n\r\ncontract IExchangeCore {\r\n\r\n    /// @dev Cancels all orders created by makerAddress with a salt less than or equal to the targetOrderEpoch\r\n    ///      and senderAddress equal to msg.sender (or null address if msg.sender == makerAddress).\r\n    /// @param targetOrderEpoch Orders created with a salt less or equal to this value will be cancelled.\r\n    function cancelOrdersUpTo(uint256 targetOrderEpoch)\r\n        external;\r\n\r\n    /// @dev Fills the input order.\r\n    /// @param order Order struct containing order specifications.\r\n    /// @param takerAssetFillAmount Desired amount of takerAsset to sell.\r\n    /// @param signature Proof that order has been created by maker.\r\n    /// @return Amounts filled and fees paid by maker and taker.\r\n    function fillOrder(\r\n        LibOrder.Order memory order,\r\n        uint256 takerAssetFillAmount,\r\n        bytes memory signature\r\n    )\r\n        public\r\n        returns (LibFillResults.FillResults memory fillResults);\r\n\r\n    /// @dev After calling, the order can not be filled anymore.\r\n    /// @param order Order struct containing order specifications.\r\n    function cancelOrder(LibOrder.Order memory order)\r\n        public;\r\n\r\n    /// @dev Gets information about an order: status, hash, and amount filled.\r\n    /// @param order Order to gather information on.\r\n    /// @return OrderInfo Information about the order and its state.\r\n    ///                   See LibOrder.OrderInfo for a complete description.\r\n    function getOrderInfo(LibOrder.Order memory order)\r\n        public\r\n        view\r\n        returns (LibOrder.OrderInfo memory orderInfo);\r\n}\r\n\r\ncontract IMatchOrders {\r\n\r\n    /// @dev Match two complementary orders that have a profitable spread.\r\n    ///      Each order is filled at their respective price point. However, the calculations are\r\n    ///      carried out as though the orders are both being filled at the right order's price point.\r\n    ///      The profit made by the left order goes to the taker (who matched the two orders).\r\n    /// @param leftOrder First order to match.\r\n    /// @param rightOrder Second order to match.\r\n    /// @param leftSignature Proof that order was created by the left maker.\r\n    /// @param rightSignature Proof that order was created by the right maker.\r\n    /// @return matchedFillResults Amounts filled and fees paid by maker and taker of matched orders.\r\n    function matchOrders(\r\n        LibOrder.Order memory leftOrder,\r\n        LibOrder.Order memory rightOrder,\r\n        bytes memory leftSignature,\r\n        bytes memory rightSignature\r\n    )\r\n        public\r\n        returns (LibFillResults.MatchedFillResults memory matchedFillResults);\r\n}\r\n\r\ncontract ISignatureValidator {\r\n\r\n    /// @dev Approves a hash on-chain using any valid signature type.\r\n    ///      After presigning a hash, the preSign signature type will become valid for that hash and signer.\r\n    /// @param signerAddress Address that should have signed the given hash.\r\n    /// @param signature Proof that the hash has been signed by signer.\r\n    function preSign(\r\n        bytes32 hash,\r\n        address signerAddress,\r\n        bytes calldata signature\r\n    )\r\n        external;\r\n    \r\n    /// @dev Approves/unnapproves a Validator contract to verify signatures on signer's behalf.\r\n    /// @param validatorAddress Address of Validator contract.\r\n    /// @param approval Approval or disapproval of  Validator contract.\r\n    function setSignatureValidatorApproval(\r\n        address validatorAddress,\r\n        bool approval\r\n    )\r\n        external;\r\n\r\n    /// @dev Verifies that a signature is valid.\r\n    /// @param hash Message hash that is signed.\r\n    /// @param signerAddress Address of signer.\r\n    /// @param signature Proof of signing.\r\n    /// @return Validity of order signature.\r\n    function isValidSignature(\r\n        bytes32 hash,\r\n        address signerAddress,\r\n        bytes memory signature\r\n    )\r\n        public\r\n        view\r\n        returns (bool isValid);\r\n}\r\n\r\ncontract ITransactions {\r\n\r\n    /// @dev Executes an exchange method call in the context of signer.\r\n    /// @param salt Arbitrary number to ensure uniqueness of transaction hash.\r\n    /// @param signerAddress Address of transaction signer.\r\n    /// @param data AbiV2 encoded calldata.\r\n    /// @param signature Proof of signer transaction by signer.\r\n    function executeTransaction(\r\n        uint256 salt,\r\n        address signerAddress,\r\n        bytes calldata data,\r\n        bytes calldata signature\r\n    )\r\n        external;\r\n}\r\n\r\ncontract IAssetProxyDispatcher {\r\n\r\n    /// @dev Registers an asset proxy to its asset proxy id.\r\n    ///      Once an asset proxy is registered, it cannot be unregistered.\r\n    /// @param assetProxy Address of new asset proxy to register.\r\n    function registerAssetProxy(address assetProxy)\r\n        external;\r\n\r\n    /// @dev Gets an asset proxy.\r\n    /// @param assetProxyId Id of the asset proxy.\r\n    /// @return The asset proxy registered to assetProxyId. Returns 0x0 if no proxy is registered.\r\n    function getAssetProxy(bytes4 assetProxyId)\r\n        external\r\n        view\r\n        returns (address);\r\n}\r\n\r\n\r\n\r\n\r\n\r\ncontract LibFillResults is\r\n    SafeMath\r\n{\r\n    struct FillResults {\r\n        uint256 makerAssetFilledAmount;  // Total amount of makerAsset(s) filled.\r\n        uint256 takerAssetFilledAmount;  // Total amount of takerAsset(s) filled.\r\n        uint256 makerFeePaid;            // Total amount of ZRX paid by maker(s) to feeRecipient(s).\r\n        uint256 takerFeePaid;            // Total amount of ZRX paid by taker to feeRecipients(s).\r\n    }\r\n\r\n    struct MatchedFillResults {\r\n        FillResults left;                    // Amounts filled and fees paid of left order.\r\n        FillResults right;                   // Amounts filled and fees paid of right order.\r\n        uint256 leftMakerAssetSpreadAmount;  // Spread between price of left and right order, denominated in the left order's makerAsset, paid to taker.\r\n    }\r\n\r\n    /// @dev Adds properties of both FillResults instances.\r\n    ///      Modifies the first FillResults instance specified.\r\n    /// @param totalFillResults Fill results instance that will be added onto.\r\n    /// @param singleFillResults Fill results instance that will be added to totalFillResults.\r\n    function addFillResults(FillResults memory totalFillResults, FillResults memory singleFillResults)\r\n        internal\r\n        pure\r\n    {\r\n        totalFillResults.makerAssetFilledAmount = safeAdd(totalFillResults.makerAssetFilledAmount, singleFillResults.makerAssetFilledAmount);\r\n        totalFillResults.takerAssetFilledAmount = safeAdd(totalFillResults.takerAssetFilledAmount, singleFillResults.takerAssetFilledAmount);\r\n        totalFillResults.makerFeePaid = safeAdd(totalFillResults.makerFeePaid, singleFillResults.makerFeePaid);\r\n        totalFillResults.takerFeePaid = safeAdd(totalFillResults.takerFeePaid, singleFillResults.takerFeePaid);\r\n    }\r\n}\r\n\r\n\r\ncontract IWrapperFunctions {\r\n\r\n    /// @dev Fills the input order. Reverts if exact takerAssetFillAmount not filled.\r\n    /// @param order LibOrder.Order struct containing order specifications.\r\n    /// @param takerAssetFillAmount Desired amount of takerAsset to sell.\r\n    /// @param signature Proof that order has been created by maker.\r\n    function fillOrKillOrder(\r\n        LibOrder.Order memory order,\r\n        uint256 takerAssetFillAmount,\r\n        bytes memory signature\r\n    )\r\n        public\r\n        returns (LibFillResults.FillResults memory fillResults);\r\n\r\n    /// @dev Fills an order with specified parameters and ECDSA signature.\r\n    ///      Returns false if the transaction would otherwise revert.\r\n    /// @param order LibOrder.Order struct containing order specifications.\r\n    /// @param takerAssetFillAmount Desired amount of takerAsset to sell.\r\n    /// @param signature Proof that order has been created by maker.\r\n    /// @return Amounts filled and fees paid by maker and taker.\r\n    function fillOrderNoThrow(\r\n        LibOrder.Order memory order,\r\n        uint256 takerAssetFillAmount,\r\n        bytes memory signature\r\n    )\r\n        public\r\n        returns (LibFillResults.FillResults memory fillResults);\r\n\r\n    /// @dev Synchronously executes multiple calls of fillOrder.\r\n    /// @param orders Array of order specifications.\r\n    /// @param takerAssetFillAmounts Array of desired amounts of takerAsset to sell in orders.\r\n    /// @param signatures Proofs that orders have been created by makers.\r\n    /// @return Amounts filled and fees paid by makers and taker.\r\n    function batchFillOrders(\r\n        LibOrder.Order[] memory orders,\r\n        uint256[] memory takerAssetFillAmounts,\r\n        bytes[] memory signatures\r\n    )\r\n        public\r\n        returns (LibFillResults.FillResults memory totalFillResults);\r\n\r\n    /// @dev Synchronously executes multiple calls of fillOrKill.\r\n    /// @param orders Array of order specifications.\r\n    /// @param takerAssetFillAmounts Array of desired amounts of takerAsset to sell in orders.\r\n    /// @param signatures Proofs that orders have been created by makers.\r\n    /// @return Amounts filled and fees paid by makers and taker.\r\n    function batchFillOrKillOrders(\r\n        LibOrder.Order[] memory orders,\r\n        uint256[] memory takerAssetFillAmounts,\r\n        bytes[] memory signatures\r\n    )\r\n        public\r\n        returns (LibFillResults.FillResults memory totalFillResults);\r\n\r\n    /// @dev Fills an order with specified parameters and ECDSA signature.\r\n    ///      Returns false if the transaction would otherwise revert.\r\n    /// @param orders Array of order specifications.\r\n    /// @param takerAssetFillAmounts Array of desired amounts of takerAsset to sell in orders.\r\n    /// @param signatures Proofs that orders have been created by makers.\r\n    /// @return Amounts filled and fees paid by makers and taker.\r\n    function batchFillOrdersNoThrow(\r\n        LibOrder.Order[] memory orders,\r\n        uint256[] memory takerAssetFillAmounts,\r\n        bytes[] memory signatures\r\n    )\r\n        public\r\n        returns (LibFillResults.FillResults memory totalFillResults);\r\n\r\n    /// @dev Synchronously executes multiple calls of fillOrder until total amount of takerAsset is sold by taker.\r\n    /// @param orders Array of order specifications.\r\n    /// @param takerAssetFillAmount Desired amount of takerAsset to sell.\r\n    /// @param signatures Proofs that orders have been created by makers.\r\n    /// @return Amounts filled and fees paid by makers and taker.\r\n    function marketSellOrders(\r\n        LibOrder.Order[] memory orders,\r\n        uint256 takerAssetFillAmount,\r\n        bytes[] memory signatures\r\n    )\r\n        public\r\n        returns (LibFillResults.FillResults memory totalFillResults);\r\n\r\n    /// @dev Synchronously executes multiple calls of fillOrder until total amount of takerAsset is sold by taker.\r\n    ///      Returns false if the transaction would otherwise revert.\r\n    /// @param orders Array of order specifications.\r\n    /// @param takerAssetFillAmount Desired amount of takerAsset to sell.\r\n    /// @param signatures Proofs that orders have been signed by makers.\r\n    /// @return Amounts filled and fees paid by makers and taker.\r\n    function marketSellOrdersNoThrow(\r\n        LibOrder.Order[] memory orders,\r\n        uint256 takerAssetFillAmount,\r\n        bytes[] memory signatures\r\n    )\r\n        public\r\n        returns (LibFillResults.FillResults memory totalFillResults);\r\n\r\n    /// @dev Synchronously executes multiple calls of fillOrder until total amount of makerAsset is bought by taker.\r\n    /// @param orders Array of order specifications.\r\n    /// @param makerAssetFillAmount Desired amount of makerAsset to buy.\r\n    /// @param signatures Proofs that orders have been signed by makers.\r\n    /// @return Amounts filled and fees paid by makers and taker.\r\n    function marketBuyOrders(\r\n        LibOrder.Order[] memory orders,\r\n        uint256 makerAssetFillAmount,\r\n        bytes[] memory signatures\r\n    )\r\n        public\r\n        returns (LibFillResults.FillResults memory totalFillResults);\r\n\r\n    /// @dev Synchronously executes multiple fill orders in a single transaction until total amount is bought by taker.\r\n    ///      Returns false if the transaction would otherwise revert.\r\n    /// @param orders Array of order specifications.\r\n    /// @param makerAssetFillAmount Desired amount of makerAsset to buy.\r\n    /// @param signatures Proofs that orders have been signed by makers.\r\n    /// @return Amounts filled and fees paid by makers and taker.\r\n    function marketBuyOrdersNoThrow(\r\n        LibOrder.Order[] memory orders,\r\n        uint256 makerAssetFillAmount,\r\n        bytes[] memory signatures\r\n    )\r\n        public\r\n        returns (LibFillResults.FillResults memory totalFillResults);\r\n\r\n    /// @dev Synchronously cancels multiple orders in a single transaction.\r\n    /// @param orders Array of order specifications.\r\n    function batchCancelOrders(LibOrder.Order[] memory orders)\r\n        public;\r\n\r\n    /// @dev Fetches information for all passed in orders\r\n    /// @param orders Array of order specifications.\r\n    /// @return Array of OrderInfo instances that correspond to each order.\r\n    function getOrdersInfo(LibOrder.Order[] memory orders)\r\n        public\r\n        view\r\n        returns (LibOrder.OrderInfo[] memory);\r\n}\r\n\r\n\r\n// solhint-disable no-empty-blocks\r\ncontract IExchange is\r\n    IExchangeCore,\r\n    IMatchOrders,\r\n    ISignatureValidator,\r\n    ITransactions,\r\n    IAssetProxyDispatcher,\r\n    IWrapperFunctions\r\n{}\r\n\r\ncontract LibAssetProxyIds {\r\n\r\n    // AssetProxy Ids are equiavalent the first 4 bytes of the keccak256 hash of the function signature assigned to each AssetProxy.\r\n\r\n    // ERC20Token(address)\r\n    bytes4 constant public ERC20_PROXY_ID = 0xf47261b0;\r\n\r\n    // ERC721Token(address,uint256)\r\n    bytes4 constant public ERC721_PROXY_ID = 0x02571792;\r\n\r\n    // ERC1155Assets(address,uint256[],uint256[],bytes)\r\n    bytes4 constant public ERC1155_PROXY_ID = 0xa7cb5fb7;\r\n\r\n    // MultiAsset(uint256[],bytes[])\r\n    bytes4 constant public MULTI_ASSET_PROXY_ID = 0x94cfcdd7;\r\n\r\n    // StaticCall(address,bytes,bytes32)\r\n    bytes4 constant public STATIC_CALL_PROXY_ID = 0xc339d10a;\r\n}\r\n\r\n\r\ncontract LibAssetData is\r\n    LibAssetProxyIds\r\n{\r\n    // 2^256 - 1\r\n    uint256 constant internal _MAX_UINT256 = uint256(-1);\r\n\r\n    // ERC20 selectors\r\n    bytes4 constant internal _ERC20_BALANCE_OF_SELECTOR = 0x70a08231;\r\n    bytes4 constant internal _ERC20_ALLOWANCE_SELECTOR = 0xdd62ed3e;\r\n\r\n    // ERC721 selectors\r\n    bytes4 constant internal _ERC721_OWNER_OF_SELECTOR = 0x6352211e;\r\n    bytes4 constant internal _ERC721_IS_APPROVED_FOR_ALL_SELECTOR = 0xe985e9c5;\r\n    bytes4 constant internal _ERC721_GET_APPROVED_SELECTOR = 0x081812fc;\r\n\r\n    // ERC1155 selectors\r\n    bytes4 constant internal _ERC1155_BALANCE_OF_SELECTOR = 0x00fdd58e;\r\n    bytes4 constant internal _ERC1155_IS_APPROVED_FOR_ALL_SELECTOR = 0xe985e9c5;\r\n\r\n    // `transferFrom` selector for all AssetProxy contracts\r\n    bytes4 constant internal _ASSET_PROXY_TRANSFER_FROM_SELECTOR = 0xa85e59e4;\r\n\r\n    using LibBytes for bytes;\r\n\r\n    // solhint-disable var-name-mixedcase\r\n    IExchange internal _EXCHANGE;\r\n    address internal _ERC20_PROXY_ADDRESS;\r\n    address internal _ERC721_PROXY_ADDRESS;\r\n    address internal _ERC1155_PROXY_ADDRESS;\r\n    address internal _STATIC_CALL_PROXY_ADDRESS;\r\n    // solhint-enable var-name-mixedcase\r\n\r\n    constructor (address _exchange)\r\n        public\r\n    {\r\n        _EXCHANGE = IExchange(_exchange);\r\n        _ERC20_PROXY_ADDRESS = _EXCHANGE.getAssetProxy(ERC20_PROXY_ID);\r\n        _ERC721_PROXY_ADDRESS = _EXCHANGE.getAssetProxy(ERC721_PROXY_ID);\r\n        _ERC1155_PROXY_ADDRESS = _EXCHANGE.getAssetProxy(ERC1155_PROXY_ID);\r\n        _STATIC_CALL_PROXY_ADDRESS = _EXCHANGE.getAssetProxy(STATIC_CALL_PROXY_ID);\r\n    }\r\n\r\n    /// @dev Returns the owner's balance of the assets(s) specified in\r\n    /// assetData.  When the asset data contains multiple assets (eg in\r\n    /// ERC1155 or Multi-Asset), the return value indicates how many\r\n    /// complete \"baskets\" of those assets are owned by owner.\r\n    /// @param ownerAddress Owner of the assets specified by assetData.\r\n    /// @param assetData Details of asset, encoded per the AssetProxy contract specification.\r\n    /// @return Number of assets (or asset baskets) held by owner.\r\n    function getBalance(address ownerAddress, bytes memory assetData)\r\n        public\r\n        view\r\n        returns (uint256 balance)\r\n    {\r\n        // Get id of AssetProxy contract\r\n        bytes4 assetProxyId = assetData.readBytes4(0);\r\n\r\n        if (assetProxyId == ERC20_PROXY_ID) {\r\n            // Get ERC20 token address\r\n            address tokenAddress = assetData.readAddress(16);\r\n\r\n            // Encode data for `balanceOf(ownerAddress)`\r\n            bytes memory balanceOfData = abi.encodeWithSelector(_ERC20_BALANCE_OF_SELECTOR, ownerAddress);\r\n\r\n            // Query balance\r\n            (bool success, bytes memory returnData) = tokenAddress.staticcall(balanceOfData);\r\n            balance = success && returnData.length == 32 ? returnData.readUint256(0) : 0;\r\n        } else if (assetProxyId == ERC721_PROXY_ID) {\r\n            // Get ERC721 token address and id\r\n            (, address tokenAddress, uint256 tokenId) = decodeERC721AssetData(assetData);\r\n\r\n            // Check if id is owned by ownerAddress\r\n            balance = getERC721TokenOwner(tokenAddress, tokenId) == ownerAddress ? 1 : 0;\r\n        } else if (assetProxyId == ERC1155_PROXY_ID) {\r\n            // Get ERC1155 token address, array of ids, and array of values\r\n            (, address tokenAddress, uint256[] memory tokenIds, uint256[] memory tokenValues,) = decodeERC1155AssetData(assetData);\r\n\r\n            uint256 length = tokenIds.length;\r\n            for (uint256 i = 0; i != length; i++) {\r\n                // Encode data for `balanceOf(ownerAddress, tokenIds[i])\r\n                bytes memory balanceOfData = abi.encodeWithSelector(\r\n                    _ERC1155_BALANCE_OF_SELECTOR,\r\n                    ownerAddress,\r\n                    tokenIds[i]\r\n                );\r\n\r\n                // Query balance\r\n                (bool success, bytes memory returnData) = tokenAddress.staticcall(balanceOfData);\r\n                uint256 totalBalance = success && returnData.length == 32 ? returnData.readUint256(0) : 0;\r\n\r\n                // Scale total balance down by corresponding value in assetData\r\n                uint256 scaledBalance = totalBalance / tokenValues[i];\r\n                if (scaledBalance < balance || balance == 0) {\r\n                    balance = scaledBalance;\r\n                }\r\n            }\r\n        } else if (assetProxyId == STATIC_CALL_PROXY_ID) {\r\n            // Encode data for `staticCallProxy.transferFrom(assetData,...)`\r\n            bytes memory transferFromData = abi.encodeWithSelector(\r\n                _ASSET_PROXY_TRANSFER_FROM_SELECTOR,\r\n                assetData,\r\n                address(0),  // `from` address is not used\r\n                address(0),  // `to` address is not used\r\n                0            // `amount` is not used\r\n            );\r\n\r\n            // Check if staticcall would be successful\r\n            (bool success,) = _STATIC_CALL_PROXY_ADDRESS.staticcall(transferFromData);\r\n\r\n            // Success means that the staticcall can be made an unlimited amount of times\r\n            balance = success ? _MAX_UINT256 : 0;\r\n        } else if (assetProxyId == MULTI_ASSET_PROXY_ID) {\r\n            // Get array of values and array of assetDatas\r\n            (, uint256[] memory assetAmounts, bytes[] memory nestedAssetData) = decodeMultiAssetData(assetData);\r\n\r\n            uint256 length = nestedAssetData.length;\r\n            for (uint256 i = 0; i != length; i++) {\r\n                // Query balance of individual assetData\r\n                uint256 totalBalance = getBalance(ownerAddress, nestedAssetData[i]);\r\n\r\n                // Scale total balance down by corresponding value in assetData\r\n                uint256 scaledBalance = totalBalance / assetAmounts[i];\r\n                if (scaledBalance < balance || balance == 0) {\r\n                    balance = scaledBalance;\r\n                }\r\n            }\r\n        } \r\n\r\n        // Balance will be 0 if assetProxyId is unknown\r\n        return balance;\r\n    }\r\n\r\n    /// @dev Calls getBalance() for each element of assetData.\r\n    /// @param ownerAddress Owner of the assets specified by assetData.\r\n    /// @param assetData Array of asset details, each encoded per the AssetProxy contract specification.\r\n    /// @return Array of asset balances from getBalance(), with each element\r\n    /// corresponding to the same-indexed element in the assetData input.\r\n    function getBatchBalances(address ownerAddress, bytes[] memory assetData)\r\n        public\r\n        view\r\n        returns (uint256[] memory balances)\r\n    {\r\n        uint256 length = assetData.length;\r\n        balances = new uint256[](length);\r\n        for (uint256 i = 0; i != length; i++) {\r\n            balances[i] = getBalance(ownerAddress, assetData[i]);\r\n        }\r\n        return balances;\r\n    }\r\n\r\n    /// @dev Returns the number of asset(s) (described by assetData) that\r\n    /// the corresponding AssetProxy contract is authorized to spend.  When the asset data contains\r\n    /// multiple assets (eg for Multi-Asset), the return value indicates\r\n    /// how many complete \"baskets\" of those assets may be spent by all of the corresponding\r\n    /// AssetProxy contracts.\r\n    /// @param ownerAddress Owner of the assets specified by assetData.\r\n    /// @param assetData Details of asset, encoded per the AssetProxy contract specification.\r\n    /// @return Number of assets (or asset baskets) that the corresponding AssetProxy is authorized to spend.\r\n    function getAssetProxyAllowance(address ownerAddress, bytes memory assetData)\r\n        public\r\n        view\r\n        returns (uint256 allowance)\r\n    {\r\n        // Get id of AssetProxy contract\r\n        bytes4 assetProxyId = assetData.readBytes4(0);\r\n\r\n        if (assetProxyId == MULTI_ASSET_PROXY_ID) {\r\n            // Get array of values and array of assetDatas\r\n            (, uint256[] memory amounts, bytes[] memory nestedAssetData) = decodeMultiAssetData(assetData);\r\n\r\n            uint256 length = nestedAssetData.length;\r\n            for (uint256 i = 0; i != length; i++) {\r\n                // Query allowance of individual assetData\r\n                uint256 totalAllowance = getAssetProxyAllowance(ownerAddress, nestedAssetData[i]);\r\n\r\n                // Scale total allowance down by corresponding value in assetData\r\n                uint256 scaledAllowance = totalAllowance / amounts[i];\r\n                if (scaledAllowance < allowance || allowance == 0) {\r\n                    allowance = scaledAllowance;\r\n                }\r\n            }\r\n            return allowance;\r\n        }\r\n\r\n        if (assetProxyId == ERC20_PROXY_ID) {\r\n            // Get ERC20 token address\r\n            address tokenAddress = assetData.readAddress(16);\r\n\r\n            // Encode data for `allowance(ownerAddress, _ERC20_PROXY_ADDRESS)`\r\n            bytes memory allowanceData = abi.encodeWithSelector(\r\n                _ERC20_ALLOWANCE_SELECTOR,\r\n                ownerAddress,\r\n                _ERC20_PROXY_ADDRESS\r\n            );\r\n\r\n            // Query allowance\r\n            (bool success, bytes memory returnData) = tokenAddress.staticcall(allowanceData);\r\n            allowance = success && returnData.length == 32 ? returnData.readUint256(0) : 0;\r\n        } else if (assetProxyId == ERC721_PROXY_ID) {\r\n            // Get ERC721 token address and id\r\n            (, address tokenAddress, uint256 tokenId) = decodeERC721AssetData(assetData);\r\n\r\n            // Encode data for `isApprovedForAll(ownerAddress, _ERC721_PROXY_ADDRESS)`\r\n            bytes memory isApprovedForAllData = abi.encodeWithSelector(\r\n                _ERC721_IS_APPROVED_FOR_ALL_SELECTOR,\r\n                ownerAddress,\r\n                _ERC721_PROXY_ADDRESS\r\n            );\r\n\r\n            (bool success, bytes memory returnData) = tokenAddress.staticcall(isApprovedForAllData);\r\n\r\n            // If not approved for all, call `getApproved(tokenId)`\r\n            if (!success || returnData.length != 32 || returnData.readUint256(0) != 1) {\r\n                // Encode data for `getApproved(tokenId)`\r\n                bytes memory getApprovedData = abi.encodeWithSelector(_ERC721_GET_APPROVED_SELECTOR, tokenId);\r\n                (success, returnData) = tokenAddress.staticcall(getApprovedData);\r\n\r\n                // Allowance is 1 if successful and the approved address is the ERC721Proxy\r\n                allowance = success && returnData.length == 32 && returnData.readAddress(12) == _ERC721_PROXY_ADDRESS ? 1 : 0;\r\n            } else {\r\n                // Allowance is 2^256 - 1 if `isApprovedForAll` returned true\r\n                allowance = _MAX_UINT256;\r\n            }\r\n        } else if (assetProxyId == ERC1155_PROXY_ID) {\r\n            // Get ERC1155 token address\r\n            (, address tokenAddress, , , ) = decodeERC1155AssetData(assetData);\r\n\r\n            // Encode data for `isApprovedForAll(ownerAddress, _ERC1155_PROXY_ADDRESS)`\r\n            bytes memory isApprovedForAllData = abi.encodeWithSelector(\r\n                _ERC1155_IS_APPROVED_FOR_ALL_SELECTOR,\r\n                ownerAddress,\r\n                _ERC1155_PROXY_ADDRESS\r\n            );\r\n\r\n            // Query allowance\r\n            (bool success, bytes memory returnData) = tokenAddress.staticcall(isApprovedForAllData);\r\n            allowance = success && returnData.length == 32 && returnData.readUint256(0) == 1 ? _MAX_UINT256 : 0;\r\n        } else if (assetProxyId == STATIC_CALL_PROXY_ID) {\r\n            // The StaticCallProxy does not require any approvals\r\n            allowance = _MAX_UINT256;\r\n        }\r\n\r\n        // Allowance will be 0 if the assetProxyId is unknown\r\n        return allowance;\r\n    }\r\n\r\n    /// @dev Calls getAssetProxyAllowance() for each element of assetData.\r\n    /// @param ownerAddress Owner of the assets specified by assetData.\r\n    /// @param assetData Array of asset details, each encoded per the AssetProxy contract specification.\r\n    /// @return An array of asset allowances from getAllowance(), with each\r\n    /// element corresponding to the same-indexed element in the assetData input.\r\n    function getBatchAssetProxyAllowances(address ownerAddress, bytes[] memory assetData)\r\n        public\r\n        view\r\n        returns (uint256[] memory allowances)\r\n    {\r\n        uint256 length = assetData.length;\r\n        allowances = new uint256[](length);\r\n        for (uint256 i = 0; i != length; i++) {\r\n            allowances[i] = getAssetProxyAllowance(ownerAddress, assetData[i]);\r\n        }\r\n        return allowances;\r\n    }\r\n\r\n    /// @dev Calls getBalance() and getAllowance() for assetData.\r\n    /// @param ownerAddress Owner of the assets specified by assetData.\r\n    /// @param assetData Details of asset, encoded per the AssetProxy contract specification.\r\n    /// @return Number of assets (or asset baskets) held by owner, and number\r\n    /// of assets (or asset baskets) that the corresponding AssetProxy is authorized to spend.\r\n    function getBalanceAndAssetProxyAllowance(address ownerAddress, bytes memory assetData)\r\n        public\r\n        view\r\n        returns (uint256 balance, uint256 allowance)\r\n    {\r\n        balance = getBalance(ownerAddress, assetData);\r\n        allowance = getAssetProxyAllowance(ownerAddress, assetData);\r\n        return (balance, allowance);\r\n    }\r\n\r\n    /// @dev Calls getBatchBalances() and getBatchAllowances() for each element of assetData.\r\n    /// @param ownerAddress Owner of the assets specified by assetData.\r\n    /// @param assetData Array of asset details, each encoded per the AssetProxy contract specification.\r\n    /// @return An array of asset balances from getBalance(), and an array of\r\n    /// asset allowances from getAllowance(), with each element\r\n    /// corresponding to the same-indexed element in the assetData input.\r\n    function getBatchBalancesAndAssetProxyAllowances(address ownerAddress, bytes[] memory assetData)\r\n        public\r\n        view\r\n        returns (uint256[] memory balances, uint256[] memory allowances)\r\n    {\r\n        balances = getBatchBalances(ownerAddress, assetData);\r\n        allowances = getBatchAssetProxyAllowances(ownerAddress, assetData);\r\n        return (balances, allowances);\r\n    }\r\n\r\n    /// @dev Encode ERC-20 asset data into the format described in the AssetProxy contract specification.\r\n    /// @param tokenAddress The address of the ERC-20 contract hosting the asset to be traded.\r\n    /// @return AssetProxy-compliant data describing the asset.\r\n    function encodeERC20AssetData(address tokenAddress)\r\n        public\r\n        pure\r\n        returns (bytes memory assetData)\r\n    {\r\n        assetData = abi.encodeWithSelector(ERC20_PROXY_ID, tokenAddress);\r\n        return assetData;\r\n    }\r\n\r\n    /// @dev Decode ERC-20 asset data from the format described in the AssetProxy contract specification.\r\n    /// @param assetData AssetProxy-compliant asset data describing an ERC-20 asset.\r\n    /// @return The ERC-20 AssetProxy identifier, and the address of the ERC-20 \r\n    /// contract hosting this asset.\r\n    function decodeERC20AssetData(bytes memory assetData)\r\n        public\r\n        pure\r\n        returns (\r\n            bytes4 assetProxyId,\r\n            address tokenAddress\r\n        )\r\n    {\r\n        assetProxyId = assetData.readBytes4(0);\r\n\r\n        require(\r\n            assetProxyId == ERC20_PROXY_ID,\r\n            \"WRONG_PROXY_ID\"\r\n        );\r\n\r\n        tokenAddress = assetData.readAddress(16);\r\n        return (assetProxyId, tokenAddress);\r\n    }\r\n\r\n    /// @dev Encode ERC-721 asset data into the format described in the AssetProxy specification.\r\n    /// @param tokenAddress The address of the ERC-721 contract hosting the asset to be traded.\r\n    /// @param tokenId The identifier of the specific asset to be traded.\r\n    /// @return AssetProxy-compliant asset data describing the asset.\r\n    function encodeERC721AssetData(address tokenAddress, uint256 tokenId)\r\n        public\r\n        pure\r\n        returns (bytes memory assetData)\r\n    {\r\n        assetData = abi.encodeWithSelector(\r\n            ERC721_PROXY_ID,\r\n            tokenAddress,\r\n            tokenId\r\n        );\r\n        return assetData;\r\n    }\r\n\r\n    /// @dev Decode ERC-721 asset data from the format described in the AssetProxy contract specification.\r\n    /// @param assetData AssetProxy-compliant asset data describing an ERC-721 asset.\r\n    /// @return The ERC-721 AssetProxy identifier, the address of the ERC-721\r\n    /// contract hosting this asset, and the identifier of the specific\r\n    /// asset to be traded.\r\n    function decodeERC721AssetData(bytes memory assetData)\r\n        public\r\n        pure\r\n        returns (\r\n            bytes4 assetProxyId,\r\n            address tokenAddress,\r\n            uint256 tokenId\r\n        )\r\n    {\r\n        assetProxyId = assetData.readBytes4(0);\r\n\r\n        require(\r\n            assetProxyId == ERC721_PROXY_ID,\r\n            \"WRONG_PROXY_ID\"\r\n        );\r\n\r\n        tokenAddress = assetData.readAddress(16);\r\n        tokenId = assetData.readUint256(36);\r\n        return (assetProxyId, tokenAddress, tokenId);\r\n    }\r\n\r\n    /// @dev Encode ERC-1155 asset data into the format described in the AssetProxy contract specification.\r\n    /// @param tokenAddress The address of the ERC-1155 contract hosting the asset(s) to be traded.\r\n    /// @param tokenIds The identifiers of the specific assets to be traded.\r\n    /// @param tokenValues The amounts of each asset to be traded.\r\n    /// @param callbackData Data to be passed to receiving contracts when a transfer is performed.\r\n    /// @return AssetProxy-compliant asset data describing the set of assets.\r\n    function encodeERC1155AssetData(\r\n        address tokenAddress,\r\n        uint256[] memory tokenIds,\r\n        uint256[] memory tokenValues,\r\n        bytes memory callbackData\r\n    )\r\n        public\r\n        pure\r\n        returns (bytes memory assetData)\r\n    {\r\n        assetData = abi.encodeWithSelector(\r\n            ERC1155_PROXY_ID,\r\n            tokenAddress,\r\n            tokenIds,\r\n            tokenValues,\r\n            callbackData\r\n        );\r\n        return assetData;\r\n    }\r\n\r\n    /// @dev Decode ERC-1155 asset data from the format described in the AssetProxy contract specification.\r\n    /// @param assetData AssetProxy-compliant asset data describing an ERC-1155 set of assets.\r\n    /// @return The ERC-1155 AssetProxy identifier, the address of the ERC-1155\r\n    /// contract hosting the assets, an array of the identifiers of the\r\n    /// assets to be traded, an array of asset amounts to be traded, and\r\n    /// callback data.  Each element of the arrays corresponds to the\r\n    /// same-indexed element of the other array.  Return values specified as\r\n    /// `memory` are returned as pointers to locations within the memory of\r\n    /// the input parameter `assetData`.\r\n    function decodeERC1155AssetData(bytes memory assetData)\r\n        public\r\n        pure\r\n        returns (\r\n            bytes4 assetProxyId,\r\n            address tokenAddress,\r\n            uint256[] memory tokenIds,\r\n            uint256[] memory tokenValues,\r\n            bytes memory callbackData\r\n        )\r\n    {\r\n        assetProxyId = assetData.readBytes4(0);\r\n\r\n        require(\r\n            assetProxyId == ERC1155_PROXY_ID,\r\n            \"WRONG_PROXY_ID\"\r\n        );\r\n\r\n        assembly {\r\n            // Skip selector and length to get to the first parameter:\r\n            assetData := add(assetData, 36)\r\n            // Read the value of the first parameter:\r\n            tokenAddress := mload(assetData)\r\n            // Point to the next parameter's data:\r\n            tokenIds := add(assetData, mload(add(assetData, 32)))\r\n            // Point to the next parameter's data:\r\n            tokenValues := add(assetData, mload(add(assetData, 64)))\r\n            // Point to the next parameter's data:\r\n            callbackData := add(assetData, mload(add(assetData, 96)))\r\n        }\r\n\r\n        return (\r\n            assetProxyId,\r\n            tokenAddress,\r\n            tokenIds,\r\n            tokenValues,\r\n            callbackData\r\n        );\r\n    }\r\n\r\n    /// @dev Encode data for multiple assets, per the AssetProxy contract specification.\r\n    /// @param amounts The amounts of each asset to be traded.\r\n    /// @param nestedAssetData AssetProxy-compliant data describing each asset to be traded.\r\n    /// @return AssetProxy-compliant data describing the set of assets.\r\n    function encodeMultiAssetData(uint256[] memory amounts, bytes[] memory nestedAssetData)\r\n        public\r\n        pure\r\n        returns (bytes memory assetData)\r\n    {\r\n        assetData = abi.encodeWithSelector(\r\n            MULTI_ASSET_PROXY_ID,\r\n            amounts,\r\n            nestedAssetData\r\n        );\r\n        return assetData;\r\n    }\r\n\r\n    /// @dev Decode multi-asset data from the format described in the AssetProxy contract specification.\r\n    /// @param assetData AssetProxy-compliant data describing a multi-asset basket.\r\n    /// @return The Multi-Asset AssetProxy identifier, an array of the amounts\r\n    /// of the assets to be traded, and an array of the\r\n    /// AssetProxy-compliant data describing each asset to be traded.  Each\r\n    /// element of the arrays corresponds to the same-indexed element of the other array.\r\n    function decodeMultiAssetData(bytes memory assetData)\r\n        public\r\n        pure\r\n        returns (\r\n            bytes4 assetProxyId,\r\n            uint256[] memory amounts,\r\n            bytes[] memory nestedAssetData\r\n        )\r\n    {\r\n        assetProxyId = assetData.readBytes4(0);\r\n\r\n        require(\r\n            assetProxyId == MULTI_ASSET_PROXY_ID,\r\n            \"WRONG_PROXY_ID\"\r\n        );\r\n\r\n        // solhint-disable indent\r\n        (amounts, nestedAssetData) = abi.decode(\r\n            assetData.slice(4, assetData.length),\r\n            (uint256[], bytes[])\r\n        );\r\n        // solhint-enable indent\r\n    }\r\n\r\n    /// @dev Calls `asset.ownerOf(tokenId)`, but returns a null owner instead of reverting on an unowned asset.\r\n    /// @param tokenAddress Address of ERC721 asset.\r\n    /// @param tokenId The identifier for the specific NFT.\r\n    /// @return Owner of tokenId or null address if unowned.\r\n    function getERC721TokenOwner(address tokenAddress, uint256 tokenId)\r\n        public\r\n        view\r\n        returns (address ownerAddress)\r\n    {\r\n        bytes memory ownerOfCalldata = abi.encodeWithSelector(\r\n            _ERC721_OWNER_OF_SELECTOR,\r\n            tokenId\r\n        );\r\n\r\n        (bool success, bytes memory returnData) = tokenAddress.staticcall(ownerOfCalldata);\r\n\r\n        ownerAddress = (success && returnData.length == 32) ? returnData.readAddress(12) : address(0);\r\n        return ownerAddress;\r\n    }\r\n}\r\n\r\n\r\ncontract OrderValidationUtils is\r\n    LibAssetData,\r\n    LibMath\r\n{\r\n    using LibBytes for bytes;\r\n\r\n    // solhint-disable var-name-mixedcase\r\n    bytes internal _ZRX_ASSET_DATA;\r\n    // solhint-enable var-name-mixedcase\r\n\r\n    constructor (address _exchange, bytes memory _zrxAssetData)\r\n        public\r\n        LibAssetData(_exchange)\r\n    {\r\n        _ZRX_ASSET_DATA = _zrxAssetData;\r\n    }\r\n\r\n    /// @dev Fetches all order-relevant information needed to validate if the supplied order is fillable.\r\n    /// @param order The order structure.\r\n    /// @param signature Signature provided by maker that proves the order's authenticity.\r\n    /// `0x01` can always be provided if the signature does not need to be validated.\r\n    /// @return The orderInfo (hash, status, and `takerAssetAmount` already filled for the given order),\r\n    /// fillableTakerAssetAmount (amount of the order's `takerAssetAmount` that is fillable given all on-chain state),\r\n    /// and isValidSignature (validity of the provided signature).\r\n    /// NOTE: If the `takerAssetData` encodes data for multiple assets, `fillableTakerAssetAmount` will represent a \"scaled\"\r\n    /// amount, meaning it must be multiplied by all the individual asset amounts within the `takerAssetData` to get the final\r\n    /// amount of each asset that can be filled.\r\n    function getOrderRelevantState(LibOrder.Order memory order, bytes memory signature)\r\n        public\r\n        view\r\n        returns (\r\n            LibOrder.OrderInfo memory orderInfo,\r\n            uint256 fillableTakerAssetAmount,\r\n            bool isValidSignature\r\n        )\r\n    {\r\n        // Get info specific to order\r\n        orderInfo = _EXCHANGE.getOrderInfo(order);\r\n\r\n        // Validate the maker's signature\r\n        address makerAddress = order.makerAddress;\r\n        isValidSignature = _EXCHANGE.isValidSignature(\r\n            orderInfo.orderHash,\r\n            makerAddress,\r\n            signature\r\n        );\r\n\r\n        // Get the transferable amount of the `makerAsset`\r\n        uint256 transferableMakerAssetAmount = getTransferableAssetAmount(makerAddress, order.makerAssetData);\r\n\r\n        // Assign to stack variables to reduce redundant mloads/sloads\r\n        uint256 takerAssetAmount = order.takerAssetAmount;\r\n        uint256 makerFee = order.makerFee;\r\n        bytes memory zrxAssetData = _ZRX_ASSET_DATA;\r\n    \r\n        // Get the amount of `takerAsset` that is transferable to maker given the transferability of `makerAsset`, `makerFeeAsset`,\r\n        // and the total amounts specified in the order\r\n        uint256 transferableTakerAssetAmount;\r\n        if (order.makerAssetData.equals(zrxAssetData)) {\r\n            // If `makerAsset` equals `makerFeeAsset`, the % that can be filled is\r\n            // transferableMakerAssetAmount / (makerAssetAmount + makerFee)\r\n            transferableTakerAssetAmount = getPartialAmountFloor(\r\n                transferableMakerAssetAmount,\r\n                safeAdd(order.makerAssetAmount, makerFee),\r\n                takerAssetAmount\r\n            );\r\n        } else {\r\n            // Get the transferable amount of the `makerFeeAsset`\r\n            uint256 transferableMakerFeeAssetAmount = getTransferableAssetAmount(makerAddress, zrxAssetData);\r\n\r\n            // If `makerFee` is 0, the % that can be filled is (transferableMakerAssetAmount / makerAssetAmount)\r\n            if (makerFee == 0) {\r\n                transferableTakerAssetAmount = getPartialAmountFloor(\r\n                    transferableMakerAssetAmount,\r\n                    order.makerAssetAmount,\r\n                    takerAssetAmount\r\n                );\r\n\r\n            // If `makerAsset` does not equal `makerFeeAsset`, the % that can be filled is the lower of\r\n            // (transferableMakerAssetAmount / makerAssetAmount) and (transferableMakerAssetFeeAmount / makerFee)\r\n            } else {\r\n                uint256 transferableMakerToTakerAmount = getPartialAmountFloor(\r\n                    transferableMakerAssetAmount,\r\n                    order.makerAssetAmount,\r\n                    takerAssetAmount\r\n                );\r\n                uint256 transferableMakerFeeToTakerAmount = getPartialAmountFloor(\r\n                    transferableMakerFeeAssetAmount,\r\n                    makerFee,\r\n                    takerAssetAmount\r\n                );\r\n                transferableTakerAssetAmount = min256(transferableMakerToTakerAmount, transferableMakerFeeToTakerAmount);\r\n            }\r\n        }\r\n\r\n        // `fillableTakerAssetAmount` is the lower of the order's remaining `takerAssetAmount` and the `transferableTakerAssetAmount`\r\n        fillableTakerAssetAmount = min256(\r\n            safeSub(takerAssetAmount, orderInfo.orderTakerAssetFilledAmount),\r\n            transferableTakerAssetAmount\r\n        );\r\n\r\n        return (orderInfo, fillableTakerAssetAmount, isValidSignature);\r\n    }\r\n\r\n    /// @dev Fetches all order-relevant information needed to validate if the supplied orders are fillable.\r\n    /// @param orders Array of order structures.\r\n    /// @param signatures Array of signatures provided by makers that prove the authenticity of the orders.\r\n    /// `0x01` can always be provided if a signature does not need to be validated.\r\n    /// @return The ordersInfo (array of the hash, status, and `takerAssetAmount` already filled for each order),\r\n    /// fillableTakerAssetAmounts (array of amounts for each order's `takerAssetAmount` that is fillable given all on-chain state),\r\n    /// and isValidSignature (array containing the validity of each provided signature).\r\n    /// NOTE: If the `takerAssetData` encodes data for multiple assets, each element of `fillableTakerAssetAmounts`\r\n    /// will represent a \"scaled\" amount, meaning it must be multiplied by all the individual asset amounts within\r\n    /// the `takerAssetData` to get the final amount of each asset that can be filled.\r\n    function getOrderRelevantStates(LibOrder.Order[] memory orders, bytes[] memory signatures)\r\n        public\r\n        view\r\n        returns (\r\n            LibOrder.OrderInfo[] memory ordersInfo,\r\n            uint256[] memory fillableTakerAssetAmounts,\r\n            bool[] memory isValidSignature\r\n        )\r\n    {\r\n        uint256 length = orders.length;\r\n        ordersInfo = new LibOrder.OrderInfo[](length);\r\n        fillableTakerAssetAmounts = new uint256[](length);\r\n        isValidSignature = new bool[](length);\r\n\r\n        for (uint256 i = 0; i != length; i++) {\r\n            (ordersInfo[i], fillableTakerAssetAmounts[i], isValidSignature[i]) = getOrderRelevantState(\r\n                orders[i],\r\n                signatures[i]\r\n            );\r\n        }\r\n\r\n        return (ordersInfo, fillableTakerAssetAmounts, isValidSignature);\r\n    }\r\n\r\n    /// @dev Gets the amount of an asset transferable by the owner.\r\n    /// @param ownerAddress Address of the owner of the asset.\r\n    /// @param assetData Description of tokens, per the AssetProxy contract specification.\r\n    /// @return The amount of the asset tranferable by the owner.\r\n    /// NOTE: If the `assetData` encodes data for multiple assets, the `transferableAssetAmount`\r\n    /// will represent the amount of times the entire `assetData` can be transferred. To calculate\r\n    /// the total individual transferable amounts, this scaled `transferableAmount` must be multiplied by \r\n    /// the individual asset amounts located within the `assetData`.\r\n    function getTransferableAssetAmount(address ownerAddress, bytes memory assetData)\r\n        public\r\n        view\r\n        returns (uint256 transferableAssetAmount)\r\n    {\r\n        (uint256 balance, uint256 allowance) = getBalanceAndAssetProxyAllowance(ownerAddress, assetData);\r\n        transferableAssetAmount = min256(balance, allowance);\r\n        return transferableAssetAmount;\r\n    }\r\n}\r\n\r\ncontract LibExchangeSelectors {\r\n\r\n    // solhint-disable max-line-length\r\n    // allowedValidators\r\n    bytes4 constant internal ALLOWED_VALIDATORS_SELECTOR = 0x7b8e3514;\r\n    bytes4 constant internal ALLOWED_VALIDATORS_SELECTOR_GENERATOR = bytes4(keccak256(\"allowedValidators(address,address)\"));\r\n\r\n    // assetProxies\r\n    bytes4 constant internal ASSET_PROXIES_SELECTOR = 0x3fd3c997;\r\n    bytes4 constant internal ASSET_PROXIES_SELECTOR_GENERATOR = bytes4(keccak256(\"assetProxies(bytes4)\"));\r\n\r\n    // batchCancelOrders\r\n    bytes4 constant internal BATCH_CANCEL_ORDERS_SELECTOR = 0x4ac14782;\r\n    bytes4 constant internal BATCH_CANCEL_ORDERS_SELECTOR_GENERATOR = bytes4(keccak256(\"batchCancelOrders((address,address,address,address,uint256,uint256,uint256,uint256,uint256,uint256,bytes,bytes)[])\"));\r\n\r\n    // batchFillOrKillOrders\r\n    bytes4 constant internal BATCH_FILL_OR_KILL_ORDERS_SELECTOR = 0x4d0ae546;\r\n    bytes4 constant internal BATCH_FILL_OR_KILL_ORDERS_SELECTOR_GENERATOR = bytes4(keccak256(\"batchFillOrKillOrders((address,address,address,address,uint256,uint256,uint256,uint256,uint256,uint256,bytes,bytes)[],uint256[],bytes[])\"));\r\n\r\n    // batchFillOrders\r\n    bytes4 constant internal BATCH_FILL_ORDERS_SELECTOR = 0x297bb70b;\r\n    bytes4 constant internal BATCH_FILL_ORDERS_SELECTOR_GENERATOR = bytes4(keccak256(\"batchFillOrders((address,address,address,address,uint256,uint256,uint256,uint256,uint256,uint256,bytes,bytes)[],uint256[],bytes[])\"));\r\n\r\n    // batchFillOrdersNoThrow\r\n    bytes4 constant internal BATCH_FILL_ORDERS_NO_THROW_SELECTOR = 0x50dde190;\r\n    bytes4 constant internal BATCH_FILL_ORDERS_NO_THROW_SELECTOR_GENERATOR = bytes4(keccak256(\"batchFillOrdersNoThrow((address,address,address,address,uint256,uint256,uint256,uint256,uint256,uint256,bytes,bytes)[],uint256[],bytes[])\"));\r\n\r\n    // cancelOrder\r\n    bytes4 constant internal CANCEL_ORDER_SELECTOR = 0xd46b02c3;\r\n    bytes4 constant internal CANCEL_ORDER_SELECTOR_GENERATOR = bytes4(keccak256(\"cancelOrder((address,address,address,address,uint256,uint256,uint256,uint256,uint256,uint256,bytes,bytes))\"));\r\n\r\n    // cancelOrdersUpTo\r\n    bytes4 constant internal CANCEL_ORDERS_UP_TO_SELECTOR = 0x4f9559b1;\r\n    bytes4 constant internal CANCEL_ORDERS_UP_TO_SELECTOR_GENERATOR = bytes4(keccak256(\"cancelOrdersUpTo(uint256)\"));\r\n\r\n    // cancelled\r\n    bytes4 constant internal CANCELLED_SELECTOR = 0x2ac12622;\r\n    bytes4 constant internal CANCELLED_SELECTOR_GENERATOR = bytes4(keccak256(\"cancelled(bytes32)\"));\r\n\r\n    // currentContextAddress\r\n    bytes4 constant internal CURRENT_CONTEXT_ADDRESS_SELECTOR = 0xeea086ba;\r\n    bytes4 constant internal CURRENT_CONTEXT_ADDRESS_SELECTOR_GENERATOR = bytes4(keccak256(\"currentContextAddress()\"));\r\n\r\n    // executeTransaction\r\n    bytes4 constant internal EXECUTE_TRANSACTION_SELECTOR = 0xbfc8bfce;\r\n    bytes4 constant internal EXECUTE_TRANSACTION_SELECTOR_GENERATOR = bytes4(keccak256(\"executeTransaction(uint256,address,bytes,bytes)\"));\r\n\r\n    // fillOrKillOrder\r\n    bytes4 constant internal FILL_OR_KILL_ORDER_SELECTOR = 0x64a3bc15;\r\n    bytes4 constant internal FILL_OR_KILL_ORDER_SELECTOR_GENERATOR = bytes4(keccak256(\"fillOrKillOrder((address,address,address,address,uint256,uint256,uint256,uint256,uint256,uint256,bytes,bytes),uint256,bytes)\"));\r\n\r\n    // fillOrder\r\n    bytes4 constant internal FILL_ORDER_SELECTOR = 0xb4be83d5;\r\n    bytes4 constant internal FILL_ORDER_SELECTOR_GENERATOR = bytes4(keccak256(\"fillOrder((address,address,address,address,uint256,uint256,uint256,uint256,uint256,uint256,bytes,bytes),uint256,bytes)\"));\r\n\r\n    // fillOrderNoThrow\r\n    bytes4 constant internal FILL_ORDER_NO_THROW_SELECTOR = 0x3e228bae;\r\n    bytes4 constant internal FILL_ORDER_NO_THROW_SELECTOR_GENERATOR = bytes4(keccak256(\"fillOrderNoThrow((address,address,address,address,uint256,uint256,uint256,uint256,uint256,uint256,bytes,bytes),uint256,bytes)\"));\r\n\r\n    // filled\r\n    bytes4 constant internal FILLED_SELECTOR = 0x288cdc91;\r\n    bytes4 constant internal FILLED_SELECTOR_GENERATOR = bytes4(keccak256(\"filled(bytes32)\"));\r\n\r\n    // getAssetProxy\r\n    bytes4 constant internal GET_ASSET_PROXY_SELECTOR = 0x60704108;\r\n    bytes4 constant internal GET_ASSET_PROXY_SELECTOR_GENERATOR = bytes4(keccak256(\"getAssetProxy(bytes4)\"));\r\n\r\n    // getOrderInfo\r\n    bytes4 constant internal GET_ORDER_INFO_SELECTOR = 0xc75e0a81;\r\n    bytes4 constant internal GET_ORDER_INFO_SELECTOR_GENERATOR = bytes4(keccak256(\"getOrderInfo((address,address,address,address,uint256,uint256,uint256,uint256,uint256,uint256,bytes,bytes))\"));\r\n\r\n    // getOrdersInfo\r\n    bytes4 constant internal GET_ORDERS_INFO_SELECTOR = 0x7e9d74dc;\r\n    bytes4 constant internal GET_ORDERS_INFO_SELECTOR_GENERATOR = bytes4(keccak256(\"getOrdersInfo((address,address,address,address,uint256,uint256,uint256,uint256,uint256,uint256,bytes,bytes)[])\"));\r\n\r\n    // isValidSignature\r\n    bytes4 constant internal IS_VALID_SIGNATURE_SELECTOR = 0x93634702;\r\n    bytes4 constant internal IS_VALID_SIGNATURE_SELECTOR_GENERATOR = bytes4(keccak256(\"isValidSignature(bytes32,address,bytes)\"));\r\n\r\n    // marketBuyOrders\r\n    bytes4 constant internal MARKET_BUY_ORDERS_SELECTOR = 0xe5fa431b;\r\n    bytes4 constant internal MARKET_BUY_ORDERS_SELECTOR_GENERATOR = bytes4(keccak256(\"marketBuyOrders((address,address,address,address,uint256,uint256,uint256,uint256,uint256,uint256,bytes,bytes)[],uint256,bytes[])\"));\r\n\r\n    // marketBuyOrdersNoThrow\r\n    bytes4 constant internal MARKET_BUY_ORDERS_NO_THROW_SELECTOR = 0xa3e20380;\r\n    bytes4 constant internal MARKET_BUY_ORDERS_NO_THROW_SELECTOR_GENERATOR = bytes4(keccak256(\"marketBuyOrdersNoThrow((address,address,address,address,uint256,uint256,uint256,uint256,uint256,uint256,bytes,bytes)[],uint256,bytes[])\"));\r\n\r\n    // marketSellOrders\r\n    bytes4 constant internal MARKET_SELL_ORDERS_SELECTOR = 0x7e1d9808;\r\n    bytes4 constant internal MARKET_SELL_ORDERS_SELECTOR_GENERATOR = bytes4(keccak256(\"marketSellOrders((address,address,address,address,uint256,uint256,uint256,uint256,uint256,uint256,bytes,bytes)[],uint256,bytes[])\"));\r\n\r\n    // marketSellOrdersNoThrow\r\n    bytes4 constant internal MARKET_SELL_ORDERS_NO_THROW_SELECTOR = 0xdd1c7d18;\r\n    bytes4 constant internal MARKET_SELL_ORDERS_NO_THROW_SELECTOR_GENERATOR = bytes4(keccak256(\"marketSellOrdersNoThrow((address,address,address,address,uint256,uint256,uint256,uint256,uint256,uint256,bytes,bytes)[],uint256,bytes[])\"));\r\n\r\n    // matchOrders\r\n    bytes4 constant internal MATCH_ORDERS_SELECTOR = 0x3c28d861;\r\n    bytes4 constant internal MATCH_ORDERS_SELECTOR_GENERATOR = bytes4(keccak256(\"matchOrders((address,address,address,address,uint256,uint256,uint256,uint256,uint256,uint256,bytes,bytes),(address,address,address,address,uint256,uint256,uint256,uint256,uint256,uint256,bytes,bytes),bytes,bytes)\"));\r\n\r\n    // orderEpoch\r\n    bytes4 constant internal ORDER_EPOCH_SELECTOR = 0xd9bfa73e;\r\n    bytes4 constant internal ORDER_EPOCH_SELECTOR_GENERATOR = bytes4(keccak256(\"orderEpoch(address,address)\"));\r\n\r\n    // owner\r\n    bytes4 constant internal OWNER_SELECTOR = 0x8da5cb5b;\r\n    bytes4 constant internal OWNER_SELECTOR_GENERATOR = bytes4(keccak256(\"owner()\"));\r\n\r\n    // preSign\r\n    bytes4 constant internal PRE_SIGN_SELECTOR = 0x3683ef8e;\r\n    bytes4 constant internal PRE_SIGN_SELECTOR_GENERATOR = bytes4(keccak256(\"preSign(bytes32,address,bytes)\"));\r\n\r\n    // preSigned\r\n    bytes4 constant internal PRE_SIGNED_SELECTOR = 0x82c174d0;\r\n    bytes4 constant internal PRE_SIGNED_SELECTOR_GENERATOR = bytes4(keccak256(\"preSigned(bytes32,address)\"));\r\n\r\n    // registerAssetProxy\r\n    bytes4 constant internal REGISTER_ASSET_PROXY_SELECTOR = 0xc585bb93;\r\n    bytes4 constant internal REGISTER_ASSET_PROXY_SELECTOR_GENERATOR = bytes4(keccak256(\"registerAssetProxy(address)\"));\r\n\r\n    // setSignatureValidatorApproval\r\n    bytes4 constant internal SET_SIGNATURE_VALIDATOR_APPROVAL_SELECTOR = 0x77fcce68;\r\n    bytes4 constant internal SET_SIGNATURE_VALIDATOR_APPROVAL_SELECTOR_GENERATOR = bytes4(keccak256(\"setSignatureValidatorApproval(address,bool)\"));\r\n\r\n    // transactions\r\n    bytes4 constant internal TRANSACTIONS_SELECTOR = 0x642f2eaf;\r\n    bytes4 constant internal TRANSACTIONS_SELECTOR_GENERATOR = bytes4(keccak256(\"transactions(bytes32)\"));\r\n\r\n    // transferOwnership\r\n    bytes4 constant internal TRANSFER_OWNERSHIP_SELECTOR = 0xf2fde38b;\r\n    bytes4 constant internal TRANSFER_OWNERSHIP_SELECTOR_GENERATOR = bytes4(keccak256(\"transferOwnership(address)\"));\r\n}\r\n\r\ncontract LibEIP712 {\r\n\r\n    // EIP191 header for EIP712 prefix\r\n    string constant internal EIP191_HEADER = \"\\x19\\x01\";\r\n\r\n    // EIP712 Domain Name value\r\n    string constant internal EIP712_DOMAIN_NAME = \"0x Protocol\";\r\n\r\n    // EIP712 Domain Version value\r\n    string constant internal EIP712_DOMAIN_VERSION = \"2\";\r\n\r\n    // Hash of the EIP712 Domain Separator Schema\r\n    bytes32 constant internal EIP712_DOMAIN_SEPARATOR_SCHEMA_HASH = keccak256(abi.encodePacked(\r\n        \"EIP712Domain(\",\r\n        \"string name,\",\r\n        \"string version,\",\r\n        \"address verifyingContract\",\r\n        \")\"\r\n    ));\r\n\r\n    // Hash of the EIP712 Domain Separator data\r\n    // solhint-disable-next-line var-name-mixedcase\r\n    bytes32 public EIP712_DOMAIN_HASH;\r\n\r\n    constructor ()\r\n        public\r\n    {\r\n        EIP712_DOMAIN_HASH = keccak256(abi.encodePacked(\r\n            EIP712_DOMAIN_SEPARATOR_SCHEMA_HASH,\r\n            keccak256(bytes(EIP712_DOMAIN_NAME)),\r\n            keccak256(bytes(EIP712_DOMAIN_VERSION)),\r\n            uint256(address(this))\r\n        ));\r\n    }\r\n\r\n    /// @dev Calculates EIP712 encoding for a hash struct in this EIP712 Domain.\r\n    /// @param hashStruct The EIP712 hash struct.\r\n    /// @return EIP712 hash applied to this EIP712 Domain.\r\n    function hashEIP712Message(bytes32 hashStruct)\r\n        internal\r\n        view\r\n        returns (bytes32 result)\r\n    {\r\n        bytes32 eip712DomainHash = EIP712_DOMAIN_HASH;\r\n\r\n        // Assembly for more efficient computing:\r\n        // keccak256(abi.encodePacked(\r\n        //     EIP191_HEADER,\r\n        //     EIP712_DOMAIN_HASH,\r\n        //     hashStruct    \r\n        // ));\r\n\r\n        assembly {\r\n            // Load free memory pointer\r\n            let memPtr := mload(64)\r\n\r\n            mstore(memPtr, 0x1901000000000000000000000000000000000000000000000000000000000000)  // EIP191 header\r\n            mstore(add(memPtr, 2), eip712DomainHash)                                            // EIP712 domain hash\r\n            mstore(add(memPtr, 34), hashStruct)                                                 // Hash of struct\r\n\r\n            // Compute hash\r\n            result := keccak256(memPtr, 66)\r\n        }\r\n        return result;\r\n    }\r\n}\r\n\r\n\r\ncontract LibOrder is\r\n    LibEIP712\r\n{\r\n    // Hash for the EIP712 Order Schema\r\n    bytes32 constant internal EIP712_ORDER_SCHEMA_HASH = keccak256(abi.encodePacked(\r\n        \"Order(\",\r\n        \"address makerAddress,\",\r\n        \"address takerAddress,\",\r\n        \"address feeRecipientAddress,\",\r\n        \"address senderAddress,\",\r\n        \"uint256 makerAssetAmount,\",\r\n        \"uint256 takerAssetAmount,\",\r\n        \"uint256 makerFee,\",\r\n        \"uint256 takerFee,\",\r\n        \"uint256 expirationTimeSeconds,\",\r\n        \"uint256 salt,\",\r\n        \"bytes makerAssetData,\",\r\n        \"bytes takerAssetData\",\r\n        \")\"\r\n    ));\r\n\r\n    // A valid order remains fillable until it is expired, fully filled, or cancelled.\r\n    // An order's state is unaffected by external factors, like account balances.\r\n    enum OrderStatus {\r\n        INVALID,                     // Default value\r\n        INVALID_MAKER_ASSET_AMOUNT,  // Order does not have a valid maker asset amount\r\n        INVALID_TAKER_ASSET_AMOUNT,  // Order does not have a valid taker asset amount\r\n        FILLABLE,                    // Order is fillable\r\n        EXPIRED,                     // Order has already expired\r\n        FULLY_FILLED,                // Order is fully filled\r\n        CANCELLED                    // Order has been cancelled\r\n    }\r\n\r\n    // solhint-disable max-line-length\r\n    struct Order {\r\n        address makerAddress;           // Address that created the order.      \r\n        address takerAddress;           // Address that is allowed to fill the order. If set to 0, any address is allowed to fill the order.          \r\n        address feeRecipientAddress;    // Address that will recieve fees when order is filled.      \r\n        address senderAddress;          // Address that is allowed to call Exchange contract methods that affect this order. If set to 0, any address is allowed to call these methods.\r\n        uint256 makerAssetAmount;       // Amount of makerAsset being offered by maker. Must be greater than 0.        \r\n        uint256 takerAssetAmount;       // Amount of takerAsset being bid on by maker. Must be greater than 0.        \r\n        uint256 makerFee;               // Amount of ZRX paid to feeRecipient by maker when order is filled. If set to 0, no transfer of ZRX from maker to feeRecipient will be attempted.\r\n        uint256 takerFee;               // Amount of ZRX paid to feeRecipient by taker when order is filled. If set to 0, no transfer of ZRX from taker to feeRecipient will be attempted.\r\n        uint256 expirationTimeSeconds;  // Timestamp in seconds at which order expires.          \r\n        uint256 salt;                   // Arbitrary number to facilitate uniqueness of the order's hash.     \r\n        bytes makerAssetData;           // Encoded data that can be decoded by a specified proxy contract when transferring makerAsset. The last byte references the id of this proxy.\r\n        bytes takerAssetData;           // Encoded data that can be decoded by a specified proxy contract when transferring takerAsset. The last byte references the id of this proxy.\r\n    }\r\n    // solhint-enable max-line-length\r\n\r\n    struct OrderInfo {\r\n        uint8 orderStatus;                    // Status that describes order's validity and fillability.\r\n        bytes32 orderHash;                    // EIP712 hash of the order (see LibOrder.getOrderHash).\r\n        uint256 orderTakerAssetFilledAmount;  // Amount of order that has already been filled.\r\n    }\r\n\r\n    /// @dev Calculates Keccak-256 hash of the order.\r\n    /// @param order The order structure.\r\n    /// @return Keccak-256 EIP712 hash of the order.\r\n    function getOrderHash(Order memory order)\r\n        internal\r\n        view\r\n        returns (bytes32 orderHash)\r\n    {\r\n        orderHash = hashEIP712Message(hashOrder(order));\r\n        return orderHash;\r\n    }\r\n\r\n    /// @dev Calculates EIP712 hash of the order.\r\n    /// @param order The order structure.\r\n    /// @return EIP712 hash of the order.\r\n    function hashOrder(Order memory order)\r\n        internal\r\n        pure\r\n        returns (bytes32 result)\r\n    {\r\n        bytes32 schemaHash = EIP712_ORDER_SCHEMA_HASH;\r\n        bytes32 makerAssetDataHash = keccak256(order.makerAssetData);\r\n        bytes32 takerAssetDataHash = keccak256(order.takerAssetData);\r\n\r\n        // Assembly for more efficiently computing:\r\n        // keccak256(abi.encodePacked(\r\n        //     EIP712_ORDER_SCHEMA_HASH,\r\n        //     bytes32(order.makerAddress),\r\n        //     bytes32(order.takerAddress),\r\n        //     bytes32(order.feeRecipientAddress),\r\n        //     bytes32(order.senderAddress),\r\n        //     order.makerAssetAmount,\r\n        //     order.takerAssetAmount,\r\n        //     order.makerFee,\r\n        //     order.takerFee,\r\n        //     order.expirationTimeSeconds,\r\n        //     order.salt,\r\n        //     keccak256(order.makerAssetData),\r\n        //     keccak256(order.takerAssetData)\r\n        // ));\r\n\r\n        assembly {\r\n            // Calculate memory addresses that will be swapped out before hashing\r\n            let pos1 := sub(order, 32)\r\n            let pos2 := add(order, 320)\r\n            let pos3 := add(order, 352)\r\n\r\n            // Backup\r\n            let temp1 := mload(pos1)\r\n            let temp2 := mload(pos2)\r\n            let temp3 := mload(pos3)\r\n            \r\n            // Hash in place\r\n            mstore(pos1, schemaHash)\r\n            mstore(pos2, makerAssetDataHash)\r\n            mstore(pos3, takerAssetDataHash)\r\n            result := keccak256(pos1, 416)\r\n            \r\n            // Restore\r\n            mstore(pos1, temp1)\r\n            mstore(pos2, temp2)\r\n            mstore(pos3, temp3)\r\n        }\r\n        return result;\r\n    }\r\n}\r\n\r\nlibrary LibBytes {\r\n\r\n    using LibBytes for bytes;\r\n\r\n    /// @dev Gets the memory address for a byte array.\r\n    /// @param input Byte array to lookup.\r\n    /// @return memoryAddress Memory address of byte array. This\r\n    ///         points to the header of the byte array which contains\r\n    ///         the length.\r\n    function rawAddress(bytes memory input)\r\n        internal\r\n        pure\r\n        returns (uint256 memoryAddress)\r\n    {\r\n        assembly {\r\n            memoryAddress := input\r\n        }\r\n        return memoryAddress;\r\n    }\r\n    \r\n    /// @dev Gets the memory address for the contents of a byte array.\r\n    /// @param input Byte array to lookup.\r\n    /// @return memoryAddress Memory address of the contents of the byte array.\r\n    function contentAddress(bytes memory input)\r\n        internal\r\n        pure\r\n        returns (uint256 memoryAddress)\r\n    {\r\n        assembly {\r\n            memoryAddress := add(input, 32)\r\n        }\r\n        return memoryAddress;\r\n    }\r\n\r\n    /// @dev Copies `length` bytes from memory location `source` to `dest`.\r\n    /// @param dest memory address to copy bytes to.\r\n    /// @param source memory address to copy bytes from.\r\n    /// @param length number of bytes to copy.\r\n    function memCopy(\r\n        uint256 dest,\r\n        uint256 source,\r\n        uint256 length\r\n    )\r\n        internal\r\n        pure\r\n    {\r\n        if (length < 32) {\r\n            // Handle a partial word by reading destination and masking\r\n            // off the bits we are interested in.\r\n            // This correctly handles overlap, zero lengths and source == dest\r\n            assembly {\r\n                let mask := sub(exp(256, sub(32, length)), 1)\r\n                let s := and(mload(source), not(mask))\r\n                let d := and(mload(dest), mask)\r\n                mstore(dest, or(s, d))\r\n            }\r\n        } else {\r\n            // Skip the O(length) loop when source == dest.\r\n            if (source == dest) {\r\n                return;\r\n            }\r\n\r\n            // For large copies we copy whole words at a time. The final\r\n            // word is aligned to the end of the range (instead of after the\r\n            // previous) to handle partial words. So a copy will look like this:\r\n            //\r\n            //  ####\r\n            //      ####\r\n            //          ####\r\n            //            ####\r\n            //\r\n            // We handle overlap in the source and destination range by\r\n            // changing the copying direction. This prevents us from\r\n            // overwriting parts of source that we still need to copy.\r\n            //\r\n            // This correctly handles source == dest\r\n            //\r\n            if (source > dest) {\r\n                assembly {\r\n                    // We subtract 32 from `sEnd` and `dEnd` because it\r\n                    // is easier to compare with in the loop, and these\r\n                    // are also the addresses we need for copying the\r\n                    // last bytes.\r\n                    length := sub(length, 32)\r\n                    let sEnd := add(source, length)\r\n                    let dEnd := add(dest, length)\r\n\r\n                    // Remember the last 32 bytes of source\r\n                    // This needs to be done here and not after the loop\r\n                    // because we may have overwritten the last bytes in\r\n                    // source already due to overlap.\r\n                    let last := mload(sEnd)\r\n\r\n                    // Copy whole words front to back\r\n                    // Note: the first check is always true,\r\n                    // this could have been a do-while loop.\r\n                    // solhint-disable-next-line no-empty-blocks\r\n                    for {} lt(source, sEnd) {} {\r\n                        mstore(dest, mload(source))\r\n                        source := add(source, 32)\r\n                        dest := add(dest, 32)\r\n                    }\r\n                    \r\n                    // Write the last 32 bytes\r\n                    mstore(dEnd, last)\r\n                }\r\n            } else {\r\n                assembly {\r\n                    // We subtract 32 from `sEnd` and `dEnd` because those\r\n                    // are the starting points when copying a word at the end.\r\n                    length := sub(length, 32)\r\n                    let sEnd := add(source, length)\r\n                    let dEnd := add(dest, length)\r\n\r\n                    // Remember the first 32 bytes of source\r\n                    // This needs to be done here and not after the loop\r\n                    // because we may have overwritten the first bytes in\r\n                    // source already due to overlap.\r\n                    let first := mload(source)\r\n\r\n                    // Copy whole words back to front\r\n                    // We use a signed comparisson here to allow dEnd to become\r\n                    // negative (happens when source and dest < 32). Valid\r\n                    // addresses in local memory will never be larger than\r\n                    // 2**255, so they can be safely re-interpreted as signed.\r\n                    // Note: the first check is always true,\r\n                    // this could have been a do-while loop.\r\n                    // solhint-disable-next-line no-empty-blocks\r\n                    for {} slt(dest, dEnd) {} {\r\n                        mstore(dEnd, mload(sEnd))\r\n                        sEnd := sub(sEnd, 32)\r\n                        dEnd := sub(dEnd, 32)\r\n                    }\r\n                    \r\n                    // Write the first 32 bytes\r\n                    mstore(dest, first)\r\n                }\r\n            }\r\n        }\r\n    }\r\n\r\n    /// @dev Returns a slices from a byte array.\r\n    /// @param b The byte array to take a slice from.\r\n    /// @param from The starting index for the slice (inclusive).\r\n    /// @param to The final index for the slice (exclusive).\r\n    /// @return result The slice containing bytes at indices [from, to)\r\n    function slice(\r\n        bytes memory b,\r\n        uint256 from,\r\n        uint256 to\r\n    )\r\n        internal\r\n        pure\r\n        returns (bytes memory result)\r\n    {\r\n        require(\r\n            from <= to,\r\n            \"FROM_LESS_THAN_TO_REQUIRED\"\r\n        );\r\n        require(\r\n            to <= b.length,\r\n            \"TO_LESS_THAN_LENGTH_REQUIRED\"\r\n        );\r\n        \r\n        // Create a new bytes structure and copy contents\r\n        result = new bytes(to - from);\r\n        memCopy(\r\n            result.contentAddress(),\r\n            b.contentAddress() + from,\r\n            result.length\r\n        );\r\n        return result;\r\n    }\r\n    \r\n    /// @dev Returns a slice from a byte array without preserving the input.\r\n    /// @param b The byte array to take a slice from. Will be destroyed in the process.\r\n    /// @param from The starting index for the slice (inclusive).\r\n    /// @param to The final index for the slice (exclusive).\r\n    /// @return result The slice containing bytes at indices [from, to)\r\n    /// @dev When `from == 0`, the original array will match the slice. In other cases its state will be corrupted.\r\n    function sliceDestructive(\r\n        bytes memory b,\r\n        uint256 from,\r\n        uint256 to\r\n    )\r\n        internal\r\n        pure\r\n        returns (bytes memory result)\r\n    {\r\n        require(\r\n            from <= to,\r\n            \"FROM_LESS_THAN_TO_REQUIRED\"\r\n        );\r\n        require(\r\n            to <= b.length,\r\n            \"TO_LESS_THAN_LENGTH_REQUIRED\"\r\n        );\r\n        \r\n        // Create a new bytes structure around [from, to) in-place.\r\n        assembly {\r\n            result := add(b, from)\r\n            mstore(result, sub(to, from))\r\n        }\r\n        return result;\r\n    }\r\n\r\n    /// @dev Pops the last byte off of a byte array by modifying its length.\r\n    /// @param b Byte array that will be modified.\r\n    /// @return The byte that was popped off.\r\n    function popLastByte(bytes memory b)\r\n        internal\r\n        pure\r\n        returns (bytes1 result)\r\n    {\r\n        require(\r\n            b.length > 0,\r\n            \"GREATER_THAN_ZERO_LENGTH_REQUIRED\"\r\n        );\r\n\r\n        // Store last byte.\r\n        result = b[b.length - 1];\r\n\r\n        assembly {\r\n            // Decrement length of byte array.\r\n            let newLen := sub(mload(b), 1)\r\n            mstore(b, newLen)\r\n        }\r\n        return result;\r\n    }\r\n\r\n    /// @dev Pops the last 20 bytes off of a byte array by modifying its length.\r\n    /// @param b Byte array that will be modified.\r\n    /// @return The 20 byte address that was popped off.\r\n    function popLast20Bytes(bytes memory b)\r\n        internal\r\n        pure\r\n        returns (address result)\r\n    {\r\n        require(\r\n            b.length >= 20,\r\n            \"GREATER_OR_EQUAL_TO_20_LENGTH_REQUIRED\"\r\n        );\r\n\r\n        // Store last 20 bytes.\r\n        result = readAddress(b, b.length - 20);\r\n\r\n        assembly {\r\n            // Subtract 20 from byte array length.\r\n            let newLen := sub(mload(b), 20)\r\n            mstore(b, newLen)\r\n        }\r\n        return result;\r\n    }\r\n\r\n    /// @dev Tests equality of two byte arrays.\r\n    /// @param lhs First byte array to compare.\r\n    /// @param rhs Second byte array to compare.\r\n    /// @return True if arrays are the same. False otherwise.\r\n    function equals(\r\n        bytes memory lhs,\r\n        bytes memory rhs\r\n    )\r\n        internal\r\n        pure\r\n        returns (bool equal)\r\n    {\r\n        // Keccak gas cost is 30 + numWords * 6. This is a cheap way to compare.\r\n        // We early exit on unequal lengths, but keccak would also correctly\r\n        // handle this.\r\n        return lhs.length == rhs.length && keccak256(lhs) == keccak256(rhs);\r\n    }\r\n\r\n    /// @dev Reads an address from a position in a byte array.\r\n    /// @param b Byte array containing an address.\r\n    /// @param index Index in byte array of address.\r\n    /// @return address from byte array.\r\n    function readAddress(\r\n        bytes memory b,\r\n        uint256 index\r\n    )\r\n        internal\r\n        pure\r\n        returns (address result)\r\n    {\r\n        require(\r\n            b.length >= index + 20,  // 20 is length of address\r\n            \"GREATER_OR_EQUAL_TO_20_LENGTH_REQUIRED\"\r\n        );\r\n\r\n        // Add offset to index:\r\n        // 1. Arrays are prefixed by 32-byte length parameter (add 32 to index)\r\n        // 2. Account for size difference between address length and 32-byte storage word (subtract 12 from index)\r\n        index += 20;\r\n\r\n        // Read address from array memory\r\n        assembly {\r\n            // 1. Add index to address of bytes array\r\n            // 2. Load 32-byte word from memory\r\n            // 3. Apply 20-byte mask to obtain address\r\n            result := and(mload(add(b, index)), 0xffffffffffffffffffffffffffffffffffffffff)\r\n        }\r\n        return result;\r\n    }\r\n\r\n    /// @dev Writes an address into a specific position in a byte array.\r\n    /// @param b Byte array to insert address into.\r\n    /// @param index Index in byte array of address.\r\n    /// @param input Address to put into byte array.\r\n    function writeAddress(\r\n        bytes memory b,\r\n        uint256 index,\r\n        address input\r\n    )\r\n        internal\r\n        pure\r\n    {\r\n        require(\r\n            b.length >= index + 20,  // 20 is length of address\r\n            \"GREATER_OR_EQUAL_TO_20_LENGTH_REQUIRED\"\r\n        );\r\n\r\n        // Add offset to index:\r\n        // 1. Arrays are prefixed by 32-byte length parameter (add 32 to index)\r\n        // 2. Account for size difference between address length and 32-byte storage word (subtract 12 from index)\r\n        index += 20;\r\n\r\n        // Store address into array memory\r\n        assembly {\r\n            // The address occupies 20 bytes and mstore stores 32 bytes.\r\n            // First fetch the 32-byte word where we'll be storing the address, then\r\n            // apply a mask so we have only the bytes in the word that the address will not occupy.\r\n            // Then combine these bytes with the address and store the 32 bytes back to memory with mstore.\r\n\r\n            // 1. Add index to address of bytes array\r\n            // 2. Load 32-byte word from memory\r\n            // 3. Apply 12-byte mask to obtain extra bytes occupying word of memory where we'll store the address\r\n            let neighbors := and(\r\n                mload(add(b, index)),\r\n                0xffffffffffffffffffffffff0000000000000000000000000000000000000000\r\n            )\r\n            \r\n            // Make sure input address is clean.\r\n            // (Solidity does not guarantee this)\r\n            input := and(input, 0xffffffffffffffffffffffffffffffffffffffff)\r\n\r\n            // Store the neighbors and address into memory\r\n            mstore(add(b, index), xor(input, neighbors))\r\n        }\r\n    }\r\n\r\n    /// @dev Reads a bytes32 value from a position in a byte array.\r\n    /// @param b Byte array containing a bytes32 value.\r\n    /// @param index Index in byte array of bytes32 value.\r\n    /// @return bytes32 value from byte array.\r\n    function readBytes32(\r\n        bytes memory b,\r\n        uint256 index\r\n    )\r\n        internal\r\n        pure\r\n        returns (bytes32 result)\r\n    {\r\n        require(\r\n            b.length >= index + 32,\r\n            \"GREATER_OR_EQUAL_TO_32_LENGTH_REQUIRED\"\r\n        );\r\n\r\n        // Arrays are prefixed by a 256 bit length parameter\r\n        index += 32;\r\n\r\n        // Read the bytes32 from array memory\r\n        assembly {\r\n            result := mload(add(b, index))\r\n        }\r\n        return result;\r\n    }\r\n\r\n    /// @dev Writes a bytes32 into a specific position in a byte array.\r\n    /// @param b Byte array to insert <input> into.\r\n    /// @param index Index in byte array of <input>.\r\n    /// @param input bytes32 to put into byte array.\r\n    function writeBytes32(\r\n        bytes memory b,\r\n        uint256 index,\r\n        bytes32 input\r\n    )\r\n        internal\r\n        pure\r\n    {\r\n        require(\r\n            b.length >= index + 32,\r\n            \"GREATER_OR_EQUAL_TO_32_LENGTH_REQUIRED\"\r\n        );\r\n\r\n        // Arrays are prefixed by a 256 bit length parameter\r\n        index += 32;\r\n\r\n        // Read the bytes32 from array memory\r\n        assembly {\r\n            mstore(add(b, index), input)\r\n        }\r\n    }\r\n\r\n    /// @dev Reads a uint256 value from a position in a byte array.\r\n    /// @param b Byte array containing a uint256 value.\r\n    /// @param index Index in byte array of uint256 value.\r\n    /// @return uint256 value from byte array.\r\n    function readUint256(\r\n        bytes memory b,\r\n        uint256 index\r\n    )\r\n        internal\r\n        pure\r\n        returns (uint256 result)\r\n    {\r\n        result = uint256(readBytes32(b, index));\r\n        return result;\r\n    }\r\n\r\n    /// @dev Writes a uint256 into a specific position in a byte array.\r\n    /// @param b Byte array to insert <input> into.\r\n    /// @param index Index in byte array of <input>.\r\n    /// @param input uint256 to put into byte array.\r\n    function writeUint256(\r\n        bytes memory b,\r\n        uint256 index,\r\n        uint256 input\r\n    )\r\n        internal\r\n        pure\r\n    {\r\n        writeBytes32(b, index, bytes32(input));\r\n    }\r\n\r\n    /// @dev Reads an unpadded bytes4 value from a position in a byte array.\r\n    /// @param b Byte array containing a bytes4 value.\r\n    /// @param index Index in byte array of bytes4 value.\r\n    /// @return bytes4 value from byte array.\r\n    function readBytes4(\r\n        bytes memory b,\r\n        uint256 index\r\n    )\r\n        internal\r\n        pure\r\n        returns (bytes4 result)\r\n    {\r\n        require(\r\n            b.length >= index + 4,\r\n            \"GREATER_OR_EQUAL_TO_4_LENGTH_REQUIRED\"\r\n        );\r\n\r\n        // Arrays are prefixed by a 32 byte length field\r\n        index += 32;\r\n\r\n        // Read the bytes4 from array memory\r\n        assembly {\r\n            result := mload(add(b, index))\r\n            // Solidity does not require us to clean the trailing bytes.\r\n            // We do it anyway\r\n            result := and(result, 0xFFFFFFFF00000000000000000000000000000000000000000000000000000000)\r\n        }\r\n        return result;\r\n    }\r\n\r\n    /// @dev Reads nested bytes from a specific position.\r\n    /// @dev NOTE: the returned value overlaps with the input value.\r\n    ///            Both should be treated as immutable.\r\n    /// @param b Byte array containing nested bytes.\r\n    /// @param index Index of nested bytes.\r\n    /// @return result Nested bytes.\r\n    function readBytesWithLength(\r\n        bytes memory b,\r\n        uint256 index\r\n    )\r\n        internal\r\n        pure\r\n        returns (bytes memory result)\r\n    {\r\n        // Read length of nested bytes\r\n        uint256 nestedBytesLength = readUint256(b, index);\r\n        index += 32;\r\n\r\n        // Assert length of <b> is valid, given\r\n        // length of nested bytes\r\n        require(\r\n            b.length >= index + nestedBytesLength,\r\n            \"GREATER_OR_EQUAL_TO_NESTED_BYTES_LENGTH_REQUIRED\"\r\n        );\r\n        \r\n        // Return a pointer to the byte array as it exists inside `b`\r\n        assembly {\r\n            result := add(b, index)\r\n        }\r\n        return result;\r\n    }\r\n\r\n    /// @dev Inserts bytes at a specific position in a byte array.\r\n    /// @param b Byte array to insert <input> into.\r\n    /// @param index Index in byte array of <input>.\r\n    /// @param input bytes to insert.\r\n    function writeBytesWithLength(\r\n        bytes memory b,\r\n        uint256 index,\r\n        bytes memory input\r\n    )\r\n        internal\r\n        pure\r\n    {\r\n        // Assert length of <b> is valid, given\r\n        // length of input\r\n        require(\r\n            b.length >= index + 32 + input.length,  // 32 bytes to store length\r\n            \"GREATER_OR_EQUAL_TO_NESTED_BYTES_LENGTH_REQUIRED\"\r\n        );\r\n\r\n        // Copy <input> into <b>\r\n        memCopy(\r\n            b.contentAddress() + index,\r\n            input.rawAddress(), // includes length of <input>\r\n            input.length + 32   // +32 bytes to store <input> length\r\n        );\r\n    }\r\n\r\n    /// @dev Performs a deep copy of a byte array onto another byte array of greater than or equal length.\r\n    /// @param dest Byte array that will be overwritten with source bytes.\r\n    /// @param source Byte array to copy onto dest bytes.\r\n    function deepCopyBytes(\r\n        bytes memory dest,\r\n        bytes memory source\r\n    )\r\n        internal\r\n        pure\r\n    {\r\n        uint256 sourceLen = source.length;\r\n        // Dest length must be >= source length, or some bytes would not be copied.\r\n        require(\r\n            dest.length >= sourceLen,\r\n            \"GREATER_OR_EQUAL_TO_SOURCE_BYTES_LENGTH_REQUIRED\"\r\n        );\r\n        memCopy(\r\n            dest.contentAddress(),\r\n            source.contentAddress(),\r\n            sourceLen\r\n        );\r\n    }\r\n}\r\n\r\n\r\ncontract LibTransactionDecoder is\r\n    LibExchangeSelectors\r\n{\r\n    using LibBytes for bytes;\r\n\r\n    /// @dev Decodes the call data for an Exchange contract method call.\r\n    /// @param transactionData ABI-encoded calldata for an Exchange\r\n    ///     contract method call.\r\n    /// @return The name of the function called, and the parameters it was\r\n    ///     given.  For single-order fills and cancels, the arrays will have\r\n    ///     just one element.\r\n    function decodeZeroExTransactionData(bytes memory transactionData)\r\n        public\r\n        pure\r\n        returns(\r\n            string memory functionName,\r\n            LibOrder.Order[] memory orders,\r\n            uint256[] memory takerAssetFillAmounts,\r\n            bytes[] memory signatures\r\n        )\r\n    {\r\n        bytes4 functionSelector = transactionData.readBytes4(0);\r\n\r\n        if (functionSelector == BATCH_CANCEL_ORDERS_SELECTOR) {\r\n            functionName = \"batchCancelOrders\";\r\n        } else if (functionSelector == BATCH_FILL_ORDERS_SELECTOR) {\r\n            functionName = \"batchFillOrders\";\r\n        } else if (functionSelector == BATCH_FILL_ORDERS_NO_THROW_SELECTOR) {\r\n            functionName = \"batchFillOrdersNoThrow\";\r\n        } else if (functionSelector == BATCH_FILL_OR_KILL_ORDERS_SELECTOR) {\r\n            functionName = \"batchFillOrKillOrders\";\r\n        } else if (functionSelector == CANCEL_ORDER_SELECTOR) {\r\n            functionName = \"cancelOrder\";\r\n        } else if (functionSelector == FILL_ORDER_SELECTOR) {\r\n            functionName = \"fillOrder\";\r\n        } else if (functionSelector == FILL_ORDER_NO_THROW_SELECTOR) {\r\n            functionName = \"fillOrderNoThrow\";\r\n        } else if (functionSelector == FILL_OR_KILL_ORDER_SELECTOR) {\r\n            functionName = \"fillOrKillOrder\";\r\n        } else if (functionSelector == MARKET_BUY_ORDERS_SELECTOR) {\r\n            functionName = \"marketBuyOrders\";\r\n        } else if (functionSelector == MARKET_BUY_ORDERS_NO_THROW_SELECTOR) {\r\n            functionName = \"marketBuyOrdersNoThrow\";\r\n        } else if (functionSelector == MARKET_SELL_ORDERS_SELECTOR) {\r\n            functionName = \"marketSellOrders\";\r\n        } else if (functionSelector == MARKET_SELL_ORDERS_NO_THROW_SELECTOR) {\r\n            functionName = \"marketSellOrdersNoThrow\";\r\n        } else if (functionSelector == MATCH_ORDERS_SELECTOR) {\r\n            functionName = \"matchOrders\";\r\n        } else if (\r\n            functionSelector == CANCEL_ORDERS_UP_TO_SELECTOR ||\r\n            functionSelector == EXECUTE_TRANSACTION_SELECTOR\r\n            // TODO: add new noThrow cancel functions when https://github.com/0xProject/ZEIPs/issues/35 is merged.\r\n        ) {\r\n            revert(\"UNIMPLEMENTED\");\r\n        } else {\r\n            revert(\"UNKNOWN_FUNCTION_SELECTOR\");\r\n        }\r\n\r\n        if (functionSelector == BATCH_CANCEL_ORDERS_SELECTOR) {\r\n            // solhint-disable-next-line indent\r\n            orders = abi.decode(transactionData.slice(4, transactionData.length), (LibOrder.Order[]));\r\n            takerAssetFillAmounts = new uint256[](0);\r\n            signatures = new bytes[](0);\r\n        } else if (\r\n            functionSelector == BATCH_FILL_OR_KILL_ORDERS_SELECTOR ||\r\n            functionSelector == BATCH_FILL_ORDERS_NO_THROW_SELECTOR ||\r\n            functionSelector == BATCH_FILL_ORDERS_SELECTOR\r\n        ) {\r\n            (orders, takerAssetFillAmounts, signatures) = _makeReturnValuesForBatchFill(transactionData);\r\n        } else if (functionSelector == CANCEL_ORDER_SELECTOR) {\r\n            orders = new LibOrder.Order[](1);\r\n            orders[0] = abi.decode(transactionData.slice(4, transactionData.length), (LibOrder.Order));\r\n            takerAssetFillAmounts = new uint256[](0);\r\n            signatures = new bytes[](0);\r\n        } else if (\r\n            functionSelector == FILL_OR_KILL_ORDER_SELECTOR ||\r\n            functionSelector == FILL_ORDER_SELECTOR ||\r\n            functionSelector == FILL_ORDER_NO_THROW_SELECTOR\r\n        ) {\r\n            (orders, takerAssetFillAmounts, signatures) = _makeReturnValuesForSingleOrderFill(transactionData);\r\n        } else if (\r\n            functionSelector == MARKET_BUY_ORDERS_SELECTOR ||\r\n            functionSelector == MARKET_BUY_ORDERS_NO_THROW_SELECTOR ||\r\n            functionSelector == MARKET_SELL_ORDERS_SELECTOR ||\r\n            functionSelector == MARKET_SELL_ORDERS_NO_THROW_SELECTOR\r\n        ) {\r\n            (orders, takerAssetFillAmounts, signatures) = _makeReturnValuesForMarketFill(transactionData);\r\n        } else if (functionSelector == MATCH_ORDERS_SELECTOR) {\r\n            (\r\n                LibOrder.Order memory leftOrder,\r\n                LibOrder.Order memory rightOrder,\r\n                bytes memory leftSignature,\r\n                bytes memory rightSignature\r\n            ) = abi.decode(\r\n                transactionData.slice(4, transactionData.length),\r\n                (LibOrder.Order, LibOrder.Order, bytes, bytes)\r\n            );\r\n\r\n            orders = new LibOrder.Order[](2);\r\n            orders[0] = leftOrder;\r\n            orders[1] = rightOrder;\r\n\r\n            takerAssetFillAmounts = new uint256[](2);\r\n            takerAssetFillAmounts[0] = leftOrder.takerAssetAmount;\r\n            takerAssetFillAmounts[1] = rightOrder.takerAssetAmount;\r\n\r\n            signatures = new bytes[](2);\r\n            signatures[0] = leftSignature;\r\n            signatures[1] = rightSignature;\r\n        }\r\n    }\r\n\r\n    function _makeReturnValuesForSingleOrderFill(bytes memory transactionData)\r\n        private\r\n        pure\r\n        returns(\r\n            LibOrder.Order[] memory orders,\r\n            uint256[] memory takerAssetFillAmounts,\r\n            bytes[] memory signatures\r\n        )\r\n    {\r\n        orders = new LibOrder.Order[](1);\r\n        takerAssetFillAmounts = new uint256[](1);\r\n        signatures = new bytes[](1);\r\n        // solhint-disable-next-line indent\r\n        (orders[0], takerAssetFillAmounts[0], signatures[0]) = abi.decode(\r\n            transactionData.slice(4, transactionData.length),\r\n            (LibOrder.Order, uint256, bytes)\r\n        );\r\n    }\r\n\r\n    function _makeReturnValuesForBatchFill(bytes memory transactionData)\r\n        private\r\n        pure\r\n        returns(\r\n            LibOrder.Order[] memory orders,\r\n            uint256[] memory takerAssetFillAmounts,\r\n            bytes[] memory signatures\r\n        )\r\n    {\r\n        // solhint-disable-next-line indent\r\n        (orders, takerAssetFillAmounts, signatures) = abi.decode(\r\n            transactionData.slice(4, transactionData.length),\r\n            // solhint-disable-next-line indent\r\n            (LibOrder.Order[], uint256[], bytes[])\r\n        );\r\n    }\r\n\r\n    function _makeReturnValuesForMarketFill(bytes memory transactionData)\r\n        private\r\n        pure\r\n        returns(\r\n            LibOrder.Order[] memory orders,\r\n            uint256[] memory takerAssetFillAmounts,\r\n            bytes[] memory signatures\r\n        )\r\n    {\r\n        takerAssetFillAmounts = new uint256[](1);\r\n        // solhint-disable-next-line indent\r\n        (orders, takerAssetFillAmounts[0], signatures) = abi.decode(\r\n            transactionData.slice(4, transactionData.length),\r\n            // solhint-disable-next-line indent\r\n            (LibOrder.Order[], uint256, bytes[])\r\n        );\r\n    }\r\n}\r\n\r\ncontract EthBalanceChecker {\r\n\r\n    /// @dev Batch fetches ETH balances\r\n    /// @param addresses Array of addresses.\r\n    /// @return Array of ETH balances.\r\n    function getEthBalances(address[] memory addresses)\r\n        public\r\n        view\r\n        returns (uint256[] memory)\r\n    {\r\n        uint256[] memory balances = new uint256[](addresses.length);\r\n        for (uint256 i = 0; i != addresses.length; i++) {\r\n            balances[i] = addresses[i].balance;\r\n        }\r\n        return balances;\r\n    }\r\n\r\n}\r\n\r\n// solhint-disable no-empty-blocks\r\ncontract DevUtils is\r\n    OrderValidationUtils,\r\n    LibTransactionDecoder,\r\n    EthBalanceChecker\r\n{\r\n    constructor (address _exchange, bytes memory _zrxAssetData)\r\n        public\r\n        OrderValidationUtils(_exchange, _zrxAssetData)\r\n    {}\r\n}","ABI":"[{\"constant\":true,\"inputs\":[{\"name\":\"assetData\",\"type\":\"bytes\"}],\"name\":\"decodeERC721AssetData\",\"outputs\":[{\"name\":\"assetProxyId\",\"type\":\"bytes4\"},{\"name\":\"tokenAddress\",\"type\":\"address\"},{\"name\":\"tokenId\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"pure\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"ownerAddress\",\"type\":\"address\"},{\"name\":\"assetData\",\"type\":\"bytes\"}],\"name\":\"getBalanceAndAssetProxyAllowance\",\"outputs\":[{\"name\":\"balance\",\"type\":\"uint256\"},{\"name\":\"allowance\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"ERC1155_PROXY_ID\",\"outputs\":[{\"name\":\"\",\"type\":\"bytes4\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"ownerAddress\",\"type\":\"address\"},{\"name\":\"assetData\",\"type\":\"bytes\"}],\"name\":\"getTransferableAssetAmount\",\"outputs\":[{\"name\":\"transferableAssetAmount\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"ownerAddress\",\"type\":\"address\"},{\"name\":\"assetData\",\"type\":\"bytes[]\"}],\"name\":\"getBatchAssetProxyAllowances\",\"outputs\":[{\"name\":\"allowances\",\"type\":\"uint256[]\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"tokenAddress\",\"type\":\"address\"}],\"name\":\"encodeERC20AssetData\",\"outputs\":[{\"name\":\"assetData\",\"type\":\"bytes\"}],\"payable\":false,\"stateMutability\":\"pure\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"transactionData\",\"type\":\"bytes\"}],\"name\":\"decodeZeroExTransactionData\",\"outputs\":[{\"name\":\"functionName\",\"type\":\"string\"},{\"components\":[{\"name\":\"makerAddress\",\"type\":\"address\"},{\"name\":\"takerAddress\",\"type\":\"address\"},{\"name\":\"feeRecipientAddress\",\"type\":\"address\"},{\"name\":\"senderAddress\",\"type\":\"address\"},{\"name\":\"makerAssetAmount\",\"type\":\"uint256\"},{\"name\":\"takerAssetAmount\",\"type\":\"uint256\"},{\"name\":\"makerFee\",\"type\":\"uint256\"},{\"name\":\"takerFee\",\"type\":\"uint256\"},{\"name\":\"expirationTimeSeconds\",\"type\":\"uint256\"},{\"name\":\"salt\",\"type\":\"uint256\"},{\"name\":\"makerAssetData\",\"type\":\"bytes\"},{\"name\":\"takerAssetData\",\"type\":\"bytes\"}],\"name\":\"orders\",\"type\":\"tuple[]\"},{\"name\":\"takerAssetFillAmounts\",\"type\":\"uint256[]\"},{\"name\":\"signatures\",\"type\":\"bytes[]\"}],\"payable\":false,\"stateMutability\":\"pure\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"ownerAddress\",\"type\":\"address\"},{\"name\":\"assetData\",\"type\":\"bytes\"}],\"name\":\"getBalance\",\"outputs\":[{\"name\":\"balance\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"components\":[{\"name\":\"makerAddress\",\"type\":\"address\"},{\"name\":\"takerAddress\",\"type\":\"address\"},{\"name\":\"feeRecipientAddress\",\"type\":\"address\"},{\"name\":\"senderAddress\",\"type\":\"address\"},{\"name\":\"makerAssetAmount\",\"type\":\"uint256\"},{\"name\":\"takerAssetAmount\",\"type\":\"uint256\"},{\"name\":\"makerFee\",\"type\":\"uint256\"},{\"name\":\"takerFee\",\"type\":\"uint256\"},{\"name\":\"expirationTimeSeconds\",\"type\":\"uint256\"},{\"name\":\"salt\",\"type\":\"uint256\"},{\"name\":\"makerAssetData\",\"type\":\"bytes\"},{\"name\":\"takerAssetData\",\"type\":\"bytes\"}],\"name\":\"orders\",\"type\":\"tuple[]\"},{\"name\":\"signatures\",\"type\":\"bytes[]\"}],\"name\":\"getOrderRelevantStates\",\"outputs\":[{\"components\":[{\"name\":\"orderStatus\",\"type\":\"uint8\"},{\"name\":\"orderHash\",\"type\":\"bytes32\"},{\"name\":\"orderTakerAssetFilledAmount\",\"type\":\"uint256\"}],\"name\":\"ordersInfo\",\"type\":\"tuple[]\"},{\"name\":\"fillableTakerAssetAmounts\",\"type\":\"uint256[]\"},{\"name\":\"isValidSignature\",\"type\":\"bool[]\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"ERC20_PROXY_ID\",\"outputs\":[{\"name\":\"\",\"type\":\"bytes4\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"assetData\",\"type\":\"bytes\"}],\"name\":\"decodeERC20AssetData\",\"outputs\":[{\"name\":\"assetProxyId\",\"type\":\"bytes4\"},{\"name\":\"tokenAddress\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"pure\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"components\":[{\"name\":\"makerAddress\",\"type\":\"address\"},{\"name\":\"takerAddress\",\"type\":\"address\"},{\"name\":\"feeRecipientAddress\",\"type\":\"address\"},{\"name\":\"senderAddress\",\"type\":\"address\"},{\"name\":\"makerAssetAmount\",\"type\":\"uint256\"},{\"name\":\"takerAssetAmount\",\"type\":\"uint256\"},{\"name\":\"makerFee\",\"type\":\"uint256\"},{\"name\":\"takerFee\",\"type\":\"uint256\"},{\"name\":\"expirationTimeSeconds\",\"type\":\"uint256\"},{\"name\":\"salt\",\"type\":\"uint256\"},{\"name\":\"makerAssetData\",\"type\":\"bytes\"},{\"name\":\"takerAssetData\",\"type\":\"bytes\"}],\"name\":\"order\",\"type\":\"tuple\"},{\"name\":\"signature\",\"type\":\"bytes\"}],\"name\":\"getOrderRelevantState\",\"outputs\":[{\"components\":[{\"name\":\"orderStatus\",\"type\":\"uint8\"},{\"name\":\"orderHash\",\"type\":\"bytes32\"},{\"name\":\"orderTakerAssetFilledAmount\",\"type\":\"uint256\"}],\"name\":\"orderInfo\",\"type\":\"tuple\"},{\"name\":\"fillableTakerAssetAmount\",\"type\":\"uint256\"},{\"name\":\"isValidSignature\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"assetData\",\"type\":\"bytes\"}],\"name\":\"decodeERC1155AssetData\",\"outputs\":[{\"name\":\"assetProxyId\",\"type\":\"bytes4\"},{\"name\":\"tokenAddress\",\"type\":\"address\"},{\"name\":\"tokenIds\",\"type\":\"uint256[]\"},{\"name\":\"tokenValues\",\"type\":\"uint256[]\"},{\"name\":\"callbackData\",\"type\":\"bytes\"}],\"payable\":false,\"stateMutability\":\"pure\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"addresses\",\"type\":\"address[]\"}],\"name\":\"getEthBalances\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256[]\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"ERC721_PROXY_ID\",\"outputs\":[{\"name\":\"\",\"type\":\"bytes4\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"tokenAddress\",\"type\":\"address\"},{\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"encodeERC721AssetData\",\"outputs\":[{\"name\":\"assetData\",\"type\":\"bytes\"}],\"payable\":false,\"stateMutability\":\"pure\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"MULTI_ASSET_PROXY_ID\",\"outputs\":[{\"name\":\"\",\"type\":\"bytes4\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"tokenAddress\",\"type\":\"address\"},{\"name\":\"tokenIds\",\"type\":\"uint256[]\"},{\"name\":\"tokenValues\",\"type\":\"uint256[]\"},{\"name\":\"callbackData\",\"type\":\"bytes\"}],\"name\":\"encodeERC1155AssetData\",\"outputs\":[{\"name\":\"assetData\",\"type\":\"bytes\"}],\"payable\":false,\"stateMutability\":\"pure\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"tokenAddress\",\"type\":\"address\"},{\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"getERC721TokenOwner\",\"outputs\":[{\"name\":\"ownerAddress\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"assetData\",\"type\":\"bytes\"}],\"name\":\"decodeMultiAssetData\",\"outputs\":[{\"name\":\"assetProxyId\",\"type\":\"bytes4\"},{\"name\":\"amounts\",\"type\":\"uint256[]\"},{\"name\":\"nestedAssetData\",\"type\":\"bytes[]\"}],\"payable\":false,\"stateMutability\":\"pure\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"ownerAddress\",\"type\":\"address\"},{\"name\":\"assetData\",\"type\":\"bytes[]\"}],\"name\":\"getBatchBalances\",\"outputs\":[{\"name\":\"balances\",\"type\":\"uint256[]\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"ownerAddress\",\"type\":\"address\"},{\"name\":\"assetData\",\"type\":\"bytes\"}],\"name\":\"getAssetProxyAllowance\",\"outputs\":[{\"name\":\"allowance\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"amounts\",\"type\":\"uint256[]\"},{\"name\":\"nestedAssetData\",\"type\":\"bytes[]\"}],\"name\":\"encodeMultiAssetData\",\"outputs\":[{\"name\":\"assetData\",\"type\":\"bytes\"}],\"payable\":false,\"stateMutability\":\"pure\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"STATIC_CALL_PROXY_ID\",\"outputs\":[{\"name\":\"\",\"type\":\"bytes4\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"ownerAddress\",\"type\":\"address\"},{\"name\":\"assetData\",\"type\":\"bytes[]\"}],\"name\":\"getBatchBalancesAndAssetProxyAllowances\",\"outputs\":[{\"name\":\"balances\",\"type\":\"uint256[]\"},{\"name\":\"allowances\",\"type\":\"uint256[]\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"name\":\"_exchange\",\"type\":\"address\"},{\"name\":\"_zrxAssetData\",\"type\":\"bytes\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"}]","ContractName":"DevUtils","CompilerVersion":"v0.5.10+commit.5a6ea5b1","OptimizationUsed":"0","Runs":"200","ConstructorArguments":"000000000000000000000000080bf510fcbf18b91105470639e95610229377120000000000000000000000000000000000000000000000000000000000000040000000000000000000000000000000000000000000000000000000000000008000000000000000000000000000000000000000000000000000000000000000200000000000000000000000000000000000000000000000000000000000000024f47261b0000000000000000000000000e41d2489571d322189246dafa5ebde1f4699f49800000000000000000000000000000000000000000000000000000000","Library":"","LicenseType":"MIT","SwarmSource":"bzzr://122c63c351788e4696aa89c8a4bbdb965ab37131906019134346c45eb9f4cc34"}]}