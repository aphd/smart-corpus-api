{"status":"1","message":"OK","result":[{"SourceCode":"pragma solidity ^0.5.9;\r\n\r\n\r\ninterface ERC20 {\r\n    function totalSupply() external view returns (uint supply);\r\n    function balanceOf(address _owner) external view returns (uint balance);\r\n    function transfer(address _to, uint _value) external returns (bool success);\r\n    function transferFrom(address _from, address _to, uint _value) external returns (bool success);\r\n    function approve(address _spender, uint _value) external returns (bool success);\r\n    function allowance(address _owner, address _spender) external view returns (uint remaining);\r\n    function decimals() external view returns(uint digits);\r\n    event Approval(address indexed _owner, address indexed _spender, uint _value);\r\n}\r\n\r\n\r\ncontract OtcInterface {\r\n    function getOffer(uint id) external view returns (uint, ERC20, uint, ERC20);\r\n    function getBestOffer(ERC20 sellGem, ERC20 buyGem) external view returns(uint);\r\n    function getWorseOffer(uint id) external view returns(uint);\r\n    function take(bytes32 id, uint128 maxTakeAmount) external;\r\n}\r\n\r\n\r\ncontract WethInterface is ERC20 {\r\n    function deposit() public payable;\r\n    function withdraw(uint) public;\r\n}\r\n\r\n\r\ncontract TradeEth2DAI {\r\n    \r\n    address public admin;\r\n    uint constant INVALID_ID = uint(-1);\r\n    uint constant internal COMMON_DECIMALS = 18;\r\n    OtcInterface public otc = OtcInterface(0x39755357759cE0d7f32dC8dC45414CCa409AE24e);\r\n    WethInterface public wethToken = WethInterface(0xC02aaA39b223FE8D0A0e5C4F27eAD9083C756Cc2);\r\n    ERC20 DAIToken = ERC20(0x89d24A6b4CcB1B6fAA2625fE562bDD9a23260359);\r\n    \r\n    constructor(\r\n        OtcInterface _otc,\r\n        WethInterface _wethToken,\r\n        address _admin\r\n    )\r\n        public\r\n    {\r\n        require(_admin != address(0));\r\n        require(address(_otc) != address(0));\r\n        require(address(_wethToken) != address(0));\r\n        require(_wethToken.decimals() == COMMON_DECIMALS);\r\n\r\n        otc = _otc;\r\n        wethToken = _wethToken;\r\n        admin = _admin;\r\n\r\n        require(DAIToken.approve(address(otc), 2**255));\r\n        require(wethToken.approve(address(otc), 2**255));\r\n    }\r\n\r\n    event TradeExecute(\r\n        address indexed sender,\r\n        bool isEthToDai,\r\n        uint srcAmount,\r\n        uint destAmount,\r\n        address destAddress\r\n    );\r\n\r\n    function tradeEthVsDAI(\r\n        uint numTakeOrders,\r\n        bool isEthToDai,\r\n        uint srcAmount\r\n    )\r\n        public\r\n        payable\r\n    {\r\n        address payable dstAddress = msg.sender;\r\n        uint userTotalDestAmount;\r\n        \r\n        if (isEthToDai) {\r\n            require(msg.value == srcAmount);\r\n            wethToken.deposit.value(msg.value)();\r\n            userTotalDestAmount = takeOrders(wethToken, DAIToken, srcAmount, numTakeOrders);\r\n            require(DAIToken.transfer(dstAddress, userTotalDestAmount));\r\n        } else {\r\n            //Dai To Eth\r\n            userTotalDestAmount = takeOrders(DAIToken, wethToken, srcAmount, numTakeOrders);\r\n            require(DAIToken.transferFrom(msg.sender, address(this), srcAmount));\r\n            wethToken.withdraw(userTotalDestAmount);    \r\n            dstAddress.transfer(userTotalDestAmount);\r\n        }\r\n\r\n        emit TradeExecute(msg.sender, isEthToDai, srcAmount, userTotalDestAmount, dstAddress);\r\n    }\r\n\r\n    function getNextOffer(uint prevOfferId, bool isEthToDai) public view\r\n        returns(uint offerId, uint offerPayAmount, uint offerBuyAmount) \r\n    {\r\n        uint prevId = prevOfferId == 0 ? INVALID_ID : prevOfferId;       \r\n        \r\n        if(isEthToDai) {\r\n            return(getNextBestOffer(wethToken, DAIToken, 1, prevId));\r\n        }\r\n        \r\n        return(getNextBestOffer(DAIToken, wethToken, 1, prevId));\r\n    }\r\n    \r\n    function getNextBestOffer(\r\n        ERC20 offerSellGem,\r\n        ERC20 offerBuyGem,\r\n        uint payAmount,\r\n        uint prevOfferId\r\n    )\r\n        public\r\n        view\r\n        returns(\r\n            uint offerId,\r\n            uint offerPayAmount,\r\n            uint offerBuyAmount\r\n        )\r\n    {\r\n        if (prevOfferId == INVALID_ID) {\r\n            offerId = otc.getBestOffer(offerSellGem, offerBuyGem);\r\n        } else {\r\n            offerId = otc.getWorseOffer(prevOfferId);\r\n        }\r\n\r\n        (offerPayAmount, , offerBuyAmount, ) = otc.getOffer(offerId);\r\n\r\n        while (payAmount > offerBuyAmount) {\r\n            offerId = otc.getWorseOffer(offerId); // next best offer\r\n            if (offerId == 0) {\r\n                offerId = 0;\r\n                offerPayAmount = 0;\r\n                offerBuyAmount = 0;\r\n                break;\r\n            }\r\n            (offerPayAmount, , offerBuyAmount, ) = otc.getOffer(offerId);\r\n        }\r\n    }\r\n    \r\n    function takeOrders(ERC20 srcToken, ERC20 dstToken, uint srcAmount, uint numTakeOrders) internal \r\n        returns(uint userTotalDestAmount)\r\n    {\r\n        uint remainingAmount = srcAmount;\r\n        uint destAmount;\r\n        uint offerId = INVALID_ID;\r\n        \r\n        for (uint i = numTakeOrders; i > 0; i--) {\r\n            \r\n            (offerId, , ) = getNextBestOffer(srcToken, dstToken, remainingAmount / i, offerId);\r\n            \r\n            require(offerId > 0);\r\n            \r\n            destAmount = takeMatchingOffer(remainingAmount / i, offerId);\r\n            userTotalDestAmount += destAmount;\r\n            remainingAmount -= (remainingAmount / i);\r\n        }\r\n    }\r\n    \r\n    function takeMatchingOffer(\r\n        uint srcAmount, \r\n        uint offerId\r\n    )\r\n        internal\r\n        returns(uint actualDestAmount)\r\n    {\r\n        uint offerPayAmt;\r\n        uint offerBuyAmt;\r\n\r\n        // otc's terminology is of offer maker, so their sellGem is our (the taker's) dest token.\r\n        (offerPayAmt, , offerBuyAmt, ) = otc.getOffer(offerId);\r\n        \r\n        actualDestAmount = srcAmount * offerPayAmt / offerBuyAmt;\r\n\r\n        require(uint128(actualDestAmount) == actualDestAmount);\r\n        otc.take(bytes32(offerId), uint128(actualDestAmount));  // Take the portion of the offer that we need\r\n        return(actualDestAmount);\r\n    }\r\n\r\n}","ABI":"[{\"constant\":true,\"inputs\":[],\"name\":\"otc\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"wethToken\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"prevOfferId\",\"type\":\"uint256\"},{\"name\":\"isEthToDai\",\"type\":\"bool\"}],\"name\":\"getNextOffer\",\"outputs\":[{\"name\":\"offerId\",\"type\":\"uint256\"},{\"name\":\"offerPayAmount\",\"type\":\"uint256\"},{\"name\":\"offerBuyAmount\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"offerSellGem\",\"type\":\"address\"},{\"name\":\"offerBuyGem\",\"type\":\"address\"},{\"name\":\"payAmount\",\"type\":\"uint256\"},{\"name\":\"prevOfferId\",\"type\":\"uint256\"}],\"name\":\"getNextBestOffer\",\"outputs\":[{\"name\":\"offerId\",\"type\":\"uint256\"},{\"name\":\"offerPayAmount\",\"type\":\"uint256\"},{\"name\":\"offerBuyAmount\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"numTakeOrders\",\"type\":\"uint256\"},{\"name\":\"isEthToDai\",\"type\":\"bool\"},{\"name\":\"srcAmount\",\"type\":\"uint256\"}],\"name\":\"tradeEthVsDAI\",\"outputs\":[],\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"admin\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"name\":\"_otc\",\"type\":\"address\"},{\"name\":\"_wethToken\",\"type\":\"address\"},{\"name\":\"_admin\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"sender\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"isEthToDai\",\"type\":\"bool\"},{\"indexed\":false,\"name\":\"srcAmount\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"destAmount\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"destAddress\",\"type\":\"address\"}],\"name\":\"TradeExecute\",\"type\":\"event\"}]","ContractName":"TradeEth2DAI","CompilerVersion":"v0.5.10+commit.5a6ea5b1","OptimizationUsed":"1","Runs":"200","ConstructorArguments":"00000000000000000000000039755357759ce0d7f32dc8dc45414cca409ae24e000000000000000000000000c02aaa39b223fe8d0a0e5c4f27ead9083c756cc2000000000000000000000000d3cc03c1d1e9d46f28aebc4ba26c5990c7ffbc3e","Library":"","LicenseType":"MIT","SwarmSource":"bzzr://424d5777f77838e3439a11a6bcd1c6b4044418a9a5cb366f9cc947c11172ebd7"}]}