{"status":"1","message":"OK","result":[{"SourceCode":"pragma solidity ^0.4.24;\r\n\r\n/*\r\n\r\n\r\n ___ ___  __ __  _     ______  ____      _____   ___   ___ ___   ___  \r\n|   |   ||  |  || |   |      ||    |    |     | /   \\ |   |   | /   \\ \r\n| _   _ ||  |  || |   |      | |  |     |   __||     || _   _ ||     |\r\n|  \\_/  ||  |  || |___|_|  |_| |  |     |  |_  |  O  ||  \\_/  ||  O  |\r\n|   |   ||  :  ||     | |  |   |  |     |   _] |     ||   |   ||     |\r\n|   |   ||     ||     | |  |   |  |     |  |   |     ||   |   ||     |\r\n|___|___| \\__,_||_____| |__|  |____|    |__|    \\___/ |___|___| \\___/ \r\n                                                                      \r\n\r\n\r\nwebsite:    https://multifomo.xyz\r\n\r\ndiscord:    https://discord.gg/tcXvw9a\r\n\r\nMULTI FOMO let's YOU play multiple FOMO games at once with various deadlines!\r\n\r\nWhen you purchase a FOMO game you start a 24 hour countdown clock.   If no one buys your game\r\nbefore the deadline, then the price reverts to the game base price and you receive your yield\r\nportion of the Jackpot.\r\n\r\nThe games are:\r\n\r\nEmerald -  Base Price - 1.00 ETH \r\nDiamond -  Base Price - 0.50 ETH \r\nSafire -   Base Price - 0.30 ETH \r\nPlatinum - Base Price - 0.20 ETH \r\nGold -     Base Price - 0.10 ETH \r\nSilver -   Base Price - 0.05 ETH \r\n\r\nYou can extend your deadline 24 Hours by paying 10% of the current price.\r\n\r\nEvery time someone buys a game the price jumps 50%.   When someone buys your game,\r\nyou receive the amount you purchased PLUS 70% of the gain.\r\n\r\n15% goes to the FOMO Jackpot.\r\n\r\nThe yields are based on the relative price of your game compared to the total value of all games. \r\n\r\nA bonus referral program is available.   Using your Masternode you will collect 5% of any net gains made during a purchase by the user of your masternode.\r\n\r\nEvery purchase of a FOMO game gives you FOMO tokens whcih can be used for future MultiFOMO games.\r\n\r\n*/\r\n\r\ninterface IERC20 {\r\n  function totalSupply() external view returns (uint256);\r\n  function balanceOf(address who) external view returns (uint256);\r\n  function allowance(address owner, address spender) external view returns (uint256);\r\n  function transfer(address to, uint256 value) external returns (bool);\r\n  function approve(address spender, uint256 value) external returns (bool);\r\n  function transferFrom(address from, address to, uint256 value) external returns (bool);\r\n\r\n  event Transfer(address indexed from, address indexed to, uint256 value);\r\n  event Approval(address indexed owner, address indexed spender, uint256 value);\r\n  event Jackpot(address customerAddress, uint bond, uint amount);\r\n\r\n}\r\n\r\nlibrary SafeMath {\r\n  function mul(uint256 a, uint256 b) internal pure returns (uint256) {\r\n    if (a == 0) {\r\n      return 0;\r\n    }\r\n    uint256 c = a * b;\r\n    assert(c / a == b);\r\n    return c;\r\n  }\r\n\r\n  function div(uint256 a, uint256 b) internal pure returns (uint256) {\r\n    uint256 c = a / b;\r\n    return c;\r\n  }\r\n\r\n  function sub(uint256 a, uint256 b) internal pure returns (uint256) {\r\n    assert(b <= a);\r\n    return a - b;\r\n  }\r\n\r\n  function add(uint256 a, uint256 b) internal pure returns (uint256) {\r\n    uint256 c = a + b;\r\n    assert(c >= a);\r\n    return c;\r\n  }\r\n\r\n  function ceil(uint256 a, uint256 m) internal pure returns (uint256) {\r\n    uint256 c = add(a,m);\r\n    uint256 d = sub(c,1);\r\n    return mul(div(d,m),m);\r\n  }\r\n}\r\n\r\ncontract ERC20Detailed is IERC20 {\r\n\r\n    uint8 private _Tokendecimals;\r\n    string private _Tokenname;\r\n    string private _Tokensymbol;\r\n\r\n    constructor(string memory name, string memory symbol, uint8 decimals) public {\r\n   \r\n        _Tokendecimals = decimals;\r\n        _Tokenname = name;\r\n        _Tokensymbol = symbol;\r\n    \r\n}\r\n\r\n    function name() public view returns(string memory) {\r\n        return _Tokenname;\r\n    }\r\n\r\n    function symbol() public view returns(string memory) {\r\n        return _Tokensymbol;\r\n    }\r\n\r\n    function decimals() public view returns(uint8) {\r\n        return _Tokendecimals;\r\n    }\r\n}\r\n\r\ncontract MULTIFOMO is ERC20Detailed {\r\n    /*=================================\r\n    =        MODIFIERS        =\r\n    =================================*/\r\n    using SafeMath for uint256;\r\n\r\n    mapping (address => uint256) public _FOMOTokenBalances;\r\n    mapping (address => mapping (address => uint256)) private _allowed;\r\n    uint256 _totalSupply = 0;\r\n   \r\n    function totalSupply() public view returns (uint256) {\r\n        return _totalSupply;\r\n    }\r\n\r\n    function myTokens() public view returns (uint256) {\r\n        return _FOMOTokenBalances[msg.sender];\r\n    }\r\n\r\n    function balanceOf(address owner) public view returns (uint256) {\r\n        return _FOMOTokenBalances[owner];\r\n    }\r\n\r\n    function allowance(address owner, address spender) public view returns (uint256) {\r\n        return _allowed[owner][spender];\r\n    }\r\n\r\n    modifier onlyOwner(){\r\n        \r\n        require(msg.sender == dev);\r\n        _;\r\n    }\r\n\r\n    \r\n    modifier onlyActive(){\r\n        \r\n        require(boolContractActive);\r\n        _;\r\n    }\r\n\r\n    /*==============================\r\n    =            EVENTS            =\r\n    ==============================*/\r\n    event onBondBuy(\r\n        address customerAddress,\r\n        uint256 incomingEthereum,\r\n        uint256 bond,\r\n        uint256 newPrice\r\n    );\r\n    \r\n    event onWithdrawETH(\r\n        address customerAddress,\r\n        uint256 ethereumWithdrawn\r\n    );\r\n\r\n    event onWithdrawTokens(\r\n        address customerAddress,\r\n        uint256 ethereumWithdrawn\r\n    );\r\n    \r\n    // ERC20\r\n    event transferBondEvent(\r\n        address from,\r\n        address to,\r\n        uint256 bond\r\n    );\r\n\r\n\r\n\r\n\r\n    \r\n    /*=====================================\r\n    =            CONFIGURABLES            =\r\n    =====================================*/\r\n    string public name = \"MULTIFOMO\";\r\n    string public symbol = \"FOMO\";\r\n\r\n    uint8 constant public referralRate = 5; \r\n\r\n    uint public totalBondValue;\r\n\r\n    uint constant dayBlockFactor = 21600;\r\n\r\n    uint contractETH = 0;\r\n\r\n    \r\n   /*================================\r\n    =            DATASETS            =\r\n    ================================*/\r\n    \r\n    mapping(uint => address) internal bondOwner;\r\n    mapping(uint => uint) public bondPrice;\r\n    mapping(uint => uint) public basePrice;\r\n    mapping(uint => uint) internal bondPreviousPrice;\r\n    mapping(address => uint) internal ownerAccounts;\r\n    mapping(uint => uint) internal totalBondDivs;\r\n    mapping(uint => uint) internal totalBondDivsETH;\r\n    mapping(uint => uint) public bondDeadline;\r\n    mapping(uint => bool) internal jackpotPaid;\r\n\r\n    mapping(uint => uint) internal bondBlockNumber;\r\n\r\n    mapping(address => uint) internal ownerAccountsETH;\r\n\r\n    uint bondPriceIncrement = 150;   //50% Price Increases\r\n    uint totalDivsProduced = 0;\r\n\r\n    uint public maxBonds = 200;\r\n\r\n    uint public bondDeadlineInc = 40;   //21600\r\n    \r\n    uint public initialPrice = 0.1 ether;  \r\n\r\n    uint public fomoPot = 0;\r\n\r\n    uint public nextAvailableBond;\r\n\r\n    bool allowReferral = false;\r\n\r\n    bool allowAutoNewBond = false;\r\n\r\n    uint8 devDivRate = 15;\r\n    uint8 ownerDivRate = 70;\r\n    uint8 fomoPotRate = 15;\r\n\r\n    uint contractBalance = 0;\r\n\r\n    address dev;\r\n\r\n    uint256 internal tokenSupply_ = 0;\r\n\r\n    bool public boolContractActive = true;\r\n\r\n    string constant tokenName = \"MULTIFOMO\";\r\n    string constant tokenSymbol = \"FOMO\";\r\n    uint8  constant tokenDecimals = 18;\r\n    uint constant tokenPrice = 0.001 ether;\r\n    uint public FOMOFund;\r\n\r\n    /*=======================================\r\n    =            PUBLIC FUNCTIONS            =\r\n    =======================================*/\r\n    /*\r\n    * -- APPLICATION ENTRY POINTS --  \r\n    */\r\n    constructor() public payable ERC20Detailed(tokenName, tokenSymbol, tokenDecimals)\r\n        \r\n    {\r\n\r\n        dev = msg.sender;\r\n        nextAvailableBond = 7;\r\n\r\n        bondOwner[1] = dev;\r\n        bondPrice[1] = 1 ether;  \r\n        basePrice[1] = bondPrice[1];\r\n        bondPreviousPrice[1] = 0;\r\n        jackpotPaid[1] = true;\r\n        bondDeadline[1] = SafeMath.add(block.number,bondDeadlineInc);\r\n\r\n        bondOwner[2] = dev;\r\n        bondPrice[2] = 0.5 ether;  \r\n        basePrice[2] = bondPrice[2];\r\n        bondPreviousPrice[2] = 0;\r\n        jackpotPaid[2] = true;\r\n        bondDeadline[2] = SafeMath.add(block.number,bondDeadlineInc);\r\n\r\n        bondOwner[3] = dev;\r\n        bondPrice[3] = 0.3 ether;  \r\n        basePrice[3] = bondPrice[3];\r\n        bondPreviousPrice[3] = 0;\r\n        jackpotPaid[3] = true;\r\n        bondDeadline[3] = SafeMath.add(block.number,bondDeadlineInc);\r\n\r\n        bondOwner[4] = dev;\r\n        bondPrice[4] = 0.2 ether;  \r\n        basePrice[4] = bondPrice[4];\r\n        bondPreviousPrice[4] = 0;\r\n        jackpotPaid[4] = true;\r\n        bondDeadline[4] = SafeMath.add(block.number,bondDeadlineInc);\r\n\r\n        bondOwner[5] = dev;\r\n        bondPrice[5] = 0.1 ether;   \r\n        basePrice[5] = bondPrice[5];\r\n        bondPreviousPrice[5] = 0;\r\n        jackpotPaid[5] = true;\r\n        bondDeadline[5] = SafeMath.add(block.number,bondDeadlineInc);\r\n\r\n        bondOwner[6] = dev;\r\n        bondPrice[6] = 0.05 ether;  \r\n        basePrice[6] = bondPrice[6];\r\n        bondPreviousPrice[6] = 0;\r\n        jackpotPaid[6] = true;\r\n        bondDeadline[6] = SafeMath.add(block.number,bondDeadlineInc);\r\n\r\n        getTotalBondValue();\r\n       \r\n\r\n    }\r\n\r\n\r\n\r\n        // Fallback function: add funds to the addional distibution amount.   This is what will be contributed from the exchange \r\n     // and other contracts\r\n\r\n    function()\r\n    {\r\n       \r\n    }\r\n    \r\n\r\n\r\n    function buy(uint _bond, address _referrer)\r\n        public \r\n        payable\r\n        onlyActive()\r\n    {\r\n        uint _value = msg.value;\r\n        address _sender = msg.sender;\r\n        require(_bond <= nextAvailableBond);\r\n\r\n        if (block.number > bondDeadline[_bond]){   //distribute jackpot\r\n            distributeJackpot(_bond);\r\n            bondPrice[_bond] = basePrice[_bond];\r\n            bondPreviousPrice[_bond] = 0;\r\n        } \r\n\r\n        require(_value >= bondPrice[_bond]);\r\n        uint256 tokensToBuy = SafeMath.mul(SafeMath.div(_value,tokenPrice),1e18);  \r\n        _FOMOTokenBalances[msg.sender] = SafeMath.add(_FOMOTokenBalances[msg.sender],tokensToBuy);\r\n        FOMOFund = SafeMath.add(FOMOFund,tokensToBuy);\r\n        _totalSupply = _totalSupply + tokensToBuy * 2; \r\n\r\n        emit Transfer(address(this), msg.sender, tokensToBuy);\r\n\r\n        uint _baseDividends = _value - bondPreviousPrice[_bond];\r\n        totalDivsProduced = SafeMath.add(totalDivsProduced, _baseDividends);\r\n\r\n    \r\n        uint _ownerDividends = SafeMath.div(SafeMath.mul(_baseDividends,ownerDivRate),100);\r\n\r\n        totalBondDivs[_bond] = SafeMath.add(totalBondDivs[_bond],_ownerDividends);\r\n        _ownerDividends = SafeMath.add(_ownerDividends,bondPreviousPrice[_bond]);\r\n            \r\n        uint _potDividends = SafeMath.div(SafeMath.mul(_baseDividends,fomoPotRate),100);\r\n\r\n        if (allowReferral && (_referrer != _sender) && (_referrer != 0x0000000000000000000000000000000000000000)) {\r\n                \r\n            uint _referralDividends = SafeMath.div(SafeMath.mul(_baseDividends,referralRate),100);\r\n            _potDividends = SafeMath.sub(_potDividends,_referralDividends);\r\n            _referrer.transfer(_referralDividends);\r\n        }\r\n            \r\n        address _previousOwner = bondOwner[_bond];\r\n        address _newOwner = _sender;\r\n\r\n        _previousOwner.transfer(_ownerDividends);\r\n        dev.transfer(SafeMath.div(SafeMath.mul(_baseDividends,devDivRate),100));\r\n        bondOwner[_bond] = _newOwner;\r\n        fomoPot = SafeMath.add(fomoPot,_potDividends);\r\n        bondDeadline[_bond] = SafeMath.add(block.number,bondDeadlineInc);\r\n        bondPreviousPrice[_bond] = _value;\r\n        bondPrice[_bond] = SafeMath.div(SafeMath.mul(_value,bondPriceIncrement),100);\r\n        getTotalBondValue();\r\n\r\n    }\r\n\r\n    function ownerExtend(address _owner, uint _bond) public payable {\r\n        require(msg.sender == bondOwner[_bond]);\r\n\r\n        uint extendAmount = SafeMath.div(SafeMath.mul(bondPrice[_bond],10),100);\r\n        require(msg.value >= extendAmount);\r\n        bondPrice[_bond] = bondPrice[_bond] + msg.value;\r\n        uint devFee = SafeMath.div(SafeMath.mul(msg.value, 20),100);\r\n        uint jackpotFee = SafeMath.div(SafeMath.mul(msg.value, 80),100);\r\n        bondDeadline[_bond] = SafeMath.add(block.number,bondDeadlineInc);\r\n        fomoPot = fomoPot + jackpotFee;\r\n        dev.transfer(devFee);\r\n\r\n    }\r\n\r\n    function distributeJackpot(uint _bond) internal\r\n   \r\n    {\r\n        uint _distAmountLocal = SafeMath.div(SafeMath.mul(bondPrice[_bond],fomoPot),totalBondValue);\r\n        \r\n        bondOwner[_bond].transfer(_distAmountLocal);\r\n        totalBondDivs[_bond] = SafeMath.add(totalBondDivs[_bond],_distAmountLocal);\r\n        //getTotalBondValue();\r\n        emit Jackpot(bondOwner[_bond],_bond,_distAmountLocal);\r\n    \r\n    }\r\n\r\n\r\n    /*----------  ADMINISTRATOR ONLY FUNCTIONS  ----------*/\r\n    /**\r\n\r\n    /**\r\n     * If we want to rebrand, we can.\r\n     */\r\n    function setName(string _name)\r\n        onlyOwner()\r\n        public\r\n    {\r\n        name = _name;\r\n    }\r\n    \r\n    /**\r\n     * If we want to rebrand, we can.\r\n     */\r\n    function setSymbol(string _symbol)\r\n        onlyOwner()\r\n        public\r\n    {\r\n        symbol = _symbol;\r\n    }\r\n\r\n    function setInitialPrice(uint _price)\r\n        onlyOwner()\r\n        public\r\n    {\r\n        initialPrice = _price;\r\n    }\r\n\r\n    function setMaxbonds(uint _bond)  \r\n        onlyOwner()\r\n        public\r\n    {\r\n        maxBonds = _bond;\r\n    }\r\n\r\n    function setBondDeadline(uint _value)  \r\n        onlyOwner()\r\n        public\r\n    {\r\n        bondDeadlineInc = _value;\r\n    }\r\n\r\n    function setBondPrice(uint _bond, uint _price)   //Allow the changing of a bond price owner if the dev owns it \r\n        onlyOwner()\r\n        public\r\n    {\r\n        require(bondOwner[_bond] == dev);\r\n\r\n        bondPreviousPrice[_bond] = 0;  \r\n\r\n        bondPrice[_bond] = _price;\r\n\r\n        getTotalBondValue();\r\n     \r\n    }\r\n    \r\n    function addNewbond(uint _price) \r\n        onlyOwner()\r\n        public\r\n    {\r\n        require(nextAvailableBond < maxBonds);\r\n        bondPrice[nextAvailableBond] = _price;\r\n        bondOwner[nextAvailableBond] = dev;\r\n        totalBondDivs[nextAvailableBond] = 0;\r\n        bondPreviousPrice[nextAvailableBond] = 0;\r\n        bondDeadline[nextAvailableBond] = SafeMath.add(block.number,bondDeadlineInc);\r\n        nextAvailableBond = nextAvailableBond + 1;\r\n        \r\n        getTotalBondValue();\r\n     \r\n    }\r\n\r\n\r\n    function setAllowReferral(bool _allowReferral)   \r\n        onlyOwner()\r\n        public\r\n    {\r\n        allowReferral = _allowReferral;\r\n    }\r\n\r\n    function setAutoNewbond(bool _autoNewBond)   \r\n        onlyOwner()\r\n        public\r\n    {\r\n        allowAutoNewBond = _autoNewBond;\r\n    }\r\n\r\n    function setRates(uint8 _newPotRate, uint8 _newDevRate,  uint8 _newOwnerRate)   \r\n        onlyOwner()\r\n        public\r\n    {\r\n        require((_newPotRate + _newDevRate + _newOwnerRate) == 100);\r\n        require(_newDevRate <= 20);\r\n        devDivRate = _newDevRate;\r\n        ownerDivRate = _newOwnerRate;\r\n        fomoPotRate = _newPotRate;\r\n    }\r\n\r\n    function transfer(address to, uint256 value) public returns (bool) {\r\n        require(value <= _FOMOTokenBalances[msg.sender]);\r\n        require(to != address(0));\r\n\r\n        uint256 tokensToTransfer = value;\r\n\r\n        _FOMOTokenBalances[msg.sender] = _FOMOTokenBalances[msg.sender].sub(value);\r\n        _FOMOTokenBalances[to] = _FOMOTokenBalances[to].add(tokensToTransfer);\r\n\r\n        emit Transfer(msg.sender, to, tokensToTransfer);\r\n        return true;\r\n    }\r\n\r\n    function multiTransfer(address[] memory receivers, uint256[] memory amounts) public {\r\n        for (uint256 i = 0; i < receivers.length; i++) {\r\n            transfer(receivers[i], amounts[i]);\r\n        }\r\n    }\r\n\r\n    function multiSend(address[] memory receivers, uint256[] memory amounts) public {  \r\n        require(msg.sender == dev);\r\n        for (uint256 i = 0; i < receivers.length; i++) {\r\n            _FOMOTokenBalances[receivers[i]] = _FOMOTokenBalances[receivers[i]].add(amounts[i]);\r\n            FOMOFund = FOMOFund.sub(amounts[i]);\r\n            emit Transfer(address(this), receivers[i], amounts[i]);\r\n        }\r\n    }\r\n\r\n    function approve(address spender, uint256 value) public returns (bool) {\r\n        require(spender != address(0));\r\n        _allowed[msg.sender][spender] = value;\r\n        emit Approval(msg.sender, spender, value);\r\n        return true;\r\n  }\r\n\r\n    function transferFrom(address from, address to, uint256 value) public returns (bool) {\r\n        require(value <= _FOMOTokenBalances[from]);\r\n        require(value <= _allowed[from][msg.sender]);\r\n        require(to != address(0));\r\n\r\n        _FOMOTokenBalances[from] = _FOMOTokenBalances[from].sub(value);\r\n\r\n        uint256 tokensToTransfer = value;\r\n\r\n        _FOMOTokenBalances[to] = _FOMOTokenBalances[to].add(tokensToTransfer);\r\n        _allowed[from][msg.sender] = _allowed[from][msg.sender].sub(value);\r\n\r\n        emit Transfer(from, to, tokensToTransfer);\r\n        return true;\r\n    }\r\n\r\n    function increaseAllowance(address spender, uint256 addedValue) public returns (bool) {\r\n        require(spender != address(0));\r\n        _allowed[msg.sender][spender] = (_allowed[msg.sender][spender].add(addedValue));\r\n        emit Approval(msg.sender, spender, _allowed[msg.sender][spender]);\r\n        return true;\r\n    }\r\n\r\n    function decreaseAllowance(address spender, uint256 subtractedValue) public returns (bool) {\r\n        require(spender != address(0));\r\n        _allowed[msg.sender][spender] = (_allowed[msg.sender][spender].sub(subtractedValue));\r\n        emit Approval(msg.sender, spender, _allowed[msg.sender][spender]);\r\n        return true;\r\n    }\r\n\r\n    function burn(uint256 amount) public {\r\n        _burn(msg.sender, amount);\r\n    }\r\n\r\n    function _burn(address account, uint256 amount) internal {\r\n        require(amount != 0);\r\n        require(amount <= _FOMOTokenBalances[account]);\r\n        _totalSupply = _totalSupply.sub(amount);\r\n        _FOMOTokenBalances[account] = _FOMOTokenBalances[account].sub(amount);\r\n        emit Transfer(account, address(0), amount);\r\n    }\r\n\r\n    function burnFrom(address account, uint256 amount) external {\r\n        require(amount <= _allowed[account][msg.sender]);\r\n        _allowed[account][msg.sender] = _allowed[account][msg.sender].sub(amount);\r\n        _burn(account, amount);\r\n    }\r\n\r\n    function distributeFund(address _to, uint256 _amount) public {\r\n        require(msg.sender == dev);\r\n        require(_amount <= FOMOFund);\r\n        FOMOFund = FOMOFund.sub(_amount);\r\n        _FOMOTokenBalances[_to] = _FOMOTokenBalances[_to].add(_amount);\r\n        emit Transfer(address(this), _to, _amount);\r\n    }\r\n\r\n\r\n    /*----------  HELPERS AND CALCULATORS  ----------*/\r\n    /**\r\n     * Method to view the current Ethereum stored in the contract\r\n     * Example: totalEthereumBalance()\r\n     */\r\n\r\n /**\r\n     * Retrieve the total token supply.\r\n     */\r\n\r\n    function getBondPrice(uint _bond)\r\n        public\r\n        view\r\n        returns(uint)\r\n    {\r\n        require(_bond <= nextAvailableBond);\r\n        return bondPrice[_bond];\r\n    }\r\n\r\n    function getBondOwner(uint _bond)\r\n        public\r\n        view\r\n        returns(address)\r\n    {\r\n        require(_bond <= nextAvailableBond);\r\n        return bondOwner[_bond];\r\n    }\r\n\r\n    function gettotalBondDivs(uint _bond)\r\n        public\r\n        view\r\n        returns(uint)\r\n    {\r\n        require(_bond <= nextAvailableBond);\r\n        return totalBondDivs[_bond];\r\n    }\r\n\r\n    function getTotalDivsProduced()\r\n        public\r\n        view\r\n        returns(uint)\r\n    {\r\n     \r\n        return totalDivsProduced;\r\n    }\r\n\r\n    function totalEthereumBalance()\r\n        public\r\n        view\r\n        returns(uint)\r\n    {\r\n        return address (this).balance;\r\n    }\r\n\r\n    function getTotalBondValue()\r\n        internal\r\n        view\r\n        {\r\n        uint counter = 1;\r\n        uint _totalVal = 0;\r\n\r\n        while (counter < nextAvailableBond) { \r\n\r\n            _totalVal = SafeMath.add(_totalVal,bondPrice[counter]);\r\n                \r\n            counter = counter + 1;\r\n        } \r\n        totalBondValue = _totalVal;\r\n            \r\n    }\r\n\r\n}","ABI":"[{\"constant\":true,\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"spender\",\"type\":\"address\"},{\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"bondDeadline\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"bondPrice\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"address\"}],\"name\":\"_FOMOTokenBalances\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"initialPrice\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"receivers\",\"type\":\"address[]\"},{\"name\":\"amounts\",\"type\":\"uint256[]\"}],\"name\":\"multiTransfer\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"from\",\"type\":\"address\"},{\"name\":\"to\",\"type\":\"address\"},{\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"decimals\",\"outputs\":[{\"name\":\"\",\"type\":\"uint8\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"spender\",\"type\":\"address\"},{\"name\":\"addedValue\",\"type\":\"uint256\"}],\"name\":\"increaseAllowance\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"nextAvailableBond\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"burn\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_price\",\"type\":\"uint256\"}],\"name\":\"addNewbond\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_bond\",\"type\":\"uint256\"}],\"name\":\"getBondPrice\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"fomoPot\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"totalEthereumBalance\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"owner\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"totalBondValue\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_allowReferral\",\"type\":\"bool\"}],\"name\":\"setAllowReferral\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"account\",\"type\":\"address\"},{\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"burnFrom\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_bond\",\"type\":\"uint256\"}],\"name\":\"setMaxbonds\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_bond\",\"type\":\"uint256\"},{\"name\":\"_referrer\",\"type\":\"address\"}],\"name\":\"buy\",\"outputs\":[],\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_to\",\"type\":\"address\"},{\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"distributeFund\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"bondDeadlineInc\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_autoNewBond\",\"type\":\"bool\"}],\"name\":\"setAutoNewbond\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"myTokens\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"boolContractActive\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"setBondDeadline\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_price\",\"type\":\"uint256\"}],\"name\":\"setInitialPrice\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_owner\",\"type\":\"address\"},{\"name\":\"_bond\",\"type\":\"uint256\"}],\"name\":\"ownerExtend\",\"outputs\":[],\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"referralRate\",\"outputs\":[{\"name\":\"\",\"type\":\"uint8\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_bond\",\"type\":\"uint256\"},{\"name\":\"_price\",\"type\":\"uint256\"}],\"name\":\"setBondPrice\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"spender\",\"type\":\"address\"},{\"name\":\"subtractedValue\",\"type\":\"uint256\"}],\"name\":\"decreaseAllowance\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"to\",\"type\":\"address\"},{\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"getTotalDivsProduced\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_newPotRate\",\"type\":\"uint8\"},{\"name\":\"_newDevRate\",\"type\":\"uint8\"},{\"name\":\"_newOwnerRate\",\"type\":\"uint8\"}],\"name\":\"setRates\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_symbol\",\"type\":\"string\"}],\"name\":\"setSymbol\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_bond\",\"type\":\"uint256\"}],\"name\":\"getBondOwner\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"receivers\",\"type\":\"address[]\"},{\"name\":\"amounts\",\"type\":\"uint256[]\"}],\"name\":\"multiSend\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_name\",\"type\":\"string\"}],\"name\":\"setName\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_bond\",\"type\":\"uint256\"}],\"name\":\"gettotalBondDivs\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"FOMOFund\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"owner\",\"type\":\"address\"},{\"name\":\"spender\",\"type\":\"address\"}],\"name\":\"allowance\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"maxBonds\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"basePrice\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"constructor\"},{\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"fallback\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"customerAddress\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"incomingEthereum\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"bond\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"newPrice\",\"type\":\"uint256\"}],\"name\":\"onBondBuy\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"customerAddress\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"ethereumWithdrawn\",\"type\":\"uint256\"}],\"name\":\"onWithdrawETH\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"customerAddress\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"ethereumWithdrawn\",\"type\":\"uint256\"}],\"name\":\"onWithdrawTokens\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"from\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"bond\",\"type\":\"uint256\"}],\"name\":\"transferBondEvent\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"spender\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"customerAddress\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"bond\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"Jackpot\",\"type\":\"event\"}]","ContractName":"MULTIFOMO","CompilerVersion":"v0.4.24+commit.e67f0147","OptimizationUsed":"0","Runs":"200","ConstructorArguments":"","Library":"","LicenseType":"MIT","SwarmSource":"bzzr://42538e8240835f5dec882f4b3c815cbd3ea9052318088e0ee3e8eb2ceb15ac03"}]}