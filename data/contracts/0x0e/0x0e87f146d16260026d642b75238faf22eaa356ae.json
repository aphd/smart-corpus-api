{"status":"1","message":"OK","result":[{"SourceCode":"/**\r\n *Submitted for verification at Etherscan.io on 2019-07-07\r\n*/\r\n\r\npragma solidity 0.5.8;\r\n\r\ninterface IERC20 \r\n{\r\n    function totalSupply() external view returns (uint256);\r\n    function balanceOf(address who) external view returns (uint256);\r\n    function allowance(address owner, address spender) external view returns (uint256);\r\n    function transfer(address to, uint256 value) external returns (bool);\r\n    function approve(address spender, uint256 value) external returns (bool);\r\n    function transferFrom(address from, address to, uint256 value) external returns (bool);\r\n    \r\n    event Transfer(address indexed from, address indexed to, uint256 value);\r\n    event Approval(address indexed owner, address indexed spender, uint256 value);\r\n}\r\n\r\ncontract ApproveAndCallFallBack {\r\n\r\n    function receiveApproval(address from, uint256 tokens, address token, bytes memory data) public;\r\n}\r\n\r\nlibrary SafeMath \r\n{\r\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) \r\n    {\r\n        if (a == 0) \r\n        {\r\n            return 0;\r\n        }\r\n        uint256 c = a * b;\r\n        assert(c / a == b);\r\n        return c;\r\n    }\r\n    \r\n    function div(uint256 a, uint256 b) internal pure returns (uint256) \r\n    {\r\n        uint256 c = a / b;\r\n        return c;\r\n    }\r\n    \r\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) \r\n    {\r\n        assert(b <= a);\r\n        return a - b;\r\n    }\r\n    \r\n    function add(uint256 a, uint256 b) internal pure returns (uint256) \r\n    {\r\n        uint256 c = a + b;\r\n        assert(c >= a);\r\n        return c;\r\n    }\r\n    \r\n    function ceil(uint256 a, uint256 m) internal pure returns (uint256) \r\n    {\r\n        uint256 c = add(a,m);\r\n        uint256 d = sub(c,1);\r\n        return mul(div(d,m),m);\r\n    }\r\n}\r\n\r\ncontract ERC20Detailed is IERC20 \r\n{\r\n    string private _name;\r\n    string private _symbol;\r\n    uint8 private _decimals;\r\n    \r\n    constructor(string memory name, string memory symbol, uint8 decimals) public {\r\n        _name = name;\r\n        _symbol = symbol;\r\n        _decimals = decimals;\r\n    }\r\n    \r\n    function name() public view returns(string memory) {\r\n        return _name;\r\n    }\r\n    \r\n    function symbol() public view returns(string memory) {\r\n        return _symbol;\r\n    }\r\n    \r\n    function decimals() public view returns(uint8) {\r\n        return _decimals;\r\n    }\r\n}\r\n\r\ncontract FOMO6D is ERC20Detailed \r\n{\r\n    using SafeMath for uint256;\r\n    \r\n    mapping (address => uint256) private _balances;\r\n    mapping (address => mapping (address => uint256)) private _allowed;\r\n    \r\n    string constant tokenName = \"FOMO6D\";//\"FOMO6D\";\r\n    string constant tokenSymbol = \"FOMO\";//\"FOMO\"; \r\n    uint8  constant tokenDecimals = 18;\r\n    uint256 _totalSupply = 10000;\r\n    \r\n    // ------------------------------------------------------------------------\r\n  \r\n    address public contractOwner;\r\n\r\n    uint256 public fullUnitsStaked_total = 0;\r\n    mapping (address => bool) public excludedFromStaking; //exchanges/other contracts will be excluded from staking\r\n\r\n    uint256 _totalRewardsPerUnit = 0;\r\n    mapping (address => uint256) private _totalRewardsPerUnit_positions;\r\n    mapping (address => uint256) private _savedRewards;\r\n    \r\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\r\n    \r\n    // ------------------------------------------------------------------------\r\n    \r\n    constructor() public ERC20Detailed(tokenName, tokenSymbol, tokenDecimals) \r\n    {\r\n        contractOwner = msg.sender;\r\n        excludedFromStaking[msg.sender] = true;\r\n        excludedFromStaking[address(this)] = true;\r\n        _mint(msg.sender, 1000000 * (10**uint256(tokenDecimals)));\r\n    }\r\n    \r\n    // ------------------------------------------------------------------------\r\n\r\n    function transferOwnership(address newOwner) public \r\n    {\r\n        require(msg.sender == contractOwner);\r\n        require(newOwner != address(0));\r\n        emit OwnershipTransferred(contractOwner, newOwner);\r\n        contractOwner = newOwner;\r\n    }\r\n    \r\n    function totalSupply() public view returns (uint256) \r\n    {\r\n        return _totalSupply;\r\n    }\r\n    \r\n    function balanceOf(address owner) public view returns (uint256) \r\n    {\r\n        return _balances[owner];\r\n    }\r\n    \r\n    function fullUnitsStaked(address owner) public view returns (uint256) \r\n    {\r\n        return toFullUnits(_balances[owner]);\r\n    }\r\n    \r\n    function toFullUnits(uint256 valueWithDecimals) public pure returns (uint256) \r\n    {\r\n        return valueWithDecimals.div(10**uint256(tokenDecimals));\r\n    }\r\n    \r\n    function allowance(address owner, address spender) public view returns (uint256) \r\n    {\r\n        return _allowed[owner][spender];\r\n    }\r\n    \r\n    function transfer(address to, uint256 value) public returns (bool) \r\n    {\r\n        _executeTransfer(msg.sender, to, value);\r\n        return true;\r\n    }\r\n    \r\n    function multiTransfer(address[] memory receivers, uint256[] memory values) public\r\n    {\r\n        require(receivers.length == values.length);\r\n        for(uint256 i = 0; i < receivers.length; i++)\r\n            _executeTransfer(msg.sender, receivers[i], values[i]);\r\n    }\r\n    \r\n    function transferFrom(address from, address to, uint256 value) public returns (bool) \r\n    {\r\n        require(value <= _allowed[from][msg.sender]);\r\n        _allowed[from][msg.sender] = _allowed[from][msg.sender].sub(value);\r\n        _executeTransfer(from, to, value);\r\n        return true;\r\n    }\r\n    \r\n    function approve(address spender, uint256 value) public returns (bool) \r\n    {\r\n        require(spender != address(0));\r\n        _allowed[msg.sender][spender] = value;\r\n        emit Approval(msg.sender, spender, value);\r\n        return true;\r\n    }\r\n    \r\n    function approveAndCall(address spender, uint tokens, bytes memory data) public returns (bool success) \r\n    {\r\n        _allowed[msg.sender][spender] = tokens;\r\n        emit Approval(msg.sender, spender, tokens);\r\n        ApproveAndCallFallBack(spender).receiveApproval(msg.sender, tokens, address(this), data);\r\n        return true;\r\n    }\r\n    \r\n    function increaseAllowance(address spender, uint256 addedValue) public returns (bool) \r\n    {\r\n        require(spender != address(0));\r\n        _allowed[msg.sender][spender] = (_allowed[msg.sender][spender].add(addedValue));\r\n        emit Approval(msg.sender, spender, _allowed[msg.sender][spender]);\r\n        return true;\r\n    }\r\n    \r\n    function decreaseAllowance(address spender, uint256 subtractedValue) public returns (bool) \r\n    {\r\n        require(spender != address(0));\r\n        _allowed[msg.sender][spender] = (_allowed[msg.sender][spender].sub(subtractedValue));\r\n        emit Approval(msg.sender, spender, _allowed[msg.sender][spender]);\r\n        return true;\r\n    }\r\n    \r\n    function _mint(address account, uint256 value) internal \r\n    {\r\n        require(value != 0);\r\n        \r\n        uint256 initalBalance = _balances[account];\r\n        uint256 newBalance = initalBalance.add(value);\r\n        \r\n        _balances[account] = newBalance;\r\n        _totalSupply = _totalSupply.add(value);\r\n        \r\n        //update full units staked\r\n        if(!excludedFromStaking[account])\r\n        {\r\n            uint256 fus_total = fullUnitsStaked_total;\r\n            fus_total = fus_total.sub(toFullUnits(initalBalance));\r\n            fus_total = fus_total.add(toFullUnits(newBalance));\r\n            fullUnitsStaked_total = fus_total;\r\n        }\r\n        emit Transfer(address(0), account, value);\r\n    }\r\n    \r\n    function burn(uint256 value) external \r\n    {\r\n        _burn(msg.sender, value);\r\n    }\r\n    \r\n    function burnFrom(address account, uint256 value) external \r\n    {\r\n        require(value <= _allowed[account][msg.sender]);\r\n        _allowed[account][msg.sender] = _allowed[account][msg.sender].sub(value);\r\n        _burn(account, value);\r\n    }\r\n    \r\n    function _burn(address account, uint256 value) internal \r\n    {\r\n        require(value != 0);\r\n        require(value <= _balances[account]);\r\n        \r\n        uint256 initalBalance = _balances[account];\r\n        uint256 newBalance = initalBalance.sub(value);\r\n        \r\n        _balances[account] = newBalance;\r\n        _totalSupply = _totalSupply.sub(value);\r\n        \r\n        //update full units staked\r\n        if(!excludedFromStaking[account])\r\n        {\r\n            uint256 fus_total = fullUnitsStaked_total;\r\n            fus_total = fus_total.sub(toFullUnits(initalBalance));\r\n            fus_total = fus_total.add(toFullUnits(newBalance));\r\n            fullUnitsStaked_total = fus_total;\r\n        }\r\n        \r\n        emit Transfer(account, address(0), value);\r\n    }\r\n    \r\n    /*\r\n    *   transfer with additional burn and stake rewards\r\n    *   the receiver gets 94% of the sent value\r\n    *   6% are split to be burnt and distributed to holders\r\n    */\r\n    function _executeTransfer(address from, address to, uint256 value) private\r\n    {\r\n        require(value <= _balances[from]);\r\n        require(to != address(0) && to != address(this));\r\n\r\n        //Update sender and receivers rewards - changing balances will change rewards shares\r\n        updateRewardsFor(from);\r\n        updateRewardsFor(to);\r\n        \r\n        uint256 sixPercent = value.mul(6).div(100);\r\n        \r\n        //set a minimum burn rate to prevent no-burn-txs due to precision loss\r\n        if(sixPercent == 0 && value > 0)\r\n            sixPercent = 1;\r\n            \r\n        uint256 initalBalance_from = _balances[from];\r\n        uint256 newBalance_from = initalBalance_from.sub(value);\r\n        \r\n        value = value.sub(sixPercent);\r\n        \r\n        uint256 initalBalance_to = _balances[to];\r\n        uint256 newBalance_to = initalBalance_to.add(value);\r\n        \r\n        //transfer\r\n        _balances[from] = newBalance_from;\r\n        _balances[to] = newBalance_to;\r\n        emit Transfer(from, to, value);\r\n         \r\n        //update full units staked\r\n        uint256 fus_total = fullUnitsStaked_total;\r\n        if(!excludedFromStaking[from])\r\n        {\r\n            fus_total = fus_total.sub(toFullUnits(initalBalance_from));\r\n            fus_total = fus_total.add(toFullUnits(newBalance_from));\r\n        }\r\n        if(!excludedFromStaking[to])\r\n        {\r\n            fus_total = fus_total.sub(toFullUnits(initalBalance_to));\r\n            fus_total = fus_total.add(toFullUnits(newBalance_to));\r\n        }\r\n        fullUnitsStaked_total = fus_total;\r\n        \r\n        uint256 amountToBurn = sixPercent;\r\n        \r\n        if(fus_total > 0)\r\n        {\r\n            uint256 stakingRewards = sixPercent.div(2);\r\n            //split up to rewards per unit in stake\r\n            uint256 rewardsPerUnit = stakingRewards.div(fus_total);\r\n            //apply rewards\r\n            _totalRewardsPerUnit = _totalRewardsPerUnit.add(rewardsPerUnit);\r\n            _balances[address(this)] = _balances[address(this)].add(stakingRewards);\r\n            emit Transfer(msg.sender, address(this), stakingRewards);\r\n    \r\n            amountToBurn = amountToBurn.sub(stakingRewards);\r\n        }\r\n        \r\n        //update total supply\r\n        _totalSupply = _totalSupply.sub(amountToBurn);\r\n        emit Transfer(msg.sender, address(0), amountToBurn);\r\n    }\r\n    \r\n    //catch up with the current total rewards. This needs to be done before an addresses balance is changed\r\n    function updateRewardsFor(address staker) private\r\n    {\r\n        _savedRewards[staker] = viewUnpaidRewards(staker);\r\n        _totalRewardsPerUnit_positions[staker] = _totalRewardsPerUnit;\r\n    }\r\n    \r\n    //get all rewards that have not been claimed yet\r\n    function viewUnpaidRewards(address staker) public view returns (uint256)\r\n    {\r\n        if(excludedFromStaking[staker])\r\n            return _savedRewards[staker];\r\n        uint256 newRewardsPerUnit = _totalRewardsPerUnit.sub(_totalRewardsPerUnit_positions[staker]);\r\n        \r\n        uint256 newRewards = newRewardsPerUnit.mul(fullUnitsStaked(staker));\r\n        return _savedRewards[staker].add(newRewards);\r\n    }\r\n    \r\n    //pay out unclaimed rewards\r\n    function payoutRewards() public\r\n    {\r\n        updateRewardsFor(msg.sender);\r\n        uint256 rewards = _savedRewards[msg.sender];\r\n        require(rewards > 0 && rewards <= _balances[address(this)]);\r\n        \r\n        _savedRewards[msg.sender] = 0;\r\n        \r\n        uint256 initalBalance_staker = _balances[msg.sender];\r\n        uint256 newBalance_staker = initalBalance_staker.add(rewards);\r\n        \r\n        //update full units staked\r\n        if(!excludedFromStaking[msg.sender])\r\n        {\r\n            uint256 fus_total = fullUnitsStaked_total;\r\n            fus_total = fus_total.sub(toFullUnits(initalBalance_staker));\r\n            fus_total = fus_total.add(toFullUnits(newBalance_staker));\r\n            fullUnitsStaked_total = fus_total;\r\n        }\r\n        \r\n        //transfer\r\n        _balances[address(this)] = _balances[address(this)].sub(rewards);\r\n        _balances[msg.sender] = newBalance_staker;\r\n        emit Transfer(address(this), msg.sender, rewards);\r\n    }\r\n    \r\n    //exchanges or other contracts can be excluded from receiving stake rewards\r\n    function excludeAddressFromStaking(address excludeAddress, bool exclude) public\r\n    {\r\n        require(msg.sender == contractOwner);\r\n        require(excludeAddress != address(this)); //contract may never be included\r\n        require(exclude != excludedFromStaking[excludeAddress]);\r\n        updateRewardsFor(excludeAddress);\r\n        excludedFromStaking[excludeAddress] = exclude;\r\n        fullUnitsStaked_total = exclude ? fullUnitsStaked_total.sub(fullUnitsStaked(excludeAddress)) : fullUnitsStaked_total.add(fullUnitsStaked(excludeAddress));\r\n    }\r\n    \r\n    //withdraw tokens that were sent to this contract by accident\r\n    function withdrawERC20Tokens(address tokenAddress, uint256 amount) public\r\n    {\r\n        require(msg.sender == contractOwner);\r\n        require(tokenAddress != address(this));\r\n        IERC20(tokenAddress).transfer(msg.sender, amount);\r\n    }\r\n    \r\n}","ABI":"[{\"constant\":true,\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"spender\",\"type\":\"address\"},{\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"address\"}],\"name\":\"excludedFromStaking\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"receivers\",\"type\":\"address[]\"},{\"name\":\"values\",\"type\":\"uint256[]\"}],\"name\":\"multiTransfer\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"staker\",\"type\":\"address\"}],\"name\":\"viewUnpaidRewards\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"from\",\"type\":\"address\"},{\"name\":\"to\",\"type\":\"address\"},{\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"payoutRewards\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"decimals\",\"outputs\":[{\"name\":\"\",\"type\":\"uint8\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"spender\",\"type\":\"address\"},{\"name\":\"addedValue\",\"type\":\"uint256\"}],\"name\":\"increaseAllowance\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"burn\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"fullUnitsStaked_total\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"owner\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"excludeAddress\",\"type\":\"address\"},{\"name\":\"exclude\",\"type\":\"bool\"}],\"name\":\"excludeAddressFromStaking\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"account\",\"type\":\"address\"},{\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"burnFrom\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"spender\",\"type\":\"address\"},{\"name\":\"subtractedValue\",\"type\":\"uint256\"}],\"name\":\"decreaseAllowance\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"to\",\"type\":\"address\"},{\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"valueWithDecimals\",\"type\":\"uint256\"}],\"name\":\"toFullUnits\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"pure\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"spender\",\"type\":\"address\"},{\"name\":\"tokens\",\"type\":\"uint256\"},{\"name\":\"data\",\"type\":\"bytes\"}],\"name\":\"approveAndCall\",\"outputs\":[{\"name\":\"success\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"contractOwner\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"owner\",\"type\":\"address\"},{\"name\":\"spender\",\"type\":\"address\"}],\"name\":\"allowance\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"owner\",\"type\":\"address\"}],\"name\":\"fullUnitsStaked\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"tokenAddress\",\"type\":\"address\"},{\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"withdrawERC20Tokens\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"spender\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"}]","ContractName":"FOMO6D","CompilerVersion":"v0.5.8+commit.23d335f2","OptimizationUsed":"0","Runs":"200","ConstructorArguments":"","Library":"","LicenseType":"MIT","SwarmSource":"bzzr://fd223eaf1b2cbc85f8d80c44ce115c23c7055207c16eea909a7514ddcd89cc49"}]}