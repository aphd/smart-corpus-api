{"status":"1","message":"OK","result":[{"SourceCode":"// Copyright (C) 2020 Zerion Inc. <https://zerion.io>\r\n//\r\n// This program is free software: you can redistribute it and/or modify\r\n// it under the terms of the GNU General Public License as published by\r\n// the Free Software Foundation, either version 3 of the License, or\r\n// (at your option) any later version.\r\n//\r\n// This program is distributed in the hope that it will be useful,\r\n// but WITHOUT ANY WARRANTY; without even the implied warranty of\r\n// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the\r\n// GNU General Public License for more details.\r\n//\r\n// You should have received a copy of the GNU General Public License\r\n// along with this program. If not, see <https://www.gnu.org/licenses/>.\r\n\r\npragma solidity 0.6.5;\r\npragma experimental ABIEncoderV2;\r\n\r\n\r\n/**\r\n * @title Protocol adapter interface.\r\n * @dev adapterType(), tokenType(), and getBalance() functions MUST be implemented.\r\n * @author Igor Sobolev <sobolev@zerion.io>\r\n */\r\ninterface ProtocolAdapter {\r\n\r\n    /**\r\n     * @dev MUST return \"Asset\" or \"Debt\".\r\n     * SHOULD be implemented by the public constant state variable.\r\n     */\r\n    function adapterType() external pure returns (string memory);\r\n\r\n    /**\r\n     * @dev MUST return token type (default is \"ERC20\").\r\n     * SHOULD be implemented by the public constant state variable.\r\n     */\r\n    function tokenType() external pure returns (string memory);\r\n\r\n    /**\r\n     * @dev MUST return amount of the given token locked on the protocol by the given account.\r\n     */\r\n    function getBalance(address token, address account) external view returns (uint256);\r\n}\r\n\r\n\r\n/**\r\n * @dev dYdX adapter abstract contract.\r\n * @dev Base contract for dYdX adapters.\r\n * @author Igor Sobolev <sobolev@zerion.io>\r\n */\r\nabstract contract DyDxAdapter {\r\n\r\n    address internal constant SOLO = 0x1E0447b19BB6EcFdAe1e4AE1694b0C3659614e4e;\r\n\r\n    address internal constant WETH = 0xC02aaA39b223FE8D0A0e5C4F27eAD9083C756Cc2;\r\n    address internal constant SAI = 0x89d24A6b4CcB1B6fAA2625fE562bDD9a23260359;\r\n    address internal constant USDC = 0xA0b86991c6218b36c1d19D4a2e9Eb0cE3606eB48;\r\n    address internal constant DAI = 0x6B175474E89094C44Da98b954EedeAC495271d0F;\r\n\r\n    function getMarketId(address token) internal pure returns (uint256) {\r\n        if (token == WETH) {\r\n            return uint256(0);\r\n        } else if (token == SAI) {\r\n            return uint256(1);\r\n        } else if (token == USDC) {\r\n            return uint256(2);\r\n        } else if (token == DAI) {\r\n            return uint256(3);\r\n        } else {\r\n            return uint256(-1);\r\n        }\r\n    }\r\n}\r\n\r\n\r\n/**\r\n * @dev Info struct from Account library.\r\n * The Account library is available here\r\n * github.com/dydxprotocol/solo/blob/master/contracts/protocol/lib/Account.sol.\r\n */\r\nstruct Info {\r\n    address owner;  // The address that owns the account\r\n    uint256 number; // A nonce that allows a single address to control many accounts\r\n}\r\n\r\n\r\n/**\r\n * @dev Wei struct from Types library.\r\n * The Types library is available here\r\n * github.com/dydxprotocol/solo/blob/master/contracts/protocol/lib/Types.sol.\r\n */\r\nstruct Wei {\r\n    bool sign; // true if positive\r\n    uint256 value;\r\n}\r\n\r\n\r\n/**\r\n * @dev SoloMargin contract interface.\r\n * Only the functions required for DyDxDebtAdapter contract are added.\r\n * The SoloMargin contract is available here\r\n * github.com/dydxprotocol/solo/blob/master/contracts/protocol/SoloMargin.sol.\r\n */\r\ninterface SoloMargin {\r\n    function getAccountWei(Info calldata, uint256) external view returns (Wei memory);\r\n}\r\n\r\n\r\n/**\r\n * @title Debt adapter for dYdX protocol.\r\n * @dev Implementation of ProtocolAdapter interface.\r\n * @author Igor Sobolev <sobolev@zerion.io>\r\n */\r\ncontract DyDxDebtAdapter is ProtocolAdapter, DyDxAdapter {\r\n\r\n    string public constant override adapterType = \"Debt\";\r\n\r\n    string public constant override tokenType = \"ERC20\";\r\n\r\n    /**\r\n     * @return Amount of tokens held by the given account.\r\n     * @dev Implementation of ProtocolAdapter interface function.\r\n     */\r\n    function getBalance(address token, address account) external view override returns (uint256) {\r\n        Wei memory accountWei = SoloMargin(SOLO).getAccountWei(Info(account, 0), getMarketId(token));\r\n        return accountWei.sign ? 0 : accountWei.value;\r\n    }\r\n}","ABI":"[{\"inputs\":[],\"name\":\"adapterType\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"getBalance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"tokenType\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"}]","ContractName":"DyDxDebtAdapter","CompilerVersion":"v0.6.5+commit.f956cc89","OptimizationUsed":"1","Runs":"200","ConstructorArguments":"","Library":"","LicenseType":"GNU LGPLv3","SwarmSource":"ipfs://73cdc2826ea5017592bd4334fddac8d7cc186fc9165da2f1abf0fda6c7d1c1eb"}]}