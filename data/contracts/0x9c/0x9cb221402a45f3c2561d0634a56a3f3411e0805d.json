{"status":"1","message":"OK","result":[{"SourceCode":"pragma solidity ^0.4.24;\r\n\r\n// File: contracts/database/Database.sol\r\n\r\n// @title A shared storage contract for platform contracts to store and retrieve data\r\n// @notice This contract holds all long-term data for smart-contract systems\r\n// @dev The bytes32 hashes are derived from keccak256(variableName, uniqueID) => value\r\n// @dec Can enable upgradeable contracts by setting a contract manager\r\ncontract Database{\r\n\r\n    // Storage Variables\r\n    mapping(bytes32 => uint) public uintStorage;\r\n    mapping(bytes32 => string) public stringStorage;\r\n    mapping(bytes32 => address) public addressStorage;\r\n    mapping(bytes32 => bytes) public bytesStorage;\r\n    mapping(bytes32 => bytes32) public bytes32Storage;\r\n    mapping(bytes32 => bool) public boolStorage;\r\n    mapping(bytes32 => int) public intStorage;\r\n\r\n\r\n\r\n    // @notice Constructor: Sets the owners of the platform\r\n    // @dev Owners must set the contract manager to add more contracts\r\n    constructor(address[] _owners, bool _upgradeable)\r\n    public {\r\n      for(uint i=0; i<_owners.length; i++){\r\n        require(_owners[i] != address(0), \"Empty address\");\r\n        boolStorage[keccak256(abi.encodePacked(\"owner\", _owners[i]))] = true;\r\n        emit LogInitialized(_owners[i], _upgradeable);\r\n      }\r\n      if (_upgradeable){\r\n        boolStorage[keccak256(\"upgradeable\")] = true;\r\n      }\r\n    }\r\n\r\n    // @notice ContractManager will be the only contract that can add/remove contracts on the platform.\r\n    // @param (address) _contractManager is the contract which can upgrade/remove contracts to platform\r\n    function enableContractManagement(address _contractManager)\r\n    external\r\n    returns (bool){\r\n        require(_contractManager != address(0), \"Empty address\");\r\n        require(boolStorage[keccak256(abi.encodePacked(\"owner\", msg.sender))], \"Not owner\");\r\n        require(addressStorage[keccak256(abi.encodePacked(\"contract\", \"ContractManager\"))] == address(0), \"There is already a contract manager\");\r\n        addressStorage[keccak256(abi.encodePacked(\"contract\", \"ContractManager\"))] = _contractManager;\r\n        boolStorage[keccak256(abi.encodePacked(\"contract\", _contractManager))] = true;\r\n        return true;\r\n    }\r\n\r\n    // @notice Storage functions\r\n    function setAddress(bytes32 _key, address _value)\r\n    onlyApprovedContract\r\n    external {\r\n        addressStorage[_key] = _value;\r\n    }\r\n\r\n    function setUint(bytes32 _key, uint _value)\r\n    onlyApprovedContract\r\n    external {\r\n        uintStorage[_key] = _value;\r\n    }\r\n\r\n    function setString(bytes32 _key, string _value)\r\n    onlyApprovedContract\r\n    external {\r\n        stringStorage[_key] = _value;\r\n    }\r\n\r\n    function setBytes(bytes32 _key, bytes _value)\r\n    onlyApprovedContract\r\n    external {\r\n        bytesStorage[_key] = _value;\r\n    }\r\n\r\n    function setBytes32(bytes32 _key, bytes32 _value)\r\n    onlyApprovedContract\r\n    external {\r\n        bytes32Storage[_key] = _value;\r\n    }\r\n\r\n    function setBool(bytes32 _key, bool _value)\r\n    onlyApprovedContract\r\n    external {\r\n        boolStorage[_key] = _value;\r\n    }\r\n\r\n    function setInt(bytes32 _key, int _value)\r\n    onlyApprovedContract\r\n    external {\r\n        intStorage[_key] = _value;\r\n    }\r\n\r\n\r\n    // Deletion functions: Can alternatively use setter functions and set to null value (ie. uint = 0)\r\n    function deleteAddress(bytes32 _key)\r\n    onlyApprovedContract\r\n    external {\r\n        delete addressStorage[_key];\r\n    }\r\n\r\n    function deleteUint(bytes32 _key)\r\n    onlyApprovedContract\r\n    external {\r\n        delete uintStorage[_key];\r\n    }\r\n\r\n    function deleteString(bytes32 _key)\r\n    onlyApprovedContract\r\n    external {\r\n        delete stringStorage[_key];\r\n    }\r\n\r\n    function deleteBytes(bytes32 _key)\r\n    onlyApprovedContract\r\n    external {\r\n        delete bytesStorage[_key];\r\n    }\r\n\r\n    function deleteBytes32(bytes32 _key)\r\n    onlyApprovedContract\r\n    external {\r\n        delete bytes32Storage[_key];\r\n    }\r\n\r\n    function deleteBool(bytes32 _key)\r\n    onlyApprovedContract\r\n    external {\r\n        delete boolStorage[_key];\r\n    }\r\n\r\n    function deleteInt(bytes32 _key)\r\n    onlyApprovedContract\r\n    external {\r\n        delete intStorage[_key];\r\n    }\r\n\r\n\r\n    // --------------------------------------------------------------------------------------\r\n    //                                     Modifiers\r\n    // --------------------------------------------------------------------------------------\r\n\r\n    // Caller must be registered as a contract through ContractManager.sol\r\n    modifier onlyApprovedContract() {\r\n        require(boolStorage[keccak256(abi.encodePacked(\"contract\", msg.sender))]);\r\n        _;\r\n    }\r\n\r\n    // --------------------------------------------------------------------------------------\r\n    //                                     Events\r\n    // --------------------------------------------------------------------------------------\r\n    event LogInitialized(address _owner, bool _upgradeable);\r\n}\r\n\r\n// File: contracts/interfaces/DBInterface.sol\r\n\r\n// Database interface\r\ninterface DBInterface {\r\n\r\n  function setContractManager(address _contractManager)\r\n  external;\r\n\r\n    // --------------------Set Functions------------------------\r\n\r\n    function setAddress(bytes32 _key, address _value)\r\n    external;\r\n\r\n    function setUint(bytes32 _key, uint _value)\r\n    external;\r\n\r\n    function setString(bytes32 _key, string _value)\r\n    external;\r\n\r\n    function setBytes(bytes32 _key, bytes _value)\r\n    external;\r\n\r\n    function setBytes32(bytes32 _key, bytes32 _value)\r\n    external;\r\n\r\n    function setBool(bytes32 _key, bool _value)\r\n    external;\r\n\r\n    function setInt(bytes32 _key, int _value)\r\n    external;\r\n\r\n\r\n     // -------------- Deletion Functions ------------------\r\n\r\n    function deleteAddress(bytes32 _key)\r\n    external;\r\n\r\n    function deleteUint(bytes32 _key)\r\n    external;\r\n\r\n    function deleteString(bytes32 _key)\r\n    external;\r\n\r\n    function deleteBytes(bytes32 _key)\r\n    external;\r\n\r\n    function deleteBytes32(bytes32 _key)\r\n    external;\r\n\r\n    function deleteBool(bytes32 _key)\r\n    external;\r\n\r\n    function deleteInt(bytes32 _key)\r\n    external;\r\n\r\n    // ----------------Variable Getters---------------------\r\n\r\n    function uintStorage(bytes32 _key)\r\n    external\r\n    view\r\n    returns (uint);\r\n\r\n    function stringStorage(bytes32 _key)\r\n    external\r\n    view\r\n    returns (string);\r\n\r\n    function addressStorage(bytes32 _key)\r\n    external\r\n    view\r\n    returns (address);\r\n\r\n    function bytesStorage(bytes32 _key)\r\n    external\r\n    view\r\n    returns (bytes);\r\n\r\n    function bytes32Storage(bytes32 _key)\r\n    external\r\n    view\r\n    returns (bytes32);\r\n\r\n    function boolStorage(bytes32 _key)\r\n    external\r\n    view\r\n    returns (bool);\r\n\r\n    function intStorage(bytes32 _key)\r\n    external\r\n    view\r\n    returns (bool);\r\n}\r\n\r\n// File: contracts/database/Events.sol\r\n\r\ncontract Events {\r\n  DBInterface public database;\r\n\r\n  constructor(address _database) public{\r\n    database = DBInterface(_database);\r\n  }\r\n\r\n  function message(string _message)\r\n  external\r\n  onlyApprovedContract {\r\n      emit LogEvent(_message, keccak256(abi.encodePacked(_message)), tx.origin);\r\n  }\r\n\r\n  function transaction(string _message, address _from, address _to, uint _amount, address _token)\r\n  external\r\n  onlyApprovedContract {\r\n      emit LogTransaction(_message, keccak256(abi.encodePacked(_message)), _from, _to, _amount, _token, tx.origin);\r\n  }\r\n\r\n  function registration(string _message, address _account)\r\n  external\r\n  onlyApprovedContract {\r\n      emit LogAddress(_message, keccak256(abi.encodePacked(_message)), _account, tx.origin);\r\n  }\r\n\r\n  function contractChange(string _message, address _account, string _name)\r\n  external\r\n  onlyApprovedContract {\r\n      emit LogContractChange(_message, keccak256(abi.encodePacked(_message)), _account, _name, tx.origin);\r\n  }\r\n\r\n  function asset(string _message, string _uri, address _assetAddress, address _manager)\r\n  external\r\n  onlyApprovedContract {\r\n      emit LogAsset(_message, keccak256(abi.encodePacked(_message)), _uri, keccak256(abi.encodePacked(_uri)), _assetAddress, _manager, tx.origin);\r\n  }\r\n\r\n  function escrow(string _message, address _assetAddress, bytes32 _escrowID, address _manager, uint _amount)\r\n  external\r\n  onlyApprovedContract {\r\n      emit LogEscrow(_message, keccak256(abi.encodePacked(_message)), _assetAddress, _escrowID, _manager, _amount, tx.origin);\r\n  }\r\n\r\n  function order(string _message, bytes32 _orderID, uint _amount, uint _price)\r\n  external\r\n  onlyApprovedContract {\r\n      emit LogOrder(_message, keccak256(abi.encodePacked(_message)), _orderID, _amount, _price, tx.origin);\r\n  }\r\n\r\n  function exchange(string _message, bytes32 _orderID, address _assetAddress, address _account)\r\n  external\r\n  onlyApprovedContract {\r\n      emit LogExchange(_message, keccak256(abi.encodePacked(_message)), _orderID, _assetAddress, _account, tx.origin);\r\n  }\r\n\r\n  function operator(string _message, bytes32 _id, string _name, string _ipfs, address _account)\r\n  external\r\n  onlyApprovedContract {\r\n      emit LogOperator(_message, keccak256(abi.encodePacked(_message)), _id, _name, _ipfs, _account, tx.origin);\r\n  }\r\n\r\n  function consensus(string _message, bytes32 _executionID, bytes32 _votesID, uint _votes, uint _tokens, uint _quorum)\r\n  external\r\n  onlyApprovedContract {\r\n    emit LogConsensus(_message, keccak256(abi.encodePacked(_message)), _executionID, _votesID, _votes, _tokens, _quorum, tx.origin);\r\n  }\r\n\r\n  //Generalized events\r\n  event LogEvent(string message, bytes32 indexed messageID, address indexed origin);\r\n  event LogTransaction(string message, bytes32 indexed messageID, address indexed from, address indexed to, uint amount, address token, address origin); //amount and token will be empty on some events\r\n  event LogAddress(string message, bytes32 indexed messageID, address indexed account, address indexed origin);\r\n  event LogContractChange(string message, bytes32 indexed messageID, address indexed account, string name, address indexed origin);\r\n  event LogAsset(string message, bytes32 indexed messageID, string uri, bytes32 indexed assetID, address asset, address manager, address indexed origin);\r\n  event LogEscrow(string message, bytes32 indexed messageID, address asset, bytes32  escrowID, address indexed manager, uint amount, address indexed origin);\r\n  event LogOrder(string message, bytes32 indexed messageID, bytes32 indexed orderID, uint amount, uint price, address indexed origin);\r\n  event LogExchange(string message, bytes32 indexed messageID, bytes32 orderID, address indexed asset, address account, address indexed origin);\r\n  event LogOperator(string message, bytes32 indexed messageID, bytes32 id, string name, string ipfs, address indexed account, address indexed origin);\r\n  event LogConsensus(string message, bytes32 indexed messageID, bytes32 executionID, bytes32 votesID, uint votes, uint tokens, uint quorum, address indexed origin);\r\n\r\n\r\n  // --------------------------------------------------------------------------------------\r\n  // Caller must be registered as a contract through ContractManager.sol\r\n  // --------------------------------------------------------------------------------------\r\n  modifier onlyApprovedContract() {\r\n      require(database.boolStorage(keccak256(abi.encodePacked(\"contract\", msg.sender))));\r\n      _;\r\n  }\r\n\r\n}\r\n\r\n// File: contracts/ownership/MultiOwned.sol\r\n\r\n// @title A contract for managing multiple platform owners\r\n// @dev Multi owned platforms store owner as an address. Each owner has full privileges\r\n// @author Peter Phillips, MyBit Foundation\r\ncontract MultiOwned {\r\n\r\n  Database public database;\r\n  Events public events;\r\n\r\n  // @notice constructor: initiate database instance\r\n  constructor(address _database, address _events) public {\r\n    database = Database(_database);\r\n    events = Events(_events);\r\n  }\r\n\r\n  // @notice Transfer ownership to to a new owner\r\n  function changeOwner(address _newOwner)\r\n  public\r\n  onlyOwner {\r\n    require(_newOwner != address(0), \"Cannnot add null address\");\r\n    database.setBool(keccak256(abi.encodePacked(\"owner\", _newOwner)), true);\r\n    database.setBool(keccak256(abi.encodePacked(\"owner\", msg.sender)), false);\r\n    events.transaction('Ownership transferred', msg.sender, _newOwner, 0, address(0));\r\n  }\r\n\r\n  function addOwner(address _newOwner)\r\n  public\r\n  onlyOwner {\r\n    require(_newOwner != address(0), \"Cannnot add null address\");\r\n    database.setBool(keccak256(abi.encodePacked(\"owner\", _newOwner)), true);\r\n    events.transaction('Owner added', msg.sender, _newOwner, 0, address(0));\r\n  }\r\n\r\n  function removeOwner(address _currentOwner)\r\n  public\r\n  onlyOwner {\r\n    require(_currentOwner != msg.sender, \"Owner cannot remove themselves\");\r\n    database.setBool(keccak256(abi.encodePacked(\"owner\", _currentOwner)), false);\r\n    events.transaction('Owner removed', msg.sender, _currentOwner, 0, address(0));\r\n  }\r\n\r\n  // @notice platform owners can destroy contract here\r\n  function destroy()\r\n  onlyOwner\r\n  external {\r\n    events.transaction('MultiOwned destroyed', address(this), msg.sender, address(this).balance, address(0));\r\n    selfdestruct(msg.sender);\r\n  }\r\n\r\n  // @notice reverts if caller is not the owner\r\n  modifier onlyOwner() {\r\n    require(database.boolStorage(keccak256(abi.encodePacked(\"owner\", msg.sender))) == true);\r\n    _;\r\n  }\r\n\r\n  //event OwnershipTransferred(address indexed owner, address indexed pendingOwner);\r\n}","ABI":"[{\"constant\":false,\"inputs\":[{\"name\":\"_currentOwner\",\"type\":\"address\"}],\"name\":\"removeOwner\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_newOwner\",\"type\":\"address\"}],\"name\":\"addOwner\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"database\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"destroy\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_newOwner\",\"type\":\"address\"}],\"name\":\"changeOwner\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"events\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"name\":\"_database\",\"type\":\"address\"},{\"name\":\"_events\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"}]","ContractName":"MultiOwned","CompilerVersion":"v0.4.24+commit.e67f0147","OptimizationUsed":"1","Runs":"200","ConstructorArguments":"0000000000000000000000005fcebeb70b88e86dd880352684e775b0f4d57c71000000000000000000000000eb6533f29a54c2c18bb2ce2a100de717692a518f","Library":"","LicenseType":"GNU GPLv3","SwarmSource":"bzzr://38f29986fb7ed6f7c1417aaa482356f2fd114aa368794ed0e4abb544dc109d4a"}]}