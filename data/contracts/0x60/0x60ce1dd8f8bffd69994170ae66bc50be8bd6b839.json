{"status":"1","message":"OK","result":[{"SourceCode":"pragma solidity ^0.4.24;\r\n\r\n/**\r\n * @title ERC20 interface \r\n * \r\n */\r\ncontract ERC20 {\r\n  function totalSupply() public view returns (uint256);\r\n  function balanceOf(address who) public view returns (uint256);\r\n  function transfer(address to, uint256 value) public returns (bool);\r\n  function allowance(address owner, address spender) public view returns (uint256);\r\n  function transferFrom(address from, address to, uint256 value) public returns (bool);\r\n  function approve(address spender, uint256 value) public returns (bool);\r\n  event Approval(address indexed owner, address indexed spender, uint256 value);\r\n  event Transfer(address indexed from, address indexed to, uint256 value);\r\n}\r\n\r\n// File: contracts/Ownable.sol\r\n\r\n/**\r\n * @title Ownable\r\n * @dev The Ownable contract has an owner address, and provides basic authorization control\r\n * functions, this simplifies the implementation of \"user permissions\".\r\n */\r\ncontract Ownable {\r\n  address private _owner;\r\n\r\n  event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\r\n\r\n  /**\r\n   * @dev The Ownable constructor sets the original `owner` of the contract to the sender\r\n   * account.\r\n   */\r\n  constructor () internal {\r\n      _owner = msg.sender;\r\n      emit OwnershipTransferred(address(0), _owner);\r\n  }\r\n\r\n  /**\r\n   * @return the address of the owner.\r\n   */\r\n  function owner() public view returns (address) {\r\n      return _owner;\r\n  }\r\n\r\n  /**\r\n   * @dev Throws if called by any account other than the owner.\r\n   */\r\n  modifier onlyOwner() {\r\n      require(isOwner());\r\n      _;\r\n  }\r\n\r\n  /**\r\n   * @return true if `msg.sender` is the owner of the contract.\r\n   */\r\n  function isOwner() public view returns (bool) {\r\n      return msg.sender == _owner;\r\n  }\r\n\r\n  /**\r\n   * @dev Allows the current owner to transfer control of the contract to a newOwner.\r\n   * @param newOwner The address to transfer ownership to.\r\n   */\r\n  function transferOwnership(address newOwner) public onlyOwner {\r\n      _transferOwnership(newOwner);\r\n  }\r\n\r\n  /**\r\n   * @dev Transfers control of the contract to a newOwner.\r\n   * @param newOwner The address to transfer ownership to.\r\n   */\r\n  function _transferOwnership(address newOwner) internal {\r\n      require(newOwner != address(0));\r\n      emit OwnershipTransferred(_owner, newOwner);\r\n      _owner = newOwner;\r\n  }\r\n\r\n}\r\n\r\n/**\r\n * @title SafeMath\r\n * @dev Math operations with safety checks that revert on error\r\n */\r\nlibrary SafeMath {\r\n  /**\r\n  * @dev Multiplies two numbers, reverts on overflow.\r\n  */\r\n  function mul(uint256 a, uint256 b) internal pure returns (uint256) {\r\n      // Gas optimization: this is cheaper than requiring 'a' not being zero, but the\r\n      // benefit is lost if 'b' is also tested.\r\n      // See: https://github.com/OpenZeppelin/openzeppelin-solidity/pull/522\r\n      if (a == 0) {\r\n          return 0;\r\n      }\r\n\r\n      uint256 c = a * b;\r\n      require(c / a == b);\r\n\r\n      return c;\r\n  }\r\n\r\n  /**\r\n  * @dev Integer division of two numbers truncating the quotient, reverts on division by zero.\r\n  */\r\n  function div(uint256 a, uint256 b) internal pure returns (uint256) {\r\n      // Solidity only automatically asserts when dividing by 0\r\n      require(b > 0);\r\n      uint256 c = a / b;\r\n      // assert(a == b * c + a % b); // There is no case in which this doesn't hold\r\n\r\n      return c;\r\n  }\r\n\r\n  /**\r\n  * @dev Subtracts two numbers, reverts on overflow (i.e. if subtrahend is greater than minuend).\r\n  */\r\n  function sub(uint256 a, uint256 b) internal pure returns (uint256) {\r\n      require(b <= a);\r\n      uint256 c = a - b;\r\n\r\n      return c;\r\n  }\r\n\r\n  /**\r\n  * @dev Adds two numbers, reverts on overflow.\r\n  */\r\n  function add(uint256 a, uint256 b) internal pure returns (uint256) {\r\n      uint256 c = a + b;\r\n      require(c >= a);\r\n\r\n      return c;\r\n  }\r\n\r\n  /**\r\n  * @dev Divides two numbers and returns the remainder (unsigned integer modulo),\r\n  * reverts when dividing by zero.\r\n  */\r\n  function mod(uint256 a, uint256 b) internal pure returns (uint256) {\r\n      require(b != 0);\r\n      return a % b;\r\n  }\r\n \r\n\r\n  function uint2str(uint i) internal pure returns (string){\r\n      if (i == 0) return \"0\";\r\n      uint j = i;\r\n      uint length;\r\n      while (j != 0){\r\n          length++;\r\n          j /= 10;\r\n      }\r\n      bytes memory bstr = new bytes(length);\r\n      uint k = length - 1;\r\n      while (i != 0){\r\n          bstr[k--] = byte(48 + i % 10);\r\n          i /= 10;\r\n      }\r\n      return string(bstr);\r\n  }\r\n \r\n  \r\n}\r\n\r\n/**\r\n * @title BNX Token  \r\n *\r\n */\r\ncontract BNXToken is ERC20, Ownable {\r\n  using SafeMath for uint256;\r\n\r\n  string public constant name = \"Bitnordex\";\r\n  string public constant symbol = \"BNX\"; \r\n  uint8 public constant decimals = 18;\r\n\r\n\r\n  mapping (address => uint256) private _balances;\r\n  mapping (address => mapping (address => uint256)) private _allowed;\r\n  uint256 private _totalSupply;\r\n\r\n  //Total amount of tokens is 200,000,000 - 200 million + 18 decimals\r\n  uint256 public hardcap = 200000000 * (10**uint256(18));\r\n \r\n  //Enable/Disable mint and burn functions\r\n  bool private _enableActions = true;\r\n\r\n\r\n  /**\r\n   * @dev Constructor\r\n   */\r\n  constructor() public {\r\n\r\n    //Set total supply to hardcap\r\n    _totalSupply = hardcap;\r\n\r\n    //Transfer total supply to owner\r\n    _balances[owner()] = _totalSupply;\r\n    emit Transfer(address(0), owner(), _totalSupply);\r\n\r\n  }\r\n\r\n\r\n  /**\r\n   * @dev onlyPayloadSize\r\n   * @notice Fix for the ERC20 short address attack.\r\n   */\r\n  modifier onlyPayloadSize(uint size) {\r\n    assert(msg.data.length >= size + 4);\r\n    _;\r\n  } \r\n \r\n\r\n  /**\r\n   * @dev total number of tokens in existence\r\n   */\r\n  function totalSupply() public view returns (uint256) {\r\n    return _totalSupply;\r\n  }\r\n\r\n  /**\r\n   * @dev Gets the balance of the specified address.\r\n   * @param _owner The address to query the the balance of.\r\n   * @return An uint256 representing the amount owned by the passed address.\r\n   */\r\n  function balanceOf(address _owner) public view returns (uint256 balance) {\r\n    return _balances[_owner];\r\n  }\r\n \r\n \r\n  /**\r\n   * @dev transfer token for a specified address\r\n   * @param _to The address to transfer to.\r\n   * @param _value The amount to be transferred.\r\n   */\r\n  function transfer(address _to, uint256 _value) public onlyPayloadSize(2 * 32) returns (bool) {    \r\n      require(_to != address(0)); // Prevent transfer to 0x0 address.\r\n      require(_value <= _balances[msg.sender]);  // Check if the sender has enough      \r\n\r\n      // SafeMath.sub will throw if there is not enough balance.\r\n      _balances[msg.sender] = _balances[msg.sender].sub(_value);\r\n      _balances[_to] = _balances[_to].add(_value);\r\n      emit Transfer(msg.sender, _to, _value);\r\n      return true;\r\n  }\r\n\r\n\r\n  /**\r\n   * @dev Transfer tokens from one address to another\r\n   * @param _from address The address which you want to send tokens from\r\n   * @param _to address The address which you want to transfer to\r\n   * @param _value uint256 the amount of tokens to be transferred\r\n   */\r\n  function transferFrom(address _from, address _to, uint256 _value) public onlyPayloadSize(3 * 32) returns (bool) {\r\n\r\n    require(_to != address(0));                     // Prevent transfer to 0x0 address. Use burn() instead\r\n    require(_value <= _balances[_from]);             // Check if the sender has enough\r\n    require(_value <= _allowed[_from][msg.sender]);  // Check if the sender is _allowed to send\r\n\r\n\r\n    // SafeMath.sub will throw if there is not enough balance.\r\n    _balances[_from] = _balances[_from].sub(_value);\r\n    _balances[_to] = _balances[_to].add(_value);\r\n    _allowed[_from][msg.sender] = _allowed[_from][msg.sender].sub(_value);\r\n    emit Transfer(_from, _to, _value);\r\n    return true; \r\n  }\r\n\r\n\r\n  /**\r\n   * @dev Approve the passed address to spend the specified amount of tokens on behalf of msg.sender.\r\n   *\r\n   * Beware that changing an allowance with this method brings the risk that someone may use both the old\r\n   * and the new allowance by unfortunate transaction ordering. One possible solution to mitigate this\r\n   * race condition is to first reduce the spender's allowance to 0 and set the desired value afterwards:  \r\n   * @param _spender The address which will spend the funds.\r\n   * @param _value The amount of tokens to be spent.\r\n   */\r\n  function approve(address _spender, uint256 _value) public returns (bool) {\r\n    _allowed[msg.sender][_spender] = _value;\r\n    emit Approval(msg.sender, _spender, _value);\r\n    return true;\r\n  }\r\n\r\n\r\n\r\n  /**\r\n   * @dev Function to check the amount of tokens that an owner _allowed to a spender.\r\n   * @param _owner address The address which owns the funds.\r\n   * @param _spender address The address which will spend the funds.\r\n   * @return A uint256 specifying the amount of tokens still available for the spender.\r\n   */\r\n  function allowance(address _owner, address _spender) public view returns (uint256) {\r\n    return _allowed[_owner][_spender];\r\n  }\r\n\r\n\r\n\r\n  /**\r\n   * @dev Increase the amount of tokens that an owner _allowed to a spender.\r\n   *\r\n   * approve should be called when _allowed[_spender] == 0. To increment\r\n   * _allowed value is better to use this function to avoid 2 calls (and wait until\r\n   * the first transaction is mined)   \r\n   * @param _spender The address which will spend the funds.\r\n   * @param _addedValue The amount of tokens to increase the allowance by.\r\n   */\r\n  function increaseApproval(address _spender, uint _addedValue) public returns (bool) {\r\n    _allowed[msg.sender][_spender] = _allowed[msg.sender][_spender].add(_addedValue);\r\n    emit Approval(msg.sender, _spender, _allowed[msg.sender][_spender]);\r\n    return true;\r\n  }\r\n\r\n\r\n\r\n  /**\r\n   * @dev Decrease the amount of tokens that an owner _allowed to a spend.\r\n   *\r\n   * approve should be called when _allowed[_spender] == 0. To decrement\r\n   * _allowed value is better to use this function to avoid 2 calls (and wait until\r\n   * the first transaction is mined)   \r\n   * @param _spender The address which will spend the funds.\r\n   * @param _subtractedValue The amount of tokens to decrease the allowance by.\r\n   */\r\n  function decreaseApproval(address _spender, uint _subtractedValue) public returns (bool) {\r\n    uint oldValue = _allowed[msg.sender][_spender];\r\n    if (_subtractedValue > oldValue) {\r\n      _allowed[msg.sender][_spender] = 0;\r\n    } else {\r\n      _allowed[msg.sender][_spender] = oldValue.sub(_subtractedValue);\r\n    }\r\n    emit Approval(msg.sender, _spender, _allowed[msg.sender][_spender]);\r\n    return true;\r\n  }\r\n\r\n\r\n  /**\r\n   * @dev Function to toggle token actions\r\n   * \r\n   */\r\n  function toggleActions()  onlyOwner public {\r\n    if(_enableActions){\r\n      _enableActions = false; \r\n    }else{\r\n      _enableActions = true; \r\n    }     \r\n  }\r\n\r\n \r\n  /**\r\n   * @dev Burns a specific amount of tokens.\r\n   * @param _account The account whose tokens will be burnt.\r\n   * @param _value The amount of token to be burned.\r\n   */\r\n  function burn(address _account, uint256 _value) onlyOwner public {\r\n      require(_account != address(0));\r\n      require(_enableActions);\r\n\r\n      // SafeMath.sub will throw if there is not enough balance.\r\n      _totalSupply = _totalSupply.sub(_value);\r\n      _balances[_account] = _balances[_account].sub(_value);\r\n      emit Transfer(_account, address(0), _value);\r\n  }\r\n\r\n  /**\r\n   * @dev Function to mint tokens\r\n   * @param _account The address that will receive the minted tokens.\r\n   * @param _value The amount of tokens to mint.\r\n   * @return A boolean that indicates if the operation was successful.\r\n   */\r\n  function mint(address _account, uint256 _value) onlyOwner public {\r\n      require(_account != address(0));\r\n      require(_totalSupply.add(_value) <= hardcap);\r\n      require(_enableActions);\r\n\r\n      _totalSupply = _totalSupply.add(_value);\r\n      _balances[_account] = _balances[_account].add(_value);\r\n      emit Transfer(address(0), _account, _value);\r\n  }\r\n\r\n\r\n  /**\r\n   * @dev Owner can transfer tokens that are sent to the contract by mistake\r\n   * \r\n   */\r\n  function refundTokens(address _recipient, ERC20 _token)  onlyOwner public {\r\n    require(_token.transfer(_recipient, _token.balanceOf(this)));\r\n  }\r\n\r\n\r\n  /**\r\n   * @dev transfer balance to owner\r\n   * \r\n   */\r\n  function withdrawEther(uint256 amount) onlyOwner public {\r\n    owner().transfer(amount);\r\n  }\r\n  \r\n  /**\r\n   * @dev accept ether\r\n   * \r\n   */\r\n  function() public payable {\r\n  }\r\n\r\n \r\n}","ABI":"[{\"constant\":true,\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_spender\",\"type\":\"address\"},{\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_from\",\"type\":\"address\"},{\"name\":\"_to\",\"type\":\"address\"},{\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"decimals\",\"outputs\":[{\"name\":\"\",\"type\":\"uint8\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"withdrawEther\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_account\",\"type\":\"address\"},{\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"mint\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_recipient\",\"type\":\"address\"},{\"name\":\"_token\",\"type\":\"address\"}],\"name\":\"refundTokens\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_spender\",\"type\":\"address\"},{\"name\":\"_subtractedValue\",\"type\":\"uint256\"}],\"name\":\"decreaseApproval\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_owner\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"name\":\"balance\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"isOwner\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_account\",\"type\":\"address\"},{\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"burn\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_to\",\"type\":\"address\"},{\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"hardcap\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"toggleActions\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_spender\",\"type\":\"address\"},{\"name\":\"_addedValue\",\"type\":\"uint256\"}],\"name\":\"increaseApproval\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_owner\",\"type\":\"address\"},{\"name\":\"_spender\",\"type\":\"address\"}],\"name\":\"allowance\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"fallback\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"spender\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"}]","ContractName":"BNXToken","CompilerVersion":"v0.4.24+commit.e67f0147","OptimizationUsed":"0","Runs":"200","ConstructorArguments":"","Library":"","LicenseType":"MIT","SwarmSource":"bzzr://d117e87f914a6711ffb7b2f55786dfda8f537de0d99f2d73436fb68d12019393"}]}