{"status":"1","message":"OK","result":[{"SourceCode":"pragma solidity ^ 0.5 .1;\r\n\r\n// ----------------------------------------------------------------------------\r\n//'Butt Coin' contract, version 1.0\r\n// Version 0.1 was a fart during a launch, with a confusing _totalSupply and the way Ethereum tracks the burning.\r\n// This coin can be mined, and a _totalSupply is dynamic.\r\n//\r\n// Symbol      : BUTT\r\n// Name        : Butt Coin\r\n// Total supply: Dynamic\r\n// Decimals    : 8\r\n// Worty mention: 0XBitCoin\r\n// ----------------------------------------------------------------------------\r\n\r\n// ----------------------------------------------------------------------------\r\n// Safe maths\r\n// ----------------------------------------------------------------------------\r\n\r\nlibrary SafeMath {\r\n\r\n  //addition\r\n  function add(uint a, uint b) internal pure returns(uint c) {\r\n    c = a + b;\r\n    require(c >= a);\r\n  }\r\n\r\n  //subtraction\r\n  function sub(uint a, uint b) internal pure returns(uint c) {\r\n    require(b <= a);\r\n    c = a - b;\r\n  }\r\n\r\n  //multiplication\r\n  function mul(uint a, uint b) internal pure returns(uint c) {\r\n    c = a * b;\r\n    require(a == 0 || c / a == b);\r\n  }\r\n\r\n  //division\r\n  function div(uint a, uint b) internal pure returns(uint c) {\r\n    require(b > 0);\r\n    c = a / b;\r\n  }\r\n\r\n  //ceil\r\n  function ceil(uint256 a, uint256 m) internal pure returns(uint256) {\r\n    uint256 c = add(a, m);\r\n    uint256 d = sub(c, 1);\r\n    return mul(div(d, m), m);\r\n  }\r\n\r\n}\r\n\r\nlibrary ExtendedMath {\r\n  //also known as the minimum\r\n  function limitLessThan(uint a, uint b) internal pure returns(uint c) {\r\n    if (a > b) return b;\r\n    return a;\r\n  }\r\n}\r\n\r\n// ----------------------------------------------------------------------------\r\n// ERC Token Standard #20 Interface\r\n// https://github.com/ethereum/EIPs/blob/master/EIPS/eip-20-token-standard.md\r\n// ----------------------------------------------------------------------------\r\n\r\ncontract ERC20Interface {\r\n    \r\n  function totalSupply() public view returns(uint);\r\n  function burned() public view returns(uint);\r\n  function minted() public view returns(uint);\r\n  function mintingEpoch() public view returns(uint);\r\n  function balanceOf(address tokenOwner) public view returns(uint balance);\r\n  function allowance(address tokenOwner, address spender) public view returns(uint remaining);\r\n  function transfer(address to, uint tokens) public returns(bool success);\r\n  function approve(address spender, uint tokens) public returns(bool success);\r\n  function transferFrom(address from, address to, uint tokens) public returns(bool success);\r\n\r\n  event Transfer(address indexed from, address indexed to, uint tokens);\r\n  event Approval(address indexed tokenOwner, address indexed spender, uint tokens);\r\n}\r\n\r\n// ----------------------------------------------------------------------------\r\n// Contract function to receive approval and execute function in one call\r\n// ----------------------------------------------------------------------------\r\ncontract ApproveAndCallFallBack {\r\n  function receiveApproval(address from, uint256 tokens, address token, bytes memory data) public;\r\n}\r\n\r\n// ----------------------------------------------------------------------------\r\n// Owned contract\r\n// ----------------------------------------------------------------------------\r\n\r\ncontract Owned {\r\n    \r\n  address public owner;\r\n  address public newOwner;\r\n\r\n  event OwnershipTransferred(address indexed _from, address indexed _to);\r\n\r\n  constructor() public {\r\n    owner = msg.sender;\r\n  }\r\n\r\n  modifier onlyOwner {\r\n    require(msg.sender == owner);\r\n    _;\r\n  }\r\n\r\n  function transferOwnership(address _newOwner) public onlyOwner {\r\n    newOwner = _newOwner;\r\n  }\r\n\r\n  function acceptOwnership() public {\r\n    require(msg.sender == newOwner);\r\n    emit OwnershipTransferred(owner, newOwner);\r\n    owner = newOwner;\r\n    newOwner = address(0);\r\n  }\r\n}\r\n\r\n// ----------------------------------------------------------------------------\r\n// ERC20 Token, with the addition of symbol, name and decimals and an\r\n// initial fixed supply\r\n// ----------------------------------------------------------------------------\r\n\r\ncontract BUTTv1 is ERC20Interface, Owned {\r\n\r\n  using SafeMath for uint;\r\n  using ExtendedMath for uint;\r\n\r\n  string public symbol;\r\n  string public name;\r\n  uint8 public decimals;\r\n  uint256 public _totalSupply;\r\n  uint256 public _burned;\r\n  uint256 public _mintingEpoch;\r\n  uint public latestDifficultyPeriodStarted;\r\n\r\n  uint public epochCount; //number of 'blocks' mined\r\n\r\n  uint public _BLOCKS_PER_READJUSTMENT = 64;\r\n\r\n  //a little number\r\n  uint public _MINIMUM_TARGET = 2 ** 16;\r\n\r\n  //a big number is easier ; just find a solution that is smaller\r\n  uint public _MAXIMUM_TARGET = 2 ** 234;\r\n\r\n  uint public miningTarget;\r\n  bytes32 public challengeNumber; //generate a new one when a new reward is minted\r\n\r\n  uint public rewardEra;\r\n  uint public maxSupplyForEra;\r\n\r\n  address public lastRewardTo;\r\n  uint public lastRewardAmount;\r\n  uint public lastRewardEthBlockNumber;\r\n\r\n\r\n  mapping(bytes32 => bytes32) solutionForChallenge;\r\n  uint public tokensMinted;\r\n\r\n  mapping(address => uint) balances;\r\n  mapping(address => mapping(address => uint)) allowed;\r\n  \r\n  \r\n\r\n  uint private basePercent;\r\n  bool private locked = false;\r\n  address private previousSender = address(0); //the previous user of a contract\r\n\r\n  \r\n  event Mint(address indexed from, uint reward_amount, uint epochCount, bytes32 newChallengeNumber);\r\n\r\n  // ------------------------------------------------------------------------\r\n  // Constructor\r\n  // ------------------------------------------------------------------------\r\n\r\n  constructor() public {\r\n    if (locked) revert();\r\n    \r\n    symbol = \"BUTT\";\r\n    name = \"Butt Coin\";\r\n    decimals = 8;\r\n    basePercent = 100;\r\n    \r\n    _totalSupply = 0; //initial amount before any tokens are minted\r\n    uint toMint = 33554432 * 10 ** uint(decimals); \r\n    _mint(msg.sender, toMint);\r\n    _mintingEpoch = 0;\r\n\r\n    tokensMinted = toMint;\r\n    _totalSupply = _totalSupply.add(toMint);\r\n    rewardEra = 1;\r\n    maxSupplyForEra = 2;\r\n    miningTarget = _MAXIMUM_TARGET;\r\n    latestDifficultyPeriodStarted = block.number;\r\n    _startNewMiningEpoch();\r\n    \r\n    locked = true;\r\n  }\r\n  \r\n  // ------------------------------------------------------------------------\r\n  // The minting of tokens before the mining.\r\n  // ------------------------------------------------------------------------\r\n  function _mint(address account, uint256 amount) internal {\r\n    if (locked) revert();\r\n    require(amount != 0);\r\n    balances[account] = balances[account].add(amount);\r\n    emit Transfer(address(0), account, amount);\r\n  }\r\n\r\n  // ------------------------------------------------------------------------\r\n  // The minting of tokens during the mining.\r\n  // ------------------------------------------------------------------------\r\n  function mint(uint256 nonce, bytes32 challenge_digest) public returns(bool success) {\r\n      \r\n      \r\n    //the PoW must contain work that includes a recent ethereum block hash (challenge number) and the msg.sender's address to prevent MITM attacks\r\n    bytes32 digest = keccak256(abi.encodePacked(challengeNumber, msg.sender, nonce));\r\n\r\n    //the challenge digest must match the expected\r\n    if (digest != challenge_digest) revert();\r\n\r\n    //the digest must be smaller than the target\r\n    if (uint256(digest) > miningTarget) revert();\r\n\r\n    //only allow one reward for each challenge\r\n    bytes32 solution = solutionForChallenge[challengeNumber];\r\n    solutionForChallenge[challengeNumber] = digest;\r\n    if (solution != 0x0) revert(); //prevent the same answer from awarding twice\r\n\r\n    uint reward_amount = getMiningReward();\r\n    balances[msg.sender] = balances[msg.sender].add(reward_amount);\r\n    tokensMinted = tokensMinted.add(reward_amount);\r\n    _totalSupply = _totalSupply.add(tokensMinted);\r\n\r\n\r\n    //set readonly diagnostics data\r\n    lastRewardTo = msg.sender;\r\n    lastRewardAmount = reward_amount;\r\n    lastRewardEthBlockNumber = block.number;\r\n\r\n    _startNewMiningEpoch();\r\n    emit Mint(msg.sender, reward_amount, epochCount, challengeNumber);\r\n    \r\n    return true;\r\n  }\r\n\r\n  // ------------------------------------------------------------------------\r\n  // Starts a new mining epoch, a new 'block' to be mined.\r\n  // ------------------------------------------------------------------------\r\n  function _startNewMiningEpoch() internal {\r\n\r\n    if(tokensMinted>=(2**(128))){//This will not happen in the forseable future.\r\n        tokensMinted = 0; //resets, thus, making a token forever-infinite.\r\n        _mintingEpoch = _mintingEpoch.add(1);\r\n    }  \r\n    \r\n    rewardEra = rewardEra + 1; //increment the rewardEra\r\n\r\n\r\n    //set the next minted supply at which the era will change\r\n    // total supply is 10000000000000000  because of 8 decimal places\r\n    maxSupplyForEra = (2 * 10 ** uint(decimals)).mul(rewardEra);\r\n\r\n    epochCount = epochCount.add(1);\r\n\r\n    //every so often, readjust difficulty. Dont readjust when deploying\r\n    if (epochCount % _BLOCKS_PER_READJUSTMENT == 0) {\r\n      _reAdjustDifficulty();\r\n    }\r\n\r\n    //make the latest ethereum block hash a part of the next challenge for PoW to prevent pre-mining future blocks\r\n    //do this last since this is a protection mechanism in the mint() function\r\n    challengeNumber = blockhash(block.number - 1);\r\n\r\n  }\r\n\r\n  // ------------------------------------------------------------------------\r\n  // Readjust the target by 5 percent.\r\n  // ------------------------------------------------------------------------\r\n  function _reAdjustDifficulty() internal {\r\n      \r\n\r\n    uint ethBlocksSinceLastDifficultyPeriod = block.number - latestDifficultyPeriodStarted;\r\n    //assume 360 ethereum blocks per hour\r\n\r\n    //we want miners to spend 10 minutes to mine each 'block', about 60 ethereum blocks = one butt epoch\r\n    uint epochsMined = _BLOCKS_PER_READJUSTMENT; //256\r\n\r\n    uint targetEthBlocksPerDiffPeriod = epochsMined * 60; //should be 60 times slower than ethereum\r\n\r\n    //if there were less eth blocks passed in time than expected\r\n    if (ethBlocksSinceLastDifficultyPeriod < targetEthBlocksPerDiffPeriod) {\r\n      uint excess_block_pct = (targetEthBlocksPerDiffPeriod.mul(100)).div(ethBlocksSinceLastDifficultyPeriod);\r\n\r\n      uint excess_block_pct_extra = excess_block_pct.sub(100).limitLessThan(1000);\r\n      // If there were 5% more blocks mined than expected then this is 5.  If there were 100% more blocks mined than expected then this is 100.\r\n\r\n      //make it harder\r\n      miningTarget = miningTarget.sub(miningTarget.div(2000).mul(excess_block_pct_extra)); //by up to 50 %\r\n    } else {\r\n      uint shortage_block_pct = (ethBlocksSinceLastDifficultyPeriod.mul(100)).div(targetEthBlocksPerDiffPeriod);\r\n\r\n      uint shortage_block_pct_extra = shortage_block_pct.sub(100).limitLessThan(1000); //always between 0 and 1000\r\n\r\n      //make it easier\r\n      miningTarget = miningTarget.add(miningTarget.div(2000).mul(shortage_block_pct_extra)); //by up to 50 %\r\n    }\r\n\r\n    latestDifficultyPeriodStarted = block.number;\r\n\r\n    if (miningTarget < _MINIMUM_TARGET) //very difficult\r\n    {\r\n      miningTarget = _MINIMUM_TARGET;\r\n    }\r\n\r\n    if (miningTarget > _MAXIMUM_TARGET) //very easy\r\n    {\r\n      miningTarget = _MAXIMUM_TARGET;\r\n    }\r\n  }\r\n\r\n  // -------------------------------------------------------------------------------\r\n  // this is a recent ethereum block hash, used to prevent pre-mining future blocks.\r\n  // -------------------------------------------------------------------------------\r\n  function getChallengeNumber() public view returns(bytes32) {\r\n    return challengeNumber;\r\n  }\r\n\r\n  // -------------------------------------------------------------------------------\r\n  // Auto adjusts the number of zeroes the digest of the PoW solution requires.  \r\n  // -------------------------------------------------------------------------------\r\n  function getMiningDifficulty() public view returns(uint) {\r\n    return _MAXIMUM_TARGET.div(miningTarget);\r\n  }\r\n\r\n  // -------------------------------------------------------------------------------\r\n  // returns the miningTarget.\r\n  // -------------------------------------------------------------------------------\r\n  function getMiningTarget() public view returns(uint) {\r\n    return miningTarget;\r\n  }\r\n\r\n  // ------------------------------------------------------------------------\r\n  // Gives miners their earned reward, zero if everything is mined.\r\n  // ------------------------------------------------------------------------\r\n  function getMiningReward() internal returns(uint) {\r\n    uint reward = ( 10 ** uint(decimals)).mul(rewardEra);\r\n    return reward;\r\n  }\r\n\r\n  // ------------------------------------------------------------------------\r\n  // Used to help debugging the mining software.\r\n  // ------------------------------------------------------------------------\r\n  function getMintDigest(uint256 nonce, bytes32 challenge_digest, bytes32 challenge_number) public view returns(bytes32 digesttest) {\r\n    bytes32 digest = keccak256(abi.encodePacked(challenge_number, msg.sender, nonce));\r\n    return digest;\r\n\r\n  }\r\n\r\n  // ------------------------------------------------------------------------\r\n  // Used to help debugging the mining software.\r\n  // ------------------------------------------------------------------------\r\n\r\n  function checkMintSolution(uint256 nonce, bytes32 challenge_digest, bytes32 challenge_number, uint testTarget) public view returns(bool success) {\r\n    bytes32 digest = keccak256(abi.encodePacked(challenge_number, msg.sender, nonce));\r\n    if (uint256(digest) > testTarget) revert();\r\n    return (digest == challenge_digest);\r\n  }\r\n\r\n  // ------------------------------------------------------------------------\r\n  // Total supply\r\n  // ------------------------------------------------------------------------\r\n  function totalSupply() public view returns(uint) {\r\n    return tokensMinted.sub(_burned);\r\n  }\r\n  \r\n  // ------------------------------------------------------------------------\r\n  // Burned tokens\r\n  // ------------------------------------------------------------------------\r\n  function burned() public view returns(uint) {\r\n    return _burned;\r\n  }\r\n  \r\n  // ------------------------------------------------------------------------\r\n  // Minted tokens\r\n  // ------------------------------------------------------------------------\r\n  function minted() public view returns(uint) {\r\n    return tokensMinted;\r\n  }\r\n  \r\n  // ------------------------------------------------------------------------\r\n  // Minting epoch\r\n  // ------------------------------------------------------------------------\r\n  function mintingEpoch() public view returns(uint) {\r\n    return _mintingEpoch;\r\n  }\r\n\r\n  // ------------------------------------------------------------------------\r\n  // Get the token balance for account `tokenOwner`\r\n  // ------------------------------------------------------------------------\r\n\r\n  function balanceOf(address tokenOwner) public view returns(uint balance) {\r\n    return balances[tokenOwner];\r\n  }\r\n\r\n  // ------------------------------------------------------------------------\r\n  // Transfer the balance from token owner's account to `to` account\r\n  // - Owner's account must have sufficient balance to transfer\r\n  // - 0 value transfers are allowed\r\n  // ------------------------------------------------------------------------\r\n  function transfer(address to, uint tokens) public returns(bool success) {\r\n    balances[msg.sender] = balances[msg.sender].sub(tokens);\r\n\r\n    balances[to] = balances[to].add(tokens);\r\n\r\n    uint256 tokensToBurn = findTwoPercent(tokens);\r\n    uint256 toZeroAddress = tokensToBurn.div(2);\r\n    uint256 toPreviousAddress = tokensToBurn.sub(toZeroAddress);\r\n    uint256 tokensToTransfer = tokens.sub(toZeroAddress.add(toPreviousAddress));\r\n    \r\n     \r\n    emit Transfer(msg.sender, to, tokensToTransfer);\r\n    emit Transfer(msg.sender, address(0), toZeroAddress);\r\n    if(previousSender!=to){ //Don't send the tokens to yourself\r\n            emit Transfer(to, previousSender, toPreviousAddress);\r\n            if(previousSender==address(0)){\r\n                 _burned = _burned.add(toPreviousAddress);\r\n            }\r\n    }\r\n    \r\n    if(to==address(0)){\r\n        _burned = _burned.add(tokensToTransfer);\r\n    }\r\n    \r\n    _burned = _burned.add(toZeroAddress);\r\n    \r\n    _totalSupply = totalSupply();\r\n    previousSender = msg.sender;\r\n    return true;\r\n  }\r\n\r\n  // ------------------------------------------------------------------------\r\n  // Calculates 2% for burning\r\n  // ------------------------------------------------------------------------\r\n  function findTwoPercent(uint256 value) private view returns(uint256) {\r\n    uint256 roundValue = value.ceil(basePercent);\r\n    uint256 onePercent = roundValue.mul(basePercent).div(10000);\r\n    return onePercent.mul(2);\r\n  }\r\n \r\n\r\n  // ------------------------------------------------------------------------\r\n  // Token owner can approve for `spender` to transferFrom(...) `tokens`\r\n  // from the token owner's account\r\n  // https://github.com/ethereum/EIPs/blob/master/EIPS/eip-20-token-standard.md\r\n  // recommends that there are no checks for the approval double-spend attack\r\n  // as this should be implemented in user interfaces\r\n  // ------------------------------------------------------------------------\r\n  function approve(address spender, uint tokens) public returns(bool success) {\r\n    allowed[msg.sender][spender] = tokens;\r\n    emit Approval(msg.sender, spender, tokens);\r\n    return true;\r\n  }\r\n\r\n  // ------------------------------------------------------------------------\r\n  // Transfer `tokens` from the `from` account to the `to` account\r\n  // The calling account must already have sufficient tokens approve(...)-d\r\n  // for spending from the `from` account and\r\n  // - From account must have sufficient balance to transfer\r\n  // - Spender must have sufficient allowance to transfer\r\n  // - 0 value transfers are allowed\r\n  // ------------------------------------------------------------------------\r\n\r\n  function transferFrom(address from, address to, uint tokens) public returns(bool success) {\r\n    balances[from] = balances[from].sub(tokens);\r\n    allowed[from][msg.sender] = allowed[from][msg.sender].sub(tokens);\r\n    balances[to] = balances[to].add(tokens);\r\n\r\n    uint256 tokensToBurn = findTwoPercent(tokens);\r\n    uint256 toZeroAddress = tokensToBurn.div(2);\r\n    uint256 toPreviousAddress = tokensToBurn-toZeroAddress;\r\n    uint256 tokensToTransfer = tokens.sub(toZeroAddress).sub(toPreviousAddress);\r\n    \r\n     \r\n    emit Transfer(msg.sender, to, tokensToTransfer);\r\n    emit Transfer(msg.sender, address(0), toZeroAddress);\r\n    if(previousSender!=to){ //Don't send the tokens to yourself\r\n            emit Transfer(to, previousSender, toPreviousAddress);\r\n            if(previousSender==address(0)){\r\n                 _burned = _burned.add(toPreviousAddress);\r\n            }\r\n    }\r\n    if(to==address(0)){\r\n        _burned = _burned.add(tokensToTransfer);\r\n    }\r\n    \r\n    _burned = _burned.add(toZeroAddress);\r\n    _totalSupply = totalSupply();\r\n    previousSender = msg.sender;\r\n\r\n    return true;\r\n  }\r\n\r\n  // ------------------------------------------------------------------------\r\n  // Returns the amount of tokens approved by the owner that can be\r\n  // transferred to the spender's account\r\n  // ------------------------------------------------------------------------\r\n  function allowance(address tokenOwner, address spender) public view returns(uint remaining) {\r\n    return allowed[tokenOwner][spender];\r\n  }\r\n\r\n  // ------------------------------------------------------------------------\r\n  // Token owner can approve for `spender` to transferFrom(...) `tokens`\r\n  // from the token owner's account. The `spender` contract function\r\n  // `receiveApproval(...)` is then executed\r\n  // ------------------------------------------------------------------------\r\n  function approveAndCall(address spender, uint tokens, bytes memory data) public returns(bool success) {\r\n    allowed[msg.sender][spender] = tokens;\r\n    emit Approval(msg.sender, spender, tokens);\r\n    ApproveAndCallFallBack(spender).receiveApproval(msg.sender, tokens, address(this), data);\r\n    return true;\r\n\r\n  }\r\n\r\n  // ------------------------------------------------------------------------\r\n  // Do not accept ETH\r\n  // ------------------------------------------------------------------------\r\n  function () external payable {\r\n    revert();\r\n  }\r\n\r\n  // ------------------------------------------------------------------------\r\n  // Owner can transfer out any accidentally sent ERC20 tokens\r\n  // ------------------------------------------------------------------------\r\n  function transferAnyERC20Token(address tokenAddress, uint tokens) public onlyOwner returns(bool success) {\r\n    return ERC20Interface(tokenAddress).transfer(owner, tokens);\r\n  }\r\n\r\n}","ABI":"[{\"constant\":true,\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"spender\",\"type\":\"address\"},{\"name\":\"tokens\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[{\"name\":\"success\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"_mintingEpoch\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"lastRewardEthBlockNumber\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"getMiningDifficulty\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"nonce\",\"type\":\"uint256\"},{\"name\":\"challenge_digest\",\"type\":\"bytes32\"}],\"name\":\"mint\",\"outputs\":[{\"name\":\"success\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"from\",\"type\":\"address\"},{\"name\":\"to\",\"type\":\"address\"},{\"name\":\"tokens\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[{\"name\":\"success\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"rewardEra\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"decimals\",\"outputs\":[{\"name\":\"\",\"type\":\"uint8\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"getMiningTarget\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"_totalSupply\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"_burned\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"getChallengeNumber\",\"outputs\":[{\"name\":\"\",\"type\":\"bytes32\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"minted\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"maxSupplyForEra\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"tokensMinted\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"lastRewardTo\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"tokenOwner\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"name\":\"balance\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"burned\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"acceptOwnership\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"nonce\",\"type\":\"uint256\"},{\"name\":\"challenge_digest\",\"type\":\"bytes32\"},{\"name\":\"challenge_number\",\"type\":\"bytes32\"},{\"name\":\"testTarget\",\"type\":\"uint256\"}],\"name\":\"checkMintSolution\",\"outputs\":[{\"name\":\"success\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"epochCount\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"_MAXIMUM_TARGET\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"miningTarget\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"challengeNumber\",\"outputs\":[{\"name\":\"\",\"type\":\"bytes32\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"nonce\",\"type\":\"uint256\"},{\"name\":\"challenge_digest\",\"type\":\"bytes32\"},{\"name\":\"challenge_number\",\"type\":\"bytes32\"}],\"name\":\"getMintDigest\",\"outputs\":[{\"name\":\"digesttest\",\"type\":\"bytes32\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"to\",\"type\":\"address\"},{\"name\":\"tokens\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[{\"name\":\"success\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"_BLOCKS_PER_READJUSTMENT\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"lastRewardAmount\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"mintingEpoch\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"spender\",\"type\":\"address\"},{\"name\":\"tokens\",\"type\":\"uint256\"},{\"name\":\"data\",\"type\":\"bytes\"}],\"name\":\"approveAndCall\",\"outputs\":[{\"name\":\"success\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"latestDifficultyPeriodStarted\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"newOwner\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"tokenAddress\",\"type\":\"address\"},{\"name\":\"tokens\",\"type\":\"uint256\"}],\"name\":\"transferAnyERC20Token\",\"outputs\":[{\"name\":\"success\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"_MINIMUM_TARGET\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"tokenOwner\",\"type\":\"address\"},{\"name\":\"spender\",\"type\":\"address\"}],\"name\":\"allowance\",\"outputs\":[{\"name\":\"remaining\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"fallback\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"from\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"reward_amount\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"epochCount\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"newChallengeNumber\",\"type\":\"bytes32\"}],\"name\":\"Mint\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"_from\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"_to\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"tokens\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"tokenOwner\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"spender\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"tokens\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"}]","ContractName":"BUTTv1","CompilerVersion":"v0.5.1+commit.c8a2cb62","OptimizationUsed":"1","Runs":"200","ConstructorArguments":"","Library":"","LicenseType":"MIT","SwarmSource":"bzzr://e0f6fb650cb76909052779e93aa54408e61b475c993f8fedfbdcdf9a68480ef8"}]}