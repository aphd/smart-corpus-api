{"status":"1","message":"OK","result":[{"SourceCode":"pragma solidity 0.4.26;\r\n\r\n/**\r\n * @dev Wrappers over Solidity's arithmetic operations with added overflow\r\n * checks.\r\n *\r\n * Arithmetic operations in Solidity wrap on overflow. This can easily result\r\n * in bugs, because programmers usually assume that an overflow raises an\r\n * error, which is the standard behavior in high level programming languages.\r\n * `SafeMath` restores this intuition by reverting the transaction when an\r\n * operation overflows.\r\n *\r\n * Using this library instead of the unchecked operations eliminates an entire\r\n * class of bugs, so it's recommended to use it always.\r\n */\r\nlibrary SafeMath {\r\n    /**\r\n     * @dev Returns the addition of two unsigned integers, reverting on\r\n     * overflow.\r\n     *\r\n     * Counterpart to Solidity's `+` operator.\r\n     *\r\n     * Requirements:\r\n     * - Addition cannot overflow.\r\n     */\r\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        uint256 c = a + b;\r\n        require(c >= a, \"SafeMath: addition overflow\");\r\n\r\n        return c;\r\n    }\r\n    /**\r\n     * @dev Returns the subtraction of two unsigned integers, reverting on\r\n     * overflow (when the result is negative).\r\n     *\r\n     * Counterpart to Solidity's `-` operator.\r\n     *\r\n     * Requirements:\r\n     * - Subtraction cannot overflow.\r\n     */\r\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        require(b <= a, \"SafeMath: subtraction overflow\");\r\n        uint256 c = a - b;\r\n\r\n        return c;\r\n    }\r\n    /**\r\n     * @dev Returns the multiplication of two unsigned integers, reverting on\r\n     * overflow.\r\n     *\r\n     * Counterpart to Solidity's `*` operator.\r\n     *\r\n     * Requirements:\r\n     * - Multiplication cannot overflow.\r\n     */\r\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        // Gas optimization: this is cheaper than requiring 'a' not being zero, but the\r\n        // benefit is lost if 'b' is also tested.\r\n        // See: https://github.com/OpenZeppelin/openzeppelin-solidity/pull/522\r\n        if (a == 0) {\r\n            return 0;\r\n        }\r\n\r\n        uint256 c = a * b;\r\n        require(c / a == b, \"SafeMath: multiplication overflow\");\r\n\r\n        return c;\r\n    }\r\n    /**\r\n     * @dev Returns the integer division of two unsigned integers. Reverts on\r\n     * division by zero. The result is rounded towards zero.\r\n     *\r\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\r\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\r\n     * uses an invalid opcode to revert (consuming all remaining gas).\r\n     *\r\n     * Requirements:\r\n     * - The divisor cannot be zero.\r\n     */\r\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        // Solidity only automatically asserts when dividing by 0\r\n        require(b > 0, \"SafeMath: division by zero\");\r\n        uint256 c = a / b;\r\n        // assert(a == b * c + a % b); // There is no case in which this doesn't hold\r\n\r\n        return c;\r\n    }\r\n    /**\r\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\r\n     * Reverts when dividing by zero.\r\n     *\r\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\r\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\r\n     * invalid opcode to revert (consuming all remaining gas).\r\n     *\r\n     * Requirements:\r\n     * - The divisor cannot be zero.\r\n     */\r\n    function mod(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        require(b != 0, \"SafeMath: modulo by zero\");\r\n        return a % b;\r\n    }\r\n}\r\n/**\r\n * @title ERC20\r\n * @dev see https://github.com/ethereum/EIPs/issues/20\r\n */\r\ncontract ERC20 {\r\n  uint256 public totalSupply;\r\n\r\n  function balanceOf(address who) public view returns (uint256);\r\n  function transfer(address to, uint256 value) public returns (bool);\r\n  function allowance(address owner, address spender) public view returns (uint256);\r\n  function transferFrom(address from, address to, uint256 value) public returns (bool);\r\n  function approve(address spender, uint256 value) public returns (bool);\r\n\r\n  event Approval(address indexed owner, address indexed spender, uint256 value);\r\n  event Transfer(address indexed from, address indexed to, uint256 value);\r\n}\r\n/**\r\n * @dev ERC20 Escrow legible as Bounty Board with arbitration logic.\r\n * @author R. Ross Campbell\r\n */\r\ncontract BountyBoard {\r\n    using SafeMath for uint256;\r\n    \r\n    string public bounty;\r\n    uint256 public bountyID;\r\n    uint256 public bountyPrice;\r\n    address public bountyToken;\r\n    address public bountyMaker;\r\n    address public bountyHunter;\r\n    address public arbiter;\r\n    \r\n    uint256 public arbiterFee;\r\n    \r\n    enum State { Blank, Posted, Claimed, Disputed }\r\n    State public state;\r\n    \r\n    event bountyPosted(string indexed bounty, uint256 price, address indexed bountyToken);\r\n    event bountyClaimed(address indexed bountyHunter);\r\n    event bountyWithdrawn();\r\n    event Disputed();\r\n    event Resolved(address indexed this, address indexed bountyMaker, address indexed bountyHunter);\r\n/**\r\n * @dev Sets the Bounty Board stable values for `bounty`, `price`, 'tokenContract', `buyer`, `seller`, 'arbiter', 'arbiterFee'. All seven of\r\n * these values are immutable: they can only be set once during construction and reflect essential deal terms.\r\n */    \r\n   constructor(address _bountyMaker)\r\n        public {\r\n                bountyMaker = _bountyMaker;\r\n               }\r\n                /**\r\n                 * @dev Throws if called by any account other than buyer.\r\n                 */\r\n                  modifier onlyBountyMaker() {\r\n                        require(msg.sender == bountyMaker);\r\n                         _;\r\n                        }\r\n                /**\r\n                 * @dev Throws if called by any account other than buyer or seller.\r\n                 */\r\n                  modifier onlyBountyMakerOrBountyHunter() {\r\n                        require(\r\n                        msg.sender == bountyMaker ||\r\n                        msg.sender == bountyHunter);\r\n                         _;\r\n                        }\r\n                /**\r\n                 * @dev Throws if called by any account other than arbiter.\r\n                 */\r\n                  modifier onlyArbiter() {\r\n                        require(msg.sender == arbiter);\r\n                         _;\r\n                        }\r\n                /**\r\n                 * @dev Throws if contract called in State other than one associated for function.\r\n                 */\r\n                  modifier inState(State _state) {\r\n                        require(state == _state);\r\n                         _;\r\n                        }\r\n           function postBounty(string memory _bounty, uint256 _bountyPrice, address _bountyToken, address _arbiter, uint256 _arbiterFee) public onlyBountyMaker inState(State.Blank) {\r\n                state = State.Posted;\r\n                bounty = _bounty;\r\n                bountyPrice = _bountyPrice;\r\n                bountyToken = _bountyToken;\r\n                arbiter = _arbiter;\r\n                arbiterFee = _arbiterFee;\r\n                bountyID = now;\r\n                emit bountyPosted(bounty, bountyPrice, bountyToken);\r\n                }\r\n            function withdrawBounty() public onlyBountyMaker inState(State.Posted) {\r\n                state = State.Blank;\r\n                ERC20 token = ERC20(bountyToken);\r\n                uint256 tokenBalance = token.balanceOf(this);\r\n                token.transfer(bountyMaker, tokenBalance);\r\n                emit bountyWithdrawn();\r\n                }\r\n            function assignBounty(address _bountyHunter) public onlyBountyMaker inState(State.Posted) {\r\n                state = State.Claimed;\r\n                bountyHunter = _bountyHunter;\r\n                emit bountyClaimed(bountyHunter);\r\n                }\r\n        /**\r\n         * @dev bountyMaker confirms receipt of bounty service from bountyHunter;\r\n         * bounty 'Price' is transferred to bountyHunter.\r\n         * (presuming bountyMaker deposits to escrow to motivate bountyHunter delivery)\r\n         */\r\n           function confirmReceipt() public onlyBountyMaker inState(State.Claimed) {\r\n                state = State.Blank;\r\n                ERC20 token = ERC20(bountyToken);\r\n                uint256 tokenBalance = token.balanceOf(this);\r\n                token.transfer(bountyHunter, tokenBalance);\r\n                }\r\n        /**\r\n         * @dev bountyMaker or bountyHunter can initiate dispute related to bounty transaction,\r\n         * placing bounty 'Price' transfer and split of value into arbiter control.\r\n         */\r\n           function initiateDispute() public onlyBountyMakerOrBountyHunter inState(State.Claimed) {\r\n                state = State.Disputed;\r\n                emit Disputed();\r\n                }\r\n        /**\r\n         * @dev Arbiter can resolve dispute and claim token reward by entering in split of 'price' value,\r\n         * minus 5% 'arbiter fee'.\r\n         */\r\n           function resolveDispute(uint256 MakerAward, uint256 HunterAward) public onlyArbiter inState(State.Disputed) {\r\n                state = State.Blank;\r\n                ERC20 token = ERC20(bountyToken);\r\n                token.transfer(bountyMaker, MakerAward);\r\n                token.transfer(bountyHunter, HunterAward);\r\n                token.transfer(arbiter, arbiterFee);\r\n                emit Resolved(address(this), bountyMaker, bountyHunter);\r\n                }\r\n}","ABI":"[{\"constant\":true,\"inputs\":[],\"name\":\"bountyHunter\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"withdrawBounty\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"bountyToken\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"bountyMaker\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"initiateDispute\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"confirmReceipt\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"arbiterFee\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"bounty\",\"outputs\":[{\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"bountyID\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_bounty\",\"type\":\"string\"},{\"name\":\"_bountyPrice\",\"type\":\"uint256\"},{\"name\":\"_bountyToken\",\"type\":\"address\"},{\"name\":\"_arbiter\",\"type\":\"address\"},{\"name\":\"_arbiterFee\",\"type\":\"uint256\"}],\"name\":\"postBounty\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"MakerAward\",\"type\":\"uint256\"},{\"name\":\"HunterAward\",\"type\":\"uint256\"}],\"name\":\"resolveDispute\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"state\",\"outputs\":[{\"name\":\"\",\"type\":\"uint8\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"bountyPrice\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_bountyHunter\",\"type\":\"address\"}],\"name\":\"assignBounty\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"arbiter\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"name\":\"_bountyMaker\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"bounty\",\"type\":\"string\"},{\"indexed\":false,\"name\":\"price\",\"type\":\"uint256\"},{\"indexed\":true,\"name\":\"bountyToken\",\"type\":\"address\"}],\"name\":\"bountyPosted\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"bountyHunter\",\"type\":\"address\"}],\"name\":\"bountyClaimed\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[],\"name\":\"bountyWithdrawn\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[],\"name\":\"Disputed\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"this\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"bountyMaker\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"bountyHunter\",\"type\":\"address\"}],\"name\":\"Resolved\",\"type\":\"event\"}]","ContractName":"BountyBoard","CompilerVersion":"v0.4.26+commit.4563c3fc","OptimizationUsed":"0","Runs":"200","ConstructorArguments":"0000000000000000000000001c0aa8ccd568d90d61659f060d1bfb1e6f855a20","Library":"","LicenseType":"MIT","SwarmSource":"bzzr://61623a785527cf5ee6daf1db900af67c81ae303303757aab6e440961d5aed76d"}]}