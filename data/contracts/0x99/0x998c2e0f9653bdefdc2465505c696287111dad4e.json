{"status":"1","message":"OK","result":[{"SourceCode":"pragma solidity ^0.5.10;\r\n\r\ncontract SafeMath {\r\n  function safeMul(uint a, uint b) internal pure returns (uint) {\r\n    uint c = a * b;\r\n    assert(a == 0 || c / a == b);\r\n    return c;\r\n  }\r\n  function safeSub(uint a, uint b) internal pure returns (uint) {\r\n    assert(b <= a);\r\n    return a - b;\r\n  }\r\n  function safeAdd(uint a, uint b) internal pure returns (uint) {\r\n    uint c = a + b;\r\n    assert(c>=a && c>=b);\r\n    return c;\r\n  }\r\n}\r\n\r\ncontract Token {\r\n  function balanceOf(address _owner) public view returns (uint256 balance) {}\r\n  function transfer(address _to, uint256 _value) public returns (bool success) {}\r\n  //function transfer(address _to, uint _value) public;\r\n  function transferFrom(address _from, address _to, uint256 _value) public returns (bool success) {}\r\n  //function transferFrom(address from, address to, uint value) public;\r\n}\r\n\r\n\r\ncontract DaiSwap is SafeMath {\r\n    mapping (address => uint) public daiposit;\r\n    uint public totaldai = 0;\r\n    uint public baseMultiplier = 40;\r\n    uint fee = 997; // 0.3%\r\n    uint constant decOffset = 1e12;\r\n    Token  daiContract = Token(0x89d24A6b4CcB1B6fAA2625fE562bDD9a23260359);\r\n    //Token  usdContract = Token(0xdAC17F958D2ee523a2206206994597C13D831ec7);  // USDT\r\n    Token  usdContract = Token(0xA0b86991c6218b36c1d19D4a2e9Eb0cE3606eB48); // USDC\r\n    //Token   daiContract = Token(0xE888757Fbf1f29B520a80f977DBE52F9AD20d6C9); //Kovan Testnet\r\n    //Token  usdContract = Token(0x3502B803f2a516cD6e9d6E8938b700d78ABF1373); //Kovan Testnet\r\n\r\n    function sharesFromDai(uint dai) public view returns (uint) {\r\n        if (totaldai == 0) return dai; // Initialisation \r\n        uint amt_dai  =  daiContract.balanceOf(address(this));\r\n        return safeMul(dai, totaldai) / amt_dai;\r\n    }\r\n\r\n    function usdAmountFromShares(uint shares) public view returns (uint) {\r\n        if (totaldai == 0) return shares / decOffset; // Initialisation - 1 Dai = 1 Shares\r\n        uint amt_usd = safeMul(usdContract.balanceOf(address(this)), decOffset);\r\n        return (safeMul(shares, amt_usd) / totaldai) / decOffset;\r\n    }\r\n    \r\n    function usdAmountFromDai(uint dai) public view returns (uint) {\r\n        return usdAmountFromShares(sharesFromDai(dai));\r\n    }\r\n    \r\n    function deposit(uint dai) public {\r\n        uint shares = sharesFromDai(dai);\r\n        uint usd = usdAmountFromShares(shares);\r\n        daiposit[msg.sender] = safeAdd(daiposit[msg.sender], shares);\r\n        totaldai             = safeAdd(totaldai, shares);\r\n        daiContract.transferFrom(msg.sender, address(this), dai);\r\n        usdContract.transferFrom(msg.sender, address(this), usd);\r\n    }\r\n    \r\n    function withdraw() public {\r\n        uint dai = safeMul(daiposit[msg.sender],  daiContract.balanceOf(address(this))) / totaldai;\r\n        uint usd = safeMul(daiposit[msg.sender], usdContract.balanceOf(address(this))) / totaldai;\r\n        totaldai = safeSub(totaldai, daiposit[msg.sender]);\r\n        daiposit[msg.sender] = 0;\r\n        daiContract.transfer(msg.sender, dai);\r\n        usdContract.transfer(msg.sender, usd);\r\n    }\r\n    \r\n    function calcSwapForUSD(uint dai) public view returns (uint) {\r\n        uint base    = safeMul(baseMultiplier, totaldai);\r\n        uint amt_dai =         daiContract.balanceOf(address(this));\r\n        uint amt_usd = safeMul(usdContract.balanceOf(address(this)), decOffset);\r\n        uint usd     = safeSub(safeAdd(amt_usd, base), ( safeMul(safeAdd(base, amt_usd), safeAdd(base, amt_dai)) / safeAdd(safeAdd(base, amt_dai), dai)));\r\n        usd = usd / decOffset;\r\n        return safeMul(usd, fee) / 1000;\r\n    }\r\n    \r\n    function swapForUSD(uint dai) public {\r\n        uint usd = calcSwapForUSD(dai);\r\n        daiContract.transferFrom(msg.sender, address(this), dai);\r\n        usdContract.transfer(msg.sender, usd);\r\n    }\r\n    \r\n    function calcSwapForDai(uint usd) public view returns (uint) {\r\n        uint base     = safeMul(baseMultiplier, totaldai);\r\n        uint amt_dai  =         daiContract.balanceOf(address(this));\r\n        uint amt_usd  = safeMul(usdContract.balanceOf(address(this)), decOffset);\r\n        uint dai      = safeSub(safeAdd(amt_dai, base), ( safeMul(safeAdd(base, amt_usd), safeAdd(base, amt_dai)) / safeAdd(safeAdd(base, amt_usd), safeMul(usd, decOffset))));\r\n        return safeMul(dai, fee) / 1000;\r\n    }\r\n    \r\n    function swapForDai(uint usd) public {\r\n        uint dai = calcSwapForDai(usd);\r\n        usdContract.transferFrom(msg.sender, address(this), usd);\r\n        daiContract.transfer(msg.sender, dai);\r\n    }\r\n}","ABI":"[{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"address\"}],\"name\":\"daiposit\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"shares\",\"type\":\"uint256\"}],\"name\":\"usdAmountFromShares\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"withdraw\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"dai\",\"type\":\"uint256\"}],\"name\":\"sharesFromDai\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"dai\",\"type\":\"uint256\"}],\"name\":\"calcSwapForUSD\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"dai\",\"type\":\"uint256\"}],\"name\":\"deposit\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"totaldai\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"usd\",\"type\":\"uint256\"}],\"name\":\"calcSwapForDai\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"dai\",\"type\":\"uint256\"}],\"name\":\"usdAmountFromDai\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"usd\",\"type\":\"uint256\"}],\"name\":\"swapForDai\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"baseMultiplier\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"dai\",\"type\":\"uint256\"}],\"name\":\"swapForUSD\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"}]","ContractName":"DaiSwap","CompilerVersion":"v0.5.10+commit.5a6ea5b1","OptimizationUsed":"0","Runs":"200","ConstructorArguments":"","Library":"","LicenseType":"GNU GPLv3","SwarmSource":"bzzr://b8e4ce31da93dfa7dcad333f1e6a5329e2595db9100131ba4ef3e2b55885896e"}]}