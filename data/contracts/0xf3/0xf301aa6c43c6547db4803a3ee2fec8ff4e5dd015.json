{"status":"1","message":"OK","result":[{"SourceCode":"pragma solidity ^0.5.10;\r\n\r\n// ERC20 contract interface\r\ncontract Token {\r\n  function balanceOf(address) public view returns (uint);\r\n}\r\n\r\ncontract BalanceChecker {\r\n  /* Fallback function, don't accept any ETH */\r\n  function() external payable {\r\n    revert(\"BalanceChecker does not accept payments\");\r\n  }\r\n\r\n  function tokenBalance(address user, address token) public view returns (uint256) {\r\n    uint256 tokenCode;\r\n    assembly { tokenCode := extcodesize(token) } // contract code size\r\n  \r\n    if (tokenCode > 0) {  \r\n      return Token(token).balanceOf(user);\r\n    } else {\r\n      return 0;\r\n    }\r\n  }\r\n\r\n  function balances(address[] calldata users, address[] calldata tokens) external view returns (uint256[] memory) {\r\n    uint256[] memory addrBalances = new uint256[](tokens.length * users.length);\r\n    \r\n    for(uint i = 0; i < users.length; i++) {\r\n      for (uint j = 0; j < tokens.length; j++) {\r\n        uint addrIdx = j + tokens.length * i;\r\n        if (tokens[j] != address(0x0)) { \r\n          addrBalances[addrIdx] = tokenBalance(users[i], tokens[j]);\r\n        } else {\r\n          addrBalances[addrIdx] = users[i].balance; // ETH balance    \r\n        }\r\n      }  \r\n    }\r\n  \r\n    return addrBalances;\r\n  }\r\n}","ABI":"[{\"constant\":true,\"inputs\":[{\"name\":\"user\",\"type\":\"address\"},{\"name\":\"token\",\"type\":\"address\"}],\"name\":\"tokenBalance\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"users\",\"type\":\"address[]\"},{\"name\":\"tokens\",\"type\":\"address[]\"}],\"name\":\"balances\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256[]\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"fallback\"}]","ContractName":"BalanceChecker","CompilerVersion":"v0.5.10+commit.5a6ea5b1","OptimizationUsed":"1","Runs":"200","ConstructorArguments":"","Library":"","LicenseType":"MIT","SwarmSource":"bzzr://cdf98c9be51100323f344fef554772bf53930e5de0d3776c8a6fe61f7c20e3bb"}]}