{"status":"1","message":"OK","result":[{"SourceCode":"pragma solidity ^0.5.10;\r\n\r\n\r\ncontract InstaLottos\r\n{\r\n    \r\n  address payable private manager;\r\n    \r\n    uint private betamount;\r\n    \r\n    uint private playercount;\r\n    \r\n    uint private lowerbound;\r\n    \r\n    uint private upperbound;\r\n    \r\n    bool private contractactive;\r\n   \r\n    event Playlottery(uint cbalance, uint rndm,uint pcount);\r\n    \r\n    constructor() public\r\n    {\r\n\r\n        manager = msg.sender;\r\n        \r\n        contractactive = true;\r\n        \r\n        betamount = 0.005 ether;\r\n        \r\n        playercount = 0;\r\n        \r\n        lowerbound = 1;\r\n    \r\n        upperbound = 10;\r\n    }\r\n    \r\n    \r\n    modifier onlyManager()\r\n    {\r\n        require(msg.sender == manager);\r\n        _;\r\n    }\r\n    \r\n   \r\n    function getcontractactive() public view returns (bool)\r\n    {\r\n        return contractactive;\r\n    }\r\n    \r\n    function getbetamount() public view returns (uint)\r\n    {\r\n        return betamount;\r\n    }\r\n  \r\n    \r\n    function getplayercount() public view returns (uint)\r\n    {\r\n        return playercount;\r\n    }\r\n    \r\n    function getupperbound() public view returns(uint)\r\n    {\r\n        return upperbound;\r\n    }\r\n    \r\n\r\n    function getmanager() public view returns(address)\r\n    {\r\n        return manager;\r\n    }\r\n    \r\n    \r\n    function getcontractbalance() public view returns(uint)\r\n    {\r\n        return address(this).balance;\r\n    }\r\n    \r\n    function setbetamount(uint btamt) public onlyManager\r\n    {\r\n        betamount = btamt;\r\n    }\r\n    \r\n    function setupperbound(uint upbound) public onlyManager\r\n    {\r\n        upperbound = upbound;\r\n    }\r\n    \r\n    function setcontractactive(bool act) public onlyManager\r\n    {\r\n        contractactive = act;\r\n    }\r\n    \r\n    function setmanager(address payable newmngr) public onlyManager\r\n    {\r\n        manager = newmngr;\r\n    }\r\n    \r\n    \r\n    function playlottery(uint playnum) public payable\r\n    {\r\n        require(contractactive==true);\r\n        require(playnum >=lowerbound && playnum <=upperbound);\r\n        require(msg.value == betamount);\r\n        \r\n        playercount++;\r\n        \r\n        uint rnd = random(msg.sender,playnum);\r\n        \r\n        if (playnum == rnd)\r\n        {\r\n            settlewin(msg.sender);\r\n            emit Playlottery(getcontractbalance(),rnd,playercount);\r\n            return;\r\n        }\r\n        \r\n        emit Playlottery(getcontractbalance(),rnd,playercount);\r\n        \r\n        return;\r\n        \r\n    }\r\n    \r\n    function settlewin(address payable msgsender) private\r\n    {\r\n        address payable winner = msgsender;\r\n        \r\n        uint cb = address(this).balance;\r\n\r\n            if (cb <= (betamount * 2))\r\n            {\r\n                    //Transfer the contract balance to the winner.\r\n                    winner.transfer(cb);\r\n            }\r\n            else if (cb <=(betamount*3))\r\n            {\r\n            \twinner.transfer((betamount*2));\r\n            }\r\n            else\r\n            {\r\n                    uint cbnow = cb - betamount;\r\n                    uint cb90 = cbnow * 90/100;\r\n                    uint cb10 = cbnow - cb90;\r\n                    manager.transfer(cb10);\r\n                    winner.transfer(cb90);\r\n            }\r\n            \r\n            playercount = 0;\r\n    }\r\n    \r\n    function random(address msgsender,uint numplayed) private view returns (uint)\r\n    {\r\n        uint tmp = uint256(keccak256(abi.encodePacked(block.difficulty,block.timestamp,block.number,playercount,msgsender,numplayed)));\r\n        return  (tmp % upperbound)+1;\r\n    }\r\n    \r\n    function destroyContract() public onlyManager\r\n    { \r\n            selfdestruct(manager); //Balance sent to the manager\r\n    }\r\n    \r\n     function () external\r\n    {\r\n      \r\n    }\r\n       \r\n}","ABI":"[{\"constant\":false,\"inputs\":[],\"name\":\"destroyContract\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"getplayercount\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"getupperbound\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"act\",\"type\":\"bool\"}],\"name\":\"setcontractactive\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"upbound\",\"type\":\"uint256\"}],\"name\":\"setupperbound\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"getbetamount\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"btamt\",\"type\":\"uint256\"}],\"name\":\"setbetamount\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"getcontractbalance\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"playnum\",\"type\":\"uint256\"}],\"name\":\"playlottery\",\"outputs\":[],\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"getmanager\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"newmngr\",\"type\":\"address\"}],\"name\":\"setmanager\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"getcontractactive\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"fallback\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"cbalance\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"rndm\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"pcount\",\"type\":\"uint256\"}],\"name\":\"Playlottery\",\"type\":\"event\"}]","ContractName":"InstaLottos","CompilerVersion":"v0.5.10+commit.5a6ea5b1","OptimizationUsed":"0","Runs":"200","ConstructorArguments":"","Library":"","LicenseType":"GNU GPLv3","SwarmSource":"bzzr://8a8703974b5c97d58367284139de9085cabaece7bfd5d6487fed2636ff490250"}]}